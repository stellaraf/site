/* eslint-disable */
// WARNING
//
// This file is automatically generated by GraphQL Code Generator
// If you modify it, your changes will be overwritten. So don't modify it.
// Or do, whatever. I'm not your mother.
//
// END OF WARNING

import { RichTextContent } from '@graphcms/rich-text-types';
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: string;
  DateTime: string;
  Hex: string;
  Json: string;
  Long: number;
  RGBAHue: any;
  RGBATransparency: any;
  RichTextAST: RichTextContent;
};

export type Admonition = Node & {
  __typename?: 'Admonition';
  body: RichText;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Admonition>;
  /** List of Admonition versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']>;
  type: AdmonitionType;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type AdmonitionCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type AdmonitionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type AdmonitionHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type AdmonitionPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type AdmonitionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type AdmonitionUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type AdmonitionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AdmonitionWhereUniqueInput;
};

/** A connection to a list of items. */
export type AdmonitionConnection = {
  __typename?: 'AdmonitionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AdmonitionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AdmonitionCreateInput = {
  body: Scalars['RichTextAST'];
  createdAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  type: AdmonitionType;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type AdmonitionCreateManyInlineInput = {
  /** Connect multiple existing Admonition documents */
  connect?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Create and connect multiple existing Admonition documents */
  create?: InputMaybe<Array<AdmonitionCreateInput>>;
};

export type AdmonitionCreateOneInlineInput = {
  /** Connect one existing Admonition document */
  connect?: InputMaybe<AdmonitionWhereUniqueInput>;
  /** Create and connect one Admonition document */
  create?: InputMaybe<AdmonitionCreateInput>;
};

/** An edge in a connection. */
export type AdmonitionEdge = {
  __typename?: 'AdmonitionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Admonition;
};

/** Identifies documents */
export type AdmonitionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_none?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_some?: InputMaybe<AdmonitionWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<AdmonitionType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<AdmonitionType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum AdmonitionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum AdmonitionType {
  Critical = 'Critical',
  Information = 'Information',
  Note = 'Note',
  Tip = 'Tip',
  Warning = 'Warning'
}

export type AdmonitionUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<AdmonitionType>;
};

export type AdmonitionUpdateManyInlineInput = {
  /** Connect multiple existing Admonition documents */
  connect?: InputMaybe<Array<AdmonitionConnectInput>>;
  /** Create and connect multiple Admonition documents */
  create?: InputMaybe<Array<AdmonitionCreateInput>>;
  /** Delete multiple Admonition documents */
  delete?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Disconnect multiple Admonition documents */
  disconnect?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Admonition documents */
  set?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Update multiple Admonition documents */
  update?: InputMaybe<Array<AdmonitionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Admonition documents */
  upsert?: InputMaybe<Array<AdmonitionUpsertWithNestedWhereUniqueInput>>;
};

export type AdmonitionUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<AdmonitionType>;
};

export type AdmonitionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AdmonitionUpdateManyInput;
  /** Document search */
  where: AdmonitionWhereInput;
};

export type AdmonitionUpdateOneInlineInput = {
  /** Connect existing Admonition document */
  connect?: InputMaybe<AdmonitionWhereUniqueInput>;
  /** Create and connect one Admonition document */
  create?: InputMaybe<AdmonitionCreateInput>;
  /** Delete currently connected Admonition document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Admonition document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Admonition document */
  update?: InputMaybe<AdmonitionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Admonition document */
  upsert?: InputMaybe<AdmonitionUpsertWithNestedWhereUniqueInput>;
};

export type AdmonitionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AdmonitionUpdateInput;
  /** Unique document search */
  where: AdmonitionWhereUniqueInput;
};

export type AdmonitionUpsertInput = {
  /** Create document if it didn't exist */
  create: AdmonitionCreateInput;
  /** Update document if it exists */
  update: AdmonitionUpdateInput;
};

export type AdmonitionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AdmonitionUpsertInput;
  /** Unique document search */
  where: AdmonitionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AdmonitionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AdmonitionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_none?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_some?: InputMaybe<AdmonitionWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<AdmonitionType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  /** All values that are not equal to given value. */
  type_not?: InputMaybe<AdmonitionType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AdmonitionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdmonitionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdmonitionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdmonitionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AdmonitionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Admonition record uniquely */
export type AdmonitionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Aggregate = {
  __typename?: 'Aggregate';
  count: Scalars['Int'];
};

export type Alert = {
  __typename?: 'Alert';
  body: RichText;
  /** The unique identifier */
  id: Scalars['ID'];
  level: AlertLevel;
  name: Scalars['String'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']>;
};

export type AlertConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AlertWhereUniqueInput;
};

/** A connection to a list of items. */
export type AlertConnection = {
  __typename?: 'AlertConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AlertEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AlertCreateInput = {
  body: Scalars['RichTextAST'];
  level: AlertLevel;
  name: Scalars['String'];
  title?: InputMaybe<Scalars['String']>;
};

export type AlertCreateManyInlineInput = {
  /** Create and connect multiple existing Alert documents */
  create?: InputMaybe<Array<AlertCreateInput>>;
};

export type AlertCreateOneInlineInput = {
  /** Create and connect one Alert document */
  create?: InputMaybe<AlertCreateInput>;
};

export type AlertCreateWithPositionInput = {
  /** Document to create */
  data: AlertCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AlertEdge = {
  __typename?: 'AlertEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Alert;
};

export enum AlertLevel {
  Error = 'error',
  Info = 'info',
  Success = 'success',
  Warning = 'warning'
}

/** Identifies documents */
export type AlertManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AlertWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  level?: InputMaybe<AlertLevel>;
  /** All values that are contained in given list. */
  level_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  /** All values that are not equal to given value. */
  level_not?: InputMaybe<AlertLevel>;
  /** All values that are not contained in given list. */
  level_not_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum AlertOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LevelAsc = 'level_ASC',
  LevelDesc = 'level_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type AlertParent = Configuration | FormButton;

export type AlertParentConnectInput = {
  Configuration?: InputMaybe<ConfigurationConnectInput>;
  FormButton?: InputMaybe<FormButtonConnectInput>;
};

export type AlertParentCreateInput = {
  Configuration?: InputMaybe<ConfigurationCreateInput>;
  FormButton?: InputMaybe<FormButtonCreateInput>;
};

export type AlertParentCreateManyInlineInput = {
  /** Connect multiple existing AlertParent documents */
  connect?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Create and connect multiple existing AlertParent documents */
  create?: InputMaybe<Array<AlertParentCreateInput>>;
};

export type AlertParentCreateOneInlineInput = {
  /** Connect one existing AlertParent document */
  connect?: InputMaybe<AlertParentWhereUniqueInput>;
  /** Create and connect one AlertParent document */
  create?: InputMaybe<AlertParentCreateInput>;
};

export type AlertParentUpdateInput = {
  Configuration?: InputMaybe<ConfigurationUpdateInput>;
  FormButton?: InputMaybe<FormButtonUpdateInput>;
};

export type AlertParentUpdateManyInlineInput = {
  /** Connect multiple existing AlertParent documents */
  connect?: InputMaybe<Array<AlertParentConnectInput>>;
  /** Create and connect multiple AlertParent documents */
  create?: InputMaybe<Array<AlertParentCreateInput>>;
  /** Delete multiple AlertParent documents */
  delete?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Disconnect multiple AlertParent documents */
  disconnect?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing AlertParent documents */
  set?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Update multiple AlertParent documents */
  update?: InputMaybe<Array<AlertParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple AlertParent documents */
  upsert?: InputMaybe<Array<AlertParentUpsertWithNestedWhereUniqueInput>>;
};

export type AlertParentUpdateManyWithNestedWhereInput = {
  Configuration?: InputMaybe<ConfigurationUpdateManyWithNestedWhereInput>;
  FormButton?: InputMaybe<FormButtonUpdateManyWithNestedWhereInput>;
};

export type AlertParentUpdateOneInlineInput = {
  /** Connect existing AlertParent document */
  connect?: InputMaybe<AlertParentWhereUniqueInput>;
  /** Create and connect one AlertParent document */
  create?: InputMaybe<AlertParentCreateInput>;
  /** Delete currently connected AlertParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected AlertParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single AlertParent document */
  update?: InputMaybe<AlertParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AlertParent document */
  upsert?: InputMaybe<AlertParentUpsertWithNestedWhereUniqueInput>;
};

export type AlertParentUpdateWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueInput>;
};

export type AlertParentUpsertWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueInput>;
};

export type AlertParentWhereInput = {
  Configuration?: InputMaybe<ConfigurationWhereInput>;
  FormButton?: InputMaybe<FormButtonWhereInput>;
};

export type AlertParentWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonWhereUniqueInput>;
};

export type AlertUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  level?: InputMaybe<AlertLevel>;
  name?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type AlertUpdateManyInlineInput = {
  /** Create and connect multiple Alert component instances */
  create?: InputMaybe<Array<AlertCreateWithPositionInput>>;
  /** Delete multiple Alert documents */
  delete?: InputMaybe<Array<AlertWhereUniqueInput>>;
  /** Update multiple Alert component instances */
  update?: InputMaybe<Array<AlertUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Alert component instances */
  upsert?: InputMaybe<Array<AlertUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AlertUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  level?: InputMaybe<AlertLevel>;
  name?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type AlertUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AlertUpdateManyInput;
  /** Document search */
  where: AlertWhereInput;
};

export type AlertUpdateOneInlineInput = {
  /** Create and connect one Alert document */
  create?: InputMaybe<AlertCreateInput>;
  /** Delete currently connected Alert document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Alert document */
  update?: InputMaybe<AlertUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Alert document */
  upsert?: InputMaybe<AlertUpsertWithNestedWhereUniqueInput>;
};

export type AlertUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AlertUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AlertWhereUniqueInput;
};

export type AlertUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AlertUpdateInput;
  /** Unique document search */
  where: AlertWhereUniqueInput;
};

export type AlertUpsertInput = {
  /** Create document if it didn't exist */
  create: AlertCreateInput;
  /** Update document if it exists */
  update: AlertUpdateInput;
};

export type AlertUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AlertUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AlertWhereUniqueInput;
};

export type AlertUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AlertUpsertInput;
  /** Unique document search */
  where: AlertWhereUniqueInput;
};

/** Identifies documents */
export type AlertWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AlertWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  level?: InputMaybe<AlertLevel>;
  /** All values that are contained in given list. */
  level_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  /** All values that are not equal to given value. */
  level_not?: InputMaybe<AlertLevel>;
  /** All values that are not contained in given list. */
  level_not_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Alert record uniquely */
export type AlertWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Asset system model */
export type Asset = Node & {
  __typename?: 'Asset';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  /** The file name */
  fileName: Scalars['String'];
  /** The file handle */
  handle: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  /** List of Asset versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  imagePageContent: Array<PageContent>;
  imageTestimonial: Array<Testimonial>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  mainVideoHomePage: Array<HomePage>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  photoEmployee: Array<Employee>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
  /** The file width */
  width?: Maybe<Scalars['Float']>;
};


/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AssetImagePageContentArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageContentWhereInput>;
};


/** Asset system model */
export type AssetImageTestimonialArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialWhereInput>;
};


/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** Asset system model */
export type AssetMainVideoHomePageArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HomePageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HomePageWhereInput>;
};


/** Asset system model */
export type AssetPhotoEmployeeArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EmployeeWhereInput>;
};


/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetUrlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  iconCallToActionSettings?: InputMaybe<CallToActionSettingsCreateManyInlineInput>;
  iconFeature?: InputMaybe<FeatureCreateManyInlineInput>;
  imageHomePageBlock?: InputMaybe<HomePageBlockCreateManyInlineInput>;
  imagePageContent?: InputMaybe<PageContentCreateManyInlineInput>;
  imageTestimonial?: InputMaybe<TestimonialCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
  logoVendorLogo?: InputMaybe<VendorLogoCreateManyInlineInput>;
  mainVideoHomePage?: InputMaybe<HomePageCreateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  photoEmployee?: InputMaybe<EmployeeCreateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imagePageContent_every?: InputMaybe<PageContentWhereInput>;
  imagePageContent_none?: InputMaybe<PageContentWhereInput>;
  imagePageContent_some?: InputMaybe<PageContentWhereInput>;
  imageTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  mainVideoHomePage_every?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_none?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_some?: InputMaybe<HomePageWhereInput>;
  photoEmployee_every?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_none?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_some?: InputMaybe<EmployeeWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum AssetOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: InputMaybe<DocumentTransformationInput>;
  image?: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateInput = {
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  iconCallToActionSettings?: InputMaybe<CallToActionSettingsUpdateManyInlineInput>;
  iconFeature?: InputMaybe<FeatureUpdateManyInlineInput>;
  imageHomePageBlock?: InputMaybe<HomePageBlockUpdateManyInlineInput>;
  imagePageContent?: InputMaybe<PageContentUpdateManyInlineInput>;
  imageTestimonial?: InputMaybe<TestimonialUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
  logoVendorLogo?: InputMaybe<VendorLogoUpdateManyInlineInput>;
  mainVideoHomePage?: InputMaybe<HomePageUpdateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  photoEmployee?: InputMaybe<EmployeeUpdateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imagePageContent_every?: InputMaybe<PageContentWhereInput>;
  imagePageContent_none?: InputMaybe<PageContentWhereInput>;
  imagePageContent_some?: InputMaybe<PageContentWhereInput>;
  imageTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  mainVideoHomePage_every?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_none?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_some?: InputMaybe<HomePageWhereInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  photoEmployee_every?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_none?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_some?: InputMaybe<EmployeeWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

export type Button = {
  __typename?: 'Button';
  /** The unique identifier */
  id: Scalars['ID'];
  link?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  text: Scalars['String'];
  variant?: Maybe<ButtonVariant>;
};

export type ButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type ButtonConnection = {
  __typename?: 'ButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ButtonCreateInput = {
  link?: InputMaybe<Scalars['String']>;
  text: Scalars['String'];
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonCreateManyInlineInput = {
  /** Create and connect multiple existing Button documents */
  create?: InputMaybe<Array<ButtonCreateInput>>;
};

export type ButtonCreateOneInlineInput = {
  /** Create and connect one Button document */
  create?: InputMaybe<ButtonCreateInput>;
};

export type ButtonCreateWithPositionInput = {
  /** Document to create */
  data: ButtonCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ButtonEdge = {
  __typename?: 'ButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Button;
};

/** Identifies documents */
export type ButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

export enum ButtonOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  VariantAsc = 'variant_ASC',
  VariantDesc = 'variant_DESC'
}

export type ButtonParent = Callout | ContactForm | Feature | HomePageBlock | PageContent;

export type ButtonParentConnectInput = {
  Callout?: InputMaybe<CalloutConnectInput>;
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Feature?: InputMaybe<FeatureConnectInput>;
  HomePageBlock?: InputMaybe<HomePageBlockConnectInput>;
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type ButtonParentCreateInput = {
  Callout?: InputMaybe<CalloutCreateInput>;
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Feature?: InputMaybe<FeatureCreateInput>;
  HomePageBlock?: InputMaybe<HomePageBlockCreateInput>;
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type ButtonParentCreateManyInlineInput = {
  /** Connect multiple existing ButtonParent documents */
  connect?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Create and connect multiple existing ButtonParent documents */
  create?: InputMaybe<Array<ButtonParentCreateInput>>;
};

export type ButtonParentCreateOneInlineInput = {
  /** Connect one existing ButtonParent document */
  connect?: InputMaybe<ButtonParentWhereUniqueInput>;
  /** Create and connect one ButtonParent document */
  create?: InputMaybe<ButtonParentCreateInput>;
};

export type ButtonParentUpdateInput = {
  Callout?: InputMaybe<CalloutUpdateInput>;
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Feature?: InputMaybe<FeatureUpdateInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpdateInput>;
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type ButtonParentUpdateManyInlineInput = {
  /** Connect multiple existing ButtonParent documents */
  connect?: InputMaybe<Array<ButtonParentConnectInput>>;
  /** Create and connect multiple ButtonParent documents */
  create?: InputMaybe<Array<ButtonParentCreateInput>>;
  /** Delete multiple ButtonParent documents */
  delete?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Disconnect multiple ButtonParent documents */
  disconnect?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ButtonParent documents */
  set?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Update multiple ButtonParent documents */
  update?: InputMaybe<Array<ButtonParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ButtonParent documents */
  upsert?: InputMaybe<Array<ButtonParentUpsertWithNestedWhereUniqueInput>>;
};

export type ButtonParentUpdateManyWithNestedWhereInput = {
  Callout?: InputMaybe<CalloutUpdateManyWithNestedWhereInput>;
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Feature?: InputMaybe<FeatureUpdateManyWithNestedWhereInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpdateManyWithNestedWhereInput>;
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type ButtonParentUpdateOneInlineInput = {
  /** Connect existing ButtonParent document */
  connect?: InputMaybe<ButtonParentWhereUniqueInput>;
  /** Create and connect one ButtonParent document */
  create?: InputMaybe<ButtonParentCreateInput>;
  /** Delete currently connected ButtonParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ButtonParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ButtonParent document */
  update?: InputMaybe<ButtonParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ButtonParent document */
  upsert?: InputMaybe<ButtonParentUpsertWithNestedWhereUniqueInput>;
};

export type ButtonParentUpdateWithNestedWhereUniqueInput = {
  Callout?: InputMaybe<CalloutUpdateWithNestedWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Feature?: InputMaybe<FeatureUpdateWithNestedWhereUniqueInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpdateWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type ButtonParentUpsertWithNestedWhereUniqueInput = {
  Callout?: InputMaybe<CalloutUpsertWithNestedWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Feature?: InputMaybe<FeatureUpsertWithNestedWhereUniqueInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpsertWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type ButtonParentWhereInput = {
  Callout?: InputMaybe<CalloutWhereInput>;
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Feature?: InputMaybe<FeatureWhereInput>;
  HomePageBlock?: InputMaybe<HomePageBlockWhereInput>;
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type ButtonParentWhereUniqueInput = {
  Callout?: InputMaybe<CalloutWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Feature?: InputMaybe<FeatureWhereUniqueInput>;
  HomePageBlock?: InputMaybe<HomePageBlockWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type ButtonUpdateInput = {
  link?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonUpdateManyInlineInput = {
  /** Create and connect multiple Button component instances */
  create?: InputMaybe<Array<ButtonCreateWithPositionInput>>;
  /** Delete multiple Button documents */
  delete?: InputMaybe<Array<ButtonWhereUniqueInput>>;
  /** Update multiple Button component instances */
  update?: InputMaybe<Array<ButtonUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Button component instances */
  upsert?: InputMaybe<Array<ButtonUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ButtonUpdateManyInput = {
  link?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ButtonUpdateManyInput;
  /** Document search */
  where: ButtonWhereInput;
};

export type ButtonUpdateOneInlineInput = {
  /** Create and connect one Button document */
  create?: InputMaybe<ButtonCreateInput>;
  /** Delete currently connected Button document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Button document */
  update?: InputMaybe<ButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Button document */
  upsert?: InputMaybe<ButtonUpsertWithNestedWhereUniqueInput>;
};

export type ButtonUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ButtonUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ButtonUpdateInput;
  /** Unique document search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: ButtonCreateInput;
  /** Update document if it exists */
  update: ButtonUpdateInput;
};

export type ButtonUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ButtonUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ButtonUpsertInput;
  /** Unique document search */
  where: ButtonWhereUniqueInput;
};

export enum ButtonVariant {
  Ghost = 'ghost',
  HeroPrimary = 'heroPrimary',
  HeroSecondary = 'heroSecondary',
  Outline = 'outline',
  Solid = 'solid'
}

/** Identifies documents */
export type ButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

/** References Button record uniquely */
export type ButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type CallToAction = {
  __typename?: 'CallToAction';
  /** The unique identifier */
  id: Scalars['ID'];
  shown: Scalars['Int'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
};

export type CallToActionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CallToActionWhereUniqueInput;
};

/** A connection to a list of items. */
export type CallToActionConnection = {
  __typename?: 'CallToActionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CallToActionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CallToActionCreateInput = {
  shown: Scalars['Int'];
  title: Scalars['String'];
};

export type CallToActionCreateManyInlineInput = {
  /** Create and connect multiple existing CallToAction documents */
  create?: InputMaybe<Array<CallToActionCreateInput>>;
};

export type CallToActionCreateOneInlineInput = {
  /** Create and connect one CallToAction document */
  create?: InputMaybe<CallToActionCreateInput>;
};

export type CallToActionCreateWithPositionInput = {
  /** Document to create */
  data: CallToActionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CallToActionEdge = {
  __typename?: 'CallToActionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CallToAction;
};

/** Identifies documents */
export type CallToActionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  shown?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  shown_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  shown_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  shown_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  shown_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  shown_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  shown_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  shown_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum CallToActionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ShownAsc = 'shown_ASC',
  ShownDesc = 'shown_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CallToActionParent = Configuration;

export type CallToActionParentConnectInput = {
  Configuration?: InputMaybe<ConfigurationConnectInput>;
};

export type CallToActionParentCreateInput = {
  Configuration?: InputMaybe<ConfigurationCreateInput>;
};

export type CallToActionParentCreateManyInlineInput = {
  /** Connect multiple existing CallToActionParent documents */
  connect?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Create and connect multiple existing CallToActionParent documents */
  create?: InputMaybe<Array<CallToActionParentCreateInput>>;
};

export type CallToActionParentCreateOneInlineInput = {
  /** Connect one existing CallToActionParent document */
  connect?: InputMaybe<CallToActionParentWhereUniqueInput>;
  /** Create and connect one CallToActionParent document */
  create?: InputMaybe<CallToActionParentCreateInput>;
};

export type CallToActionParentUpdateInput = {
  Configuration?: InputMaybe<ConfigurationUpdateInput>;
};

export type CallToActionParentUpdateManyInlineInput = {
  /** Connect multiple existing CallToActionParent documents */
  connect?: InputMaybe<Array<CallToActionParentConnectInput>>;
  /** Create and connect multiple CallToActionParent documents */
  create?: InputMaybe<Array<CallToActionParentCreateInput>>;
  /** Delete multiple CallToActionParent documents */
  delete?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Disconnect multiple CallToActionParent documents */
  disconnect?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CallToActionParent documents */
  set?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Update multiple CallToActionParent documents */
  update?: InputMaybe<Array<CallToActionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CallToActionParent documents */
  upsert?: InputMaybe<Array<CallToActionParentUpsertWithNestedWhereUniqueInput>>;
};

export type CallToActionParentUpdateManyWithNestedWhereInput = {
  Configuration?: InputMaybe<ConfigurationUpdateManyWithNestedWhereInput>;
};

export type CallToActionParentUpdateOneInlineInput = {
  /** Connect existing CallToActionParent document */
  connect?: InputMaybe<CallToActionParentWhereUniqueInput>;
  /** Create and connect one CallToActionParent document */
  create?: InputMaybe<CallToActionParentCreateInput>;
  /** Delete currently connected CallToActionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CallToActionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CallToActionParent document */
  update?: InputMaybe<CallToActionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToActionParent document */
  upsert?: InputMaybe<CallToActionParentUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionParentUpdateWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
};

export type CallToActionParentUpsertWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionParentWhereInput = {
  Configuration?: InputMaybe<ConfigurationWhereInput>;
};

export type CallToActionParentWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationWhereUniqueInput>;
};

export type CallToActionSettings = {
  __typename?: 'CallToActionSettings';
  body?: Maybe<RichText>;
  enable: Scalars['Boolean'];
  icon?: Maybe<Asset>;
  iconColor?: Maybe<ThemeColor>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};


export type CallToActionSettingsIconArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type CallToActionSettingsConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CallToActionSettingsWhereUniqueInput;
};

/** A connection to a list of items. */
export type CallToActionSettingsConnection = {
  __typename?: 'CallToActionSettingsConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CallToActionSettingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CallToActionSettingsCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  enable: Scalars['Boolean'];
  icon?: InputMaybe<AssetCreateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
};

export type CallToActionSettingsCreateManyInlineInput = {
  /** Create and connect multiple existing CallToActionSettings documents */
  create?: InputMaybe<Array<CallToActionSettingsCreateInput>>;
};

export type CallToActionSettingsCreateOneInlineInput = {
  /** Create and connect one CallToActionSettings document */
  create?: InputMaybe<CallToActionSettingsCreateInput>;
};

export type CallToActionSettingsCreateWithPositionInput = {
  /** Document to create */
  data: CallToActionSettingsCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CallToActionSettingsEdge = {
  __typename?: 'CallToActionSettingsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CallToActionSettings;
};

/** Identifies documents */
export type CallToActionSettingsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  enable?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  enable_not?: InputMaybe<Scalars['Boolean']>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum CallToActionSettingsOrderByInput {
  EnableAsc = 'enable_ASC',
  EnableDesc = 'enable_DESC',
  IconColorAsc = 'iconColor_ASC',
  IconColorDesc = 'iconColor_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type CallToActionSettingsParent = DocsGroup | PageContent;

export type CallToActionSettingsParentConnectInput = {
  DocsGroup?: InputMaybe<DocsGroupConnectInput>;
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type CallToActionSettingsParentCreateInput = {
  DocsGroup?: InputMaybe<DocsGroupCreateInput>;
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type CallToActionSettingsParentCreateManyInlineInput = {
  /** Connect multiple existing CallToActionSettingsParent documents */
  connect?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Create and connect multiple existing CallToActionSettingsParent documents */
  create?: InputMaybe<Array<CallToActionSettingsParentCreateInput>>;
};

export type CallToActionSettingsParentCreateOneInlineInput = {
  /** Connect one existing CallToActionSettingsParent document */
  connect?: InputMaybe<CallToActionSettingsParentWhereUniqueInput>;
  /** Create and connect one CallToActionSettingsParent document */
  create?: InputMaybe<CallToActionSettingsParentCreateInput>;
};

export type CallToActionSettingsParentUpdateInput = {
  DocsGroup?: InputMaybe<DocsGroupUpdateInput>;
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type CallToActionSettingsParentUpdateManyInlineInput = {
  /** Connect multiple existing CallToActionSettingsParent documents */
  connect?: InputMaybe<Array<CallToActionSettingsParentConnectInput>>;
  /** Create and connect multiple CallToActionSettingsParent documents */
  create?: InputMaybe<Array<CallToActionSettingsParentCreateInput>>;
  /** Delete multiple CallToActionSettingsParent documents */
  delete?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Disconnect multiple CallToActionSettingsParent documents */
  disconnect?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CallToActionSettingsParent documents */
  set?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Update multiple CallToActionSettingsParent documents */
  update?: InputMaybe<Array<CallToActionSettingsParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CallToActionSettingsParent documents */
  upsert?: InputMaybe<Array<CallToActionSettingsParentUpsertWithNestedWhereUniqueInput>>;
};

export type CallToActionSettingsParentUpdateManyWithNestedWhereInput = {
  DocsGroup?: InputMaybe<DocsGroupUpdateManyWithNestedWhereInput>;
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type CallToActionSettingsParentUpdateOneInlineInput = {
  /** Connect existing CallToActionSettingsParent document */
  connect?: InputMaybe<CallToActionSettingsParentWhereUniqueInput>;
  /** Create and connect one CallToActionSettingsParent document */
  create?: InputMaybe<CallToActionSettingsParentCreateInput>;
  /** Delete currently connected CallToActionSettingsParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CallToActionSettingsParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CallToActionSettingsParent document */
  update?: InputMaybe<CallToActionSettingsParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToActionSettingsParent document */
  upsert?: InputMaybe<CallToActionSettingsParentUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsParentUpdateWithNestedWhereUniqueInput = {
  DocsGroup?: InputMaybe<DocsGroupUpdateWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsParentUpsertWithNestedWhereUniqueInput = {
  DocsGroup?: InputMaybe<DocsGroupUpsertWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsParentWhereInput = {
  DocsGroup?: InputMaybe<DocsGroupWhereInput>;
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type CallToActionSettingsParentWhereUniqueInput = {
  DocsGroup?: InputMaybe<DocsGroupWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type CallToActionSettingsUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  enable?: InputMaybe<Scalars['Boolean']>;
  icon?: InputMaybe<AssetUpdateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
};

export type CallToActionSettingsUpdateManyInlineInput = {
  /** Create and connect multiple CallToActionSettings component instances */
  create?: InputMaybe<Array<CallToActionSettingsCreateWithPositionInput>>;
  /** Delete multiple CallToActionSettings documents */
  delete?: InputMaybe<Array<CallToActionSettingsWhereUniqueInput>>;
  /** Update multiple CallToActionSettings component instances */
  update?: InputMaybe<Array<CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CallToActionSettings component instances */
  upsert?: InputMaybe<Array<CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CallToActionSettingsUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  enable?: InputMaybe<Scalars['Boolean']>;
  iconColor?: InputMaybe<ThemeColor>;
};

export type CallToActionSettingsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CallToActionSettingsUpdateManyInput;
  /** Document search */
  where: CallToActionSettingsWhereInput;
};

export type CallToActionSettingsUpdateOneInlineInput = {
  /** Create and connect one CallToActionSettings document */
  create?: InputMaybe<CallToActionSettingsCreateInput>;
  /** Delete currently connected CallToActionSettings document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CallToActionSettings document */
  update?: InputMaybe<CallToActionSettingsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToActionSettings document */
  upsert?: InputMaybe<CallToActionSettingsUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CallToActionSettingsUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionSettingsWhereUniqueInput;
};

export type CallToActionSettingsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CallToActionSettingsUpdateInput;
  /** Unique document search */
  where: CallToActionSettingsWhereUniqueInput;
};

export type CallToActionSettingsUpsertInput = {
  /** Create document if it didn't exist */
  create: CallToActionSettingsCreateInput;
  /** Update document if it exists */
  update: CallToActionSettingsUpdateInput;
};

export type CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CallToActionSettingsUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionSettingsWhereUniqueInput;
};

export type CallToActionSettingsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CallToActionSettingsUpsertInput;
  /** Unique document search */
  where: CallToActionSettingsWhereUniqueInput;
};

/** Identifies documents */
export type CallToActionSettingsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  enable?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  enable_not?: InputMaybe<Scalars['Boolean']>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References CallToActionSettings record uniquely */
export type CallToActionSettingsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type CallToActionUpdateInput = {
  shown?: InputMaybe<Scalars['Int']>;
  title?: InputMaybe<Scalars['String']>;
};

export type CallToActionUpdateManyInlineInput = {
  /** Create and connect multiple CallToAction component instances */
  create?: InputMaybe<Array<CallToActionCreateWithPositionInput>>;
  /** Delete multiple CallToAction documents */
  delete?: InputMaybe<Array<CallToActionWhereUniqueInput>>;
  /** Update multiple CallToAction component instances */
  update?: InputMaybe<Array<CallToActionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CallToAction component instances */
  upsert?: InputMaybe<Array<CallToActionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CallToActionUpdateManyInput = {
  shown?: InputMaybe<Scalars['Int']>;
  title?: InputMaybe<Scalars['String']>;
};

export type CallToActionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CallToActionUpdateManyInput;
  /** Document search */
  where: CallToActionWhereInput;
};

export type CallToActionUpdateOneInlineInput = {
  /** Create and connect one CallToAction document */
  create?: InputMaybe<CallToActionCreateInput>;
  /** Delete currently connected CallToAction document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CallToAction document */
  update?: InputMaybe<CallToActionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToAction document */
  upsert?: InputMaybe<CallToActionUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CallToActionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CallToActionUpdateInput;
  /** Unique document search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpsertInput = {
  /** Create document if it didn't exist */
  create: CallToActionCreateInput;
  /** Update document if it exists */
  update: CallToActionUpdateInput;
};

export type CallToActionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CallToActionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CallToActionUpsertInput;
  /** Unique document search */
  where: CallToActionWhereUniqueInput;
};

/** Identifies documents */
export type CallToActionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  shown?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  shown_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  shown_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  shown_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  shown_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  shown_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  shown_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  shown_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References CallToAction record uniquely */
export type CallToActionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Callout = {
  __typename?: 'Callout';
  body?: Maybe<RichText>;
  button?: Maybe<Button>;
  form?: Maybe<Form>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']>;
  title: Scalars['String'];
};


export type CalloutButtonArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CalloutFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type CalloutConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CalloutWhereUniqueInput;
};

/** A connection to a list of items. */
export type CalloutConnection = {
  __typename?: 'CalloutConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CalloutEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CalloutCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
};

export type CalloutCreateManyInlineInput = {
  /** Create and connect multiple existing Callout documents */
  create?: InputMaybe<Array<CalloutCreateInput>>;
};

export type CalloutCreateOneInlineInput = {
  /** Create and connect one Callout document */
  create?: InputMaybe<CalloutCreateInput>;
};

export type CalloutCreateWithPositionInput = {
  /** Document to create */
  data: CalloutCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CalloutEdge = {
  __typename?: 'CalloutEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Callout;
};

/** Identifies documents */
export type CalloutManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CalloutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum CalloutOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CalloutParent = Page;

export type CalloutParentConnectInput = {
  Page?: InputMaybe<PageConnectInput>;
};

export type CalloutParentCreateInput = {
  Page?: InputMaybe<PageCreateInput>;
};

export type CalloutParentCreateManyInlineInput = {
  /** Connect multiple existing CalloutParent documents */
  connect?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Create and connect multiple existing CalloutParent documents */
  create?: InputMaybe<Array<CalloutParentCreateInput>>;
};

export type CalloutParentCreateOneInlineInput = {
  /** Connect one existing CalloutParent document */
  connect?: InputMaybe<CalloutParentWhereUniqueInput>;
  /** Create and connect one CalloutParent document */
  create?: InputMaybe<CalloutParentCreateInput>;
};

export type CalloutParentUpdateInput = {
  Page?: InputMaybe<PageUpdateInput>;
};

export type CalloutParentUpdateManyInlineInput = {
  /** Connect multiple existing CalloutParent documents */
  connect?: InputMaybe<Array<CalloutParentConnectInput>>;
  /** Create and connect multiple CalloutParent documents */
  create?: InputMaybe<Array<CalloutParentCreateInput>>;
  /** Delete multiple CalloutParent documents */
  delete?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Disconnect multiple CalloutParent documents */
  disconnect?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CalloutParent documents */
  set?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Update multiple CalloutParent documents */
  update?: InputMaybe<Array<CalloutParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CalloutParent documents */
  upsert?: InputMaybe<Array<CalloutParentUpsertWithNestedWhereUniqueInput>>;
};

export type CalloutParentUpdateManyWithNestedWhereInput = {
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
};

export type CalloutParentUpdateOneInlineInput = {
  /** Connect existing CalloutParent document */
  connect?: InputMaybe<CalloutParentWhereUniqueInput>;
  /** Create and connect one CalloutParent document */
  create?: InputMaybe<CalloutParentCreateInput>;
  /** Delete currently connected CalloutParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CalloutParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CalloutParent document */
  update?: InputMaybe<CalloutParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CalloutParent document */
  upsert?: InputMaybe<CalloutParentUpsertWithNestedWhereUniqueInput>;
};

export type CalloutParentUpdateWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
};

export type CalloutParentUpsertWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type CalloutParentWhereInput = {
  Page?: InputMaybe<PageWhereInput>;
};

export type CalloutParentWhereUniqueInput = {
  Page?: InputMaybe<PageWhereUniqueInput>;
};

export type CalloutUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  form?: InputMaybe<FormUpdateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type CalloutUpdateManyInlineInput = {
  /** Create and connect multiple Callout component instances */
  create?: InputMaybe<Array<CalloutCreateWithPositionInput>>;
  /** Delete multiple Callout documents */
  delete?: InputMaybe<Array<CalloutWhereUniqueInput>>;
  /** Update multiple Callout component instances */
  update?: InputMaybe<Array<CalloutUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Callout component instances */
  upsert?: InputMaybe<Array<CalloutUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CalloutUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type CalloutUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CalloutUpdateManyInput;
  /** Document search */
  where: CalloutWhereInput;
};

export type CalloutUpdateOneInlineInput = {
  /** Create and connect one Callout document */
  create?: InputMaybe<CalloutCreateInput>;
  /** Delete currently connected Callout document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Callout document */
  update?: InputMaybe<CalloutUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Callout document */
  upsert?: InputMaybe<CalloutUpsertWithNestedWhereUniqueInput>;
};

export type CalloutUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CalloutUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CalloutWhereUniqueInput;
};

export type CalloutUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CalloutUpdateInput;
  /** Unique document search */
  where: CalloutWhereUniqueInput;
};

export type CalloutUpsertInput = {
  /** Create document if it didn't exist */
  create: CalloutCreateInput;
  /** Update document if it exists */
  update: CalloutUpdateInput;
};

export type CalloutUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CalloutUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CalloutWhereUniqueInput;
};

export type CalloutUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CalloutUpsertInput;
  /** Unique document search */
  where: CalloutWhereUniqueInput;
};

/** Identifies documents */
export type CalloutWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CalloutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Callout record uniquely */
export type CalloutWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type CheckboxField = {
  __typename?: 'CheckboxField';
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  multiple: Scalars['Boolean'];
  options: Array<Scalars['String']>;
  required: Scalars['Boolean'];
  /** System stage field */
  stage: Stage;
};

export type CheckboxFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CheckboxFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type CheckboxFieldConnection = {
  __typename?: 'CheckboxFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CheckboxFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CheckboxFieldCreateInput = {
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  label?: InputMaybe<Scalars['String']>;
  multiple: Scalars['Boolean'];
  options: Array<Scalars['String']>;
  required: Scalars['Boolean'];
};

export type CheckboxFieldCreateManyInlineInput = {
  /** Create and connect multiple existing CheckboxField documents */
  create?: InputMaybe<Array<CheckboxFieldCreateInput>>;
};

export type CheckboxFieldCreateOneInlineInput = {
  /** Create and connect one CheckboxField document */
  create?: InputMaybe<CheckboxFieldCreateInput>;
};

export type CheckboxFieldCreateWithPositionInput = {
  /** Document to create */
  data: CheckboxFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CheckboxFieldEdge = {
  __typename?: 'CheckboxFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CheckboxField;
};

/** Identifies documents */
export type CheckboxFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

export enum CheckboxFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  MultipleAsc = 'multiple_ASC',
  MultipleDesc = 'multiple_DESC',
  OptionsAsc = 'options_ASC',
  OptionsDesc = 'options_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type CheckboxFieldParent = ContactForm | Form;

export type CheckboxFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type CheckboxFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type CheckboxFieldParentCreateManyInlineInput = {
  /** Connect multiple existing CheckboxFieldParent documents */
  connect?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing CheckboxFieldParent documents */
  create?: InputMaybe<Array<CheckboxFieldParentCreateInput>>;
};

export type CheckboxFieldParentCreateOneInlineInput = {
  /** Connect one existing CheckboxFieldParent document */
  connect?: InputMaybe<CheckboxFieldParentWhereUniqueInput>;
  /** Create and connect one CheckboxFieldParent document */
  create?: InputMaybe<CheckboxFieldParentCreateInput>;
};

export type CheckboxFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type CheckboxFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing CheckboxFieldParent documents */
  connect?: InputMaybe<Array<CheckboxFieldParentConnectInput>>;
  /** Create and connect multiple CheckboxFieldParent documents */
  create?: InputMaybe<Array<CheckboxFieldParentCreateInput>>;
  /** Delete multiple CheckboxFieldParent documents */
  delete?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Disconnect multiple CheckboxFieldParent documents */
  disconnect?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CheckboxFieldParent documents */
  set?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Update multiple CheckboxFieldParent documents */
  update?: InputMaybe<Array<CheckboxFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CheckboxFieldParent documents */
  upsert?: InputMaybe<Array<CheckboxFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type CheckboxFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type CheckboxFieldParentUpdateOneInlineInput = {
  /** Connect existing CheckboxFieldParent document */
  connect?: InputMaybe<CheckboxFieldParentWhereUniqueInput>;
  /** Create and connect one CheckboxFieldParent document */
  create?: InputMaybe<CheckboxFieldParentCreateInput>;
  /** Delete currently connected CheckboxFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CheckboxFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CheckboxFieldParent document */
  update?: InputMaybe<CheckboxFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CheckboxFieldParent document */
  upsert?: InputMaybe<CheckboxFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type CheckboxFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type CheckboxFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type CheckboxFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type CheckboxFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type CheckboxFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  options?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type CheckboxFieldUpdateManyInlineInput = {
  /** Create and connect multiple CheckboxField component instances */
  create?: InputMaybe<Array<CheckboxFieldCreateWithPositionInput>>;
  /** Delete multiple CheckboxField documents */
  delete?: InputMaybe<Array<CheckboxFieldWhereUniqueInput>>;
  /** Update multiple CheckboxField component instances */
  update?: InputMaybe<Array<CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CheckboxField component instances */
  upsert?: InputMaybe<Array<CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CheckboxFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  options?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type CheckboxFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CheckboxFieldUpdateManyInput;
  /** Document search */
  where: CheckboxFieldWhereInput;
};

export type CheckboxFieldUpdateOneInlineInput = {
  /** Create and connect one CheckboxField document */
  create?: InputMaybe<CheckboxFieldCreateInput>;
  /** Delete currently connected CheckboxField document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CheckboxField document */
  update?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CheckboxField document */
  upsert?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueInput>;
};

export type CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CheckboxFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CheckboxFieldWhereUniqueInput;
};

export type CheckboxFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CheckboxFieldUpdateInput;
  /** Unique document search */
  where: CheckboxFieldWhereUniqueInput;
};

export type CheckboxFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: CheckboxFieldCreateInput;
  /** Update document if it exists */
  update: CheckboxFieldUpdateInput;
};

export type CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CheckboxFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CheckboxFieldWhereUniqueInput;
};

export type CheckboxFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CheckboxFieldUpsertInput;
  /** Unique document search */
  where: CheckboxFieldWhereUniqueInput;
};

/** Identifies documents */
export type CheckboxFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

/** References CheckboxField record uniquely */
export type CheckboxFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type CloudLocation = Node & {
  __typename?: 'CloudLocation';
  active: Scalars['Boolean'];
  coordinates: Location;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: Scalars['String'];
  /** Get the document in other stages */
  documentInStages: Array<CloudLocation>;
  /** List of CloudLocation versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  identifier: Scalars['String'];
  name: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  testUrl: Scalars['String'];
  timeout: Scalars['Int'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type CloudLocationCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CloudLocationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type CloudLocationHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type CloudLocationPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type CloudLocationScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CloudLocationUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type CloudLocationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CloudLocationWhereUniqueInput;
};

/** A connection to a list of items. */
export type CloudLocationConnection = {
  __typename?: 'CloudLocationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CloudLocationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CloudLocationCreateInput = {
  active: Scalars['Boolean'];
  coordinates: LocationInput;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['String'];
  identifier: Scalars['String'];
  name: Scalars['String'];
  testUrl: Scalars['String'];
  timeout: Scalars['Int'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CloudLocationCreateManyInlineInput = {
  /** Connect multiple existing CloudLocation documents */
  connect?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Create and connect multiple existing CloudLocation documents */
  create?: InputMaybe<Array<CloudLocationCreateInput>>;
};

export type CloudLocationCreateOneInlineInput = {
  /** Connect one existing CloudLocation document */
  connect?: InputMaybe<CloudLocationWhereUniqueInput>;
  /** Create and connect one CloudLocation document */
  create?: InputMaybe<CloudLocationCreateInput>;
};

/** An edge in a connection. */
export type CloudLocationEdge = {
  __typename?: 'CloudLocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CloudLocation;
};

/** Identifies documents */
export type CloudLocationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  active?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  active_not?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_none?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_some?: InputMaybe<CloudLocationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  identifier?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  identifier_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identifier_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identifier_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  identifier_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identifier_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identifier_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  identifier_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  identifier_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identifier_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  testUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  testUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testUrl_starts_with?: InputMaybe<Scalars['String']>;
  timeout?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  timeout_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  timeout_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  timeout_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  timeout_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  timeout_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  timeout_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  timeout_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CloudLocationOrderByInput {
  ActiveAsc = 'active_ASC',
  ActiveDesc = 'active_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IdentifierAsc = 'identifier_ASC',
  IdentifierDesc = 'identifier_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TestUrlAsc = 'testUrl_ASC',
  TestUrlDesc = 'testUrl_DESC',
  TimeoutAsc = 'timeout_ASC',
  TimeoutDesc = 'timeout_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CloudLocationUpdateInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  coordinates?: InputMaybe<LocationInput>;
  description?: InputMaybe<Scalars['String']>;
  identifier?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  testUrl?: InputMaybe<Scalars['String']>;
  timeout?: InputMaybe<Scalars['Int']>;
};

export type CloudLocationUpdateManyInlineInput = {
  /** Connect multiple existing CloudLocation documents */
  connect?: InputMaybe<Array<CloudLocationConnectInput>>;
  /** Create and connect multiple CloudLocation documents */
  create?: InputMaybe<Array<CloudLocationCreateInput>>;
  /** Delete multiple CloudLocation documents */
  delete?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Disconnect multiple CloudLocation documents */
  disconnect?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CloudLocation documents */
  set?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Update multiple CloudLocation documents */
  update?: InputMaybe<Array<CloudLocationUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CloudLocation documents */
  upsert?: InputMaybe<Array<CloudLocationUpsertWithNestedWhereUniqueInput>>;
};

export type CloudLocationUpdateManyInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  coordinates?: InputMaybe<LocationInput>;
  description?: InputMaybe<Scalars['String']>;
  identifier?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  testUrl?: InputMaybe<Scalars['String']>;
  timeout?: InputMaybe<Scalars['Int']>;
};

export type CloudLocationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CloudLocationUpdateManyInput;
  /** Document search */
  where: CloudLocationWhereInput;
};

export type CloudLocationUpdateOneInlineInput = {
  /** Connect existing CloudLocation document */
  connect?: InputMaybe<CloudLocationWhereUniqueInput>;
  /** Create and connect one CloudLocation document */
  create?: InputMaybe<CloudLocationCreateInput>;
  /** Delete currently connected CloudLocation document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CloudLocation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CloudLocation document */
  update?: InputMaybe<CloudLocationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CloudLocation document */
  upsert?: InputMaybe<CloudLocationUpsertWithNestedWhereUniqueInput>;
};

export type CloudLocationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CloudLocationUpdateInput;
  /** Unique document search */
  where: CloudLocationWhereUniqueInput;
};

export type CloudLocationUpsertInput = {
  /** Create document if it didn't exist */
  create: CloudLocationCreateInput;
  /** Update document if it exists */
  update: CloudLocationUpdateInput;
};

export type CloudLocationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CloudLocationUpsertInput;
  /** Unique document search */
  where: CloudLocationWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CloudLocationWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type CloudLocationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  active?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  active_not?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_none?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_some?: InputMaybe<CloudLocationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  identifier?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  identifier_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identifier_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identifier_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  identifier_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identifier_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identifier_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  identifier_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  identifier_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identifier_starts_with?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  testUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  testUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  testUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  testUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  testUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  testUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  testUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  testUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  testUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  testUrl_starts_with?: InputMaybe<Scalars['String']>;
  timeout?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  timeout_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  timeout_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  timeout_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  timeout_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  timeout_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  timeout_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  timeout_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CloudLocationWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CloudLocationWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CloudLocationWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CloudLocationWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CloudLocationWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References CloudLocation record uniquely */
export type CloudLocationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color';
  css: Scalars['String'];
  hex: Scalars['Hex'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']>;
  rgba?: InputMaybe<RgbaInput>;
};

export type Configuration = Node & {
  __typename?: 'Configuration';
  callToAction: CallToAction;
  contactForms: Array<ContactForm>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: Scalars['String'];
  docsGroups: Array<DocsGroup>;
  /** Get the document in other stages */
  documentInStages: Array<Configuration>;
  employees: Array<Employee>;
  errorMessage: Alert;
  footerGroups: Array<FooterGroup>;
  /** List of Configuration versions */
  history: Array<Version>;
  hqAddress: Scalars['String'];
  hqCoordinates: Location;
  hqMapInfo: RichText;
  /** The unique identifier */
  id: Scalars['ID'];
  openMapsText: Scalars['String'];
  organizationName: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slogan: Scalars['String'];
  socialLinks: Array<SocialLink>;
  /** System stage field */
  stage: Stage;
  subscribe?: Maybe<Form>;
  testimonials: Array<Testimonial>;
  theme?: Maybe<Theme>;
  title: Scalars['String'];
  titleOverrides: Array<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ConfigurationCallToActionArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationContactFormsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ContactFormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContactFormWhereInput>;
};


export type ConfigurationCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationDocsGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type ConfigurationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ConfigurationEmployeesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EmployeeWhereInput>;
};


export type ConfigurationErrorMessageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationFooterGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FooterGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterGroupWhereInput>;
};


export type ConfigurationHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ConfigurationPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ConfigurationSocialLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SocialLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SocialLinkWhereInput>;
};


export type ConfigurationSubscribeArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationTestimonialsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type ConfigurationThemeArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ConfigurationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ConfigurationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ConfigurationConnection = {
  __typename?: 'ConfigurationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ConfigurationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ConfigurationCreateInput = {
  callToAction: CallToActionCreateOneInlineInput;
  contactForms?: InputMaybe<ContactFormCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['String'];
  docsGroups?: InputMaybe<DocsGroupCreateManyInlineInput>;
  employees?: InputMaybe<EmployeeCreateManyInlineInput>;
  errorMessage: AlertCreateOneInlineInput;
  footerGroups?: InputMaybe<FooterGroupCreateManyInlineInput>;
  hqAddress: Scalars['String'];
  hqCoordinates: LocationInput;
  hqMapInfo: Scalars['RichTextAST'];
  openMapsText: Scalars['String'];
  organizationName: Scalars['String'];
  slogan: Scalars['String'];
  socialLinks?: InputMaybe<SocialLinkCreateManyInlineInput>;
  subscribe?: InputMaybe<FormCreateOneInlineInput>;
  testimonials?: InputMaybe<TestimonialCreateManyInlineInput>;
  theme?: InputMaybe<ThemeCreateOneInlineInput>;
  title: Scalars['String'];
  titleOverrides: Array<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ConfigurationCreateManyInlineInput = {
  /** Connect multiple existing Configuration documents */
  connect?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Create and connect multiple existing Configuration documents */
  create?: InputMaybe<Array<ConfigurationCreateInput>>;
};

export type ConfigurationCreateOneInlineInput = {
  /** Connect one existing Configuration document */
  connect?: InputMaybe<ConfigurationWhereUniqueInput>;
  /** Create and connect one Configuration document */
  create?: InputMaybe<ConfigurationCreateInput>;
};

/** An edge in a connection. */
export type ConfigurationEdge = {
  __typename?: 'ConfigurationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Configuration;
};

/** Identifies documents */
export type ConfigurationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callToAction?: InputMaybe<CallToActionWhereInput>;
  contactForms_every?: InputMaybe<ContactFormWhereInput>;
  contactForms_none?: InputMaybe<ContactFormWhereInput>;
  contactForms_some?: InputMaybe<ContactFormWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  docsGroups_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigurationWhereStageInput>;
  employees_every?: InputMaybe<EmployeeWhereInput>;
  employees_none?: InputMaybe<EmployeeWhereInput>;
  employees_some?: InputMaybe<EmployeeWhereInput>;
  errorMessage?: InputMaybe<AlertWhereInput>;
  footerGroups_every?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_none?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_some?: InputMaybe<FooterGroupWhereInput>;
  hqAddress?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  hqAddress_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  hqAddress_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hqAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  hqAddress_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  hqAddress_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  hqAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  hqAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  hqAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  hqAddress_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  openMapsText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  openMapsText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  openMapsText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  openMapsText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  openMapsText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  openMapsText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  openMapsText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  openMapsText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  openMapsText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  openMapsText_starts_with?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  organizationName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  organizationName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  organizationName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  organizationName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  organizationName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  organizationName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  organizationName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  organizationName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  organizationName_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slogan?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slogan_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slogan_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slogan_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slogan_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slogan_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slogan_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slogan_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slogan_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slogan_starts_with?: InputMaybe<Scalars['String']>;
  socialLinks_every?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_none?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_some?: InputMaybe<SocialLinkWhereInput>;
  subscribe?: InputMaybe<FormWhereInput>;
  testimonials_every?: InputMaybe<TestimonialWhereInput>;
  testimonials_none?: InputMaybe<TestimonialWhereInput>;
  testimonials_some?: InputMaybe<TestimonialWhereInput>;
  theme?: InputMaybe<ThemeWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  titleOverrides?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  titleOverrides_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  titleOverrides_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  titleOverrides_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  titleOverrides_not?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ConfigurationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  HqAddressAsc = 'hqAddress_ASC',
  HqAddressDesc = 'hqAddress_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OpenMapsTextAsc = 'openMapsText_ASC',
  OpenMapsTextDesc = 'openMapsText_DESC',
  OrganizationNameAsc = 'organizationName_ASC',
  OrganizationNameDesc = 'organizationName_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SloganAsc = 'slogan_ASC',
  SloganDesc = 'slogan_DESC',
  TitleOverridesAsc = 'titleOverrides_ASC',
  TitleOverridesDesc = 'titleOverrides_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ConfigurationUpdateInput = {
  callToAction?: InputMaybe<CallToActionUpdateOneInlineInput>;
  contactForms?: InputMaybe<ContactFormUpdateManyInlineInput>;
  description?: InputMaybe<Scalars['String']>;
  docsGroups?: InputMaybe<DocsGroupUpdateManyInlineInput>;
  employees?: InputMaybe<EmployeeUpdateManyInlineInput>;
  errorMessage?: InputMaybe<AlertUpdateOneInlineInput>;
  footerGroups?: InputMaybe<FooterGroupUpdateManyInlineInput>;
  hqAddress?: InputMaybe<Scalars['String']>;
  hqCoordinates?: InputMaybe<LocationInput>;
  hqMapInfo?: InputMaybe<Scalars['RichTextAST']>;
  openMapsText?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  slogan?: InputMaybe<Scalars['String']>;
  socialLinks?: InputMaybe<SocialLinkUpdateManyInlineInput>;
  subscribe?: InputMaybe<FormUpdateOneInlineInput>;
  testimonials?: InputMaybe<TestimonialUpdateManyInlineInput>;
  theme?: InputMaybe<ThemeUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  titleOverrides?: InputMaybe<Array<Scalars['String']>>;
};

export type ConfigurationUpdateManyInlineInput = {
  /** Connect multiple existing Configuration documents */
  connect?: InputMaybe<Array<ConfigurationConnectInput>>;
  /** Create and connect multiple Configuration documents */
  create?: InputMaybe<Array<ConfigurationCreateInput>>;
  /** Delete multiple Configuration documents */
  delete?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Disconnect multiple Configuration documents */
  disconnect?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Configuration documents */
  set?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Update multiple Configuration documents */
  update?: InputMaybe<Array<ConfigurationUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Configuration documents */
  upsert?: InputMaybe<Array<ConfigurationUpsertWithNestedWhereUniqueInput>>;
};

export type ConfigurationUpdateManyInput = {
  description?: InputMaybe<Scalars['String']>;
  hqAddress?: InputMaybe<Scalars['String']>;
  hqCoordinates?: InputMaybe<LocationInput>;
  hqMapInfo?: InputMaybe<Scalars['RichTextAST']>;
  openMapsText?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  slogan?: InputMaybe<Scalars['String']>;
  titleOverrides?: InputMaybe<Array<Scalars['String']>>;
};

export type ConfigurationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ConfigurationUpdateManyInput;
  /** Document search */
  where: ConfigurationWhereInput;
};

export type ConfigurationUpdateOneInlineInput = {
  /** Connect existing Configuration document */
  connect?: InputMaybe<ConfigurationWhereUniqueInput>;
  /** Create and connect one Configuration document */
  create?: InputMaybe<ConfigurationCreateInput>;
  /** Delete currently connected Configuration document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Configuration document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Configuration document */
  update?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Configuration document */
  upsert?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
};

export type ConfigurationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ConfigurationUpdateInput;
  /** Unique document search */
  where: ConfigurationWhereUniqueInput;
};

export type ConfigurationUpsertInput = {
  /** Create document if it didn't exist */
  create: ConfigurationCreateInput;
  /** Update document if it exists */
  update: ConfigurationUpdateInput;
};

export type ConfigurationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ConfigurationUpsertInput;
  /** Unique document search */
  where: ConfigurationWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ConfigurationWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ConfigurationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callToAction?: InputMaybe<CallToActionWhereInput>;
  contactForms_every?: InputMaybe<ContactFormWhereInput>;
  contactForms_none?: InputMaybe<ContactFormWhereInput>;
  contactForms_some?: InputMaybe<ContactFormWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  docsGroups_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigurationWhereStageInput>;
  employees_every?: InputMaybe<EmployeeWhereInput>;
  employees_none?: InputMaybe<EmployeeWhereInput>;
  employees_some?: InputMaybe<EmployeeWhereInput>;
  errorMessage?: InputMaybe<AlertWhereInput>;
  footerGroups_every?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_none?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_some?: InputMaybe<FooterGroupWhereInput>;
  hqAddress?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  hqAddress_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  hqAddress_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hqAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  hqAddress_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  hqAddress_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  hqAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  hqAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  hqAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  hqAddress_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  openMapsText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  openMapsText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  openMapsText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  openMapsText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  openMapsText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  openMapsText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  openMapsText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  openMapsText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  openMapsText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  openMapsText_starts_with?: InputMaybe<Scalars['String']>;
  organizationName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  organizationName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  organizationName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  organizationName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  organizationName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  organizationName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  organizationName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  organizationName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  organizationName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  organizationName_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slogan?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slogan_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slogan_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slogan_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slogan_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slogan_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slogan_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slogan_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slogan_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slogan_starts_with?: InputMaybe<Scalars['String']>;
  socialLinks_every?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_none?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_some?: InputMaybe<SocialLinkWhereInput>;
  subscribe?: InputMaybe<FormWhereInput>;
  testimonials_every?: InputMaybe<TestimonialWhereInput>;
  testimonials_none?: InputMaybe<TestimonialWhereInput>;
  testimonials_some?: InputMaybe<TestimonialWhereInput>;
  theme?: InputMaybe<ThemeWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  titleOverrides?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  titleOverrides_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  titleOverrides_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  titleOverrides_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  titleOverrides_not?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ConfigurationWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigurationWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigurationWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigurationWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ConfigurationWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Configuration record uniquely */
export type ConfigurationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
};

export type ContactForm = Node & {
  __typename?: 'ContactForm';
  body: RichText;
  button: Button;
  color: ThemeColor;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ContactForm>;
  fields: Array<ContactFormfieldsUnion>;
  /** List of ContactForm versions */
  history: Array<Version>;
  icon: Icon;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ContactFormButtonArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ContactFormFieldsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type ContactFormHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ContactFormIconArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ContactFormUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ContactFormConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContactFormWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContactFormConnection = {
  __typename?: 'ContactFormConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContactFormEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContactFormCreateInput = {
  body: Scalars['RichTextAST'];
  button: ButtonCreateOneInlineInput;
  cl946yxav4qo701tcbhuw0z3j?: InputMaybe<ConfigurationCreateManyInlineInput>;
  color: ThemeColor;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fields?: InputMaybe<ContactFormfieldsUnionCreateManyInlineInput>;
  icon: IconCreateOneInlineInput;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ContactFormCreateManyInlineInput = {
  /** Connect multiple existing ContactForm documents */
  connect?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Create and connect multiple existing ContactForm documents */
  create?: InputMaybe<Array<ContactFormCreateInput>>;
};

export type ContactFormCreateOneInlineInput = {
  /** Connect one existing ContactForm document */
  connect?: InputMaybe<ContactFormWhereUniqueInput>;
  /** Create and connect one ContactForm document */
  create?: InputMaybe<ContactFormCreateInput>;
};

/** An edge in a connection. */
export type ContactFormEdge = {
  __typename?: 'ContactFormEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ContactForm;
};

/** Identifies documents */
export type ContactFormManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  color?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  color_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  color_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  color_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_none?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_some?: InputMaybe<ContactFormWhereStageInput>;
  icon?: InputMaybe<IconWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ContactFormOrderByInput {
  ColorAsc = 'color_ASC',
  ColorDesc = 'color_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ContactFormUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  cl946yxav4qo701tcbhuw0z3j?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  color?: InputMaybe<ThemeColor>;
  fields?: InputMaybe<ContactFormfieldsUnionUpdateManyInlineInput>;
  icon?: InputMaybe<IconUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type ContactFormUpdateManyInlineInput = {
  /** Connect multiple existing ContactForm documents */
  connect?: InputMaybe<Array<ContactFormConnectInput>>;
  /** Create and connect multiple ContactForm documents */
  create?: InputMaybe<Array<ContactFormCreateInput>>;
  /** Delete multiple ContactForm documents */
  delete?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Disconnect multiple ContactForm documents */
  disconnect?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ContactForm documents */
  set?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Update multiple ContactForm documents */
  update?: InputMaybe<Array<ContactFormUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ContactForm documents */
  upsert?: InputMaybe<Array<ContactFormUpsertWithNestedWhereUniqueInput>>;
};

export type ContactFormUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  color?: InputMaybe<ThemeColor>;
  title?: InputMaybe<Scalars['String']>;
};

export type ContactFormUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContactFormUpdateManyInput;
  /** Document search */
  where: ContactFormWhereInput;
};

export type ContactFormUpdateOneInlineInput = {
  /** Connect existing ContactForm document */
  connect?: InputMaybe<ContactFormWhereUniqueInput>;
  /** Create and connect one ContactForm document */
  create?: InputMaybe<ContactFormCreateInput>;
  /** Delete currently connected ContactForm document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ContactForm document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ContactForm document */
  update?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContactForm document */
  upsert?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContactFormUpdateInput;
  /** Unique document search */
  where: ContactFormWhereUniqueInput;
};

export type ContactFormUpsertInput = {
  /** Create document if it didn't exist */
  create: ContactFormCreateInput;
  /** Update document if it exists */
  update: ContactFormUpdateInput;
};

export type ContactFormUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContactFormUpsertInput;
  /** Unique document search */
  where: ContactFormWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ContactFormWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ContactFormWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  color?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  color_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  color_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  color_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_none?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_some?: InputMaybe<ContactFormWhereStageInput>;
  icon?: InputMaybe<IconWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ContactFormWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ContactFormWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ContactForm record uniquely */
export type ContactFormWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ContactFormfieldsUnion = CheckboxField | FormButton | SelectField | TextAreaField | TextInputField;

export type ContactFormfieldsUnionConnectInput = {
  CheckboxField?: InputMaybe<CheckboxFieldConnectInput>;
  FormButton?: InputMaybe<FormButtonConnectInput>;
  SelectField?: InputMaybe<SelectFieldConnectInput>;
  TextAreaField?: InputMaybe<TextAreaFieldConnectInput>;
  TextInputField?: InputMaybe<TextInputFieldConnectInput>;
};

export type ContactFormfieldsUnionCreateInput = {
  CheckboxField?: InputMaybe<CheckboxFieldCreateInput>;
  FormButton?: InputMaybe<FormButtonCreateInput>;
  SelectField?: InputMaybe<SelectFieldCreateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateInput>;
};

export type ContactFormfieldsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing ContactFormfieldsUnion documents */
  create?: InputMaybe<Array<ContactFormfieldsUnionCreateInput>>;
};

export type ContactFormfieldsUnionCreateOneInlineInput = {
  /** Create and connect one ContactFormfieldsUnion document */
  create?: InputMaybe<ContactFormfieldsUnionCreateInput>;
};

export type ContactFormfieldsUnionCreateWithPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldCreateWithPositionInput>;
  FormButton?: InputMaybe<FormButtonCreateWithPositionInput>;
  SelectField?: InputMaybe<SelectFieldCreateWithPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateWithPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateWithPositionInput>;
};

export type ContactFormfieldsUnionUpdateInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateInput>;
  FormButton?: InputMaybe<FormButtonUpdateInput>;
  SelectField?: InputMaybe<SelectFieldUpdateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateInput>;
};

export type ContactFormfieldsUnionUpdateManyInlineInput = {
  /** Create and connect multiple ContactFormfieldsUnion component instances */
  create?: InputMaybe<Array<ContactFormfieldsUnionCreateWithPositionInput>>;
  /** Delete multiple ContactFormfieldsUnion documents */
  delete?: InputMaybe<Array<ContactFormfieldsUnionWhereUniqueInput>>;
  /** Update multiple ContactFormfieldsUnion component instances */
  update?: InputMaybe<Array<ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ContactFormfieldsUnion component instances */
  upsert?: InputMaybe<Array<ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ContactFormfieldsUnionUpdateManyWithNestedWhereInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateManyWithNestedWhereInput>;
  FormButton?: InputMaybe<FormButtonUpdateManyWithNestedWhereInput>;
  SelectField?: InputMaybe<SelectFieldUpdateManyWithNestedWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateManyWithNestedWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateManyWithNestedWhereInput>;
};

export type ContactFormfieldsUnionUpdateOneInlineInput = {
  /** Create and connect one ContactFormfieldsUnion document */
  create?: InputMaybe<ContactFormfieldsUnionCreateInput>;
  /** Delete currently connected ContactFormfieldsUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ContactFormfieldsUnion document */
  update?: InputMaybe<ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContactFormfieldsUnion document */
  upsert?: InputMaybe<ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  FormButton?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueInput>;
};

export type ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  FormButton?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormfieldsUnionWhereInput = {
  CheckboxField?: InputMaybe<CheckboxFieldWhereInput>;
  FormButton?: InputMaybe<FormButtonWhereInput>;
  SelectField?: InputMaybe<SelectFieldWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereInput>;
};

export type ContactFormfieldsUnionWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereUniqueInput>;
};

export type ContentButton = Node & {
  __typename?: 'ContentButton';
  colorScheme?: Maybe<ThemeColor>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ContentButton>;
  /** List of ContentButton versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  link: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** Only applies for external links */
  showIcon: Scalars['Boolean'];
  /** System stage field */
  stage: Stage;
  text: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  variant?: Maybe<ButtonVariant>;
};


export type ContentButtonCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ContentButtonDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ContentButtonHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ContentButtonPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ContentButtonScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ContentButtonUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ContentButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContentButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContentButtonConnection = {
  __typename?: 'ContentButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContentButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContentButtonCreateInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  link: Scalars['String'];
  showIcon: Scalars['Boolean'];
  text: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ContentButtonCreateManyInlineInput = {
  /** Connect multiple existing ContentButton documents */
  connect?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Create and connect multiple existing ContentButton documents */
  create?: InputMaybe<Array<ContentButtonCreateInput>>;
};

export type ContentButtonCreateOneInlineInput = {
  /** Connect one existing ContentButton document */
  connect?: InputMaybe<ContentButtonWhereUniqueInput>;
  /** Create and connect one ContentButton document */
  create?: InputMaybe<ContentButtonCreateInput>;
};

/** An edge in a connection. */
export type ContentButtonEdge = {
  __typename?: 'ContentButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ContentButton;
};

/** Identifies documents */
export type ContentButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_none?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_some?: InputMaybe<ContentButtonWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

export enum ContentButtonOrderByInput {
  ColorSchemeAsc = 'colorScheme_ASC',
  ColorSchemeDesc = 'colorScheme_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShowIconAsc = 'showIcon_ASC',
  ShowIconDesc = 'showIcon_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VariantAsc = 'variant_ASC',
  VariantDesc = 'variant_DESC'
}

export type ContentButtonUpdateInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  link?: InputMaybe<Scalars['String']>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  text?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ContentButtonUpdateManyInlineInput = {
  /** Connect multiple existing ContentButton documents */
  connect?: InputMaybe<Array<ContentButtonConnectInput>>;
  /** Create and connect multiple ContentButton documents */
  create?: InputMaybe<Array<ContentButtonCreateInput>>;
  /** Delete multiple ContentButton documents */
  delete?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Disconnect multiple ContentButton documents */
  disconnect?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ContentButton documents */
  set?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Update multiple ContentButton documents */
  update?: InputMaybe<Array<ContentButtonUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ContentButton documents */
  upsert?: InputMaybe<Array<ContentButtonUpsertWithNestedWhereUniqueInput>>;
};

export type ContentButtonUpdateManyInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  link?: InputMaybe<Scalars['String']>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  text?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ContentButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContentButtonUpdateManyInput;
  /** Document search */
  where: ContentButtonWhereInput;
};

export type ContentButtonUpdateOneInlineInput = {
  /** Connect existing ContentButton document */
  connect?: InputMaybe<ContentButtonWhereUniqueInput>;
  /** Create and connect one ContentButton document */
  create?: InputMaybe<ContentButtonCreateInput>;
  /** Delete currently connected ContentButton document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ContentButton document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ContentButton document */
  update?: InputMaybe<ContentButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContentButton document */
  upsert?: InputMaybe<ContentButtonUpsertWithNestedWhereUniqueInput>;
};

export type ContentButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContentButtonUpdateInput;
  /** Unique document search */
  where: ContentButtonWhereUniqueInput;
};

export type ContentButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: ContentButtonCreateInput;
  /** Update document if it exists */
  update: ContentButtonUpdateInput;
};

export type ContentButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContentButtonUpsertInput;
  /** Unique document search */
  where: ContentButtonWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ContentButtonWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ContentButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_none?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_some?: InputMaybe<ContentButtonWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ContentButtonWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentButtonWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentButtonWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentButtonWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ContentButtonWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ContentButton record uniquely */
export type ContentButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type DocsGroup = Node & {
  __typename?: 'DocsGroup';
  callToAction: CallToActionSettings;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  docsPages: Array<DocsPage>;
  /** Get the document in other stages */
  documentInStages: Array<DocsGroup>;
  footerGroup?: Maybe<FooterGroup>;
  footerTitle?: Maybe<Scalars['String']>;
  /** List of DocsGroup versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']>;
  summary: DocsGroupSummaryRichText;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type DocsGroupCallToActionArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupDocsPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DocsPageWhereInput>;
};


export type DocsGroupDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type DocsGroupFooterGroupArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type DocsGroupPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type DocsGroupUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type DocsGroupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DocsGroupWhereUniqueInput;
};

/** A connection to a list of items. */
export type DocsGroupConnection = {
  __typename?: 'DocsGroupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DocsGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DocsGroupCreateInput = {
  callToAction: CallToActionSettingsCreateOneInlineInput;
  cl946xxpt4pfx01t2h0bs645e?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  docsPages?: InputMaybe<DocsPageCreateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupCreateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
  subtitle?: InputMaybe<Scalars['String']>;
  summary: Scalars['RichTextAST'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type DocsGroupCreateManyInlineInput = {
  /** Connect multiple existing DocsGroup documents */
  connect?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Create and connect multiple existing DocsGroup documents */
  create?: InputMaybe<Array<DocsGroupCreateInput>>;
};

export type DocsGroupCreateOneInlineInput = {
  /** Connect one existing DocsGroup document */
  connect?: InputMaybe<DocsGroupWhereUniqueInput>;
  /** Create and connect one DocsGroup document */
  create?: InputMaybe<DocsGroupCreateInput>;
};

/** An edge in a connection. */
export type DocsGroupEdge = {
  __typename?: 'DocsGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DocsGroup;
};

/** Identifies documents */
export type DocsGroupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsPages_every?: InputMaybe<DocsPageWhereInput>;
  docsPages_none?: InputMaybe<DocsPageWhereInput>;
  docsPages_some?: InputMaybe<DocsPageWhereInput>;
  documentInStages_every?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsGroupWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum DocsGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterTitleAsc = 'footerTitle_ASC',
  FooterTitleDesc = 'footerTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type DocsGroupSummaryRichText = {
  __typename?: 'DocsGroupSummaryRichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  json: Scalars['RichTextAST'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST'];
  references: Array<DocsGroupSummaryRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};


export type DocsGroupSummaryRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type DocsGroupSummaryRichTextEmbeddedTypes = Admonition | Asset | ContentButton;

export type DocsGroupUpdateInput = {
  callToAction?: InputMaybe<CallToActionSettingsUpdateOneInlineInput>;
  cl946xxpt4pfx01t2h0bs645e?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  docsPages?: InputMaybe<DocsPageUpdateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupUpdateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  summary?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type DocsGroupUpdateManyInlineInput = {
  /** Connect multiple existing DocsGroup documents */
  connect?: InputMaybe<Array<DocsGroupConnectInput>>;
  /** Create and connect multiple DocsGroup documents */
  create?: InputMaybe<Array<DocsGroupCreateInput>>;
  /** Delete multiple DocsGroup documents */
  delete?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Disconnect multiple DocsGroup documents */
  disconnect?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing DocsGroup documents */
  set?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Update multiple DocsGroup documents */
  update?: InputMaybe<Array<DocsGroupUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple DocsGroup documents */
  upsert?: InputMaybe<Array<DocsGroupUpsertWithNestedWhereUniqueInput>>;
};

export type DocsGroupUpdateManyInput = {
  footerTitle?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  summary?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type DocsGroupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DocsGroupUpdateManyInput;
  /** Document search */
  where: DocsGroupWhereInput;
};

export type DocsGroupUpdateOneInlineInput = {
  /** Connect existing DocsGroup document */
  connect?: InputMaybe<DocsGroupWhereUniqueInput>;
  /** Create and connect one DocsGroup document */
  create?: InputMaybe<DocsGroupCreateInput>;
  /** Delete currently connected DocsGroup document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected DocsGroup document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single DocsGroup document */
  update?: InputMaybe<DocsGroupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DocsGroup document */
  upsert?: InputMaybe<DocsGroupUpsertWithNestedWhereUniqueInput>;
};

export type DocsGroupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DocsGroupUpdateInput;
  /** Unique document search */
  where: DocsGroupWhereUniqueInput;
};

export type DocsGroupUpsertInput = {
  /** Create document if it didn't exist */
  create: DocsGroupCreateInput;
  /** Update document if it exists */
  update: DocsGroupUpdateInput;
};

export type DocsGroupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DocsGroupUpsertInput;
  /** Unique document search */
  where: DocsGroupWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type DocsGroupWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type DocsGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsPages_every?: InputMaybe<DocsPageWhereInput>;
  docsPages_none?: InputMaybe<DocsPageWhereInput>;
  docsPages_some?: InputMaybe<DocsPageWhereInput>;
  documentInStages_every?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsGroupWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type DocsGroupWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsGroupWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsGroupWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsGroupWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<DocsGroupWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References DocsGroup record uniquely */
export type DocsGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type DocsPage = Node & {
  __typename?: 'DocsPage';
  body: DocsPageBodyRichText;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Used as the <meta/> description for SEO purposes */
  description: Scalars['String'];
  docsGroup?: Maybe<DocsGroup>;
  /** Get the document in other stages */
  documentInStages: Array<DocsPage>;
  /** List of DocsPage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  showUpdatedDate: Scalars['Boolean'];
  slug: Scalars['String'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type DocsPageCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsPageDocsGroupArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsPageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type DocsPageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type DocsPagePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsPageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type DocsPageUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type DocsPageBodyRichText = {
  __typename?: 'DocsPageBodyRichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  json: Scalars['RichTextAST'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST'];
  references: Array<DocsPageBodyRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};


export type DocsPageBodyRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type DocsPageBodyRichTextEmbeddedTypes = Admonition | Asset | ContentButton;

export type DocsPageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DocsPageWhereUniqueInput;
};

/** A connection to a list of items. */
export type DocsPageConnection = {
  __typename?: 'DocsPageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DocsPageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DocsPageCreateInput = {
  body: Scalars['RichTextAST'];
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['String'];
  docsGroup?: InputMaybe<DocsGroupCreateOneInlineInput>;
  showUpdatedDate: Scalars['Boolean'];
  slug: Scalars['String'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type DocsPageCreateManyInlineInput = {
  /** Connect multiple existing DocsPage documents */
  connect?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Create and connect multiple existing DocsPage documents */
  create?: InputMaybe<Array<DocsPageCreateInput>>;
};

export type DocsPageCreateOneInlineInput = {
  /** Connect one existing DocsPage document */
  connect?: InputMaybe<DocsPageWhereUniqueInput>;
  /** Create and connect one DocsPage document */
  create?: InputMaybe<DocsPageCreateInput>;
};

/** An edge in a connection. */
export type DocsPageEdge = {
  __typename?: 'DocsPageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: DocsPage;
};

/** Identifies documents */
export type DocsPageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  docsGroup?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsPageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum DocsPageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShowUpdatedDateAsc = 'showUpdatedDate_ASC',
  ShowUpdatedDateDesc = 'showUpdatedDate_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type DocsPageUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  description?: InputMaybe<Scalars['String']>;
  docsGroup?: InputMaybe<DocsGroupUpdateOneInlineInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  slug?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type DocsPageUpdateManyInlineInput = {
  /** Connect multiple existing DocsPage documents */
  connect?: InputMaybe<Array<DocsPageConnectInput>>;
  /** Create and connect multiple DocsPage documents */
  create?: InputMaybe<Array<DocsPageCreateInput>>;
  /** Delete multiple DocsPage documents */
  delete?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Disconnect multiple DocsPage documents */
  disconnect?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing DocsPage documents */
  set?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Update multiple DocsPage documents */
  update?: InputMaybe<Array<DocsPageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple DocsPage documents */
  upsert?: InputMaybe<Array<DocsPageUpsertWithNestedWhereUniqueInput>>;
};

export type DocsPageUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  description?: InputMaybe<Scalars['String']>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type DocsPageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DocsPageUpdateManyInput;
  /** Document search */
  where: DocsPageWhereInput;
};

export type DocsPageUpdateOneInlineInput = {
  /** Connect existing DocsPage document */
  connect?: InputMaybe<DocsPageWhereUniqueInput>;
  /** Create and connect one DocsPage document */
  create?: InputMaybe<DocsPageCreateInput>;
  /** Delete currently connected DocsPage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected DocsPage document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single DocsPage document */
  update?: InputMaybe<DocsPageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DocsPage document */
  upsert?: InputMaybe<DocsPageUpsertWithNestedWhereUniqueInput>;
};

export type DocsPageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DocsPageUpdateInput;
  /** Unique document search */
  where: DocsPageWhereUniqueInput;
};

export type DocsPageUpsertInput = {
  /** Create document if it didn't exist */
  create: DocsPageCreateInput;
  /** Update document if it exists */
  update: DocsPageUpdateInput;
};

export type DocsPageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DocsPageUpsertInput;
  /** Unique document search */
  where: DocsPageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type DocsPageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type DocsPageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  docsGroup?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsPageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type DocsPageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsPageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsPageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsPageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<DocsPageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References DocsPage record uniquely */
export type DocsPageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export enum DocumentFileTypes {
  Doc = 'doc',
  Docx = 'docx',
  Html = 'html',
  Jpg = 'jpg',
  Odp = 'odp',
  Ods = 'ods',
  Odt = 'odt',
  Pdf = 'pdf',
  Png = 'png',
  Ppt = 'ppt',
  Pptx = 'pptx',
  Svg = 'svg',
  Txt = 'txt',
  Webp = 'webp',
  Xls = 'xls',
  Xlsx = 'xlsx'
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  __typename?: 'DocumentVersion';
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type Employee = Node & {
  __typename?: 'Employee';
  bio: RichText;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Employee>;
  /** List of Employee versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  photo: Asset;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type EmployeeCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type EmployeeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type EmployeeHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type EmployeePhotoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type EmployeePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type EmployeeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type EmployeeUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type EmployeeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: EmployeeWhereUniqueInput;
};

/** A connection to a list of items. */
export type EmployeeConnection = {
  __typename?: 'EmployeeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<EmployeeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EmployeeCreateInput = {
  bio: Scalars['RichTextAST'];
  cl946zxk64pqt01ur8rdqa3mp?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  name: Scalars['String'];
  photo: AssetCreateOneInlineInput;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type EmployeeCreateManyInlineInput = {
  /** Connect multiple existing Employee documents */
  connect?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Create and connect multiple existing Employee documents */
  create?: InputMaybe<Array<EmployeeCreateInput>>;
};

export type EmployeeCreateOneInlineInput = {
  /** Connect one existing Employee document */
  connect?: InputMaybe<EmployeeWhereUniqueInput>;
  /** Create and connect one Employee document */
  create?: InputMaybe<EmployeeCreateInput>;
};

/** An edge in a connection. */
export type EmployeeEdge = {
  __typename?: 'EmployeeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Employee;
};

/** Identifies documents */
export type EmployeeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_none?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_some?: InputMaybe<EmployeeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  photo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum EmployeeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EmployeeUpdateInput = {
  bio?: InputMaybe<Scalars['RichTextAST']>;
  cl946zxk64pqt01ur8rdqa3mp?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  photo?: InputMaybe<AssetUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type EmployeeUpdateManyInlineInput = {
  /** Connect multiple existing Employee documents */
  connect?: InputMaybe<Array<EmployeeConnectInput>>;
  /** Create and connect multiple Employee documents */
  create?: InputMaybe<Array<EmployeeCreateInput>>;
  /** Delete multiple Employee documents */
  delete?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Disconnect multiple Employee documents */
  disconnect?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Employee documents */
  set?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Update multiple Employee documents */
  update?: InputMaybe<Array<EmployeeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Employee documents */
  upsert?: InputMaybe<Array<EmployeeUpsertWithNestedWhereUniqueInput>>;
};

export type EmployeeUpdateManyInput = {
  bio?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type EmployeeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: EmployeeUpdateManyInput;
  /** Document search */
  where: EmployeeWhereInput;
};

export type EmployeeUpdateOneInlineInput = {
  /** Connect existing Employee document */
  connect?: InputMaybe<EmployeeWhereUniqueInput>;
  /** Create and connect one Employee document */
  create?: InputMaybe<EmployeeCreateInput>;
  /** Delete currently connected Employee document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Employee document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Employee document */
  update?: InputMaybe<EmployeeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Employee document */
  upsert?: InputMaybe<EmployeeUpsertWithNestedWhereUniqueInput>;
};

export type EmployeeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: EmployeeUpdateInput;
  /** Unique document search */
  where: EmployeeWhereUniqueInput;
};

export type EmployeeUpsertInput = {
  /** Create document if it didn't exist */
  create: EmployeeCreateInput;
  /** Update document if it exists */
  update: EmployeeUpdateInput;
};

export type EmployeeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: EmployeeUpsertInput;
  /** Unique document search */
  where: EmployeeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type EmployeeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type EmployeeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_none?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_some?: InputMaybe<EmployeeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  photo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type EmployeeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EmployeeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EmployeeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EmployeeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<EmployeeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Employee record uniquely */
export type EmployeeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type ExternalLink = {
  __typename?: 'ExternalLink';
  href: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  /** Show External Link Icon */
  showIcon: Scalars['Boolean'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
};

export type ExternalLinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ExternalLinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type ExternalLinkConnection = {
  __typename?: 'ExternalLinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ExternalLinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ExternalLinkCreateInput = {
  href: Scalars['String'];
  showIcon: Scalars['Boolean'];
  title: Scalars['String'];
};

export type ExternalLinkCreateManyInlineInput = {
  /** Create and connect multiple existing ExternalLink documents */
  create?: InputMaybe<Array<ExternalLinkCreateInput>>;
};

export type ExternalLinkCreateOneInlineInput = {
  /** Create and connect one ExternalLink document */
  create?: InputMaybe<ExternalLinkCreateInput>;
};

export type ExternalLinkCreateWithPositionInput = {
  /** Document to create */
  data: ExternalLinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ExternalLinkEdge = {
  __typename?: 'ExternalLinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ExternalLink;
};

/** Identifies documents */
export type ExternalLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  href_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ExternalLinkOrderByInput {
  HrefAsc = 'href_ASC',
  HrefDesc = 'href_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ShowIconAsc = 'showIcon_ASC',
  ShowIconDesc = 'showIcon_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type ExternalLinkParent = FooterGroup;

export type ExternalLinkParentConnectInput = {
  FooterGroup?: InputMaybe<FooterGroupConnectInput>;
};

export type ExternalLinkParentCreateInput = {
  FooterGroup?: InputMaybe<FooterGroupCreateInput>;
};

export type ExternalLinkParentCreateManyInlineInput = {
  /** Connect multiple existing ExternalLinkParent documents */
  connect?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Create and connect multiple existing ExternalLinkParent documents */
  create?: InputMaybe<Array<ExternalLinkParentCreateInput>>;
};

export type ExternalLinkParentCreateOneInlineInput = {
  /** Connect one existing ExternalLinkParent document */
  connect?: InputMaybe<ExternalLinkParentWhereUniqueInput>;
  /** Create and connect one ExternalLinkParent document */
  create?: InputMaybe<ExternalLinkParentCreateInput>;
};

export type ExternalLinkParentUpdateInput = {
  FooterGroup?: InputMaybe<FooterGroupUpdateInput>;
};

export type ExternalLinkParentUpdateManyInlineInput = {
  /** Connect multiple existing ExternalLinkParent documents */
  connect?: InputMaybe<Array<ExternalLinkParentConnectInput>>;
  /** Create and connect multiple ExternalLinkParent documents */
  create?: InputMaybe<Array<ExternalLinkParentCreateInput>>;
  /** Delete multiple ExternalLinkParent documents */
  delete?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Disconnect multiple ExternalLinkParent documents */
  disconnect?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ExternalLinkParent documents */
  set?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Update multiple ExternalLinkParent documents */
  update?: InputMaybe<Array<ExternalLinkParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ExternalLinkParent documents */
  upsert?: InputMaybe<Array<ExternalLinkParentUpsertWithNestedWhereUniqueInput>>;
};

export type ExternalLinkParentUpdateManyWithNestedWhereInput = {
  FooterGroup?: InputMaybe<FooterGroupUpdateManyWithNestedWhereInput>;
};

export type ExternalLinkParentUpdateOneInlineInput = {
  /** Connect existing ExternalLinkParent document */
  connect?: InputMaybe<ExternalLinkParentWhereUniqueInput>;
  /** Create and connect one ExternalLinkParent document */
  create?: InputMaybe<ExternalLinkParentCreateInput>;
  /** Delete currently connected ExternalLinkParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ExternalLinkParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ExternalLinkParent document */
  update?: InputMaybe<ExternalLinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ExternalLinkParent document */
  upsert?: InputMaybe<ExternalLinkParentUpsertWithNestedWhereUniqueInput>;
};

export type ExternalLinkParentUpdateWithNestedWhereUniqueInput = {
  FooterGroup?: InputMaybe<FooterGroupUpdateWithNestedWhereUniqueInput>;
};

export type ExternalLinkParentUpsertWithNestedWhereUniqueInput = {
  FooterGroup?: InputMaybe<FooterGroupUpsertWithNestedWhereUniqueInput>;
};

export type ExternalLinkParentWhereInput = {
  FooterGroup?: InputMaybe<FooterGroupWhereInput>;
};

export type ExternalLinkParentWhereUniqueInput = {
  FooterGroup?: InputMaybe<FooterGroupWhereUniqueInput>;
};

export type ExternalLinkUpdateInput = {
  href?: InputMaybe<Scalars['String']>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ExternalLinkUpdateManyInlineInput = {
  /** Create and connect multiple ExternalLink component instances */
  create?: InputMaybe<Array<ExternalLinkCreateWithPositionInput>>;
  /** Delete multiple ExternalLink documents */
  delete?: InputMaybe<Array<ExternalLinkWhereUniqueInput>>;
  /** Update multiple ExternalLink component instances */
  update?: InputMaybe<Array<ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ExternalLink component instances */
  upsert?: InputMaybe<Array<ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ExternalLinkUpdateManyInput = {
  href?: InputMaybe<Scalars['String']>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ExternalLinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ExternalLinkUpdateManyInput;
  /** Document search */
  where: ExternalLinkWhereInput;
};

export type ExternalLinkUpdateOneInlineInput = {
  /** Create and connect one ExternalLink document */
  create?: InputMaybe<ExternalLinkCreateInput>;
  /** Delete currently connected ExternalLink document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ExternalLink document */
  update?: InputMaybe<ExternalLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ExternalLink document */
  upsert?: InputMaybe<ExternalLinkUpsertWithNestedWhereUniqueInput>;
};

export type ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ExternalLinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ExternalLinkWhereUniqueInput;
};

export type ExternalLinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ExternalLinkUpdateInput;
  /** Unique document search */
  where: ExternalLinkWhereUniqueInput;
};

export type ExternalLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: ExternalLinkCreateInput;
  /** Update document if it exists */
  update: ExternalLinkUpdateInput;
};

export type ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ExternalLinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ExternalLinkWhereUniqueInput;
};

export type ExternalLinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ExternalLinkUpsertInput;
  /** Unique document search */
  where: ExternalLinkWhereUniqueInput;
};

/** Identifies documents */
export type ExternalLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  href_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  showIcon?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References ExternalLink record uniquely */
export type ExternalLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Feature = {
  __typename?: 'Feature';
  body: RichText;
  button?: Maybe<Button>;
  icon?: Maybe<Asset>;
  iconColor?: Maybe<ThemeColor>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
};


export type FeatureButtonArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FeatureIconArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type FeatureConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FeatureWhereUniqueInput;
};

/** A connection to a list of items. */
export type FeatureConnection = {
  __typename?: 'FeatureConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FeatureEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FeatureCreateInput = {
  body: Scalars['RichTextAST'];
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  icon?: InputMaybe<AssetCreateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
  title: Scalars['String'];
};

export type FeatureCreateManyInlineInput = {
  /** Create and connect multiple existing Feature documents */
  create?: InputMaybe<Array<FeatureCreateInput>>;
};

export type FeatureCreateOneInlineInput = {
  /** Create and connect one Feature document */
  create?: InputMaybe<FeatureCreateInput>;
};

export type FeatureCreateWithPositionInput = {
  /** Document to create */
  data: FeatureCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FeatureEdge = {
  __typename?: 'FeatureEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Feature;
};

/** Identifies documents */
export type FeatureManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FeatureWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum FeatureOrderByInput {
  IconColorAsc = 'iconColor_ASC',
  IconColorDesc = 'iconColor_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type FeatureParent = PageContent;

export type FeatureParentConnectInput = {
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type FeatureParentCreateInput = {
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type FeatureParentCreateManyInlineInput = {
  /** Connect multiple existing FeatureParent documents */
  connect?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Create and connect multiple existing FeatureParent documents */
  create?: InputMaybe<Array<FeatureParentCreateInput>>;
};

export type FeatureParentCreateOneInlineInput = {
  /** Connect one existing FeatureParent document */
  connect?: InputMaybe<FeatureParentWhereUniqueInput>;
  /** Create and connect one FeatureParent document */
  create?: InputMaybe<FeatureParentCreateInput>;
};

export type FeatureParentUpdateInput = {
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type FeatureParentUpdateManyInlineInput = {
  /** Connect multiple existing FeatureParent documents */
  connect?: InputMaybe<Array<FeatureParentConnectInput>>;
  /** Create and connect multiple FeatureParent documents */
  create?: InputMaybe<Array<FeatureParentCreateInput>>;
  /** Delete multiple FeatureParent documents */
  delete?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Disconnect multiple FeatureParent documents */
  disconnect?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FeatureParent documents */
  set?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Update multiple FeatureParent documents */
  update?: InputMaybe<Array<FeatureParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FeatureParent documents */
  upsert?: InputMaybe<Array<FeatureParentUpsertWithNestedWhereUniqueInput>>;
};

export type FeatureParentUpdateManyWithNestedWhereInput = {
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type FeatureParentUpdateOneInlineInput = {
  /** Connect existing FeatureParent document */
  connect?: InputMaybe<FeatureParentWhereUniqueInput>;
  /** Create and connect one FeatureParent document */
  create?: InputMaybe<FeatureParentCreateInput>;
  /** Delete currently connected FeatureParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FeatureParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FeatureParent document */
  update?: InputMaybe<FeatureParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FeatureParent document */
  upsert?: InputMaybe<FeatureParentUpsertWithNestedWhereUniqueInput>;
};

export type FeatureParentUpdateWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type FeatureParentUpsertWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type FeatureParentWhereInput = {
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type FeatureParentWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type FeatureUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  icon?: InputMaybe<AssetUpdateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
  title?: InputMaybe<Scalars['String']>;
};

export type FeatureUpdateManyInlineInput = {
  /** Create and connect multiple Feature component instances */
  create?: InputMaybe<Array<FeatureCreateWithPositionInput>>;
  /** Delete multiple Feature documents */
  delete?: InputMaybe<Array<FeatureWhereUniqueInput>>;
  /** Update multiple Feature component instances */
  update?: InputMaybe<Array<FeatureUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Feature component instances */
  upsert?: InputMaybe<Array<FeatureUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FeatureUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  iconColor?: InputMaybe<ThemeColor>;
  title?: InputMaybe<Scalars['String']>;
};

export type FeatureUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FeatureUpdateManyInput;
  /** Document search */
  where: FeatureWhereInput;
};

export type FeatureUpdateOneInlineInput = {
  /** Create and connect one Feature document */
  create?: InputMaybe<FeatureCreateInput>;
  /** Delete currently connected Feature document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Feature document */
  update?: InputMaybe<FeatureUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Feature document */
  upsert?: InputMaybe<FeatureUpsertWithNestedWhereUniqueInput>;
};

export type FeatureUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FeatureUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FeatureWhereUniqueInput;
};

export type FeatureUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FeatureUpdateInput;
  /** Unique document search */
  where: FeatureWhereUniqueInput;
};

export type FeatureUpsertInput = {
  /** Create document if it didn't exist */
  create: FeatureCreateInput;
  /** Update document if it exists */
  update: FeatureUpdateInput;
};

export type FeatureUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FeatureUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FeatureWhereUniqueInput;
};

export type FeatureUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FeatureUpsertInput;
  /** Unique document search */
  where: FeatureWhereUniqueInput;
};

/** Identifies documents */
export type FeatureWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FeatureWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Feature record uniquely */
export type FeatureWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FooterGroup = Node & {
  __typename?: 'FooterGroup';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  docsGroup: Array<DocsGroup>;
  /** Get the document in other stages */
  documentInStages: Array<FooterGroup>;
  externalLinks: Array<ExternalLink>;
  /** List of FooterGroup versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageContents: Array<PageContent>;
  pages: Array<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  row: Scalars['Int'];
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type FooterGroupCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterGroupDocsGroupArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type FooterGroupDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type FooterGroupExternalLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ExternalLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalLinkWhereInput>;
};


export type FooterGroupHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type FooterGroupPageContentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageContentWhereInput>;
};


export type FooterGroupPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageWhereInput>;
};


export type FooterGroupPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterGroupScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FooterGroupUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type FooterGroupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FooterGroupWhereUniqueInput;
};

/** A connection to a list of items. */
export type FooterGroupConnection = {
  __typename?: 'FooterGroupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FooterGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FooterGroupCreateInput = {
  cl947tb614s4f01tc1n8o21jf?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  docsGroup?: InputMaybe<DocsGroupCreateManyInlineInput>;
  externalLinks?: InputMaybe<ExternalLinkCreateManyInlineInput>;
  pageContents?: InputMaybe<PageContentCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  row: Scalars['Int'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type FooterGroupCreateManyInlineInput = {
  /** Connect multiple existing FooterGroup documents */
  connect?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Create and connect multiple existing FooterGroup documents */
  create?: InputMaybe<Array<FooterGroupCreateInput>>;
};

export type FooterGroupCreateOneInlineInput = {
  /** Connect one existing FooterGroup document */
  connect?: InputMaybe<FooterGroupWhereUniqueInput>;
  /** Create and connect one FooterGroup document */
  create?: InputMaybe<FooterGroupCreateInput>;
};

/** An edge in a connection. */
export type FooterGroupEdge = {
  __typename?: 'FooterGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FooterGroup;
};

/** Identifies documents */
export type FooterGroupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsGroup_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<FooterGroupWhereStageInput>;
  externalLinks_every?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_none?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_some?: InputMaybe<ExternalLinkWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  row?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  row_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  row_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  row_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  row_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  row_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  row_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  row_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum FooterGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  RowAsc = 'row_ASC',
  RowDesc = 'row_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type FooterGroupUpdateInput = {
  cl947tb614s4f01tc1n8o21jf?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  docsGroup?: InputMaybe<DocsGroupUpdateManyInlineInput>;
  externalLinks?: InputMaybe<ExternalLinkUpdateManyInlineInput>;
  pageContents?: InputMaybe<PageContentUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  row?: InputMaybe<Scalars['Int']>;
  title?: InputMaybe<Scalars['String']>;
};

export type FooterGroupUpdateManyInlineInput = {
  /** Connect multiple existing FooterGroup documents */
  connect?: InputMaybe<Array<FooterGroupConnectInput>>;
  /** Create and connect multiple FooterGroup documents */
  create?: InputMaybe<Array<FooterGroupCreateInput>>;
  /** Delete multiple FooterGroup documents */
  delete?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Disconnect multiple FooterGroup documents */
  disconnect?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FooterGroup documents */
  set?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Update multiple FooterGroup documents */
  update?: InputMaybe<Array<FooterGroupUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FooterGroup documents */
  upsert?: InputMaybe<Array<FooterGroupUpsertWithNestedWhereUniqueInput>>;
};

export type FooterGroupUpdateManyInput = {
  row?: InputMaybe<Scalars['Int']>;
  title?: InputMaybe<Scalars['String']>;
};

export type FooterGroupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FooterGroupUpdateManyInput;
  /** Document search */
  where: FooterGroupWhereInput;
};

export type FooterGroupUpdateOneInlineInput = {
  /** Connect existing FooterGroup document */
  connect?: InputMaybe<FooterGroupWhereUniqueInput>;
  /** Create and connect one FooterGroup document */
  create?: InputMaybe<FooterGroupCreateInput>;
  /** Delete currently connected FooterGroup document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FooterGroup document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FooterGroup document */
  update?: InputMaybe<FooterGroupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FooterGroup document */
  upsert?: InputMaybe<FooterGroupUpsertWithNestedWhereUniqueInput>;
};

export type FooterGroupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FooterGroupUpdateInput;
  /** Unique document search */
  where: FooterGroupWhereUniqueInput;
};

export type FooterGroupUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterGroupCreateInput;
  /** Update document if it exists */
  update: FooterGroupUpdateInput;
};

export type FooterGroupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FooterGroupUpsertInput;
  /** Unique document search */
  where: FooterGroupWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FooterGroupWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type FooterGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsGroup_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<FooterGroupWhereStageInput>;
  externalLinks_every?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_none?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_some?: InputMaybe<ExternalLinkWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  row?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  row_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  row_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  row_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  row_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  row_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  row_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  row_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FooterGroupWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterGroupWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterGroupWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterGroupWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FooterGroupWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References FooterGroup record uniquely */
export type FooterGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Form = Node & {
  __typename?: 'Form';
  button: FormButton;
  colorScheme: ThemeColor;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Form>;
  fields: Array<FormfieldsUnion>;
  /** List of Form versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  pageContents: Array<PageContent>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type FormButtonArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FormCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FormDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type FormFieldsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type FormHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type FormPageContentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageContentWhereInput>;
};


export type FormPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FormScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FormUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export enum FormAction {
  Cancel = 'cancel',
  Submit = 'submit'
}

export type FormButton = {
  __typename?: 'FormButton';
  action?: Maybe<FormAction>;
  alert?: Maybe<Alert>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  text: Scalars['String'];
  variant?: Maybe<ButtonVariant>;
};


export type FormButtonAlertArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type FormButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormButtonConnection = {
  __typename?: 'FormButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormButtonCreateInput = {
  action?: InputMaybe<FormAction>;
  alert?: InputMaybe<AlertCreateOneInlineInput>;
  text: Scalars['String'];
  variant?: InputMaybe<ButtonVariant>;
};

export type FormButtonCreateManyInlineInput = {
  /** Create and connect multiple existing FormButton documents */
  create?: InputMaybe<Array<FormButtonCreateInput>>;
};

export type FormButtonCreateOneInlineInput = {
  /** Create and connect one FormButton document */
  create?: InputMaybe<FormButtonCreateInput>;
};

export type FormButtonCreateWithPositionInput = {
  /** Document to create */
  data: FormButtonCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormButtonEdge = {
  __typename?: 'FormButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FormButton;
};

/** Identifies documents */
export type FormButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  action?: InputMaybe<FormAction>;
  /** All values that are contained in given list. */
  action_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  /** All values that are not equal to given value. */
  action_not?: InputMaybe<FormAction>;
  /** All values that are not contained in given list. */
  action_not_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  alert?: InputMaybe<AlertWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

export enum FormButtonOrderByInput {
  ActionAsc = 'action_ASC',
  ActionDesc = 'action_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  VariantAsc = 'variant_ASC',
  VariantDesc = 'variant_DESC'
}

export type FormButtonParent = ContactForm | Form;

export type FormButtonParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type FormButtonParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type FormButtonParentCreateManyInlineInput = {
  /** Connect multiple existing FormButtonParent documents */
  connect?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormButtonParent documents */
  create?: InputMaybe<Array<FormButtonParentCreateInput>>;
};

export type FormButtonParentCreateOneInlineInput = {
  /** Connect one existing FormButtonParent document */
  connect?: InputMaybe<FormButtonParentWhereUniqueInput>;
  /** Create and connect one FormButtonParent document */
  create?: InputMaybe<FormButtonParentCreateInput>;
};

export type FormButtonParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type FormButtonParentUpdateManyInlineInput = {
  /** Connect multiple existing FormButtonParent documents */
  connect?: InputMaybe<Array<FormButtonParentConnectInput>>;
  /** Create and connect multiple FormButtonParent documents */
  create?: InputMaybe<Array<FormButtonParentCreateInput>>;
  /** Delete multiple FormButtonParent documents */
  delete?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Disconnect multiple FormButtonParent documents */
  disconnect?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormButtonParent documents */
  set?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Update multiple FormButtonParent documents */
  update?: InputMaybe<Array<FormButtonParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormButtonParent documents */
  upsert?: InputMaybe<Array<FormButtonParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormButtonParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type FormButtonParentUpdateOneInlineInput = {
  /** Connect existing FormButtonParent document */
  connect?: InputMaybe<FormButtonParentWhereUniqueInput>;
  /** Create and connect one FormButtonParent document */
  create?: InputMaybe<FormButtonParentCreateInput>;
  /** Delete currently connected FormButtonParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FormButtonParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormButtonParent document */
  update?: InputMaybe<FormButtonParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormButtonParent document */
  upsert?: InputMaybe<FormButtonParentUpsertWithNestedWhereUniqueInput>;
};

export type FormButtonParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type FormButtonParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormButtonParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type FormButtonParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type FormButtonUpdateInput = {
  action?: InputMaybe<FormAction>;
  alert?: InputMaybe<AlertUpdateOneInlineInput>;
  text?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type FormButtonUpdateManyInlineInput = {
  /** Create and connect multiple FormButton component instances */
  create?: InputMaybe<Array<FormButtonCreateWithPositionInput>>;
  /** Delete multiple FormButton documents */
  delete?: InputMaybe<Array<FormButtonWhereUniqueInput>>;
  /** Update multiple FormButton component instances */
  update?: InputMaybe<Array<FormButtonUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormButton component instances */
  upsert?: InputMaybe<Array<FormButtonUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormButtonUpdateManyInput = {
  action?: InputMaybe<FormAction>;
  text?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type FormButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormButtonUpdateManyInput;
  /** Document search */
  where: FormButtonWhereInput;
};

export type FormButtonUpdateOneInlineInput = {
  /** Create and connect one FormButton document */
  create?: InputMaybe<FormButtonCreateInput>;
  /** Delete currently connected FormButton document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormButton document */
  update?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormButton document */
  upsert?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueInput>;
};

export type FormButtonUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormButtonUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormButtonWhereUniqueInput;
};

export type FormButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormButtonUpdateInput;
  /** Unique document search */
  where: FormButtonWhereUniqueInput;
};

export type FormButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: FormButtonCreateInput;
  /** Update document if it exists */
  update: FormButtonUpdateInput;
};

export type FormButtonUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormButtonUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormButtonWhereUniqueInput;
};

export type FormButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormButtonUpsertInput;
  /** Unique document search */
  where: FormButtonWhereUniqueInput;
};

/** Identifies documents */
export type FormButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  action?: InputMaybe<FormAction>;
  /** All values that are contained in given list. */
  action_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  /** All values that are not equal to given value. */
  action_not?: InputMaybe<FormAction>;
  /** All values that are not contained in given list. */
  action_not_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  alert?: InputMaybe<AlertWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  text?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  text_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

/** References FormButton record uniquely */
export type FormButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FormConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormConnection = {
  __typename?: 'FormConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormCreateInput = {
  button: FormButtonCreateOneInlineInput;
  cl8zdv0ti0vqy01ur1gjnag6u?: InputMaybe<ConfigurationCreateManyInlineInput>;
  cla898hk70e1001um8ipj0mui?: InputMaybe<CalloutCreateManyInlineInput>;
  colorScheme: ThemeColor;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fields?: InputMaybe<FormfieldsUnionCreateManyInlineInput>;
  name: Scalars['String'];
  pageContents?: InputMaybe<PageContentCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type FormCreateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Create and connect multiple existing Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
};

export type FormCreateOneInlineInput = {
  /** Connect one existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
};

/** An edge in a connection. */
export type FormEdge = {
  __typename?: 'FormEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Form;
};

/** Identifies documents */
export type FormManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<FormButtonWhereInput>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum FormOrderByInput {
  ColorSchemeAsc = 'colorScheme_ASC',
  ColorSchemeDesc = 'colorScheme_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type FormUpdateInput = {
  button?: InputMaybe<FormButtonUpdateOneInlineInput>;
  cl8zdv0ti0vqy01ur1gjnag6u?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  cla898hk70e1001um8ipj0mui?: InputMaybe<CalloutUpdateManyInlineInput>;
  colorScheme?: InputMaybe<ThemeColor>;
  fields?: InputMaybe<FormfieldsUnionUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  pageContents?: InputMaybe<PageContentUpdateManyInlineInput>;
};

export type FormUpdateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormConnectInput>>;
  /** Create and connect multiple Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
  /** Delete multiple Form documents */
  delete?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Disconnect multiple Form documents */
  disconnect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Form documents */
  set?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Update multiple Form documents */
  update?: InputMaybe<Array<FormUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Form documents */
  upsert?: InputMaybe<Array<FormUpsertWithNestedWhereUniqueInput>>;
};

export type FormUpdateManyInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  name?: InputMaybe<Scalars['String']>;
};

export type FormUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormUpdateManyInput;
  /** Document search */
  where: FormWhereInput;
};

export type FormUpdateOneInlineInput = {
  /** Connect existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
  /** Delete currently connected Form document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Form document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Form document */
  update?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Form document */
  upsert?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormUpdateInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

export type FormUpsertInput = {
  /** Create document if it didn't exist */
  create: FormCreateInput;
  /** Update document if it exists */
  update: FormUpdateInput;
};

export type FormUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormUpsertInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FormWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type FormWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<FormButtonWhereInput>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** All values that are not equal to given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FormWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FormWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Form record uniquely */
export type FormWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FormfieldsUnion = CheckboxField | SelectField | TextAreaField | TextInputField;

export type FormfieldsUnionConnectInput = {
  CheckboxField?: InputMaybe<CheckboxFieldConnectInput>;
  SelectField?: InputMaybe<SelectFieldConnectInput>;
  TextAreaField?: InputMaybe<TextAreaFieldConnectInput>;
  TextInputField?: InputMaybe<TextInputFieldConnectInput>;
};

export type FormfieldsUnionCreateInput = {
  CheckboxField?: InputMaybe<CheckboxFieldCreateInput>;
  SelectField?: InputMaybe<SelectFieldCreateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateInput>;
};

export type FormfieldsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing FormfieldsUnion documents */
  create?: InputMaybe<Array<FormfieldsUnionCreateInput>>;
};

export type FormfieldsUnionCreateOneInlineInput = {
  /** Create and connect one FormfieldsUnion document */
  create?: InputMaybe<FormfieldsUnionCreateInput>;
};

export type FormfieldsUnionCreateWithPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldCreateWithPositionInput>;
  SelectField?: InputMaybe<SelectFieldCreateWithPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateWithPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateWithPositionInput>;
};

export type FormfieldsUnionUpdateInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateInput>;
  SelectField?: InputMaybe<SelectFieldUpdateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateInput>;
};

export type FormfieldsUnionUpdateManyInlineInput = {
  /** Create and connect multiple FormfieldsUnion component instances */
  create?: InputMaybe<Array<FormfieldsUnionCreateWithPositionInput>>;
  /** Delete multiple FormfieldsUnion documents */
  delete?: InputMaybe<Array<FormfieldsUnionWhereUniqueInput>>;
  /** Update multiple FormfieldsUnion component instances */
  update?: InputMaybe<Array<FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormfieldsUnion component instances */
  upsert?: InputMaybe<Array<FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormfieldsUnionUpdateManyWithNestedWhereInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateManyWithNestedWhereInput>;
  SelectField?: InputMaybe<SelectFieldUpdateManyWithNestedWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateManyWithNestedWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateManyWithNestedWhereInput>;
};

export type FormfieldsUnionUpdateOneInlineInput = {
  /** Create and connect one FormfieldsUnion document */
  create?: InputMaybe<FormfieldsUnionCreateInput>;
  /** Delete currently connected FormfieldsUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FormfieldsUnion document */
  update?: InputMaybe<FormfieldsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormfieldsUnion document */
  upsert?: InputMaybe<FormfieldsUnionUpsertWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type FormfieldsUnionUpdateWithNestedWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type FormfieldsUnionUpsertWithNestedWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionWhereInput = {
  CheckboxField?: InputMaybe<CheckboxFieldWhereInput>;
  SelectField?: InputMaybe<SelectFieldWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereInput>;
};

export type FormfieldsUnionWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereUniqueInput>;
};

export type HomePage = Node & {
  __typename?: 'HomePage';
  blocks: Array<HomePageBlock>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<HomePage>;
  /** List of HomePage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  mainVideo: Asset;
  name: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type HomePageBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HomePageBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HomePageBlockWhereInput>;
};


export type HomePageCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type HomePageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type HomePageMainVideoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePagePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type HomePageUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type HomePageBlock = {
  __typename?: 'HomePageBlock';
  body: RichText;
  button?: Maybe<Button>;
  /** The unique identifier */
  id: Scalars['ID'];
  image: Asset;
  /** System stage field */
  stage: Stage;
  subtitle: Scalars['String'];
  title: Scalars['String'];
};


export type HomePageBlockButtonArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePageBlockImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type HomePageBlockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HomePageBlockWhereUniqueInput;
};

/** A connection to a list of items. */
export type HomePageBlockConnection = {
  __typename?: 'HomePageBlockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HomePageBlockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HomePageBlockCreateInput = {
  body: Scalars['RichTextAST'];
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  image: AssetCreateOneInlineInput;
  subtitle: Scalars['String'];
  title: Scalars['String'];
};

export type HomePageBlockCreateManyInlineInput = {
  /** Create and connect multiple existing HomePageBlock documents */
  create?: InputMaybe<Array<HomePageBlockCreateInput>>;
};

export type HomePageBlockCreateOneInlineInput = {
  /** Create and connect one HomePageBlock document */
  create?: InputMaybe<HomePageBlockCreateInput>;
};

export type HomePageBlockCreateWithPositionInput = {
  /** Document to create */
  data: HomePageBlockCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type HomePageBlockEdge = {
  __typename?: 'HomePageBlockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: HomePageBlock;
};

/** Identifies documents */
export type HomePageBlockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum HomePageBlockOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type HomePageBlockParent = HomePage;

export type HomePageBlockParentConnectInput = {
  HomePage?: InputMaybe<HomePageConnectInput>;
};

export type HomePageBlockParentCreateInput = {
  HomePage?: InputMaybe<HomePageCreateInput>;
};

export type HomePageBlockParentCreateManyInlineInput = {
  /** Connect multiple existing HomePageBlockParent documents */
  connect?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Create and connect multiple existing HomePageBlockParent documents */
  create?: InputMaybe<Array<HomePageBlockParentCreateInput>>;
};

export type HomePageBlockParentCreateOneInlineInput = {
  /** Connect one existing HomePageBlockParent document */
  connect?: InputMaybe<HomePageBlockParentWhereUniqueInput>;
  /** Create and connect one HomePageBlockParent document */
  create?: InputMaybe<HomePageBlockParentCreateInput>;
};

export type HomePageBlockParentUpdateInput = {
  HomePage?: InputMaybe<HomePageUpdateInput>;
};

export type HomePageBlockParentUpdateManyInlineInput = {
  /** Connect multiple existing HomePageBlockParent documents */
  connect?: InputMaybe<Array<HomePageBlockParentConnectInput>>;
  /** Create and connect multiple HomePageBlockParent documents */
  create?: InputMaybe<Array<HomePageBlockParentCreateInput>>;
  /** Delete multiple HomePageBlockParent documents */
  delete?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Disconnect multiple HomePageBlockParent documents */
  disconnect?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing HomePageBlockParent documents */
  set?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Update multiple HomePageBlockParent documents */
  update?: InputMaybe<Array<HomePageBlockParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple HomePageBlockParent documents */
  upsert?: InputMaybe<Array<HomePageBlockParentUpsertWithNestedWhereUniqueInput>>;
};

export type HomePageBlockParentUpdateManyWithNestedWhereInput = {
  HomePage?: InputMaybe<HomePageUpdateManyWithNestedWhereInput>;
};

export type HomePageBlockParentUpdateOneInlineInput = {
  /** Connect existing HomePageBlockParent document */
  connect?: InputMaybe<HomePageBlockParentWhereUniqueInput>;
  /** Create and connect one HomePageBlockParent document */
  create?: InputMaybe<HomePageBlockParentCreateInput>;
  /** Delete currently connected HomePageBlockParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected HomePageBlockParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single HomePageBlockParent document */
  update?: InputMaybe<HomePageBlockParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HomePageBlockParent document */
  upsert?: InputMaybe<HomePageBlockParentUpsertWithNestedWhereUniqueInput>;
};

export type HomePageBlockParentUpdateWithNestedWhereUniqueInput = {
  HomePage?: InputMaybe<HomePageUpdateWithNestedWhereUniqueInput>;
};

export type HomePageBlockParentUpsertWithNestedWhereUniqueInput = {
  HomePage?: InputMaybe<HomePageUpsertWithNestedWhereUniqueInput>;
};

export type HomePageBlockParentWhereInput = {
  HomePage?: InputMaybe<HomePageWhereInput>;
};

export type HomePageBlockParentWhereUniqueInput = {
  HomePage?: InputMaybe<HomePageWhereUniqueInput>;
};

export type HomePageBlockUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type HomePageBlockUpdateManyInlineInput = {
  /** Create and connect multiple HomePageBlock component instances */
  create?: InputMaybe<Array<HomePageBlockCreateWithPositionInput>>;
  /** Delete multiple HomePageBlock documents */
  delete?: InputMaybe<Array<HomePageBlockWhereUniqueInput>>;
  /** Update multiple HomePageBlock component instances */
  update?: InputMaybe<Array<HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple HomePageBlock component instances */
  upsert?: InputMaybe<Array<HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type HomePageBlockUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type HomePageBlockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HomePageBlockUpdateManyInput;
  /** Document search */
  where: HomePageBlockWhereInput;
};

export type HomePageBlockUpdateOneInlineInput = {
  /** Create and connect one HomePageBlock document */
  create?: InputMaybe<HomePageBlockCreateInput>;
  /** Delete currently connected HomePageBlock document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single HomePageBlock document */
  update?: InputMaybe<HomePageBlockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HomePageBlock document */
  upsert?: InputMaybe<HomePageBlockUpsertWithNestedWhereUniqueInput>;
};

export type HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<HomePageBlockUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HomePageBlockWhereUniqueInput;
};

export type HomePageBlockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HomePageBlockUpdateInput;
  /** Unique document search */
  where: HomePageBlockWhereUniqueInput;
};

export type HomePageBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: HomePageBlockCreateInput;
  /** Update document if it exists */
  update: HomePageBlockUpdateInput;
};

export type HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<HomePageBlockUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HomePageBlockWhereUniqueInput;
};

export type HomePageBlockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HomePageBlockUpsertInput;
  /** Unique document search */
  where: HomePageBlockWhereUniqueInput;
};

/** Identifies documents */
export type HomePageBlockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References HomePageBlock record uniquely */
export type HomePageBlockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type HomePageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HomePageWhereUniqueInput;
};

/** A connection to a list of items. */
export type HomePageConnection = {
  __typename?: 'HomePageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HomePageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HomePageCreateInput = {
  blocks?: InputMaybe<HomePageBlockCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  mainVideo: AssetCreateOneInlineInput;
  name: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type HomePageCreateManyInlineInput = {
  /** Connect multiple existing HomePage documents */
  connect?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Create and connect multiple existing HomePage documents */
  create?: InputMaybe<Array<HomePageCreateInput>>;
};

export type HomePageCreateOneInlineInput = {
  /** Connect one existing HomePage document */
  connect?: InputMaybe<HomePageWhereUniqueInput>;
  /** Create and connect one HomePage document */
  create?: InputMaybe<HomePageCreateInput>;
};

/** An edge in a connection. */
export type HomePageEdge = {
  __typename?: 'HomePageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: HomePage;
};

/** Identifies documents */
export type HomePageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  blocks_every?: InputMaybe<HomePageBlockWhereInput>;
  blocks_none?: InputMaybe<HomePageBlockWhereInput>;
  blocks_some?: InputMaybe<HomePageBlockWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_none?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_some?: InputMaybe<HomePageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mainVideo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum HomePageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type HomePageUpdateInput = {
  blocks?: InputMaybe<HomePageBlockUpdateManyInlineInput>;
  mainVideo?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
};

export type HomePageUpdateManyInlineInput = {
  /** Connect multiple existing HomePage documents */
  connect?: InputMaybe<Array<HomePageConnectInput>>;
  /** Create and connect multiple HomePage documents */
  create?: InputMaybe<Array<HomePageCreateInput>>;
  /** Delete multiple HomePage documents */
  delete?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Disconnect multiple HomePage documents */
  disconnect?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing HomePage documents */
  set?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Update multiple HomePage documents */
  update?: InputMaybe<Array<HomePageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple HomePage documents */
  upsert?: InputMaybe<Array<HomePageUpsertWithNestedWhereUniqueInput>>;
};

export type HomePageUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type HomePageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HomePageUpdateManyInput;
  /** Document search */
  where: HomePageWhereInput;
};

export type HomePageUpdateOneInlineInput = {
  /** Connect existing HomePage document */
  connect?: InputMaybe<HomePageWhereUniqueInput>;
  /** Create and connect one HomePage document */
  create?: InputMaybe<HomePageCreateInput>;
  /** Delete currently connected HomePage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected HomePage document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single HomePage document */
  update?: InputMaybe<HomePageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HomePage document */
  upsert?: InputMaybe<HomePageUpsertWithNestedWhereUniqueInput>;
};

export type HomePageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HomePageUpdateInput;
  /** Unique document search */
  where: HomePageWhereUniqueInput;
};

export type HomePageUpsertInput = {
  /** Create document if it didn't exist */
  create: HomePageCreateInput;
  /** Update document if it exists */
  update: HomePageUpdateInput;
};

export type HomePageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HomePageUpsertInput;
  /** Unique document search */
  where: HomePageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type HomePageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type HomePageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  blocks_every?: InputMaybe<HomePageBlockWhereInput>;
  blocks_none?: InputMaybe<HomePageBlockWhereInput>;
  blocks_some?: InputMaybe<HomePageBlockWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_none?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_some?: InputMaybe<HomePageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mainVideo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type HomePageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<HomePageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References HomePage record uniquely */
export type HomePageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type Icon = {
  __typename?: 'Icon';
  /** React-Icons Family Name. See: https://react-icons.github.io/react-icons/ */
  family: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  /** System stage field */
  stage: Stage;
};

export type IconConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: IconWhereUniqueInput;
};

/** A connection to a list of items. */
export type IconConnection = {
  __typename?: 'IconConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<IconEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type IconCreateInput = {
  family: Scalars['String'];
  name: Scalars['String'];
};

export type IconCreateManyInlineInput = {
  /** Create and connect multiple existing Icon documents */
  create?: InputMaybe<Array<IconCreateInput>>;
};

export type IconCreateOneInlineInput = {
  /** Create and connect one Icon document */
  create?: InputMaybe<IconCreateInput>;
};

export type IconCreateWithPositionInput = {
  /** Document to create */
  data: IconCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type IconEdge = {
  __typename?: 'IconEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Icon;
};

/** Identifies documents */
export type IconManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<IconWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<IconWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<IconWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  family?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  family_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  family_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  family_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  family_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  family_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  family_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  family_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  family_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  family_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
};

export enum IconOrderByInput {
  FamilyAsc = 'family_ASC',
  FamilyDesc = 'family_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC'
}

export type IconParent = ContactForm;

export type IconParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
};

export type IconParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
};

export type IconParentCreateManyInlineInput = {
  /** Connect multiple existing IconParent documents */
  connect?: InputMaybe<Array<IconParentWhereUniqueInput>>;
  /** Create and connect multiple existing IconParent documents */
  create?: InputMaybe<Array<IconParentCreateInput>>;
};

export type IconParentCreateOneInlineInput = {
  /** Connect one existing IconParent document */
  connect?: InputMaybe<IconParentWhereUniqueInput>;
  /** Create and connect one IconParent document */
  create?: InputMaybe<IconParentCreateInput>;
};

export type IconParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
};

export type IconParentUpdateManyInlineInput = {
  /** Connect multiple existing IconParent documents */
  connect?: InputMaybe<Array<IconParentConnectInput>>;
  /** Create and connect multiple IconParent documents */
  create?: InputMaybe<Array<IconParentCreateInput>>;
  /** Delete multiple IconParent documents */
  delete?: InputMaybe<Array<IconParentWhereUniqueInput>>;
  /** Disconnect multiple IconParent documents */
  disconnect?: InputMaybe<Array<IconParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing IconParent documents */
  set?: InputMaybe<Array<IconParentWhereUniqueInput>>;
  /** Update multiple IconParent documents */
  update?: InputMaybe<Array<IconParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple IconParent documents */
  upsert?: InputMaybe<Array<IconParentUpsertWithNestedWhereUniqueInput>>;
};

export type IconParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
};

export type IconParentUpdateOneInlineInput = {
  /** Connect existing IconParent document */
  connect?: InputMaybe<IconParentWhereUniqueInput>;
  /** Create and connect one IconParent document */
  create?: InputMaybe<IconParentCreateInput>;
  /** Delete currently connected IconParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected IconParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single IconParent document */
  update?: InputMaybe<IconParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single IconParent document */
  upsert?: InputMaybe<IconParentUpsertWithNestedWhereUniqueInput>;
};

export type IconParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
};

export type IconParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
};

export type IconParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
};

export type IconParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
};

export type IconUpdateInput = {
  family?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type IconUpdateManyInlineInput = {
  /** Create and connect multiple Icon component instances */
  create?: InputMaybe<Array<IconCreateWithPositionInput>>;
  /** Delete multiple Icon documents */
  delete?: InputMaybe<Array<IconWhereUniqueInput>>;
  /** Update multiple Icon component instances */
  update?: InputMaybe<Array<IconUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Icon component instances */
  upsert?: InputMaybe<Array<IconUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type IconUpdateManyInput = {
  family?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type IconUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: IconUpdateManyInput;
  /** Document search */
  where: IconWhereInput;
};

export type IconUpdateOneInlineInput = {
  /** Create and connect one Icon document */
  create?: InputMaybe<IconCreateInput>;
  /** Delete currently connected Icon document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Icon document */
  update?: InputMaybe<IconUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Icon document */
  upsert?: InputMaybe<IconUpsertWithNestedWhereUniqueInput>;
};

export type IconUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<IconUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: IconWhereUniqueInput;
};

export type IconUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: IconUpdateInput;
  /** Unique document search */
  where: IconWhereUniqueInput;
};

export type IconUpsertInput = {
  /** Create document if it didn't exist */
  create: IconCreateInput;
  /** Update document if it exists */
  update: IconUpdateInput;
};

export type IconUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<IconUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: IconWhereUniqueInput;
};

export type IconUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: IconUpsertInput;
  /** Unique document search */
  where: IconWhereUniqueInput;
};

/** Identifies documents */
export type IconWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<IconWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<IconWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<IconWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  family?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  family_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  family_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  family_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  family_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  family_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  family_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  family_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  family_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  family_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Icon record uniquely */
export type IconWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

/** Locale system enumeration */
export enum Locale {
  /** System locale */
  En = 'en'
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location';
  distance: Scalars['Float'];
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create one admonition */
  createAdmonition?: Maybe<Admonition>;
  /**
   * Create one asset
   * @deprecated Asset mutations will be overhauled soon
   */
  createAsset?: Maybe<Asset>;
  /** Create one cloudLocation */
  createCloudLocation?: Maybe<CloudLocation>;
  /** Create one configuration */
  createConfiguration?: Maybe<Configuration>;
  /** Create one contactForm */
  createContactForm?: Maybe<ContactForm>;
  /** Create one contentButton */
  createContentButton?: Maybe<ContentButton>;
  /** Create one docsGroup */
  createDocsGroup?: Maybe<DocsGroup>;
  /** Create one docsPage */
  createDocsPage?: Maybe<DocsPage>;
  /** Create one employee */
  createEmployee?: Maybe<Employee>;
  /** Create one footerGroup */
  createFooterGroup?: Maybe<FooterGroup>;
  /** Create one form */
  createForm?: Maybe<Form>;
  /** Create one homePage */
  createHomePage?: Maybe<HomePage>;
  /** Create one page */
  createPage?: Maybe<Page>;
  /** Create one pageContent */
  createPageContent?: Maybe<PageContent>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<ScheduledRelease>;
  /** Create one testimonial */
  createTestimonial?: Maybe<Testimonial>;
  /** Create one theme */
  createTheme?: Maybe<Theme>;
  /** Delete one admonition from _all_ existing stages. Returns deleted document. */
  deleteAdmonition?: Maybe<Admonition>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Asset>;
  /** Delete one cloudLocation from _all_ existing stages. Returns deleted document. */
  deleteCloudLocation?: Maybe<CloudLocation>;
  /** Delete one configuration from _all_ existing stages. Returns deleted document. */
  deleteConfiguration?: Maybe<Configuration>;
  /** Delete one contactForm from _all_ existing stages. Returns deleted document. */
  deleteContactForm?: Maybe<ContactForm>;
  /** Delete one contentButton from _all_ existing stages. Returns deleted document. */
  deleteContentButton?: Maybe<ContentButton>;
  /** Delete one docsGroup from _all_ existing stages. Returns deleted document. */
  deleteDocsGroup?: Maybe<DocsGroup>;
  /** Delete one docsPage from _all_ existing stages. Returns deleted document. */
  deleteDocsPage?: Maybe<DocsPage>;
  /** Delete one employee from _all_ existing stages. Returns deleted document. */
  deleteEmployee?: Maybe<Employee>;
  /** Delete one footerGroup from _all_ existing stages. Returns deleted document. */
  deleteFooterGroup?: Maybe<FooterGroup>;
  /** Delete one form from _all_ existing stages. Returns deleted document. */
  deleteForm?: Maybe<Form>;
  /** Delete one homePage from _all_ existing stages. Returns deleted document. */
  deleteHomePage?: Maybe<HomePage>;
  /**
   * Delete many Admonition documents
   * @deprecated Please use the new paginated many mutation (deleteManyAdmonitionsConnection)
   */
  deleteManyAdmonitions: BatchPayload;
  /** Delete many Admonition documents, return deleted documents */
  deleteManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many CloudLocation documents
   * @deprecated Please use the new paginated many mutation (deleteManyCloudLocationsConnection)
   */
  deleteManyCloudLocations: BatchPayload;
  /** Delete many CloudLocation documents, return deleted documents */
  deleteManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Delete many Configuration documents
   * @deprecated Please use the new paginated many mutation (deleteManyConfigurationsConnection)
   */
  deleteManyConfigurations: BatchPayload;
  /** Delete many Configuration documents, return deleted documents */
  deleteManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Delete many ContactForm documents
   * @deprecated Please use the new paginated many mutation (deleteManyContactFormsConnection)
   */
  deleteManyContactForms: BatchPayload;
  /** Delete many ContactForm documents, return deleted documents */
  deleteManyContactFormsConnection: ContactFormConnection;
  /**
   * Delete many ContentButton documents
   * @deprecated Please use the new paginated many mutation (deleteManyContentButtonsConnection)
   */
  deleteManyContentButtons: BatchPayload;
  /** Delete many ContentButton documents, return deleted documents */
  deleteManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Delete many DocsGroup documents
   * @deprecated Please use the new paginated many mutation (deleteManyDocsGroupsConnection)
   */
  deleteManyDocsGroups: BatchPayload;
  /** Delete many DocsGroup documents, return deleted documents */
  deleteManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Delete many DocsPage documents
   * @deprecated Please use the new paginated many mutation (deleteManyDocsPagesConnection)
   */
  deleteManyDocsPages: BatchPayload;
  /** Delete many DocsPage documents, return deleted documents */
  deleteManyDocsPagesConnection: DocsPageConnection;
  /**
   * Delete many Employee documents
   * @deprecated Please use the new paginated many mutation (deleteManyEmployeesConnection)
   */
  deleteManyEmployees: BatchPayload;
  /** Delete many Employee documents, return deleted documents */
  deleteManyEmployeesConnection: EmployeeConnection;
  /**
   * Delete many FooterGroup documents
   * @deprecated Please use the new paginated many mutation (deleteManyFooterGroupsConnection)
   */
  deleteManyFooterGroups: BatchPayload;
  /** Delete many FooterGroup documents, return deleted documents */
  deleteManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Delete many Form documents
   * @deprecated Please use the new paginated many mutation (deleteManyFormsConnection)
   */
  deleteManyForms: BatchPayload;
  /** Delete many Form documents, return deleted documents */
  deleteManyFormsConnection: FormConnection;
  /**
   * Delete many HomePage documents
   * @deprecated Please use the new paginated many mutation (deleteManyHomePagesConnection)
   */
  deleteManyHomePages: BatchPayload;
  /** Delete many HomePage documents, return deleted documents */
  deleteManyHomePagesConnection: HomePageConnection;
  /**
   * Delete many PageContent documents
   * @deprecated Please use the new paginated many mutation (deleteManyPageContentsConnection)
   */
  deleteManyPageContents: BatchPayload;
  /** Delete many PageContent documents, return deleted documents */
  deleteManyPageContentsConnection: PageContentConnection;
  /**
   * Delete many Page documents
   * @deprecated Please use the new paginated many mutation (deleteManyPagesConnection)
   */
  deleteManyPages: BatchPayload;
  /** Delete many Page documents, return deleted documents */
  deleteManyPagesConnection: PageConnection;
  /**
   * Delete many Testimonial documents
   * @deprecated Please use the new paginated many mutation (deleteManyTestimonialsConnection)
   */
  deleteManyTestimonials: BatchPayload;
  /** Delete many Testimonial documents, return deleted documents */
  deleteManyTestimonialsConnection: TestimonialConnection;
  /**
   * Delete many Theme documents
   * @deprecated Please use the new paginated many mutation (deleteManyThemesConnection)
   */
  deleteManyThemes: BatchPayload;
  /** Delete many Theme documents, return deleted documents */
  deleteManyThemesConnection: ThemeConnection;
  /** Delete one page from _all_ existing stages. Returns deleted document. */
  deletePage?: Maybe<Page>;
  /** Delete one pageContent from _all_ existing stages. Returns deleted document. */
  deletePageContent?: Maybe<PageContent>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<ScheduledRelease>;
  /** Delete one testimonial from _all_ existing stages. Returns deleted document. */
  deleteTestimonial?: Maybe<Testimonial>;
  /** Delete one theme from _all_ existing stages. Returns deleted document. */
  deleteTheme?: Maybe<Theme>;
  /** Publish one admonition */
  publishAdmonition?: Maybe<Admonition>;
  /** Publish one asset */
  publishAsset?: Maybe<Asset>;
  /** Publish one cloudLocation */
  publishCloudLocation?: Maybe<CloudLocation>;
  /** Publish one configuration */
  publishConfiguration?: Maybe<Configuration>;
  /** Publish one contactForm */
  publishContactForm?: Maybe<ContactForm>;
  /** Publish one contentButton */
  publishContentButton?: Maybe<ContentButton>;
  /** Publish one docsGroup */
  publishDocsGroup?: Maybe<DocsGroup>;
  /** Publish one docsPage */
  publishDocsPage?: Maybe<DocsPage>;
  /** Publish one employee */
  publishEmployee?: Maybe<Employee>;
  /** Publish one footerGroup */
  publishFooterGroup?: Maybe<FooterGroup>;
  /** Publish one form */
  publishForm?: Maybe<Form>;
  /** Publish one homePage */
  publishHomePage?: Maybe<HomePage>;
  /**
   * Publish many Admonition documents
   * @deprecated Please use the new paginated many mutation (publishManyAdmonitionsConnection)
   */
  publishManyAdmonitions: BatchPayload;
  /** Publish many Admonition documents */
  publishManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many CloudLocation documents
   * @deprecated Please use the new paginated many mutation (publishManyCloudLocationsConnection)
   */
  publishManyCloudLocations: BatchPayload;
  /** Publish many CloudLocation documents */
  publishManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Publish many Configuration documents
   * @deprecated Please use the new paginated many mutation (publishManyConfigurationsConnection)
   */
  publishManyConfigurations: BatchPayload;
  /** Publish many Configuration documents */
  publishManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Publish many ContactForm documents
   * @deprecated Please use the new paginated many mutation (publishManyContactFormsConnection)
   */
  publishManyContactForms: BatchPayload;
  /** Publish many ContactForm documents */
  publishManyContactFormsConnection: ContactFormConnection;
  /**
   * Publish many ContentButton documents
   * @deprecated Please use the new paginated many mutation (publishManyContentButtonsConnection)
   */
  publishManyContentButtons: BatchPayload;
  /** Publish many ContentButton documents */
  publishManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Publish many DocsGroup documents
   * @deprecated Please use the new paginated many mutation (publishManyDocsGroupsConnection)
   */
  publishManyDocsGroups: BatchPayload;
  /** Publish many DocsGroup documents */
  publishManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Publish many DocsPage documents
   * @deprecated Please use the new paginated many mutation (publishManyDocsPagesConnection)
   */
  publishManyDocsPages: BatchPayload;
  /** Publish many DocsPage documents */
  publishManyDocsPagesConnection: DocsPageConnection;
  /**
   * Publish many Employee documents
   * @deprecated Please use the new paginated many mutation (publishManyEmployeesConnection)
   */
  publishManyEmployees: BatchPayload;
  /** Publish many Employee documents */
  publishManyEmployeesConnection: EmployeeConnection;
  /**
   * Publish many FooterGroup documents
   * @deprecated Please use the new paginated many mutation (publishManyFooterGroupsConnection)
   */
  publishManyFooterGroups: BatchPayload;
  /** Publish many FooterGroup documents */
  publishManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Publish many Form documents
   * @deprecated Please use the new paginated many mutation (publishManyFormsConnection)
   */
  publishManyForms: BatchPayload;
  /** Publish many Form documents */
  publishManyFormsConnection: FormConnection;
  /**
   * Publish many HomePage documents
   * @deprecated Please use the new paginated many mutation (publishManyHomePagesConnection)
   */
  publishManyHomePages: BatchPayload;
  /** Publish many HomePage documents */
  publishManyHomePagesConnection: HomePageConnection;
  /**
   * Publish many PageContent documents
   * @deprecated Please use the new paginated many mutation (publishManyPageContentsConnection)
   */
  publishManyPageContents: BatchPayload;
  /** Publish many PageContent documents */
  publishManyPageContentsConnection: PageContentConnection;
  /**
   * Publish many Page documents
   * @deprecated Please use the new paginated many mutation (publishManyPagesConnection)
   */
  publishManyPages: BatchPayload;
  /** Publish many Page documents */
  publishManyPagesConnection: PageConnection;
  /**
   * Publish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (publishManyTestimonialsConnection)
   */
  publishManyTestimonials: BatchPayload;
  /** Publish many Testimonial documents */
  publishManyTestimonialsConnection: TestimonialConnection;
  /**
   * Publish many Theme documents
   * @deprecated Please use the new paginated many mutation (publishManyThemesConnection)
   */
  publishManyThemes: BatchPayload;
  /** Publish many Theme documents */
  publishManyThemesConnection: ThemeConnection;
  /** Publish one page */
  publishPage?: Maybe<Page>;
  /** Publish one pageContent */
  publishPageContent?: Maybe<PageContent>;
  /** Publish one testimonial */
  publishTestimonial?: Maybe<Testimonial>;
  /** Publish one theme */
  publishTheme?: Maybe<Theme>;
  /** Schedule to publish one admonition */
  schedulePublishAdmonition?: Maybe<Admonition>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Asset>;
  /** Schedule to publish one cloudLocation */
  schedulePublishCloudLocation?: Maybe<CloudLocation>;
  /** Schedule to publish one configuration */
  schedulePublishConfiguration?: Maybe<Configuration>;
  /** Schedule to publish one contactForm */
  schedulePublishContactForm?: Maybe<ContactForm>;
  /** Schedule to publish one contentButton */
  schedulePublishContentButton?: Maybe<ContentButton>;
  /** Schedule to publish one docsGroup */
  schedulePublishDocsGroup?: Maybe<DocsGroup>;
  /** Schedule to publish one docsPage */
  schedulePublishDocsPage?: Maybe<DocsPage>;
  /** Schedule to publish one employee */
  schedulePublishEmployee?: Maybe<Employee>;
  /** Schedule to publish one footerGroup */
  schedulePublishFooterGroup?: Maybe<FooterGroup>;
  /** Schedule to publish one form */
  schedulePublishForm?: Maybe<Form>;
  /** Schedule to publish one homePage */
  schedulePublishHomePage?: Maybe<HomePage>;
  /** Schedule to publish one page */
  schedulePublishPage?: Maybe<Page>;
  /** Schedule to publish one pageContent */
  schedulePublishPageContent?: Maybe<PageContent>;
  /** Schedule to publish one testimonial */
  schedulePublishTestimonial?: Maybe<Testimonial>;
  /** Schedule to publish one theme */
  schedulePublishTheme?: Maybe<Theme>;
  /** Unpublish one admonition from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAdmonition?: Maybe<Admonition>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Asset>;
  /** Unpublish one cloudLocation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCloudLocation?: Maybe<CloudLocation>;
  /** Unpublish one configuration from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishConfiguration?: Maybe<Configuration>;
  /** Unpublish one contactForm from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishContactForm?: Maybe<ContactForm>;
  /** Unpublish one contentButton from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishContentButton?: Maybe<ContentButton>;
  /** Unpublish one docsGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishDocsGroup?: Maybe<DocsGroup>;
  /** Unpublish one docsPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishDocsPage?: Maybe<DocsPage>;
  /** Unpublish one employee from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishEmployee?: Maybe<Employee>;
  /** Unpublish one footerGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishFooterGroup?: Maybe<FooterGroup>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishForm?: Maybe<Form>;
  /** Unpublish one homePage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishHomePage?: Maybe<HomePage>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPage?: Maybe<Page>;
  /** Unpublish one pageContent from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPageContent?: Maybe<PageContent>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one theme from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishTheme?: Maybe<Theme>;
  /** Unpublish one admonition from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAdmonition?: Maybe<Admonition>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Asset>;
  /** Unpublish one cloudLocation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCloudLocation?: Maybe<CloudLocation>;
  /** Unpublish one configuration from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishConfiguration?: Maybe<Configuration>;
  /** Unpublish one contactForm from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishContactForm?: Maybe<ContactForm>;
  /** Unpublish one contentButton from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishContentButton?: Maybe<ContentButton>;
  /** Unpublish one docsGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishDocsGroup?: Maybe<DocsGroup>;
  /** Unpublish one docsPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishDocsPage?: Maybe<DocsPage>;
  /** Unpublish one employee from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishEmployee?: Maybe<Employee>;
  /** Unpublish one footerGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishFooterGroup?: Maybe<FooterGroup>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishForm?: Maybe<Form>;
  /** Unpublish one homePage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishHomePage?: Maybe<HomePage>;
  /**
   * Unpublish many Admonition documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAdmonitionsConnection)
   */
  unpublishManyAdmonitions: BatchPayload;
  /** Find many Admonition documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many CloudLocation documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCloudLocationsConnection)
   */
  unpublishManyCloudLocations: BatchPayload;
  /** Find many CloudLocation documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Unpublish many Configuration documents
   * @deprecated Please use the new paginated many mutation (unpublishManyConfigurationsConnection)
   */
  unpublishManyConfigurations: BatchPayload;
  /** Find many Configuration documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Unpublish many ContactForm documents
   * @deprecated Please use the new paginated many mutation (unpublishManyContactFormsConnection)
   */
  unpublishManyContactForms: BatchPayload;
  /** Find many ContactForm documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyContactFormsConnection: ContactFormConnection;
  /**
   * Unpublish many ContentButton documents
   * @deprecated Please use the new paginated many mutation (unpublishManyContentButtonsConnection)
   */
  unpublishManyContentButtons: BatchPayload;
  /** Find many ContentButton documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Unpublish many DocsGroup documents
   * @deprecated Please use the new paginated many mutation (unpublishManyDocsGroupsConnection)
   */
  unpublishManyDocsGroups: BatchPayload;
  /** Find many DocsGroup documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Unpublish many DocsPage documents
   * @deprecated Please use the new paginated many mutation (unpublishManyDocsPagesConnection)
   */
  unpublishManyDocsPages: BatchPayload;
  /** Find many DocsPage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyDocsPagesConnection: DocsPageConnection;
  /**
   * Unpublish many Employee documents
   * @deprecated Please use the new paginated many mutation (unpublishManyEmployeesConnection)
   */
  unpublishManyEmployees: BatchPayload;
  /** Find many Employee documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyEmployeesConnection: EmployeeConnection;
  /**
   * Unpublish many FooterGroup documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFooterGroupsConnection)
   */
  unpublishManyFooterGroups: BatchPayload;
  /** Find many FooterGroup documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Unpublish many Form documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFormsConnection)
   */
  unpublishManyForms: BatchPayload;
  /** Find many Form documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFormsConnection: FormConnection;
  /**
   * Unpublish many HomePage documents
   * @deprecated Please use the new paginated many mutation (unpublishManyHomePagesConnection)
   */
  unpublishManyHomePages: BatchPayload;
  /** Find many HomePage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyHomePagesConnection: HomePageConnection;
  /**
   * Unpublish many PageContent documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPageContentsConnection)
   */
  unpublishManyPageContents: BatchPayload;
  /** Find many PageContent documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPageContentsConnection: PageContentConnection;
  /**
   * Unpublish many Page documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPagesConnection)
   */
  unpublishManyPages: BatchPayload;
  /** Find many Page documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPagesConnection: PageConnection;
  /**
   * Unpublish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (unpublishManyTestimonialsConnection)
   */
  unpublishManyTestimonials: BatchPayload;
  /** Find many Testimonial documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyTestimonialsConnection: TestimonialConnection;
  /**
   * Unpublish many Theme documents
   * @deprecated Please use the new paginated many mutation (unpublishManyThemesConnection)
   */
  unpublishManyThemes: BatchPayload;
  /** Find many Theme documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyThemesConnection: ThemeConnection;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPage?: Maybe<Page>;
  /** Unpublish one pageContent from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPageContent?: Maybe<PageContent>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one theme from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishTheme?: Maybe<Theme>;
  /** Update one admonition */
  updateAdmonition?: Maybe<Admonition>;
  /** Update one asset */
  updateAsset?: Maybe<Asset>;
  /** Update one cloudLocation */
  updateCloudLocation?: Maybe<CloudLocation>;
  /** Update one configuration */
  updateConfiguration?: Maybe<Configuration>;
  /** Update one contactForm */
  updateContactForm?: Maybe<ContactForm>;
  /** Update one contentButton */
  updateContentButton?: Maybe<ContentButton>;
  /** Update one docsGroup */
  updateDocsGroup?: Maybe<DocsGroup>;
  /** Update one docsPage */
  updateDocsPage?: Maybe<DocsPage>;
  /** Update one employee */
  updateEmployee?: Maybe<Employee>;
  /** Update one footerGroup */
  updateFooterGroup?: Maybe<FooterGroup>;
  /** Update one form */
  updateForm?: Maybe<Form>;
  /** Update one homePage */
  updateHomePage?: Maybe<HomePage>;
  /**
   * Update many admonitions
   * @deprecated Please use the new paginated many mutation (updateManyAdmonitionsConnection)
   */
  updateManyAdmonitions: BatchPayload;
  /** Update many Admonition documents */
  updateManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many cloudLocations
   * @deprecated Please use the new paginated many mutation (updateManyCloudLocationsConnection)
   */
  updateManyCloudLocations: BatchPayload;
  /** Update many CloudLocation documents */
  updateManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Update many configurations
   * @deprecated Please use the new paginated many mutation (updateManyConfigurationsConnection)
   */
  updateManyConfigurations: BatchPayload;
  /** Update many Configuration documents */
  updateManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Update many contactForms
   * @deprecated Please use the new paginated many mutation (updateManyContactFormsConnection)
   */
  updateManyContactForms: BatchPayload;
  /** Update many ContactForm documents */
  updateManyContactFormsConnection: ContactFormConnection;
  /**
   * Update many contentButtons
   * @deprecated Please use the new paginated many mutation (updateManyContentButtonsConnection)
   */
  updateManyContentButtons: BatchPayload;
  /** Update many ContentButton documents */
  updateManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Update many docsGroups
   * @deprecated Please use the new paginated many mutation (updateManyDocsGroupsConnection)
   */
  updateManyDocsGroups: BatchPayload;
  /** Update many DocsGroup documents */
  updateManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Update many docsPages
   * @deprecated Please use the new paginated many mutation (updateManyDocsPagesConnection)
   */
  updateManyDocsPages: BatchPayload;
  /** Update many DocsPage documents */
  updateManyDocsPagesConnection: DocsPageConnection;
  /**
   * Update many employees
   * @deprecated Please use the new paginated many mutation (updateManyEmployeesConnection)
   */
  updateManyEmployees: BatchPayload;
  /** Update many Employee documents */
  updateManyEmployeesConnection: EmployeeConnection;
  /**
   * Update many footerGroups
   * @deprecated Please use the new paginated many mutation (updateManyFooterGroupsConnection)
   */
  updateManyFooterGroups: BatchPayload;
  /** Update many FooterGroup documents */
  updateManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Update many forms
   * @deprecated Please use the new paginated many mutation (updateManyFormsConnection)
   */
  updateManyForms: BatchPayload;
  /** Update many Form documents */
  updateManyFormsConnection: FormConnection;
  /**
   * Update many homePages
   * @deprecated Please use the new paginated many mutation (updateManyHomePagesConnection)
   */
  updateManyHomePages: BatchPayload;
  /** Update many HomePage documents */
  updateManyHomePagesConnection: HomePageConnection;
  /**
   * Update many pageContents
   * @deprecated Please use the new paginated many mutation (updateManyPageContentsConnection)
   */
  updateManyPageContents: BatchPayload;
  /** Update many PageContent documents */
  updateManyPageContentsConnection: PageContentConnection;
  /**
   * Update many pages
   * @deprecated Please use the new paginated many mutation (updateManyPagesConnection)
   */
  updateManyPages: BatchPayload;
  /** Update many Page documents */
  updateManyPagesConnection: PageConnection;
  /**
   * Update many testimonials
   * @deprecated Please use the new paginated many mutation (updateManyTestimonialsConnection)
   */
  updateManyTestimonials: BatchPayload;
  /** Update many Testimonial documents */
  updateManyTestimonialsConnection: TestimonialConnection;
  /**
   * Update many themes
   * @deprecated Please use the new paginated many mutation (updateManyThemesConnection)
   */
  updateManyThemes: BatchPayload;
  /** Update many Theme documents */
  updateManyThemesConnection: ThemeConnection;
  /** Update one page */
  updatePage?: Maybe<Page>;
  /** Update one pageContent */
  updatePageContent?: Maybe<PageContent>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<ScheduledRelease>;
  /** Update one testimonial */
  updateTestimonial?: Maybe<Testimonial>;
  /** Update one theme */
  updateTheme?: Maybe<Theme>;
  /** Upsert one admonition */
  upsertAdmonition?: Maybe<Admonition>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Asset>;
  /** Upsert one cloudLocation */
  upsertCloudLocation?: Maybe<CloudLocation>;
  /** Upsert one configuration */
  upsertConfiguration?: Maybe<Configuration>;
  /** Upsert one contactForm */
  upsertContactForm?: Maybe<ContactForm>;
  /** Upsert one contentButton */
  upsertContentButton?: Maybe<ContentButton>;
  /** Upsert one docsGroup */
  upsertDocsGroup?: Maybe<DocsGroup>;
  /** Upsert one docsPage */
  upsertDocsPage?: Maybe<DocsPage>;
  /** Upsert one employee */
  upsertEmployee?: Maybe<Employee>;
  /** Upsert one footerGroup */
  upsertFooterGroup?: Maybe<FooterGroup>;
  /** Upsert one form */
  upsertForm?: Maybe<Form>;
  /** Upsert one homePage */
  upsertHomePage?: Maybe<HomePage>;
  /** Upsert one page */
  upsertPage?: Maybe<Page>;
  /** Upsert one pageContent */
  upsertPageContent?: Maybe<PageContent>;
  /** Upsert one testimonial */
  upsertTestimonial?: Maybe<Testimonial>;
  /** Upsert one theme */
  upsertTheme?: Maybe<Theme>;
};


export type MutationCreateAdmonitionArgs = {
  data: AdmonitionCreateInput;
};


export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};


export type MutationCreateCloudLocationArgs = {
  data: CloudLocationCreateInput;
};


export type MutationCreateConfigurationArgs = {
  data: ConfigurationCreateInput;
};


export type MutationCreateContactFormArgs = {
  data: ContactFormCreateInput;
};


export type MutationCreateContentButtonArgs = {
  data: ContentButtonCreateInput;
};


export type MutationCreateDocsGroupArgs = {
  data: DocsGroupCreateInput;
};


export type MutationCreateDocsPageArgs = {
  data: DocsPageCreateInput;
};


export type MutationCreateEmployeeArgs = {
  data: EmployeeCreateInput;
};


export type MutationCreateFooterGroupArgs = {
  data: FooterGroupCreateInput;
};


export type MutationCreateFormArgs = {
  data: FormCreateInput;
};


export type MutationCreateHomePageArgs = {
  data: HomePageCreateInput;
};


export type MutationCreatePageArgs = {
  data: PageCreateInput;
};


export type MutationCreatePageContentArgs = {
  data: PageContentCreateInput;
};


export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};


export type MutationCreateTestimonialArgs = {
  data: TestimonialCreateInput;
};


export type MutationCreateThemeArgs = {
  data: ThemeCreateInput;
};


export type MutationDeleteAdmonitionArgs = {
  where: AdmonitionWhereUniqueInput;
};


export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};


export type MutationDeleteCloudLocationArgs = {
  where: CloudLocationWhereUniqueInput;
};


export type MutationDeleteConfigurationArgs = {
  where: ConfigurationWhereUniqueInput;
};


export type MutationDeleteContactFormArgs = {
  where: ContactFormWhereUniqueInput;
};


export type MutationDeleteContentButtonArgs = {
  where: ContentButtonWhereUniqueInput;
};


export type MutationDeleteDocsGroupArgs = {
  where: DocsGroupWhereUniqueInput;
};


export type MutationDeleteDocsPageArgs = {
  where: DocsPageWhereUniqueInput;
};


export type MutationDeleteEmployeeArgs = {
  where: EmployeeWhereUniqueInput;
};


export type MutationDeleteFooterGroupArgs = {
  where: FooterGroupWhereUniqueInput;
};


export type MutationDeleteFormArgs = {
  where: FormWhereUniqueInput;
};


export type MutationDeleteHomePageArgs = {
  where: HomePageWhereUniqueInput;
};


export type MutationDeleteManyAdmonitionsArgs = {
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationDeleteManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyCloudLocationsArgs = {
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationDeleteManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationDeleteManyConfigurationsArgs = {
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationDeleteManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationDeleteManyContactFormsArgs = {
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationDeleteManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationDeleteManyContentButtonsArgs = {
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationDeleteManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationDeleteManyDocsGroupsArgs = {
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationDeleteManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationDeleteManyDocsPagesArgs = {
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationDeleteManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationDeleteManyEmployeesArgs = {
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationDeleteManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationDeleteManyFooterGroupsArgs = {
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationDeleteManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationDeleteManyFormsArgs = {
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyHomePagesArgs = {
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationDeleteManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationDeleteManyPageContentsArgs = {
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationDeleteManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationDeleteManyPagesArgs = {
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyTestimonialsArgs = {
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteManyThemesArgs = {
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationDeleteManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationDeletePageArgs = {
  where: PageWhereUniqueInput;
};


export type MutationDeletePageContentArgs = {
  where: PageContentWhereUniqueInput;
};


export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};


export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationDeleteTestimonialArgs = {
  where: TestimonialWhereUniqueInput;
};


export type MutationDeleteThemeArgs = {
  where: ThemeWhereUniqueInput;
};


export type MutationPublishAdmonitionArgs = {
  to?: Array<Stage>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishCloudLocationArgs = {
  to?: Array<Stage>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationPublishConfigurationArgs = {
  to?: Array<Stage>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationPublishContactFormArgs = {
  to?: Array<Stage>;
  where: ContactFormWhereUniqueInput;
};


export type MutationPublishContentButtonArgs = {
  to?: Array<Stage>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationPublishDocsGroupArgs = {
  to?: Array<Stage>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationPublishDocsPageArgs = {
  to?: Array<Stage>;
  where: DocsPageWhereUniqueInput;
};


export type MutationPublishEmployeeArgs = {
  to?: Array<Stage>;
  where: EmployeeWhereUniqueInput;
};


export type MutationPublishFooterGroupArgs = {
  to?: Array<Stage>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationPublishFormArgs = {
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationPublishHomePageArgs = {
  to?: Array<Stage>;
  where: HomePageWhereUniqueInput;
};


export type MutationPublishManyAdmonitionsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationPublishManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyCloudLocationsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationPublishManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationPublishManyConfigurationsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationPublishManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationPublishManyContactFormsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationPublishManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationPublishManyContentButtonsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationPublishManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationPublishManyDocsGroupsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationPublishManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationPublishManyDocsPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationPublishManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationPublishManyEmployeesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationPublishManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationPublishManyFooterGroupsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationPublishManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationPublishManyFormsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationPublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationPublishManyHomePagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationPublishManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationPublishManyPageContentsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationPublishManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationPublishManyPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyTestimonialsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationPublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationPublishManyThemesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationPublishManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationPublishPageArgs = {
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationPublishPageContentArgs = {
  to?: Array<Stage>;
  where: PageContentWhereUniqueInput;
};


export type MutationPublishTestimonialArgs = {
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationPublishThemeArgs = {
  to?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationSchedulePublishAdmonitionArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishCloudLocationArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationSchedulePublishConfigurationArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationSchedulePublishContactFormArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ContactFormWhereUniqueInput;
};


export type MutationSchedulePublishContentButtonArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationSchedulePublishDocsGroupArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationSchedulePublishDocsPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: DocsPageWhereUniqueInput;
};


export type MutationSchedulePublishEmployeeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: EmployeeWhereUniqueInput;
};


export type MutationSchedulePublishFooterGroupArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationSchedulePublishFormArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationSchedulePublishHomePageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: HomePageWhereUniqueInput;
};


export type MutationSchedulePublishPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationSchedulePublishPageContentArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PageContentWhereUniqueInput;
};


export type MutationSchedulePublishTestimonialArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationSchedulePublishThemeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationScheduleUnpublishAdmonitionArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationScheduleUnpublishCloudLocationArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationScheduleUnpublishConfigurationArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationScheduleUnpublishContactFormArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ContactFormWhereUniqueInput;
};


export type MutationScheduleUnpublishContentButtonArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationScheduleUnpublishDocsGroupArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationScheduleUnpublishDocsPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: DocsPageWhereUniqueInput;
};


export type MutationScheduleUnpublishEmployeeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: EmployeeWhereUniqueInput;
};


export type MutationScheduleUnpublishFooterGroupArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationScheduleUnpublishFormArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: FormWhereUniqueInput;
};


export type MutationScheduleUnpublishHomePageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: HomePageWhereUniqueInput;
};


export type MutationScheduleUnpublishPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: PageWhereUniqueInput;
};


export type MutationScheduleUnpublishPageContentArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: PageContentWhereUniqueInput;
};


export type MutationScheduleUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: TestimonialWhereUniqueInput;
};


export type MutationScheduleUnpublishThemeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ThemeWhereUniqueInput;
};


export type MutationUnpublishAdmonitionArgs = {
  from?: Array<Stage>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationUnpublishCloudLocationArgs = {
  from?: Array<Stage>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationUnpublishConfigurationArgs = {
  from?: Array<Stage>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationUnpublishContactFormArgs = {
  from?: Array<Stage>;
  where: ContactFormWhereUniqueInput;
};


export type MutationUnpublishContentButtonArgs = {
  from?: Array<Stage>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationUnpublishDocsGroupArgs = {
  from?: Array<Stage>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationUnpublishDocsPageArgs = {
  from?: Array<Stage>;
  where: DocsPageWhereUniqueInput;
};


export type MutationUnpublishEmployeeArgs = {
  from?: Array<Stage>;
  where: EmployeeWhereUniqueInput;
};


export type MutationUnpublishFooterGroupArgs = {
  from?: Array<Stage>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationUnpublishFormArgs = {
  from?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationUnpublishHomePageArgs = {
  from?: Array<Stage>;
  where: HomePageWhereUniqueInput;
};


export type MutationUnpublishManyAdmonitionsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUnpublishManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyCloudLocationsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUnpublishManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUnpublishManyConfigurationsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUnpublishManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUnpublishManyContactFormsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUnpublishManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUnpublishManyContentButtonsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUnpublishManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUnpublishManyDocsGroupsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUnpublishManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUnpublishManyDocsPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUnpublishManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUnpublishManyEmployeesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUnpublishManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUnpublishManyFooterGroupsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUnpublishManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUnpublishManyFormsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyHomePagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUnpublishManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUnpublishManyPageContentsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUnpublishManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUnpublishManyPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishManyThemesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUnpublishManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUnpublishPageArgs = {
  from?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationUnpublishPageContentArgs = {
  from?: Array<Stage>;
  where: PageContentWhereUniqueInput;
};


export type MutationUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationUnpublishThemeArgs = {
  from?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationUpdateAdmonitionArgs = {
  data: AdmonitionUpdateInput;
  where: AdmonitionWhereUniqueInput;
};


export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpdateCloudLocationArgs = {
  data: CloudLocationUpdateInput;
  where: CloudLocationWhereUniqueInput;
};


export type MutationUpdateConfigurationArgs = {
  data: ConfigurationUpdateInput;
  where: ConfigurationWhereUniqueInput;
};


export type MutationUpdateContactFormArgs = {
  data: ContactFormUpdateInput;
  where: ContactFormWhereUniqueInput;
};


export type MutationUpdateContentButtonArgs = {
  data: ContentButtonUpdateInput;
  where: ContentButtonWhereUniqueInput;
};


export type MutationUpdateDocsGroupArgs = {
  data: DocsGroupUpdateInput;
  where: DocsGroupWhereUniqueInput;
};


export type MutationUpdateDocsPageArgs = {
  data: DocsPageUpdateInput;
  where: DocsPageWhereUniqueInput;
};


export type MutationUpdateEmployeeArgs = {
  data: EmployeeUpdateInput;
  where: EmployeeWhereUniqueInput;
};


export type MutationUpdateFooterGroupArgs = {
  data: FooterGroupUpdateInput;
  where: FooterGroupWhereUniqueInput;
};


export type MutationUpdateFormArgs = {
  data: FormUpdateInput;
  where: FormWhereUniqueInput;
};


export type MutationUpdateHomePageArgs = {
  data: HomePageUpdateInput;
  where: HomePageWhereUniqueInput;
};


export type MutationUpdateManyAdmonitionsArgs = {
  data: AdmonitionUpdateManyInput;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUpdateManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AdmonitionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyCloudLocationsArgs = {
  data: CloudLocationUpdateManyInput;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUpdateManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: CloudLocationUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUpdateManyConfigurationsArgs = {
  data: ConfigurationUpdateManyInput;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUpdateManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ConfigurationUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUpdateManyContactFormsArgs = {
  data: ContactFormUpdateManyInput;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUpdateManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ContactFormUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUpdateManyContentButtonsArgs = {
  data: ContentButtonUpdateManyInput;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUpdateManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ContentButtonUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUpdateManyDocsGroupsArgs = {
  data: DocsGroupUpdateManyInput;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUpdateManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: DocsGroupUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUpdateManyDocsPagesArgs = {
  data: DocsPageUpdateManyInput;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUpdateManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: DocsPageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUpdateManyEmployeesArgs = {
  data: EmployeeUpdateManyInput;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUpdateManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: EmployeeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUpdateManyFooterGroupsArgs = {
  data: FooterGroupUpdateManyInput;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUpdateManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: FooterGroupUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUpdateManyFormsArgs = {
  data: FormUpdateManyInput;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: FormUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyHomePagesArgs = {
  data: HomePageUpdateManyInput;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUpdateManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: HomePageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUpdateManyPageContentsArgs = {
  data: PageContentUpdateManyInput;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUpdateManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PageContentUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUpdateManyPagesArgs = {
  data: PageUpdateManyInput;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyTestimonialsArgs = {
  data: TestimonialUpdateManyInput;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: TestimonialUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateManyThemesArgs = {
  data: ThemeUpdateManyInput;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUpdateManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ThemeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUpdatePageArgs = {
  data: PageUpdateInput;
  where: PageWhereUniqueInput;
};


export type MutationUpdatePageContentArgs = {
  data: PageContentUpdateInput;
  where: PageContentWhereUniqueInput;
};


export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationUpdateTestimonialArgs = {
  data: TestimonialUpdateInput;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpdateThemeArgs = {
  data: ThemeUpdateInput;
  where: ThemeWhereUniqueInput;
};


export type MutationUpsertAdmonitionArgs = {
  upsert: AdmonitionUpsertInput;
  where: AdmonitionWhereUniqueInput;
};


export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpsertCloudLocationArgs = {
  upsert: CloudLocationUpsertInput;
  where: CloudLocationWhereUniqueInput;
};


export type MutationUpsertConfigurationArgs = {
  upsert: ConfigurationUpsertInput;
  where: ConfigurationWhereUniqueInput;
};


export type MutationUpsertContactFormArgs = {
  upsert: ContactFormUpsertInput;
  where: ContactFormWhereUniqueInput;
};


export type MutationUpsertContentButtonArgs = {
  upsert: ContentButtonUpsertInput;
  where: ContentButtonWhereUniqueInput;
};


export type MutationUpsertDocsGroupArgs = {
  upsert: DocsGroupUpsertInput;
  where: DocsGroupWhereUniqueInput;
};


export type MutationUpsertDocsPageArgs = {
  upsert: DocsPageUpsertInput;
  where: DocsPageWhereUniqueInput;
};


export type MutationUpsertEmployeeArgs = {
  upsert: EmployeeUpsertInput;
  where: EmployeeWhereUniqueInput;
};


export type MutationUpsertFooterGroupArgs = {
  upsert: FooterGroupUpsertInput;
  where: FooterGroupWhereUniqueInput;
};


export type MutationUpsertFormArgs = {
  upsert: FormUpsertInput;
  where: FormWhereUniqueInput;
};


export type MutationUpsertHomePageArgs = {
  upsert: HomePageUpsertInput;
  where: HomePageWhereUniqueInput;
};


export type MutationUpsertPageArgs = {
  upsert: PageUpsertInput;
  where: PageWhereUniqueInput;
};


export type MutationUpsertPageContentArgs = {
  upsert: PageContentUpsertInput;
  where: PageContentWhereUniqueInput;
};


export type MutationUpsertTestimonialArgs = {
  upsert: TestimonialUpsertInput;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpsertThemeArgs = {
  upsert: ThemeUpsertInput;
  where: ThemeWhereUniqueInput;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

export type Page = Node & {
  __typename?: 'Page';
  body?: Maybe<RichText>;
  callout?: Maybe<Callout>;
  contents: Array<PageContent>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Page>;
  footerGroup?: Maybe<FooterGroup>;
  footerTitle?: Maybe<Scalars['String']>;
  /** List of Page versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PageCalloutArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageContentWhereInput>;
};


export type PageCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type PageFooterGroupArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type PagePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type PageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageConnection = {
  __typename?: 'PageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageContent = Node & {
  __typename?: 'PageContent';
  body?: Maybe<RichText>;
  button?: Maybe<Button>;
  callToAction: CallToActionSettings;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<PageContent>;
  features: Array<Feature>;
  footerGroup?: Maybe<FooterGroup>;
  footerTitle?: Maybe<Scalars['String']>;
  form?: Maybe<Form>;
  /** List of PageContent versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  page?: Maybe<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  showUpdatedDate: Scalars['Boolean'];
  slug: Scalars['String'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  vendorLogo?: Maybe<VendorLogo>;
};


export type PageContentButtonArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentCallToActionArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type PageContentFeaturesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FeatureOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FeatureWhereInput>;
};


export type PageContentFooterGroupArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentFormArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type PageContentImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentPageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageContentUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentVendorLogoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type PageContentConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageContentWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageContentConnection = {
  __typename?: 'PageContentConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageContentEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageContentCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  callToAction: CallToActionSettingsCreateOneInlineInput;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  features?: InputMaybe<FeatureCreateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupCreateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  page?: InputMaybe<PageCreateOneInlineInput>;
  showUpdatedDate: Scalars['Boolean'];
  slug: Scalars['String'];
  subtitle?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  vendorLogo?: InputMaybe<VendorLogoCreateOneInlineInput>;
};

export type PageContentCreateManyInlineInput = {
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Create and connect multiple existing PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
};

export type PageContentCreateOneInlineInput = {
  /** Connect one existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
};

/** An edge in a connection. */
export type PageContentEdge = {
  __typename?: 'PageContentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PageContent;
};

/** Identifies documents */
export type PageContentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_none?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_some?: InputMaybe<PageContentWhereStageInput>;
  features_every?: InputMaybe<FeatureWhereInput>;
  features_none?: InputMaybe<FeatureWhereInput>;
  features_some?: InputMaybe<FeatureWhereInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  vendorLogo?: InputMaybe<VendorLogoWhereInput>;
};

export enum PageContentOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterTitleAsc = 'footerTitle_ASC',
  FooterTitleDesc = 'footerTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShowUpdatedDateAsc = 'showUpdatedDate_ASC',
  ShowUpdatedDateDesc = 'showUpdatedDate_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageContentUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  callToAction?: InputMaybe<CallToActionSettingsUpdateOneInlineInput>;
  features?: InputMaybe<FeatureUpdateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupUpdateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  form?: InputMaybe<FormUpdateOneInlineInput>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  page?: InputMaybe<PageUpdateOneInlineInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  slug?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  vendorLogo?: InputMaybe<VendorLogoUpdateOneInlineInput>;
};

export type PageContentUpdateManyInlineInput = {
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentConnectInput>>;
  /** Create and connect multiple PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
  /** Delete multiple PageContent documents */
  delete?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Disconnect multiple PageContent documents */
  disconnect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageContent documents */
  set?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Update multiple PageContent documents */
  update?: InputMaybe<Array<PageContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageContent documents */
  upsert?: InputMaybe<Array<PageContentUpsertWithNestedWhereUniqueInput>>;
};

export type PageContentUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  footerTitle?: InputMaybe<Scalars['String']>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type PageContentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageContentUpdateManyInput;
  /** Document search */
  where: PageContentWhereInput;
};

export type PageContentUpdateOneInlineInput = {
  /** Connect existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
  /** Delete currently connected PageContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageContent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageContent document */
  update?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageContent document */
  upsert?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type PageContentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageContentUpdateInput;
  /** Unique document search */
  where: PageContentWhereUniqueInput;
};

export type PageContentUpsertInput = {
  /** Create document if it didn't exist */
  create: PageContentCreateInput;
  /** Update document if it exists */
  update: PageContentUpdateInput;
};

export type PageContentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageContentUpsertInput;
  /** Unique document search */
  where: PageContentWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageContentWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PageContentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<ButtonWhereInput>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_none?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_some?: InputMaybe<PageContentWhereStageInput>;
  features_every?: InputMaybe<FeatureWhereInput>;
  features_none?: InputMaybe<FeatureWhereInput>;
  features_some?: InputMaybe<FeatureWhereInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  vendorLogo?: InputMaybe<VendorLogoWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageContentWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageContentWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageContentWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageContentWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageContentWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References PageContent record uniquely */
export type PageContentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type PageCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  callout?: InputMaybe<CalloutCreateOneInlineInput>;
  contents?: InputMaybe<PageContentCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  footerGroup?: InputMaybe<FooterGroupCreateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
  subtitle?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageCreateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Create and connect multiple existing Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
};

export type PageCreateOneInlineInput = {
  /** Connect one existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
};

/** An edge in a connection. */
export type PageEdge = {
  __typename?: 'PageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Page;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Identifies documents */
export type PageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callout?: InputMaybe<CalloutWhereInput>;
  contents_every?: InputMaybe<PageContentWhereInput>;
  contents_none?: InputMaybe<PageContentWhereInput>;
  contents_some?: InputMaybe<PageContentWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterTitleAsc = 'footerTitle_ASC',
  FooterTitleDesc = 'footerTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  callout?: InputMaybe<CalloutUpdateOneInlineInput>;
  contents?: InputMaybe<PageContentUpdateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupUpdateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type PageUpdateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageConnectInput>>;
  /** Create and connect multiple Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Delete multiple Page documents */
  delete?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Disconnect multiple Page documents */
  disconnect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Page documents */
  set?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Update multiple Page documents */
  update?: InputMaybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Page documents */
  upsert?: InputMaybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
};

export type PageUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  footerTitle?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type PageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageUpdateManyInput;
  /** Document search */
  where: PageWhereInput;
};

export type PageUpdateOneInlineInput = {
  /** Connect existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Delete currently connected Page document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Page document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Page document */
  update?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Page document */
  upsert?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageUpdateInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput;
  /** Update document if it exists */
  update: PageUpdateInput;
};

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageUpsertInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  callout?: InputMaybe<CalloutWhereInput>;
  contents_every?: InputMaybe<PageContentWhereInput>;
  contents_none?: InputMaybe<PageContentWhereInput>;
  contents_some?: InputMaybe<PageContentWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  footerTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  __typename?: 'Query';
  /** Retrieve a single admonition */
  admonition?: Maybe<Admonition>;
  /** Retrieve document version */
  admonitionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple admonitions */
  admonitions: Array<Admonition>;
  /** Retrieve multiple admonitions using the Relay connection interface */
  admonitionsConnection: AdmonitionConnection;
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve a single cloudLocation */
  cloudLocation?: Maybe<CloudLocation>;
  /** Retrieve document version */
  cloudLocationVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple cloudLocations */
  cloudLocations: Array<CloudLocation>;
  /** Retrieve multiple cloudLocations using the Relay connection interface */
  cloudLocationsConnection: CloudLocationConnection;
  /** Retrieve a single configuration */
  configuration?: Maybe<Configuration>;
  /** Retrieve document version */
  configurationVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple configurations */
  configurations: Array<Configuration>;
  /** Retrieve multiple configurations using the Relay connection interface */
  configurationsConnection: ConfigurationConnection;
  /** Retrieve a single contactForm */
  contactForm?: Maybe<ContactForm>;
  /** Retrieve document version */
  contactFormVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple contactForms */
  contactForms: Array<ContactForm>;
  /** Retrieve multiple contactForms using the Relay connection interface */
  contactFormsConnection: ContactFormConnection;
  /** Retrieve a single contentButton */
  contentButton?: Maybe<ContentButton>;
  /** Retrieve document version */
  contentButtonVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple contentButtons */
  contentButtons: Array<ContentButton>;
  /** Retrieve multiple contentButtons using the Relay connection interface */
  contentButtonsConnection: ContentButtonConnection;
  /** Retrieve a single docsGroup */
  docsGroup?: Maybe<DocsGroup>;
  /** Retrieve document version */
  docsGroupVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple docsGroups */
  docsGroups: Array<DocsGroup>;
  /** Retrieve multiple docsGroups using the Relay connection interface */
  docsGroupsConnection: DocsGroupConnection;
  /** Retrieve a single docsPage */
  docsPage?: Maybe<DocsPage>;
  /** Retrieve document version */
  docsPageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple docsPages */
  docsPages: Array<DocsPage>;
  /** Retrieve multiple docsPages using the Relay connection interface */
  docsPagesConnection: DocsPageConnection;
  /** Retrieve a single employee */
  employee?: Maybe<Employee>;
  /** Retrieve document version */
  employeeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple employees */
  employees: Array<Employee>;
  /** Retrieve multiple employees using the Relay connection interface */
  employeesConnection: EmployeeConnection;
  /** Retrieve a single footerGroup */
  footerGroup?: Maybe<FooterGroup>;
  /** Retrieve document version */
  footerGroupVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple footerGroups */
  footerGroups: Array<FooterGroup>;
  /** Retrieve multiple footerGroups using the Relay connection interface */
  footerGroupsConnection: FooterGroupConnection;
  /** Retrieve a single form */
  form?: Maybe<Form>;
  /** Retrieve document version */
  formVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple forms */
  forms: Array<Form>;
  /** Retrieve multiple forms using the Relay connection interface */
  formsConnection: FormConnection;
  /** Retrieve a single homePage */
  homePage?: Maybe<HomePage>;
  /** Retrieve document version */
  homePageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple homePages */
  homePages: Array<HomePage>;
  /** Retrieve multiple homePages using the Relay connection interface */
  homePagesConnection: HomePageConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve a single page */
  page?: Maybe<Page>;
  /** Retrieve a single pageContent */
  pageContent?: Maybe<PageContent>;
  /** Retrieve document version */
  pageContentVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pageContents */
  pageContents: Array<PageContent>;
  /** Retrieve multiple pageContents using the Relay connection interface */
  pageContentsConnection: PageContentConnection;
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve a single testimonial */
  testimonial?: Maybe<Testimonial>;
  /** Retrieve document version */
  testimonialVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple testimonials */
  testimonials: Array<Testimonial>;
  /** Retrieve multiple testimonials using the Relay connection interface */
  testimonialsConnection: TestimonialConnection;
  /** Retrieve a single theme */
  theme?: Maybe<Theme>;
  /** Retrieve document version */
  themeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple themes */
  themes: Array<Theme>;
  /** Retrieve multiple themes using the Relay connection interface */
  themesConnection: ThemeConnection;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
};


export type QueryAdmonitionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AdmonitionWhereUniqueInput;
};


export type QueryAdmonitionVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAdmonitionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AdmonitionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AdmonitionWhereInput>;
};


export type QueryAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AdmonitionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AdmonitionWhereInput>;
};


export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};


export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryCloudLocationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CloudLocationWhereUniqueInput;
};


export type QueryCloudLocationVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCloudLocationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CloudLocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CloudLocationWhereInput>;
};


export type QueryCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CloudLocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CloudLocationWhereInput>;
};


export type QueryConfigurationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ConfigurationWhereUniqueInput;
};


export type QueryConfigurationVersionArgs = {
  where: VersionWhereInput;
};


export type QueryConfigurationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigurationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigurationWhereInput>;
};


export type QueryConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigurationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigurationWhereInput>;
};


export type QueryContactFormArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ContactFormWhereUniqueInput;
};


export type QueryContactFormVersionArgs = {
  where: VersionWhereInput;
};


export type QueryContactFormsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContactFormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ContactFormWhereInput>;
};


export type QueryContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContactFormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ContactFormWhereInput>;
};


export type QueryContentButtonArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ContentButtonWhereUniqueInput;
};


export type QueryContentButtonVersionArgs = {
  where: VersionWhereInput;
};


export type QueryContentButtonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContentButtonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ContentButtonWhereInput>;
};


export type QueryContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContentButtonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ContentButtonWhereInput>;
};


export type QueryDocsGroupArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: DocsGroupWhereUniqueInput;
};


export type QueryDocsGroupVersionArgs = {
  where: VersionWhereInput;
};


export type QueryDocsGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type QueryDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type QueryDocsPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: DocsPageWhereUniqueInput;
};


export type QueryDocsPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryDocsPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<DocsPageWhereInput>;
};


export type QueryDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<DocsPageWhereInput>;
};


export type QueryEmployeeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: EmployeeWhereUniqueInput;
};


export type QueryEmployeeVersionArgs = {
  where: VersionWhereInput;
};


export type QueryEmployeesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EmployeeWhereInput>;
};


export type QueryEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EmployeeWhereInput>;
};


export type QueryFooterGroupArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FooterGroupWhereUniqueInput;
};


export type QueryFooterGroupVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFooterGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FooterGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FooterGroupWhereInput>;
};


export type QueryFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FooterGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FooterGroupWhereInput>;
};


export type QueryFormArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FormWhereUniqueInput;
};


export type QueryFormVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFormsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryFormsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryHomePageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: HomePageWhereUniqueInput;
};


export type QueryHomePageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryHomePagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HomePageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<HomePageWhereInput>;
};


export type QueryHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HomePageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<HomePageWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
  locales?: Array<Locale>;
  stage?: Stage;
};


export type QueryPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageWhereUniqueInput;
};


export type QueryPageContentArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageContentWhereUniqueInput;
};


export type QueryPageContentVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPageContentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageContentWhereInput>;
};


export type QueryPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageContentWhereInput>;
};


export type QueryPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};


export type QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};


export type QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryTestimonialArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: TestimonialWhereUniqueInput;
};


export type QueryTestimonialVersionArgs = {
  where: VersionWhereInput;
};


export type QueryTestimonialsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryThemeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ThemeWhereUniqueInput;
};


export type QueryThemeVersionArgs = {
  where: VersionWhereInput;
};


export type QueryThemesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ThemeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ThemeWhereInput>;
};


export type QueryThemesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ThemeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ThemeWhereInput>;
};


export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA';
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

/** Scheduled Operation system model */
export type ScheduledOperation = Node & {
  __typename?: 'ScheduledOperation';
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json'];
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Admonition | Asset | CloudLocation | Configuration | ContactForm | ContentButton | DocsGroup | DocsPage | Employee | FooterGroup | Form | HomePage | Page | PageContent | Testimonial | Theme;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  __typename?: 'ScheduledOperationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  __typename?: 'ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Node & {
  __typename?: 'ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  __typename?: 'ScheduledReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  __typename?: 'ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SelectField = {
  __typename?: 'SelectField';
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  multiple: Scalars['Boolean'];
  options: Array<Scalars['String']>;
  required: Scalars['Boolean'];
  /** System stage field */
  stage: Stage;
};

export type SelectFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SelectFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type SelectFieldConnection = {
  __typename?: 'SelectFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SelectFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SelectFieldCreateInput = {
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  label?: InputMaybe<Scalars['String']>;
  multiple: Scalars['Boolean'];
  options: Array<Scalars['String']>;
  required: Scalars['Boolean'];
};

export type SelectFieldCreateManyInlineInput = {
  /** Create and connect multiple existing SelectField documents */
  create?: InputMaybe<Array<SelectFieldCreateInput>>;
};

export type SelectFieldCreateOneInlineInput = {
  /** Create and connect one SelectField document */
  create?: InputMaybe<SelectFieldCreateInput>;
};

export type SelectFieldCreateWithPositionInput = {
  /** Document to create */
  data: SelectFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type SelectFieldEdge = {
  __typename?: 'SelectFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SelectField;
};

/** Identifies documents */
export type SelectFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

export enum SelectFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  MultipleAsc = 'multiple_ASC',
  MultipleDesc = 'multiple_DESC',
  OptionsAsc = 'options_ASC',
  OptionsDesc = 'options_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type SelectFieldParent = ContactForm | Form;

export type SelectFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type SelectFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type SelectFieldParentCreateManyInlineInput = {
  /** Connect multiple existing SelectFieldParent documents */
  connect?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing SelectFieldParent documents */
  create?: InputMaybe<Array<SelectFieldParentCreateInput>>;
};

export type SelectFieldParentCreateOneInlineInput = {
  /** Connect one existing SelectFieldParent document */
  connect?: InputMaybe<SelectFieldParentWhereUniqueInput>;
  /** Create and connect one SelectFieldParent document */
  create?: InputMaybe<SelectFieldParentCreateInput>;
};

export type SelectFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type SelectFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing SelectFieldParent documents */
  connect?: InputMaybe<Array<SelectFieldParentConnectInput>>;
  /** Create and connect multiple SelectFieldParent documents */
  create?: InputMaybe<Array<SelectFieldParentCreateInput>>;
  /** Delete multiple SelectFieldParent documents */
  delete?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Disconnect multiple SelectFieldParent documents */
  disconnect?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SelectFieldParent documents */
  set?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Update multiple SelectFieldParent documents */
  update?: InputMaybe<Array<SelectFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SelectFieldParent documents */
  upsert?: InputMaybe<Array<SelectFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type SelectFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type SelectFieldParentUpdateOneInlineInput = {
  /** Connect existing SelectFieldParent document */
  connect?: InputMaybe<SelectFieldParentWhereUniqueInput>;
  /** Create and connect one SelectFieldParent document */
  create?: InputMaybe<SelectFieldParentCreateInput>;
  /** Delete currently connected SelectFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SelectFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SelectFieldParent document */
  update?: InputMaybe<SelectFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SelectFieldParent document */
  upsert?: InputMaybe<SelectFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type SelectFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type SelectFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type SelectFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type SelectFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type SelectFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  options?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type SelectFieldUpdateManyInlineInput = {
  /** Create and connect multiple SelectField component instances */
  create?: InputMaybe<Array<SelectFieldCreateWithPositionInput>>;
  /** Delete multiple SelectField documents */
  delete?: InputMaybe<Array<SelectFieldWhereUniqueInput>>;
  /** Update multiple SelectField component instances */
  update?: InputMaybe<Array<SelectFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SelectField component instances */
  upsert?: InputMaybe<Array<SelectFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SelectFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  options?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type SelectFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SelectFieldUpdateManyInput;
  /** Document search */
  where: SelectFieldWhereInput;
};

export type SelectFieldUpdateOneInlineInput = {
  /** Create and connect one SelectField document */
  create?: InputMaybe<SelectFieldCreateInput>;
  /** Delete currently connected SelectField document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single SelectField document */
  update?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SelectField document */
  upsert?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueInput>;
};

export type SelectFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<SelectFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SelectFieldWhereUniqueInput;
};

export type SelectFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SelectFieldUpdateInput;
  /** Unique document search */
  where: SelectFieldWhereUniqueInput;
};

export type SelectFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: SelectFieldCreateInput;
  /** Update document if it exists */
  update: SelectFieldUpdateInput;
};

export type SelectFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<SelectFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SelectFieldWhereUniqueInput;
};

export type SelectFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SelectFieldUpsertInput;
  /** Unique document search */
  where: SelectFieldWhereUniqueInput;
};

/** Identifies documents */
export type SelectFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  multiple?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']>>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

/** References SelectField record uniquely */
export type SelectFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SocialLink = {
  __typename?: 'SocialLink';
  href: Scalars['String'];
  /** react-icons family & name in {family}-{name} format */
  iconName: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  /** System stage field */
  stage: Stage;
};

export type SocialLinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SocialLinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type SocialLinkConnection = {
  __typename?: 'SocialLinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SocialLinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SocialLinkCreateInput = {
  href: Scalars['String'];
  iconName: Scalars['String'];
  name: Scalars['String'];
};

export type SocialLinkCreateManyInlineInput = {
  /** Create and connect multiple existing SocialLink documents */
  create?: InputMaybe<Array<SocialLinkCreateInput>>;
};

export type SocialLinkCreateOneInlineInput = {
  /** Create and connect one SocialLink document */
  create?: InputMaybe<SocialLinkCreateInput>;
};

export type SocialLinkCreateWithPositionInput = {
  /** Document to create */
  data: SocialLinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type SocialLinkEdge = {
  __typename?: 'SocialLinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SocialLink;
};

/** Identifies documents */
export type SocialLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  href_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']>;
  iconName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iconName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iconName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iconName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  iconName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iconName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iconName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iconName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iconName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iconName_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
};

export enum SocialLinkOrderByInput {
  HrefAsc = 'href_ASC',
  HrefDesc = 'href_DESC',
  IconNameAsc = 'iconName_ASC',
  IconNameDesc = 'iconName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC'
}

export type SocialLinkParent = Configuration;

export type SocialLinkParentConnectInput = {
  Configuration?: InputMaybe<ConfigurationConnectInput>;
};

export type SocialLinkParentCreateInput = {
  Configuration?: InputMaybe<ConfigurationCreateInput>;
};

export type SocialLinkParentCreateManyInlineInput = {
  /** Connect multiple existing SocialLinkParent documents */
  connect?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Create and connect multiple existing SocialLinkParent documents */
  create?: InputMaybe<Array<SocialLinkParentCreateInput>>;
};

export type SocialLinkParentCreateOneInlineInput = {
  /** Connect one existing SocialLinkParent document */
  connect?: InputMaybe<SocialLinkParentWhereUniqueInput>;
  /** Create and connect one SocialLinkParent document */
  create?: InputMaybe<SocialLinkParentCreateInput>;
};

export type SocialLinkParentUpdateInput = {
  Configuration?: InputMaybe<ConfigurationUpdateInput>;
};

export type SocialLinkParentUpdateManyInlineInput = {
  /** Connect multiple existing SocialLinkParent documents */
  connect?: InputMaybe<Array<SocialLinkParentConnectInput>>;
  /** Create and connect multiple SocialLinkParent documents */
  create?: InputMaybe<Array<SocialLinkParentCreateInput>>;
  /** Delete multiple SocialLinkParent documents */
  delete?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Disconnect multiple SocialLinkParent documents */
  disconnect?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SocialLinkParent documents */
  set?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Update multiple SocialLinkParent documents */
  update?: InputMaybe<Array<SocialLinkParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SocialLinkParent documents */
  upsert?: InputMaybe<Array<SocialLinkParentUpsertWithNestedWhereUniqueInput>>;
};

export type SocialLinkParentUpdateManyWithNestedWhereInput = {
  Configuration?: InputMaybe<ConfigurationUpdateManyWithNestedWhereInput>;
};

export type SocialLinkParentUpdateOneInlineInput = {
  /** Connect existing SocialLinkParent document */
  connect?: InputMaybe<SocialLinkParentWhereUniqueInput>;
  /** Create and connect one SocialLinkParent document */
  create?: InputMaybe<SocialLinkParentCreateInput>;
  /** Delete currently connected SocialLinkParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SocialLinkParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SocialLinkParent document */
  update?: InputMaybe<SocialLinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SocialLinkParent document */
  upsert?: InputMaybe<SocialLinkParentUpsertWithNestedWhereUniqueInput>;
};

export type SocialLinkParentUpdateWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
};

export type SocialLinkParentUpsertWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
};

export type SocialLinkParentWhereInput = {
  Configuration?: InputMaybe<ConfigurationWhereInput>;
};

export type SocialLinkParentWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationWhereUniqueInput>;
};

export type SocialLinkUpdateInput = {
  href?: InputMaybe<Scalars['String']>;
  iconName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SocialLinkUpdateManyInlineInput = {
  /** Create and connect multiple SocialLink component instances */
  create?: InputMaybe<Array<SocialLinkCreateWithPositionInput>>;
  /** Delete multiple SocialLink documents */
  delete?: InputMaybe<Array<SocialLinkWhereUniqueInput>>;
  /** Update multiple SocialLink component instances */
  update?: InputMaybe<Array<SocialLinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SocialLink component instances */
  upsert?: InputMaybe<Array<SocialLinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SocialLinkUpdateManyInput = {
  href?: InputMaybe<Scalars['String']>;
  iconName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type SocialLinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SocialLinkUpdateManyInput;
  /** Document search */
  where: SocialLinkWhereInput;
};

export type SocialLinkUpdateOneInlineInput = {
  /** Create and connect one SocialLink document */
  create?: InputMaybe<SocialLinkCreateInput>;
  /** Delete currently connected SocialLink document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single SocialLink document */
  update?: InputMaybe<SocialLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SocialLink document */
  upsert?: InputMaybe<SocialLinkUpsertWithNestedWhereUniqueInput>;
};

export type SocialLinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<SocialLinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SocialLinkWhereUniqueInput;
};

export type SocialLinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SocialLinkUpdateInput;
  /** Unique document search */
  where: SocialLinkWhereUniqueInput;
};

export type SocialLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: SocialLinkCreateInput;
  /** Update document if it exists */
  update: SocialLinkUpdateInput;
};

export type SocialLinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<SocialLinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SocialLinkWhereUniqueInput;
};

export type SocialLinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SocialLinkUpsertInput;
  /** Unique document search */
  where: SocialLinkWhereUniqueInput;
};

/** Identifies documents */
export type SocialLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  href?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  href_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']>;
  iconName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iconName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iconName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iconName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  iconName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iconName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iconName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iconName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iconName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iconName_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
};

/** References SocialLink record uniquely */
export type SocialLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export enum SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

export type Testimonial = Node & {
  __typename?: 'Testimonial';
  body: RichText;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Testimonial>;
  /** List of Testimonial versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  image: Asset;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type TestimonialCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type TestimonialHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type TestimonialImageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialPublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type TestimonialUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type TestimonialConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TestimonialWhereUniqueInput;
};

/** A connection to a list of items. */
export type TestimonialConnection = {
  __typename?: 'TestimonialConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TestimonialEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TestimonialCreateInput = {
  body: Scalars['RichTextAST'];
  cl9470mbl4qrk01tcheod9xk7?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  image: AssetCreateOneInlineInput;
  subtitle?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type TestimonialCreateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Create and connect multiple existing Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
};

export type TestimonialCreateOneInlineInput = {
  /** Connect one existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
};

/** An edge in a connection. */
export type TestimonialEdge = {
  __typename?: 'TestimonialEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Testimonial;
};

/** Identifies documents */
export type TestimonialManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum TestimonialOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type TestimonialUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  cl9470mbl4qrk01tcheod9xk7?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type TestimonialUpdateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialConnectInput>>;
  /** Create and connect multiple Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
  /** Delete multiple Testimonial documents */
  delete?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Disconnect multiple Testimonial documents */
  disconnect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Testimonial documents */
  set?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Update multiple Testimonial documents */
  update?: InputMaybe<Array<TestimonialUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Testimonial documents */
  upsert?: InputMaybe<Array<TestimonialUpsertWithNestedWhereUniqueInput>>;
};

export type TestimonialUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']>;
  subtitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type TestimonialUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TestimonialUpdateManyInput;
  /** Document search */
  where: TestimonialWhereInput;
};

export type TestimonialUpdateOneInlineInput = {
  /** Connect existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
  /** Delete currently connected Testimonial document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Testimonial document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Testimonial document */
  update?: InputMaybe<TestimonialUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Testimonial document */
  upsert?: InputMaybe<TestimonialUpsertWithNestedWhereUniqueInput>;
};

export type TestimonialUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TestimonialUpdateInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

export type TestimonialUpsertInput = {
  /** Create document if it didn't exist */
  create: TestimonialCreateInput;
  /** Update document if it exists */
  update: TestimonialUpdateInput;
};

export type TestimonialUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TestimonialUpsertInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type TestimonialWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type TestimonialWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  subtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type TestimonialWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<TestimonialWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Testimonial record uniquely */
export type TestimonialWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TextAreaField = {
  __typename?: 'TextAreaField';
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  /** System stage field */
  stage: Stage;
};

export type TextAreaFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TextAreaFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type TextAreaFieldConnection = {
  __typename?: 'TextAreaFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TextAreaFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TextAreaFieldCreateInput = {
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  label?: InputMaybe<Scalars['String']>;
  required: Scalars['Boolean'];
};

export type TextAreaFieldCreateManyInlineInput = {
  /** Create and connect multiple existing TextAreaField documents */
  create?: InputMaybe<Array<TextAreaFieldCreateInput>>;
};

export type TextAreaFieldCreateOneInlineInput = {
  /** Create and connect one TextAreaField document */
  create?: InputMaybe<TextAreaFieldCreateInput>;
};

export type TextAreaFieldCreateWithPositionInput = {
  /** Document to create */
  data: TextAreaFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TextAreaFieldEdge = {
  __typename?: 'TextAreaFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TextAreaField;
};

/** Identifies documents */
export type TextAreaFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

export enum TextAreaFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type TextAreaFieldParent = ContactForm | Form;

export type TextAreaFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type TextAreaFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type TextAreaFieldParentCreateManyInlineInput = {
  /** Connect multiple existing TextAreaFieldParent documents */
  connect?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing TextAreaFieldParent documents */
  create?: InputMaybe<Array<TextAreaFieldParentCreateInput>>;
};

export type TextAreaFieldParentCreateOneInlineInput = {
  /** Connect one existing TextAreaFieldParent document */
  connect?: InputMaybe<TextAreaFieldParentWhereUniqueInput>;
  /** Create and connect one TextAreaFieldParent document */
  create?: InputMaybe<TextAreaFieldParentCreateInput>;
};

export type TextAreaFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type TextAreaFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing TextAreaFieldParent documents */
  connect?: InputMaybe<Array<TextAreaFieldParentConnectInput>>;
  /** Create and connect multiple TextAreaFieldParent documents */
  create?: InputMaybe<Array<TextAreaFieldParentCreateInput>>;
  /** Delete multiple TextAreaFieldParent documents */
  delete?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Disconnect multiple TextAreaFieldParent documents */
  disconnect?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing TextAreaFieldParent documents */
  set?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Update multiple TextAreaFieldParent documents */
  update?: InputMaybe<Array<TextAreaFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple TextAreaFieldParent documents */
  upsert?: InputMaybe<Array<TextAreaFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type TextAreaFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type TextAreaFieldParentUpdateOneInlineInput = {
  /** Connect existing TextAreaFieldParent document */
  connect?: InputMaybe<TextAreaFieldParentWhereUniqueInput>;
  /** Create and connect one TextAreaFieldParent document */
  create?: InputMaybe<TextAreaFieldParentCreateInput>;
  /** Delete currently connected TextAreaFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected TextAreaFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single TextAreaFieldParent document */
  update?: InputMaybe<TextAreaFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextAreaFieldParent document */
  upsert?: InputMaybe<TextAreaFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type TextAreaFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type TextAreaFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type TextAreaFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type TextAreaFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type TextAreaFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type TextAreaFieldUpdateManyInlineInput = {
  /** Create and connect multiple TextAreaField component instances */
  create?: InputMaybe<Array<TextAreaFieldCreateWithPositionInput>>;
  /** Delete multiple TextAreaField documents */
  delete?: InputMaybe<Array<TextAreaFieldWhereUniqueInput>>;
  /** Update multiple TextAreaField component instances */
  update?: InputMaybe<Array<TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TextAreaField component instances */
  upsert?: InputMaybe<Array<TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TextAreaFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
};

export type TextAreaFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TextAreaFieldUpdateManyInput;
  /** Document search */
  where: TextAreaFieldWhereInput;
};

export type TextAreaFieldUpdateOneInlineInput = {
  /** Create and connect one TextAreaField document */
  create?: InputMaybe<TextAreaFieldCreateInput>;
  /** Delete currently connected TextAreaField document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TextAreaField document */
  update?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextAreaField document */
  upsert?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueInput>;
};

export type TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TextAreaFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextAreaFieldWhereUniqueInput;
};

export type TextAreaFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TextAreaFieldUpdateInput;
  /** Unique document search */
  where: TextAreaFieldWhereUniqueInput;
};

export type TextAreaFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: TextAreaFieldCreateInput;
  /** Update document if it exists */
  update: TextAreaFieldUpdateInput;
};

export type TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TextAreaFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextAreaFieldWhereUniqueInput;
};

export type TextAreaFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TextAreaFieldUpsertInput;
  /** Unique document search */
  where: TextAreaFieldWhereUniqueInput;
};

/** Identifies documents */
export type TextAreaFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
};

/** References TextAreaField record uniquely */
export type TextAreaFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type TextInputField = {
  __typename?: 'TextInputField';
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  label?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  /** System stage field */
  stage: Stage;
  validationType?: Maybe<TextInputValidationType>;
};

export type TextInputFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TextInputFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type TextInputFieldConnection = {
  __typename?: 'TextInputFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TextInputFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TextInputFieldCreateInput = {
  displayName: Scalars['String'];
  fieldGroup: Scalars['Int'];
  formId: Scalars['String'];
  label?: InputMaybe<Scalars['String']>;
  required: Scalars['Boolean'];
  validationType?: InputMaybe<TextInputValidationType>;
};

export type TextInputFieldCreateManyInlineInput = {
  /** Create and connect multiple existing TextInputField documents */
  create?: InputMaybe<Array<TextInputFieldCreateInput>>;
};

export type TextInputFieldCreateOneInlineInput = {
  /** Create and connect one TextInputField document */
  create?: InputMaybe<TextInputFieldCreateInput>;
};

export type TextInputFieldCreateWithPositionInput = {
  /** Document to create */
  data: TextInputFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TextInputFieldEdge = {
  __typename?: 'TextInputFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TextInputField;
};

/** Identifies documents */
export type TextInputFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
  validationType?: InputMaybe<TextInputValidationType>;
  /** All values that are contained in given list. */
  validationType_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
  /** All values that are not equal to given value. */
  validationType_not?: InputMaybe<TextInputValidationType>;
  /** All values that are not contained in given list. */
  validationType_not_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
};

export enum TextInputFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC',
  ValidationTypeAsc = 'validationType_ASC',
  ValidationTypeDesc = 'validationType_DESC'
}

export type TextInputFieldParent = ContactForm | Form;

export type TextInputFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type TextInputFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type TextInputFieldParentCreateManyInlineInput = {
  /** Connect multiple existing TextInputFieldParent documents */
  connect?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing TextInputFieldParent documents */
  create?: InputMaybe<Array<TextInputFieldParentCreateInput>>;
};

export type TextInputFieldParentCreateOneInlineInput = {
  /** Connect one existing TextInputFieldParent document */
  connect?: InputMaybe<TextInputFieldParentWhereUniqueInput>;
  /** Create and connect one TextInputFieldParent document */
  create?: InputMaybe<TextInputFieldParentCreateInput>;
};

export type TextInputFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type TextInputFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing TextInputFieldParent documents */
  connect?: InputMaybe<Array<TextInputFieldParentConnectInput>>;
  /** Create and connect multiple TextInputFieldParent documents */
  create?: InputMaybe<Array<TextInputFieldParentCreateInput>>;
  /** Delete multiple TextInputFieldParent documents */
  delete?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Disconnect multiple TextInputFieldParent documents */
  disconnect?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing TextInputFieldParent documents */
  set?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Update multiple TextInputFieldParent documents */
  update?: InputMaybe<Array<TextInputFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple TextInputFieldParent documents */
  upsert?: InputMaybe<Array<TextInputFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type TextInputFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type TextInputFieldParentUpdateOneInlineInput = {
  /** Connect existing TextInputFieldParent document */
  connect?: InputMaybe<TextInputFieldParentWhereUniqueInput>;
  /** Create and connect one TextInputFieldParent document */
  create?: InputMaybe<TextInputFieldParentCreateInput>;
  /** Delete currently connected TextInputFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected TextInputFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single TextInputFieldParent document */
  update?: InputMaybe<TextInputFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextInputFieldParent document */
  upsert?: InputMaybe<TextInputFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type TextInputFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type TextInputFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type TextInputFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type TextInputFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type TextInputFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  validationType?: InputMaybe<TextInputValidationType>;
};

export type TextInputFieldUpdateManyInlineInput = {
  /** Create and connect multiple TextInputField component instances */
  create?: InputMaybe<Array<TextInputFieldCreateWithPositionInput>>;
  /** Delete multiple TextInputField documents */
  delete?: InputMaybe<Array<TextInputFieldWhereUniqueInput>>;
  /** Update multiple TextInputField component instances */
  update?: InputMaybe<Array<TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TextInputField component instances */
  upsert?: InputMaybe<Array<TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TextInputFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  formId?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  validationType?: InputMaybe<TextInputValidationType>;
};

export type TextInputFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TextInputFieldUpdateManyInput;
  /** Document search */
  where: TextInputFieldWhereInput;
};

export type TextInputFieldUpdateOneInlineInput = {
  /** Create and connect one TextInputField document */
  create?: InputMaybe<TextInputFieldCreateInput>;
  /** Delete currently connected TextInputField document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single TextInputField document */
  update?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextInputField document */
  upsert?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueInput>;
};

export type TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TextInputFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextInputFieldWhereUniqueInput;
};

export type TextInputFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TextInputFieldUpdateInput;
  /** Unique document search */
  where: TextInputFieldWhereUniqueInput;
};

export type TextInputFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: TextInputFieldCreateInput;
  /** Update document if it exists */
  update: TextInputFieldUpdateInput;
};

export type TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TextInputFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextInputFieldWhereUniqueInput;
};

export type TextInputFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TextInputFieldUpsertInput;
  /** Unique document search */
  where: TextInputFieldWhereUniqueInput;
};

/** Identifies documents */
export type TextInputFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  displayName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  fieldGroup?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  formId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  formId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  label?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  label_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  required_not?: InputMaybe<Scalars['Boolean']>;
  validationType?: InputMaybe<TextInputValidationType>;
  /** All values that are contained in given list. */
  validationType_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
  /** All values that are not equal to given value. */
  validationType_not?: InputMaybe<TextInputValidationType>;
  /** All values that are not contained in given list. */
  validationType_not_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
};

/** References TextInputField record uniquely */
export type TextInputFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum TextInputValidationType {
  Email = 'email',
  Phone = 'phone'
}

export type Theme = Node & {
  __typename?: 'Theme';
  colors: ThemeColors;
  configurations: Array<Configuration>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Theme>;
  fonts: ThemeFonts;
  /** List of Theme versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ThemeColorsArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeConfigurationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigurationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigurationWhereInput>;
};


export type ThemeCreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ThemeFontsArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ThemePublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ThemeUpdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export enum ThemeColor {
  Black = 'black',
  Blue = 'blue',
  Cyan = 'cyan',
  Gray = 'gray',
  Green = 'green',
  Orange = 'orange',
  Pink = 'pink',
  Primary = 'primary',
  Purple = 'purple',
  Red = 'red',
  Secondary = 'secondary',
  Teal = 'teal',
  Tertiary = 'tertiary',
  White = 'white',
  Yellow = 'yellow'
}

export type ThemeColors = {
  __typename?: 'ThemeColors';
  black: Color;
  blue: Color;
  cyan: Color;
  dark: Color;
  gray: Color;
  green: Color;
  /** The unique identifier */
  id: Scalars['ID'];
  light: Color;
  orange: Color;
  pink: Color;
  primary: Color;
  purple: Color;
  red: Color;
  secondary: Color;
  /** System stage field */
  stage: Stage;
  teal: Color;
  tertiary: Color;
  white: Color;
  yellow: Color;
};

export type ThemeColorsConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ThemeColorsWhereUniqueInput;
};

/** A connection to a list of items. */
export type ThemeColorsConnection = {
  __typename?: 'ThemeColorsConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ThemeColorsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ThemeColorsCreateInput = {
  black: ColorInput;
  blue: ColorInput;
  cyan: ColorInput;
  dark: ColorInput;
  gray: ColorInput;
  green: ColorInput;
  light: ColorInput;
  orange: ColorInput;
  pink: ColorInput;
  primary: ColorInput;
  purple: ColorInput;
  red: ColorInput;
  secondary: ColorInput;
  teal: ColorInput;
  tertiary: ColorInput;
  white: ColorInput;
  yellow: ColorInput;
};

export type ThemeColorsCreateManyInlineInput = {
  /** Create and connect multiple existing ThemeColors documents */
  create?: InputMaybe<Array<ThemeColorsCreateInput>>;
};

export type ThemeColorsCreateOneInlineInput = {
  /** Create and connect one ThemeColors document */
  create?: InputMaybe<ThemeColorsCreateInput>;
};

export type ThemeColorsCreateWithPositionInput = {
  /** Document to create */
  data: ThemeColorsCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ThemeColorsEdge = {
  __typename?: 'ThemeColorsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ThemeColors;
};

/** Identifies documents */
export type ThemeColorsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum ThemeColorsOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ThemeColorsParent = Theme;

export type ThemeColorsParentConnectInput = {
  Theme?: InputMaybe<ThemeConnectInput>;
};

export type ThemeColorsParentCreateInput = {
  Theme?: InputMaybe<ThemeCreateInput>;
};

export type ThemeColorsParentCreateManyInlineInput = {
  /** Connect multiple existing ThemeColorsParent documents */
  connect?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Create and connect multiple existing ThemeColorsParent documents */
  create?: InputMaybe<Array<ThemeColorsParentCreateInput>>;
};

export type ThemeColorsParentCreateOneInlineInput = {
  /** Connect one existing ThemeColorsParent document */
  connect?: InputMaybe<ThemeColorsParentWhereUniqueInput>;
  /** Create and connect one ThemeColorsParent document */
  create?: InputMaybe<ThemeColorsParentCreateInput>;
};

export type ThemeColorsParentUpdateInput = {
  Theme?: InputMaybe<ThemeUpdateInput>;
};

export type ThemeColorsParentUpdateManyInlineInput = {
  /** Connect multiple existing ThemeColorsParent documents */
  connect?: InputMaybe<Array<ThemeColorsParentConnectInput>>;
  /** Create and connect multiple ThemeColorsParent documents */
  create?: InputMaybe<Array<ThemeColorsParentCreateInput>>;
  /** Delete multiple ThemeColorsParent documents */
  delete?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Disconnect multiple ThemeColorsParent documents */
  disconnect?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ThemeColorsParent documents */
  set?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Update multiple ThemeColorsParent documents */
  update?: InputMaybe<Array<ThemeColorsParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ThemeColorsParent documents */
  upsert?: InputMaybe<Array<ThemeColorsParentUpsertWithNestedWhereUniqueInput>>;
};

export type ThemeColorsParentUpdateManyWithNestedWhereInput = {
  Theme?: InputMaybe<ThemeUpdateManyWithNestedWhereInput>;
};

export type ThemeColorsParentUpdateOneInlineInput = {
  /** Connect existing ThemeColorsParent document */
  connect?: InputMaybe<ThemeColorsParentWhereUniqueInput>;
  /** Create and connect one ThemeColorsParent document */
  create?: InputMaybe<ThemeColorsParentCreateInput>;
  /** Delete currently connected ThemeColorsParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ThemeColorsParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ThemeColorsParent document */
  update?: InputMaybe<ThemeColorsParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ThemeColorsParent document */
  upsert?: InputMaybe<ThemeColorsParentUpsertWithNestedWhereUniqueInput>;
};

export type ThemeColorsParentUpdateWithNestedWhereUniqueInput = {
  Theme?: InputMaybe<ThemeUpdateWithNestedWhereUniqueInput>;
};

export type ThemeColorsParentUpsertWithNestedWhereUniqueInput = {
  Theme?: InputMaybe<ThemeUpsertWithNestedWhereUniqueInput>;
};

export type ThemeColorsParentWhereInput = {
  Theme?: InputMaybe<ThemeWhereInput>;
};

export type ThemeColorsParentWhereUniqueInput = {
  Theme?: InputMaybe<ThemeWhereUniqueInput>;
};

export type ThemeColorsUpdateInput = {
  black?: InputMaybe<ColorInput>;
  blue?: InputMaybe<ColorInput>;
  cyan?: InputMaybe<ColorInput>;
  dark?: InputMaybe<ColorInput>;
  gray?: InputMaybe<ColorInput>;
  green?: InputMaybe<ColorInput>;
  light?: InputMaybe<ColorInput>;
  orange?: InputMaybe<ColorInput>;
  pink?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  purple?: InputMaybe<ColorInput>;
  red?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  teal?: InputMaybe<ColorInput>;
  tertiary?: InputMaybe<ColorInput>;
  white?: InputMaybe<ColorInput>;
  yellow?: InputMaybe<ColorInput>;
};

export type ThemeColorsUpdateManyInlineInput = {
  /** Create and connect multiple ThemeColors component instances */
  create?: InputMaybe<Array<ThemeColorsCreateWithPositionInput>>;
  /** Delete multiple ThemeColors documents */
  delete?: InputMaybe<Array<ThemeColorsWhereUniqueInput>>;
  /** Update multiple ThemeColors component instances */
  update?: InputMaybe<Array<ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ThemeColors component instances */
  upsert?: InputMaybe<Array<ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ThemeColorsUpdateManyInput = {
  black?: InputMaybe<ColorInput>;
  blue?: InputMaybe<ColorInput>;
  cyan?: InputMaybe<ColorInput>;
  dark?: InputMaybe<ColorInput>;
  gray?: InputMaybe<ColorInput>;
  green?: InputMaybe<ColorInput>;
  light?: InputMaybe<ColorInput>;
  orange?: InputMaybe<ColorInput>;
  pink?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  purple?: InputMaybe<ColorInput>;
  red?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  teal?: InputMaybe<ColorInput>;
  tertiary?: InputMaybe<ColorInput>;
  white?: InputMaybe<ColorInput>;
  yellow?: InputMaybe<ColorInput>;
};

export type ThemeColorsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ThemeColorsUpdateManyInput;
  /** Document search */
  where: ThemeColorsWhereInput;
};

export type ThemeColorsUpdateOneInlineInput = {
  /** Create and connect one ThemeColors document */
  create?: InputMaybe<ThemeColorsCreateInput>;
  /** Delete currently connected ThemeColors document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ThemeColors document */
  update?: InputMaybe<ThemeColorsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ThemeColors document */
  upsert?: InputMaybe<ThemeColorsUpsertWithNestedWhereUniqueInput>;
};

export type ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ThemeColorsUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeColorsWhereUniqueInput;
};

export type ThemeColorsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ThemeColorsUpdateInput;
  /** Unique document search */
  where: ThemeColorsWhereUniqueInput;
};

export type ThemeColorsUpsertInput = {
  /** Create document if it didn't exist */
  create: ThemeColorsCreateInput;
  /** Update document if it exists */
  update: ThemeColorsUpdateInput;
};

export type ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ThemeColorsUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeColorsWhereUniqueInput;
};

export type ThemeColorsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ThemeColorsUpsertInput;
  /** Unique document search */
  where: ThemeColorsWhereUniqueInput;
};

/** Identifies documents */
export type ThemeColorsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References ThemeColors record uniquely */
export type ThemeColorsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ThemeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ThemeWhereUniqueInput;
};

/** A connection to a list of items. */
export type ThemeConnection = {
  __typename?: 'ThemeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ThemeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ThemeCreateInput = {
  colors: ThemeColorsCreateOneInlineInput;
  configurations?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fonts: ThemeFontsCreateOneInlineInput;
  name: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ThemeCreateManyInlineInput = {
  /** Connect multiple existing Theme documents */
  connect?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Create and connect multiple existing Theme documents */
  create?: InputMaybe<Array<ThemeCreateInput>>;
};

export type ThemeCreateOneInlineInput = {
  /** Connect one existing Theme document */
  connect?: InputMaybe<ThemeWhereUniqueInput>;
  /** Create and connect one Theme document */
  create?: InputMaybe<ThemeCreateInput>;
};

/** An edge in a connection. */
export type ThemeEdge = {
  __typename?: 'ThemeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Theme;
};

export type ThemeFonts = {
  __typename?: 'ThemeFonts';
  black: Scalars['Int'];
  body: Scalars['String'];
  bold: Scalars['Int'];
  extrabold: Scalars['Int'];
  hairline: Scalars['Int'];
  headings: Scalars['String'];
  /** The unique identifier */
  id: Scalars['ID'];
  light: Scalars['Int'];
  medium: Scalars['Int'];
  monospace: Scalars['String'];
  normal: Scalars['Int'];
  semibold: Scalars['Int'];
  /** System stage field */
  stage: Stage;
  thin: Scalars['Int'];
};

export type ThemeFontsConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ThemeFontsWhereUniqueInput;
};

/** A connection to a list of items. */
export type ThemeFontsConnection = {
  __typename?: 'ThemeFontsConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ThemeFontsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ThemeFontsCreateInput = {
  black: Scalars['Int'];
  body: Scalars['String'];
  bold: Scalars['Int'];
  extrabold: Scalars['Int'];
  hairline: Scalars['Int'];
  headings: Scalars['String'];
  light: Scalars['Int'];
  medium: Scalars['Int'];
  monospace: Scalars['String'];
  normal: Scalars['Int'];
  semibold: Scalars['Int'];
  thin: Scalars['Int'];
};

export type ThemeFontsCreateManyInlineInput = {
  /** Create and connect multiple existing ThemeFonts documents */
  create?: InputMaybe<Array<ThemeFontsCreateInput>>;
};

export type ThemeFontsCreateOneInlineInput = {
  /** Create and connect one ThemeFonts document */
  create?: InputMaybe<ThemeFontsCreateInput>;
};

export type ThemeFontsCreateWithPositionInput = {
  /** Document to create */
  data: ThemeFontsCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ThemeFontsEdge = {
  __typename?: 'ThemeFontsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ThemeFonts;
};

/** Identifies documents */
export type ThemeFontsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  black?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  black_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  black_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  black_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  black_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  black_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  black_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  black_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  body?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  body_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  body_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  body_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  body_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  body_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  body_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  body_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  body_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  body_starts_with?: InputMaybe<Scalars['String']>;
  bold?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  bold_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  bold_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  bold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  bold_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  bold_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  bold_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  bold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  extrabold?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  extrabold_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  extrabold_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  extrabold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  extrabold_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  extrabold_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  extrabold_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  extrabold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  hairline?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  hairline_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  hairline_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  hairline_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  hairline_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  hairline_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  hairline_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  hairline_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  headings?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headings_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headings_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headings_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headings_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headings_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headings_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headings_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headings_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headings_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  light?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  light_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  light_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  light_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  light_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  light_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  light_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  light_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  medium?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  medium_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  medium_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  medium_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  medium_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  medium_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  medium_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  medium_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  monospace?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  monospace_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  monospace_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  monospace_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  monospace_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  monospace_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  monospace_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  monospace_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  monospace_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  monospace_starts_with?: InputMaybe<Scalars['String']>;
  normal?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  normal_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  normal_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  normal_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  normal_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  normal_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  normal_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  normal_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  semibold?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  semibold_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  semibold_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  semibold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  semibold_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  semibold_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  semibold_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  semibold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  thin?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  thin_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  thin_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  thin_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  thin_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  thin_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  thin_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  thin_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export enum ThemeFontsOrderByInput {
  BlackAsc = 'black_ASC',
  BlackDesc = 'black_DESC',
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  BoldAsc = 'bold_ASC',
  BoldDesc = 'bold_DESC',
  ExtraboldAsc = 'extrabold_ASC',
  ExtraboldDesc = 'extrabold_DESC',
  HairlineAsc = 'hairline_ASC',
  HairlineDesc = 'hairline_DESC',
  HeadingsAsc = 'headings_ASC',
  HeadingsDesc = 'headings_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LightAsc = 'light_ASC',
  LightDesc = 'light_DESC',
  MediumAsc = 'medium_ASC',
  MediumDesc = 'medium_DESC',
  MonospaceAsc = 'monospace_ASC',
  MonospaceDesc = 'monospace_DESC',
  NormalAsc = 'normal_ASC',
  NormalDesc = 'normal_DESC',
  SemiboldAsc = 'semibold_ASC',
  SemiboldDesc = 'semibold_DESC',
  ThinAsc = 'thin_ASC',
  ThinDesc = 'thin_DESC'
}

export type ThemeFontsParent = Theme;

export type ThemeFontsParentConnectInput = {
  Theme?: InputMaybe<ThemeConnectInput>;
};

export type ThemeFontsParentCreateInput = {
  Theme?: InputMaybe<ThemeCreateInput>;
};

export type ThemeFontsParentCreateManyInlineInput = {
  /** Connect multiple existing ThemeFontsParent documents */
  connect?: InputMaybe<Array<ThemeFontsParentWhereUniqueInput>>;
  /** Create and connect multiple existing ThemeFontsParent documents */
  create?: InputMaybe<Array<ThemeFontsParentCreateInput>>;
};

export type ThemeFontsParentCreateOneInlineInput = {
  /** Connect one existing ThemeFontsParent document */
  connect?: InputMaybe<ThemeFontsParentWhereUniqueInput>;
  /** Create and connect one ThemeFontsParent document */
  create?: InputMaybe<ThemeFontsParentCreateInput>;
};

export type ThemeFontsParentUpdateInput = {
  Theme?: InputMaybe<ThemeUpdateInput>;
};

export type ThemeFontsParentUpdateManyInlineInput = {
  /** Connect multiple existing ThemeFontsParent documents */
  connect?: InputMaybe<Array<ThemeFontsParentConnectInput>>;
  /** Create and connect multiple ThemeFontsParent documents */
  create?: InputMaybe<Array<ThemeFontsParentCreateInput>>;
  /** Delete multiple ThemeFontsParent documents */
  delete?: InputMaybe<Array<ThemeFontsParentWhereUniqueInput>>;
  /** Disconnect multiple ThemeFontsParent documents */
  disconnect?: InputMaybe<Array<ThemeFontsParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ThemeFontsParent documents */
  set?: InputMaybe<Array<ThemeFontsParentWhereUniqueInput>>;
  /** Update multiple ThemeFontsParent documents */
  update?: InputMaybe<Array<ThemeFontsParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ThemeFontsParent documents */
  upsert?: InputMaybe<Array<ThemeFontsParentUpsertWithNestedWhereUniqueInput>>;
};

export type ThemeFontsParentUpdateManyWithNestedWhereInput = {
  Theme?: InputMaybe<ThemeUpdateManyWithNestedWhereInput>;
};

export type ThemeFontsParentUpdateOneInlineInput = {
  /** Connect existing ThemeFontsParent document */
  connect?: InputMaybe<ThemeFontsParentWhereUniqueInput>;
  /** Create and connect one ThemeFontsParent document */
  create?: InputMaybe<ThemeFontsParentCreateInput>;
  /** Delete currently connected ThemeFontsParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ThemeFontsParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ThemeFontsParent document */
  update?: InputMaybe<ThemeFontsParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ThemeFontsParent document */
  upsert?: InputMaybe<ThemeFontsParentUpsertWithNestedWhereUniqueInput>;
};

export type ThemeFontsParentUpdateWithNestedWhereUniqueInput = {
  Theme?: InputMaybe<ThemeUpdateWithNestedWhereUniqueInput>;
};

export type ThemeFontsParentUpsertWithNestedWhereUniqueInput = {
  Theme?: InputMaybe<ThemeUpsertWithNestedWhereUniqueInput>;
};

export type ThemeFontsParentWhereInput = {
  Theme?: InputMaybe<ThemeWhereInput>;
};

export type ThemeFontsParentWhereUniqueInput = {
  Theme?: InputMaybe<ThemeWhereUniqueInput>;
};

export type ThemeFontsUpdateInput = {
  black?: InputMaybe<Scalars['Int']>;
  body?: InputMaybe<Scalars['String']>;
  bold?: InputMaybe<Scalars['Int']>;
  extrabold?: InputMaybe<Scalars['Int']>;
  hairline?: InputMaybe<Scalars['Int']>;
  headings?: InputMaybe<Scalars['String']>;
  light?: InputMaybe<Scalars['Int']>;
  medium?: InputMaybe<Scalars['Int']>;
  monospace?: InputMaybe<Scalars['String']>;
  normal?: InputMaybe<Scalars['Int']>;
  semibold?: InputMaybe<Scalars['Int']>;
  thin?: InputMaybe<Scalars['Int']>;
};

export type ThemeFontsUpdateManyInlineInput = {
  /** Create and connect multiple ThemeFonts component instances */
  create?: InputMaybe<Array<ThemeFontsCreateWithPositionInput>>;
  /** Delete multiple ThemeFonts documents */
  delete?: InputMaybe<Array<ThemeFontsWhereUniqueInput>>;
  /** Update multiple ThemeFonts component instances */
  update?: InputMaybe<Array<ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ThemeFonts component instances */
  upsert?: InputMaybe<Array<ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ThemeFontsUpdateManyInput = {
  black?: InputMaybe<Scalars['Int']>;
  body?: InputMaybe<Scalars['String']>;
  bold?: InputMaybe<Scalars['Int']>;
  extrabold?: InputMaybe<Scalars['Int']>;
  hairline?: InputMaybe<Scalars['Int']>;
  headings?: InputMaybe<Scalars['String']>;
  light?: InputMaybe<Scalars['Int']>;
  medium?: InputMaybe<Scalars['Int']>;
  monospace?: InputMaybe<Scalars['String']>;
  normal?: InputMaybe<Scalars['Int']>;
  semibold?: InputMaybe<Scalars['Int']>;
  thin?: InputMaybe<Scalars['Int']>;
};

export type ThemeFontsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ThemeFontsUpdateManyInput;
  /** Document search */
  where: ThemeFontsWhereInput;
};

export type ThemeFontsUpdateOneInlineInput = {
  /** Create and connect one ThemeFonts document */
  create?: InputMaybe<ThemeFontsCreateInput>;
  /** Delete currently connected ThemeFonts document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ThemeFonts document */
  update?: InputMaybe<ThemeFontsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ThemeFonts document */
  upsert?: InputMaybe<ThemeFontsUpsertWithNestedWhereUniqueInput>;
};

export type ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ThemeFontsUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeFontsWhereUniqueInput;
};

export type ThemeFontsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ThemeFontsUpdateInput;
  /** Unique document search */
  where: ThemeFontsWhereUniqueInput;
};

export type ThemeFontsUpsertInput = {
  /** Create document if it didn't exist */
  create: ThemeFontsCreateInput;
  /** Update document if it exists */
  update: ThemeFontsUpdateInput;
};

export type ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ThemeFontsUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeFontsWhereUniqueInput;
};

export type ThemeFontsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ThemeFontsUpsertInput;
  /** Unique document search */
  where: ThemeFontsWhereUniqueInput;
};

/** Identifies documents */
export type ThemeFontsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  black?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  black_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  black_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  black_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  black_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  black_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  black_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  black_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  body?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  body_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  body_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  body_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  body_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  body_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  body_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  body_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  body_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  body_starts_with?: InputMaybe<Scalars['String']>;
  bold?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  bold_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  bold_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  bold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  bold_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  bold_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  bold_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  bold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  extrabold?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  extrabold_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  extrabold_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  extrabold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  extrabold_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  extrabold_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  extrabold_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  extrabold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  hairline?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  hairline_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  hairline_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  hairline_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  hairline_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  hairline_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  hairline_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  hairline_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  headings?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headings_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headings_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headings_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  headings_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headings_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headings_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headings_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headings_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headings_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  light?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  light_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  light_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  light_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  light_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  light_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  light_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  light_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  medium?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  medium_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  medium_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  medium_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  medium_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  medium_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  medium_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  medium_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  monospace?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  monospace_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  monospace_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  monospace_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  monospace_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  monospace_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  monospace_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  monospace_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  monospace_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  monospace_starts_with?: InputMaybe<Scalars['String']>;
  normal?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  normal_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  normal_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  normal_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  normal_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  normal_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  normal_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  normal_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  semibold?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  semibold_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  semibold_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  semibold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  semibold_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  semibold_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  semibold_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  semibold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  thin?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  thin_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  thin_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  thin_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  thin_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  thin_lte?: InputMaybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  thin_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  thin_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

/** References ThemeFonts record uniquely */
export type ThemeFontsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type ThemeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  colors?: InputMaybe<ThemeColorsWhereInput>;
  configurations_every?: InputMaybe<ConfigurationWhereInput>;
  configurations_none?: InputMaybe<ConfigurationWhereInput>;
  configurations_some?: InputMaybe<ConfigurationWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_none?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_some?: InputMaybe<ThemeWhereStageInput>;
  fonts?: InputMaybe<ThemeFontsWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ThemeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ThemeUpdateInput = {
  colors?: InputMaybe<ThemeColorsUpdateOneInlineInput>;
  configurations?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  fonts?: InputMaybe<ThemeFontsUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
};

export type ThemeUpdateManyInlineInput = {
  /** Connect multiple existing Theme documents */
  connect?: InputMaybe<Array<ThemeConnectInput>>;
  /** Create and connect multiple Theme documents */
  create?: InputMaybe<Array<ThemeCreateInput>>;
  /** Delete multiple Theme documents */
  delete?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Disconnect multiple Theme documents */
  disconnect?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Theme documents */
  set?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Update multiple Theme documents */
  update?: InputMaybe<Array<ThemeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Theme documents */
  upsert?: InputMaybe<Array<ThemeUpsertWithNestedWhereUniqueInput>>;
};

export type ThemeUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type ThemeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ThemeUpdateManyInput;
  /** Document search */
  where: ThemeWhereInput;
};

export type ThemeUpdateOneInlineInput = {
  /** Connect existing Theme document */
  connect?: InputMaybe<ThemeWhereUniqueInput>;
  /** Create and connect one Theme document */
  create?: InputMaybe<ThemeCreateInput>;
  /** Delete currently connected Theme document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Theme document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Theme document */
  update?: InputMaybe<ThemeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Theme document */
  upsert?: InputMaybe<ThemeUpsertWithNestedWhereUniqueInput>;
};

export type ThemeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ThemeUpdateInput;
  /** Unique document search */
  where: ThemeWhereUniqueInput;
};

export type ThemeUpsertInput = {
  /** Create document if it didn't exist */
  create: ThemeCreateInput;
  /** Update document if it exists */
  update: ThemeUpdateInput;
};

export type ThemeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ThemeUpsertInput;
  /** Unique document search */
  where: ThemeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ThemeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ThemeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  colors?: InputMaybe<ThemeColorsWhereInput>;
  configurations_every?: InputMaybe<ConfigurationWhereInput>;
  configurations_none?: InputMaybe<ConfigurationWhereInput>;
  configurations_some?: InputMaybe<ConfigurationWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_none?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_some?: InputMaybe<ThemeWhereStageInput>;
  fonts?: InputMaybe<ThemeFontsWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ThemeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ThemeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Theme record uniquely */
export type ThemeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Node & {
  __typename?: 'User';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
};


/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type VendorLogo = {
  __typename?: 'VendorLogo';
  /** Logo color in dark mode (black background) */
  darkColor: Color;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Logo color in light mode (white background) */
  lightColor: Color;
  logo: Asset;
  name: Scalars['String'];
  postText?: Maybe<Scalars['String']>;
  pretext: Scalars['String'];
  /** System stage field */
  stage: Stage;
};


export type VendorLogoLogoArgs = {
  locales?: InputMaybe<Array<Locale>>;
};

export type VendorLogoConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: VendorLogoWhereUniqueInput;
};

/** A connection to a list of items. */
export type VendorLogoConnection = {
  __typename?: 'VendorLogoConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<VendorLogoEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type VendorLogoCreateInput = {
  darkColor: ColorInput;
  lightColor: ColorInput;
  logo: AssetCreateOneInlineInput;
  name: Scalars['String'];
  postText?: InputMaybe<Scalars['String']>;
  pretext: Scalars['String'];
};

export type VendorLogoCreateManyInlineInput = {
  /** Create and connect multiple existing VendorLogo documents */
  create?: InputMaybe<Array<VendorLogoCreateInput>>;
};

export type VendorLogoCreateOneInlineInput = {
  /** Create and connect one VendorLogo document */
  create?: InputMaybe<VendorLogoCreateInput>;
};

export type VendorLogoCreateWithPositionInput = {
  /** Document to create */
  data: VendorLogoCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type VendorLogoEdge = {
  __typename?: 'VendorLogoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: VendorLogo;
};

/** Identifies documents */
export type VendorLogoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  postText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  postText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  postText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  postText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  postText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  postText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  postText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  postText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  postText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  postText_starts_with?: InputMaybe<Scalars['String']>;
  pretext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pretext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pretext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pretext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  pretext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pretext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pretext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pretext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pretext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pretext_starts_with?: InputMaybe<Scalars['String']>;
};

export enum VendorLogoOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PostTextAsc = 'postText_ASC',
  PostTextDesc = 'postText_DESC',
  PretextAsc = 'pretext_ASC',
  PretextDesc = 'pretext_DESC'
}

export type VendorLogoParent = PageContent;

export type VendorLogoParentConnectInput = {
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type VendorLogoParentCreateInput = {
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type VendorLogoParentCreateManyInlineInput = {
  /** Connect multiple existing VendorLogoParent documents */
  connect?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Create and connect multiple existing VendorLogoParent documents */
  create?: InputMaybe<Array<VendorLogoParentCreateInput>>;
};

export type VendorLogoParentCreateOneInlineInput = {
  /** Connect one existing VendorLogoParent document */
  connect?: InputMaybe<VendorLogoParentWhereUniqueInput>;
  /** Create and connect one VendorLogoParent document */
  create?: InputMaybe<VendorLogoParentCreateInput>;
};

export type VendorLogoParentUpdateInput = {
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type VendorLogoParentUpdateManyInlineInput = {
  /** Connect multiple existing VendorLogoParent documents */
  connect?: InputMaybe<Array<VendorLogoParentConnectInput>>;
  /** Create and connect multiple VendorLogoParent documents */
  create?: InputMaybe<Array<VendorLogoParentCreateInput>>;
  /** Delete multiple VendorLogoParent documents */
  delete?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Disconnect multiple VendorLogoParent documents */
  disconnect?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing VendorLogoParent documents */
  set?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Update multiple VendorLogoParent documents */
  update?: InputMaybe<Array<VendorLogoParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple VendorLogoParent documents */
  upsert?: InputMaybe<Array<VendorLogoParentUpsertWithNestedWhereUniqueInput>>;
};

export type VendorLogoParentUpdateManyWithNestedWhereInput = {
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type VendorLogoParentUpdateOneInlineInput = {
  /** Connect existing VendorLogoParent document */
  connect?: InputMaybe<VendorLogoParentWhereUniqueInput>;
  /** Create and connect one VendorLogoParent document */
  create?: InputMaybe<VendorLogoParentCreateInput>;
  /** Delete currently connected VendorLogoParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected VendorLogoParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single VendorLogoParent document */
  update?: InputMaybe<VendorLogoParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single VendorLogoParent document */
  upsert?: InputMaybe<VendorLogoParentUpsertWithNestedWhereUniqueInput>;
};

export type VendorLogoParentUpdateWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type VendorLogoParentUpsertWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type VendorLogoParentWhereInput = {
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type VendorLogoParentWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type VendorLogoUpdateInput = {
  darkColor?: InputMaybe<ColorInput>;
  lightColor?: InputMaybe<ColorInput>;
  logo?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  postText?: InputMaybe<Scalars['String']>;
  pretext?: InputMaybe<Scalars['String']>;
};

export type VendorLogoUpdateManyInlineInput = {
  /** Create and connect multiple VendorLogo component instances */
  create?: InputMaybe<Array<VendorLogoCreateWithPositionInput>>;
  /** Delete multiple VendorLogo documents */
  delete?: InputMaybe<Array<VendorLogoWhereUniqueInput>>;
  /** Update multiple VendorLogo component instances */
  update?: InputMaybe<Array<VendorLogoUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple VendorLogo component instances */
  upsert?: InputMaybe<Array<VendorLogoUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type VendorLogoUpdateManyInput = {
  darkColor?: InputMaybe<ColorInput>;
  lightColor?: InputMaybe<ColorInput>;
  name?: InputMaybe<Scalars['String']>;
  postText?: InputMaybe<Scalars['String']>;
  pretext?: InputMaybe<Scalars['String']>;
};

export type VendorLogoUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: VendorLogoUpdateManyInput;
  /** Document search */
  where: VendorLogoWhereInput;
};

export type VendorLogoUpdateOneInlineInput = {
  /** Create and connect one VendorLogo document */
  create?: InputMaybe<VendorLogoCreateInput>;
  /** Delete currently connected VendorLogo document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single VendorLogo document */
  update?: InputMaybe<VendorLogoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single VendorLogo document */
  upsert?: InputMaybe<VendorLogoUpsertWithNestedWhereUniqueInput>;
};

export type VendorLogoUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<VendorLogoUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: VendorLogoWhereUniqueInput;
};

export type VendorLogoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: VendorLogoUpdateInput;
  /** Unique document search */
  where: VendorLogoWhereUniqueInput;
};

export type VendorLogoUpsertInput = {
  /** Create document if it didn't exist */
  create: VendorLogoCreateInput;
  /** Update document if it exists */
  update: VendorLogoUpdateInput;
};

export type VendorLogoUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<VendorLogoUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: VendorLogoWhereUniqueInput;
};

export type VendorLogoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: VendorLogoUpsertInput;
  /** Unique document search */
  where: VendorLogoWhereUniqueInput;
};

/** Identifies documents */
export type VendorLogoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  postText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  postText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  postText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  postText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  postText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  postText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  postText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  postText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  postText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  postText_starts_with?: InputMaybe<Scalars['String']>;
  pretext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  pretext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  pretext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  pretext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values that are not equal to given value. */
  pretext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  pretext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  pretext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  pretext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  pretext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  pretext_starts_with?: InputMaybe<Scalars['String']>;
};

/** References VendorLogo record uniquely */
export type VendorLogoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Version = {
  __typename?: 'Version';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export enum _FilterKind {
  And = 'AND',
  Not = 'NOT',
  Or = 'OR',
  Contains = 'contains',
  ContainsAll = 'contains_all',
  ContainsNone = 'contains_none',
  ContainsSome = 'contains_some',
  EndsWith = 'ends_with',
  Eq = 'eq',
  EqNot = 'eq_not',
  Gt = 'gt',
  Gte = 'gte',
  In = 'in',
  Lt = 'lt',
  Lte = 'lte',
  NotContains = 'not_contains',
  NotEndsWith = 'not_ends_with',
  NotIn = 'not_in',
  NotStartsWith = 'not_starts_with',
  RelationalEvery = 'relational_every',
  RelationalNone = 'relational_none',
  RelationalSingle = 'relational_single',
  RelationalSome = 'relational_some',
  Search = 'search',
  StartsWith = 'starts_with'
}

export enum _MutationInputFieldKind {
  Enum = 'enum',
  Relation = 'relation',
  RichText = 'richText',
  RichTextWithEmbeds = 'richTextWithEmbeds',
  Scalar = 'scalar',
  Union = 'union',
  Virtual = 'virtual'
}

export enum _MutationKind {
  Create = 'create',
  Delete = 'delete',
  DeleteMany = 'deleteMany',
  Publish = 'publish',
  PublishMany = 'publishMany',
  SchedulePublish = 'schedulePublish',
  ScheduleUnpublish = 'scheduleUnpublish',
  Unpublish = 'unpublish',
  UnpublishMany = 'unpublishMany',
  Update = 'update',
  UpdateMany = 'updateMany',
  Upsert = 'upsert'
}

export enum _OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export enum _RelationInputCardinality {
  Many = 'many',
  One = 'one'
}

export enum _RelationInputKind {
  Create = 'create',
  Update = 'update'
}

export enum _RelationKind {
  Regular = 'regular',
  Union = 'union'
}

export enum _SystemDateTimeFieldVariation {
  Base = 'base',
  Combined = 'combined',
  Localization = 'localization'
}

export type ActionsQueryVariables = Exact<{ [key: string]: never; }>;


export type ActionsQuery = { __typename?: 'Query', pageContents: Array<{ __typename?: 'PageContent', title: string, subtitle?: string | null, callToAction: { __typename?: 'CallToActionSettings', iconColor?: ThemeColor | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, icon?: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } | null }, body?: { __typename?: 'RichText', raw: RichTextContent } | null, page?: { __typename?: 'Page', slug: string, body?: { __typename?: 'RichText', raw: RichTextContent } | null } | null }> };

export type CloudLocationsQueryVariables = Exact<{ [key: string]: never; }>;


export type CloudLocationsQuery = { __typename?: 'Query', cloudLocations: Array<{ __typename?: 'CloudLocation', active: boolean, description: string, identifier: string, name: string, testUrl: string, timeout: number, coordinates: { __typename?: 'Location', latitude: number, longitude: number } }> };

export type ConfigQueryVariables = Exact<{
  title?: InputMaybe<Scalars['String']>;
}>;


export type ConfigQuery = { __typename?: 'Query', values?: { __typename?: 'Configuration', description: string, organizationName: string, slogan: string, title: string, titleOverrides: Array<string>, createdAt: string, hqAddress: string, openMapsText: string, socialLinks: Array<{ __typename?: 'SocialLink', id: string, name: string, href: string, iconName: string }>, errorMessage: { __typename?: 'Alert', id: string, name: string, level: AlertLevel, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } }, callToAction: { __typename?: 'CallToAction', shown: number, title: string }, testimonials: Array<{ __typename?: 'Testimonial', subtitle?: string | null, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, image: { __typename?: 'Asset', fileName: string, handle: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } }>, hqCoordinates: { __typename?: 'Location', latitude: number, longitude: number }, hqMapInfo: { __typename?: 'RichText', raw: RichTextContent }, subscribe?: { __typename?: 'Form', id: string, colorScheme: ThemeColor, button: { __typename?: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', level: AlertLevel, name: string, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } } | null }, fields: Array<{ __typename: 'CheckboxField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'SelectField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'TextAreaField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number } | { __typename: 'TextInputField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number }> } | null } | null };

export type ContactFormsQueryVariables = Exact<{
  config?: InputMaybe<Scalars['String']>;
}>;


export type ContactFormsQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', contactForms: Array<{ __typename?: 'ContactForm', color: ThemeColor, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, button: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null }, fields: Array<{ __typename: 'CheckboxField', displayName: string, fieldGroup: number, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean } | { __typename: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', name: string, title?: string | null, level: AlertLevel, body: { __typename?: 'RichText', raw: RichTextContent } } | null } | { __typename: 'SelectField', displayName: string, fieldGroup: number, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean } | { __typename: 'TextAreaField', displayName: string, fieldGroup: number, formId: string, label?: string | null, required: boolean } | { __typename: 'TextInputField', displayName: string, fieldGroup: number, formId: string, label?: string | null, required: boolean, validationType?: TextInputValidationType | null }>, icon: { __typename?: 'Icon', name: string, family: string } }> } | null };

export type DocsGroupQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']>;
}>;


export type DocsGroupQuery = { __typename?: 'Query', docsGroup?: { __typename?: 'DocsGroup', slug: string, subtitle?: string | null, title: string, callToAction: { __typename?: 'CallToActionSettings', enable: boolean, iconColor?: ThemeColor | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, icon?: { __typename?: 'Asset', mimeType?: string | null, height?: number | null, size?: number | null, url: string, width?: number | null, fileName: string } | null }, docsPages: Array<{ __typename?: 'DocsPage', updatedAt: string, title: string, slug: string, showUpdatedDate: boolean, description: string, body: { __typename?: 'DocsPageBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null }> } }>, summary: { __typename?: 'DocsGroupSummaryRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null }> } } | null };

export type DocsGroupsQueryVariables = Exact<{ [key: string]: never; }>;


export type DocsGroupsQuery = { __typename?: 'Query', docsGroups: Array<{ __typename?: 'DocsGroup', slug: string, subtitle?: string | null, title: string, callToAction: { __typename?: 'CallToActionSettings', enable: boolean, iconColor?: ThemeColor | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, icon?: { __typename?: 'Asset', mimeType?: string | null, height?: number | null, size?: number | null, url: string, width?: number | null, fileName: string } | null }, docsPages: Array<{ __typename?: 'DocsPage', updatedAt: string, title: string, slug: string, showUpdatedDate: boolean, description: string, body: { __typename?: 'DocsPageBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null }> }, docsGroup?: { __typename?: 'DocsGroup', slug: string } | null }>, summary: { __typename?: 'DocsGroupSummaryRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null }> } }> };

export type DocsPageQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']>;
}>;


export type DocsPageQuery = { __typename?: 'Query', docsPage?: { __typename?: 'DocsPage', description: string, slug: string, showUpdatedDate: boolean, title: string, updatedAt: string, body: { __typename?: 'DocsPageBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null }> }, docsGroup?: { __typename?: 'DocsGroup', slug: string } | null } | null };

export type EmployeesQueryVariables = Exact<{
  config?: InputMaybe<Scalars['String']>;
}>;


export type EmployeesQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', employees: Array<{ __typename?: 'Employee', name: string, title: string, bio: { __typename?: 'RichText', raw: RichTextContent }, photo: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } }> } | null };

export type FooterGroupsQueryVariables = Exact<{
  title?: InputMaybe<Scalars['String']>;
}>;


export type FooterGroupsQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', footerGroups: Array<{ __typename?: 'FooterGroup', title: string, row: number, pages: Array<{ __typename?: 'Page', slug: string, title: string, footerTitle?: string | null }>, pageContents: Array<{ __typename?: 'PageContent', slug: string, title: string, footerTitle?: string | null, page?: { __typename?: 'Page', slug: string } | null }>, docsGroup: Array<{ __typename?: 'DocsGroup', slug: string, footerTitle?: string | null, title: string }> }> } | null };

export type HomePageQueryVariables = Exact<{
  name?: InputMaybe<Scalars['String']>;
}>;


export type HomePageQuery = { __typename?: 'Query', homePage?: { __typename?: 'HomePage', blocks: Array<{ __typename?: 'HomePageBlock', subtitle: string, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, button?: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null } | null, image: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null, handle: string } }>, mainVideo: { __typename?: 'Asset', fileName: string, handle: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } } | null };

export type PageQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']>;
}>;


export type PageQuery = { __typename?: 'Query', page?: { __typename?: 'Page', slug: string, title: string, subtitle?: string | null, footerTitle?: string | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, callout?: { __typename?: 'Callout', subtitle?: string | null, title: string, body?: { __typename?: 'RichText', raw: RichTextContent } | null, button?: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null } | null, form?: { __typename?: 'Form', name: string, colorScheme: ThemeColor, button: { __typename: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', level: AlertLevel, name: string, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } } | null }, fields: Array<{ __typename: 'CheckboxField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'SelectField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'TextAreaField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number } | { __typename: 'TextInputField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number }> } | null } | null, contents: Array<{ __typename?: 'PageContent', slug: string, showUpdatedDate: boolean, subtitle?: string | null, title: string, updatedAt: string, body?: { __typename?: 'RichText', raw: RichTextContent } | null, button?: { __typename?: 'Button', text: string, link?: string | null, variant?: ButtonVariant | null } | null, features: Array<{ __typename?: 'Feature', iconColor?: ThemeColor | null, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, button?: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null } | null, icon?: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } | null }>, form?: { __typename?: 'Form', name: string, colorScheme: ThemeColor, button: { __typename: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', level: AlertLevel, name: string, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } } | null }, fields: Array<{ __typename: 'CheckboxField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'SelectField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'TextAreaField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number } | { __typename: 'TextInputField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number }> } | null, image?: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null } | null, vendorLogo?: { __typename: 'VendorLogo', postText?: string | null, pretext: string, name: string, darkColor: { __typename?: 'Color', hex: string }, lightColor: { __typename?: 'Color', hex: string }, logo: { __typename?: 'Asset', size?: number | null, mimeType?: string | null, width?: number | null, url: string, height?: number | null } } | null }> } | null };

export type ThemeQueryVariables = Exact<{ [key: string]: never; }>;


export type ThemeQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', theme?: { __typename?: 'Theme', colors: { __typename?: 'ThemeColors', black: { __typename?: 'Color', hex: string }, blue: { __typename?: 'Color', hex: string }, cyan: { __typename?: 'Color', hex: string }, dark: { __typename?: 'Color', hex: string }, gray: { __typename?: 'Color', hex: string }, green: { __typename?: 'Color', hex: string }, light: { __typename?: 'Color', hex: string }, orange: { __typename?: 'Color', hex: string }, pink: { __typename?: 'Color', hex: string }, primary: { __typename?: 'Color', hex: string }, purple: { __typename?: 'Color', hex: string }, red: { __typename?: 'Color', hex: string }, secondary: { __typename?: 'Color', hex: string }, teal: { __typename?: 'Color', hex: string }, tertiary: { __typename?: 'Color', hex: string }, white: { __typename?: 'Color', hex: string }, yellow: { __typename?: 'Color', hex: string } }, fonts: { __typename?: 'ThemeFonts', black: number, body: string, bold: number, extrabold: number, hairline: number, headings: string, light: number, medium: number, monospace: string, normal: number, semibold: number, thin: number } } | null } | null };


      export interface PossibleTypesResultData {
        possibleTypes: {
          [key: string]: string[]
        }
      }
      const result: PossibleTypesResultData = {
  "possibleTypes": {
    "AlertParent": [
      "Configuration",
      "FormButton"
    ],
    "ButtonParent": [
      "Callout",
      "ContactForm",
      "Feature",
      "HomePageBlock",
      "PageContent"
    ],
    "CallToActionParent": [
      "Configuration"
    ],
    "CallToActionSettingsParent": [
      "DocsGroup",
      "PageContent"
    ],
    "CalloutParent": [
      "Page"
    ],
    "CheckboxFieldParent": [
      "ContactForm",
      "Form"
    ],
    "ContactFormfieldsUnion": [
      "CheckboxField",
      "FormButton",
      "SelectField",
      "TextAreaField",
      "TextInputField"
    ],
    "DocsGroupSummaryRichTextEmbeddedTypes": [
      "Admonition",
      "Asset",
      "ContentButton"
    ],
    "DocsPageBodyRichTextEmbeddedTypes": [
      "Admonition",
      "Asset",
      "ContentButton"
    ],
    "ExternalLinkParent": [
      "FooterGroup"
    ],
    "FeatureParent": [
      "PageContent"
    ],
    "FormButtonParent": [
      "ContactForm",
      "Form"
    ],
    "FormfieldsUnion": [
      "CheckboxField",
      "SelectField",
      "TextAreaField",
      "TextInputField"
    ],
    "HomePageBlockParent": [
      "HomePage"
    ],
    "IconParent": [
      "ContactForm"
    ],
    "Node": [
      "Admonition",
      "Asset",
      "CloudLocation",
      "Configuration",
      "ContactForm",
      "ContentButton",
      "DocsGroup",
      "DocsPage",
      "Employee",
      "FooterGroup",
      "Form",
      "HomePage",
      "Page",
      "PageContent",
      "ScheduledOperation",
      "ScheduledRelease",
      "Testimonial",
      "Theme",
      "User"
    ],
    "ScheduledOperationAffectedDocument": [
      "Admonition",
      "Asset",
      "CloudLocation",
      "Configuration",
      "ContactForm",
      "ContentButton",
      "DocsGroup",
      "DocsPage",
      "Employee",
      "FooterGroup",
      "Form",
      "HomePage",
      "Page",
      "PageContent",
      "Testimonial",
      "Theme"
    ],
    "SelectFieldParent": [
      "ContactForm",
      "Form"
    ],
    "SocialLinkParent": [
      "Configuration"
    ],
    "TextAreaFieldParent": [
      "ContactForm",
      "Form"
    ],
    "TextInputFieldParent": [
      "ContactForm",
      "Form"
    ],
    "ThemeColorsParent": [
      "Theme"
    ],
    "ThemeFontsParent": [
      "Theme"
    ],
    "VendorLogoParent": [
      "PageContent"
    ]
  }
};
      export default result;
    

export const ActionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"actions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pageContents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"callToAction"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"enable"},"value":{"kind":"BooleanValue","value":true}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"page"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}}]}}]}}]} as unknown as DocumentNode<ActionsQuery, ActionsQueryVariables>;
export const CloudLocationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"cloudLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cloudLocations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"active"}},{"kind":"Field","name":{"kind":"Name","value":"coordinates"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"latitude"}},{"kind":"Field","name":{"kind":"Name","value":"longitude"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"identifier"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"testUrl"}},{"kind":"Field","name":{"kind":"Name","value":"timeout"}}]}}]}}]} as unknown as DocumentNode<CloudLocationsQuery, CloudLocationsQueryVariables>;
export const ConfigDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"config"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"values"},"name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"organizationName"}},{"kind":"Field","name":{"kind":"Name","value":"slogan"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"titleOverrides"}},{"kind":"Field","name":{"kind":"Name","value":"socialLinks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"href"}},{"kind":"Field","name":{"kind":"Name","value":"iconName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"errorMessage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shown"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"testimonials"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"handle"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"hqAddress"}},{"kind":"Field","name":{"kind":"Name","value":"hqCoordinates"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"latitude"}},{"kind":"Field","name":{"kind":"Name","value":"longitude"}}]}},{"kind":"Field","name":{"kind":"Name","value":"hqMapInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"openMapsText"}},{"kind":"Field","name":{"kind":"Name","value":"subscribe"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}}]}}]}}]}}]} as unknown as DocumentNode<ConfigQuery, ConfigQueryVariables>;
export const ContactFormsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"contactForms"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"config"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"config"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"contactForms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"color"}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FormButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"validationType"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"family"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]} as unknown as DocumentNode<ContactFormsQuery, ContactFormsQueryVariables>;
export const DocsGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"enable"}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}}]}},{"kind":"Field","name":{"kind":"Name","value":"docsPages"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"summary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<DocsGroupQuery, DocsGroupQueryVariables>;
export const DocsGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsGroups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"20"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"enable"}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}}]}},{"kind":"Field","name":{"kind":"Name","value":"docsPages"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"summary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<DocsGroupsQuery, DocsGroupsQueryVariables>;
export const DocsPageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsPage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsPage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}}]}}]}}]} as unknown as DocumentNode<DocsPageQuery, DocsPageQueryVariables>;
export const EmployeesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"employees"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"config"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"config"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"50"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bio"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"photo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]} as unknown as DocumentNode<EmployeesQuery, EmployeesQueryVariables>;
export const FooterGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"footerGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"row"}},{"kind":"Field","name":{"kind":"Name","value":"pages"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageContents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"page"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}}]} as unknown as DocumentNode<FooterGroupsQuery, FooterGroupsQueryVariables>;
export const HomePageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"homePage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"homePage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blocks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"handle"}}]}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"mainVideo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"handle"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}}]}}]}}]} as unknown as DocumentNode<HomePageQuery, HomePageQueryVariables>;
export const PageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"page"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"page"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"callout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"form"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"contents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"features"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"form"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"vendorLogo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"darkColor"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lightColor"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"logo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"height"}}]}},{"kind":"Field","name":{"kind":"Name","value":"postText"}},{"kind":"Field","name":{"kind":"Name","value":"pretext"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<PageQuery, PageQueryVariables>;
export const ThemeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"theme"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"StringValue","value":"Stellar","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"theme"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"colors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"black"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"blue"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cyan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"dark"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"gray"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"green"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"light"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"orange"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pink"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"primary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"purple"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"red"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"secondary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"teal"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"tertiary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"white"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"yellow"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"fonts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"black"}},{"kind":"Field","name":{"kind":"Name","value":"body"}},{"kind":"Field","name":{"kind":"Name","value":"bold"}},{"kind":"Field","name":{"kind":"Name","value":"extrabold"}},{"kind":"Field","name":{"kind":"Name","value":"hairline"}},{"kind":"Field","name":{"kind":"Name","value":"headings"}},{"kind":"Field","name":{"kind":"Name","value":"light"}},{"kind":"Field","name":{"kind":"Name","value":"medium"}},{"kind":"Field","name":{"kind":"Name","value":"monospace"}},{"kind":"Field","name":{"kind":"Name","value":"normal"}},{"kind":"Field","name":{"kind":"Name","value":"semibold"}},{"kind":"Field","name":{"kind":"Name","value":"thin"}}]}}]}}]}}]}}]} as unknown as DocumentNode<ThemeQuery, ThemeQueryVariables>;


export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Admonition: ResolverTypeWrapper<Admonition>;
  AdmonitionConnectInput: AdmonitionConnectInput;
  AdmonitionConnection: ResolverTypeWrapper<AdmonitionConnection>;
  AdmonitionCreateInput: AdmonitionCreateInput;
  AdmonitionCreateManyInlineInput: AdmonitionCreateManyInlineInput;
  AdmonitionCreateOneInlineInput: AdmonitionCreateOneInlineInput;
  AdmonitionEdge: ResolverTypeWrapper<AdmonitionEdge>;
  AdmonitionManyWhereInput: AdmonitionManyWhereInput;
  AdmonitionOrderByInput: AdmonitionOrderByInput;
  AdmonitionType: AdmonitionType;
  AdmonitionUpdateInput: AdmonitionUpdateInput;
  AdmonitionUpdateManyInlineInput: AdmonitionUpdateManyInlineInput;
  AdmonitionUpdateManyInput: AdmonitionUpdateManyInput;
  AdmonitionUpdateManyWithNestedWhereInput: AdmonitionUpdateManyWithNestedWhereInput;
  AdmonitionUpdateOneInlineInput: AdmonitionUpdateOneInlineInput;
  AdmonitionUpdateWithNestedWhereUniqueInput: AdmonitionUpdateWithNestedWhereUniqueInput;
  AdmonitionUpsertInput: AdmonitionUpsertInput;
  AdmonitionUpsertWithNestedWhereUniqueInput: AdmonitionUpsertWithNestedWhereUniqueInput;
  AdmonitionWhereComparatorInput: AdmonitionWhereComparatorInput;
  AdmonitionWhereInput: AdmonitionWhereInput;
  AdmonitionWhereStageInput: AdmonitionWhereStageInput;
  AdmonitionWhereUniqueInput: AdmonitionWhereUniqueInput;
  Aggregate: ResolverTypeWrapper<Aggregate>;
  Alert: ResolverTypeWrapper<Alert>;
  AlertConnectInput: AlertConnectInput;
  AlertConnection: ResolverTypeWrapper<AlertConnection>;
  AlertCreateInput: AlertCreateInput;
  AlertCreateManyInlineInput: AlertCreateManyInlineInput;
  AlertCreateOneInlineInput: AlertCreateOneInlineInput;
  AlertCreateWithPositionInput: AlertCreateWithPositionInput;
  AlertEdge: ResolverTypeWrapper<AlertEdge>;
  AlertLevel: AlertLevel;
  AlertManyWhereInput: AlertManyWhereInput;
  AlertOrderByInput: AlertOrderByInput;
  AlertParent: ResolversTypes['Configuration'] | ResolversTypes['FormButton'];
  AlertParentConnectInput: AlertParentConnectInput;
  AlertParentCreateInput: AlertParentCreateInput;
  AlertParentCreateManyInlineInput: AlertParentCreateManyInlineInput;
  AlertParentCreateOneInlineInput: AlertParentCreateOneInlineInput;
  AlertParentUpdateInput: AlertParentUpdateInput;
  AlertParentUpdateManyInlineInput: AlertParentUpdateManyInlineInput;
  AlertParentUpdateManyWithNestedWhereInput: AlertParentUpdateManyWithNestedWhereInput;
  AlertParentUpdateOneInlineInput: AlertParentUpdateOneInlineInput;
  AlertParentUpdateWithNestedWhereUniqueInput: AlertParentUpdateWithNestedWhereUniqueInput;
  AlertParentUpsertWithNestedWhereUniqueInput: AlertParentUpsertWithNestedWhereUniqueInput;
  AlertParentWhereInput: AlertParentWhereInput;
  AlertParentWhereUniqueInput: AlertParentWhereUniqueInput;
  AlertUpdateInput: AlertUpdateInput;
  AlertUpdateManyInlineInput: AlertUpdateManyInlineInput;
  AlertUpdateManyInput: AlertUpdateManyInput;
  AlertUpdateManyWithNestedWhereInput: AlertUpdateManyWithNestedWhereInput;
  AlertUpdateOneInlineInput: AlertUpdateOneInlineInput;
  AlertUpdateWithNestedWhereUniqueAndPositionInput: AlertUpdateWithNestedWhereUniqueAndPositionInput;
  AlertUpdateWithNestedWhereUniqueInput: AlertUpdateWithNestedWhereUniqueInput;
  AlertUpsertInput: AlertUpsertInput;
  AlertUpsertWithNestedWhereUniqueAndPositionInput: AlertUpsertWithNestedWhereUniqueAndPositionInput;
  AlertUpsertWithNestedWhereUniqueInput: AlertUpsertWithNestedWhereUniqueInput;
  AlertWhereInput: AlertWhereInput;
  AlertWhereUniqueInput: AlertWhereUniqueInput;
  Asset: ResolverTypeWrapper<Asset>;
  AssetConnectInput: AssetConnectInput;
  AssetConnection: ResolverTypeWrapper<AssetConnection>;
  AssetCreateInput: AssetCreateInput;
  AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
  AssetCreateLocalizationInput: AssetCreateLocalizationInput;
  AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
  AssetCreateManyInlineInput: AssetCreateManyInlineInput;
  AssetCreateOneInlineInput: AssetCreateOneInlineInput;
  AssetEdge: ResolverTypeWrapper<AssetEdge>;
  AssetManyWhereInput: AssetManyWhereInput;
  AssetOrderByInput: AssetOrderByInput;
  AssetTransformationInput: AssetTransformationInput;
  AssetUpdateInput: AssetUpdateInput;
  AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
  AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
  AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
  AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
  AssetUpdateManyInput: AssetUpdateManyInput;
  AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
  AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
  AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
  AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
  AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
  AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
  AssetUpsertInput: AssetUpsertInput;
  AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
  AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
  AssetWhereComparatorInput: AssetWhereComparatorInput;
  AssetWhereInput: AssetWhereInput;
  AssetWhereStageInput: AssetWhereStageInput;
  AssetWhereUniqueInput: AssetWhereUniqueInput;
  BatchPayload: ResolverTypeWrapper<BatchPayload>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  Button: ResolverTypeWrapper<Button>;
  ButtonConnectInput: ButtonConnectInput;
  ButtonConnection: ResolverTypeWrapper<ButtonConnection>;
  ButtonCreateInput: ButtonCreateInput;
  ButtonCreateManyInlineInput: ButtonCreateManyInlineInput;
  ButtonCreateOneInlineInput: ButtonCreateOneInlineInput;
  ButtonCreateWithPositionInput: ButtonCreateWithPositionInput;
  ButtonEdge: ResolverTypeWrapper<ButtonEdge>;
  ButtonManyWhereInput: ButtonManyWhereInput;
  ButtonOrderByInput: ButtonOrderByInput;
  ButtonParent: ResolversTypes['Callout'] | ResolversTypes['ContactForm'] | ResolversTypes['Feature'] | ResolversTypes['HomePageBlock'] | ResolversTypes['PageContent'];
  ButtonParentConnectInput: ButtonParentConnectInput;
  ButtonParentCreateInput: ButtonParentCreateInput;
  ButtonParentCreateManyInlineInput: ButtonParentCreateManyInlineInput;
  ButtonParentCreateOneInlineInput: ButtonParentCreateOneInlineInput;
  ButtonParentUpdateInput: ButtonParentUpdateInput;
  ButtonParentUpdateManyInlineInput: ButtonParentUpdateManyInlineInput;
  ButtonParentUpdateManyWithNestedWhereInput: ButtonParentUpdateManyWithNestedWhereInput;
  ButtonParentUpdateOneInlineInput: ButtonParentUpdateOneInlineInput;
  ButtonParentUpdateWithNestedWhereUniqueInput: ButtonParentUpdateWithNestedWhereUniqueInput;
  ButtonParentUpsertWithNestedWhereUniqueInput: ButtonParentUpsertWithNestedWhereUniqueInput;
  ButtonParentWhereInput: ButtonParentWhereInput;
  ButtonParentWhereUniqueInput: ButtonParentWhereUniqueInput;
  ButtonUpdateInput: ButtonUpdateInput;
  ButtonUpdateManyInlineInput: ButtonUpdateManyInlineInput;
  ButtonUpdateManyInput: ButtonUpdateManyInput;
  ButtonUpdateManyWithNestedWhereInput: ButtonUpdateManyWithNestedWhereInput;
  ButtonUpdateOneInlineInput: ButtonUpdateOneInlineInput;
  ButtonUpdateWithNestedWhereUniqueAndPositionInput: ButtonUpdateWithNestedWhereUniqueAndPositionInput;
  ButtonUpdateWithNestedWhereUniqueInput: ButtonUpdateWithNestedWhereUniqueInput;
  ButtonUpsertInput: ButtonUpsertInput;
  ButtonUpsertWithNestedWhereUniqueAndPositionInput: ButtonUpsertWithNestedWhereUniqueAndPositionInput;
  ButtonUpsertWithNestedWhereUniqueInput: ButtonUpsertWithNestedWhereUniqueInput;
  ButtonVariant: ButtonVariant;
  ButtonWhereInput: ButtonWhereInput;
  ButtonWhereUniqueInput: ButtonWhereUniqueInput;
  CallToAction: ResolverTypeWrapper<CallToAction>;
  CallToActionConnectInput: CallToActionConnectInput;
  CallToActionConnection: ResolverTypeWrapper<CallToActionConnection>;
  CallToActionCreateInput: CallToActionCreateInput;
  CallToActionCreateManyInlineInput: CallToActionCreateManyInlineInput;
  CallToActionCreateOneInlineInput: CallToActionCreateOneInlineInput;
  CallToActionCreateWithPositionInput: CallToActionCreateWithPositionInput;
  CallToActionEdge: ResolverTypeWrapper<CallToActionEdge>;
  CallToActionManyWhereInput: CallToActionManyWhereInput;
  CallToActionOrderByInput: CallToActionOrderByInput;
  CallToActionParent: ResolversTypes['Configuration'];
  CallToActionParentConnectInput: CallToActionParentConnectInput;
  CallToActionParentCreateInput: CallToActionParentCreateInput;
  CallToActionParentCreateManyInlineInput: CallToActionParentCreateManyInlineInput;
  CallToActionParentCreateOneInlineInput: CallToActionParentCreateOneInlineInput;
  CallToActionParentUpdateInput: CallToActionParentUpdateInput;
  CallToActionParentUpdateManyInlineInput: CallToActionParentUpdateManyInlineInput;
  CallToActionParentUpdateManyWithNestedWhereInput: CallToActionParentUpdateManyWithNestedWhereInput;
  CallToActionParentUpdateOneInlineInput: CallToActionParentUpdateOneInlineInput;
  CallToActionParentUpdateWithNestedWhereUniqueInput: CallToActionParentUpdateWithNestedWhereUniqueInput;
  CallToActionParentUpsertWithNestedWhereUniqueInput: CallToActionParentUpsertWithNestedWhereUniqueInput;
  CallToActionParentWhereInput: CallToActionParentWhereInput;
  CallToActionParentWhereUniqueInput: CallToActionParentWhereUniqueInput;
  CallToActionSettings: ResolverTypeWrapper<CallToActionSettings>;
  CallToActionSettingsConnectInput: CallToActionSettingsConnectInput;
  CallToActionSettingsConnection: ResolverTypeWrapper<CallToActionSettingsConnection>;
  CallToActionSettingsCreateInput: CallToActionSettingsCreateInput;
  CallToActionSettingsCreateManyInlineInput: CallToActionSettingsCreateManyInlineInput;
  CallToActionSettingsCreateOneInlineInput: CallToActionSettingsCreateOneInlineInput;
  CallToActionSettingsCreateWithPositionInput: CallToActionSettingsCreateWithPositionInput;
  CallToActionSettingsEdge: ResolverTypeWrapper<CallToActionSettingsEdge>;
  CallToActionSettingsManyWhereInput: CallToActionSettingsManyWhereInput;
  CallToActionSettingsOrderByInput: CallToActionSettingsOrderByInput;
  CallToActionSettingsParent: ResolversTypes['DocsGroup'] | ResolversTypes['PageContent'];
  CallToActionSettingsParentConnectInput: CallToActionSettingsParentConnectInput;
  CallToActionSettingsParentCreateInput: CallToActionSettingsParentCreateInput;
  CallToActionSettingsParentCreateManyInlineInput: CallToActionSettingsParentCreateManyInlineInput;
  CallToActionSettingsParentCreateOneInlineInput: CallToActionSettingsParentCreateOneInlineInput;
  CallToActionSettingsParentUpdateInput: CallToActionSettingsParentUpdateInput;
  CallToActionSettingsParentUpdateManyInlineInput: CallToActionSettingsParentUpdateManyInlineInput;
  CallToActionSettingsParentUpdateManyWithNestedWhereInput: CallToActionSettingsParentUpdateManyWithNestedWhereInput;
  CallToActionSettingsParentUpdateOneInlineInput: CallToActionSettingsParentUpdateOneInlineInput;
  CallToActionSettingsParentUpdateWithNestedWhereUniqueInput: CallToActionSettingsParentUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsParentUpsertWithNestedWhereUniqueInput: CallToActionSettingsParentUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsParentWhereInput: CallToActionSettingsParentWhereInput;
  CallToActionSettingsParentWhereUniqueInput: CallToActionSettingsParentWhereUniqueInput;
  CallToActionSettingsUpdateInput: CallToActionSettingsUpdateInput;
  CallToActionSettingsUpdateManyInlineInput: CallToActionSettingsUpdateManyInlineInput;
  CallToActionSettingsUpdateManyInput: CallToActionSettingsUpdateManyInput;
  CallToActionSettingsUpdateManyWithNestedWhereInput: CallToActionSettingsUpdateManyWithNestedWhereInput;
  CallToActionSettingsUpdateOneInlineInput: CallToActionSettingsUpdateOneInlineInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueInput: CallToActionSettingsUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsUpsertInput: CallToActionSettingsUpsertInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueInput: CallToActionSettingsUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsWhereInput: CallToActionSettingsWhereInput;
  CallToActionSettingsWhereUniqueInput: CallToActionSettingsWhereUniqueInput;
  CallToActionUpdateInput: CallToActionUpdateInput;
  CallToActionUpdateManyInlineInput: CallToActionUpdateManyInlineInput;
  CallToActionUpdateManyInput: CallToActionUpdateManyInput;
  CallToActionUpdateManyWithNestedWhereInput: CallToActionUpdateManyWithNestedWhereInput;
  CallToActionUpdateOneInlineInput: CallToActionUpdateOneInlineInput;
  CallToActionUpdateWithNestedWhereUniqueAndPositionInput: CallToActionUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionUpdateWithNestedWhereUniqueInput: CallToActionUpdateWithNestedWhereUniqueInput;
  CallToActionUpsertInput: CallToActionUpsertInput;
  CallToActionUpsertWithNestedWhereUniqueAndPositionInput: CallToActionUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionUpsertWithNestedWhereUniqueInput: CallToActionUpsertWithNestedWhereUniqueInput;
  CallToActionWhereInput: CallToActionWhereInput;
  CallToActionWhereUniqueInput: CallToActionWhereUniqueInput;
  Callout: ResolverTypeWrapper<Callout>;
  CalloutConnectInput: CalloutConnectInput;
  CalloutConnection: ResolverTypeWrapper<CalloutConnection>;
  CalloutCreateInput: CalloutCreateInput;
  CalloutCreateManyInlineInput: CalloutCreateManyInlineInput;
  CalloutCreateOneInlineInput: CalloutCreateOneInlineInput;
  CalloutCreateWithPositionInput: CalloutCreateWithPositionInput;
  CalloutEdge: ResolverTypeWrapper<CalloutEdge>;
  CalloutManyWhereInput: CalloutManyWhereInput;
  CalloutOrderByInput: CalloutOrderByInput;
  CalloutParent: ResolversTypes['Page'];
  CalloutParentConnectInput: CalloutParentConnectInput;
  CalloutParentCreateInput: CalloutParentCreateInput;
  CalloutParentCreateManyInlineInput: CalloutParentCreateManyInlineInput;
  CalloutParentCreateOneInlineInput: CalloutParentCreateOneInlineInput;
  CalloutParentUpdateInput: CalloutParentUpdateInput;
  CalloutParentUpdateManyInlineInput: CalloutParentUpdateManyInlineInput;
  CalloutParentUpdateManyWithNestedWhereInput: CalloutParentUpdateManyWithNestedWhereInput;
  CalloutParentUpdateOneInlineInput: CalloutParentUpdateOneInlineInput;
  CalloutParentUpdateWithNestedWhereUniqueInput: CalloutParentUpdateWithNestedWhereUniqueInput;
  CalloutParentUpsertWithNestedWhereUniqueInput: CalloutParentUpsertWithNestedWhereUniqueInput;
  CalloutParentWhereInput: CalloutParentWhereInput;
  CalloutParentWhereUniqueInput: CalloutParentWhereUniqueInput;
  CalloutUpdateInput: CalloutUpdateInput;
  CalloutUpdateManyInlineInput: CalloutUpdateManyInlineInput;
  CalloutUpdateManyInput: CalloutUpdateManyInput;
  CalloutUpdateManyWithNestedWhereInput: CalloutUpdateManyWithNestedWhereInput;
  CalloutUpdateOneInlineInput: CalloutUpdateOneInlineInput;
  CalloutUpdateWithNestedWhereUniqueAndPositionInput: CalloutUpdateWithNestedWhereUniqueAndPositionInput;
  CalloutUpdateWithNestedWhereUniqueInput: CalloutUpdateWithNestedWhereUniqueInput;
  CalloutUpsertInput: CalloutUpsertInput;
  CalloutUpsertWithNestedWhereUniqueAndPositionInput: CalloutUpsertWithNestedWhereUniqueAndPositionInput;
  CalloutUpsertWithNestedWhereUniqueInput: CalloutUpsertWithNestedWhereUniqueInput;
  CalloutWhereInput: CalloutWhereInput;
  CalloutWhereUniqueInput: CalloutWhereUniqueInput;
  CheckboxField: ResolverTypeWrapper<CheckboxField>;
  CheckboxFieldConnectInput: CheckboxFieldConnectInput;
  CheckboxFieldConnection: ResolverTypeWrapper<CheckboxFieldConnection>;
  CheckboxFieldCreateInput: CheckboxFieldCreateInput;
  CheckboxFieldCreateManyInlineInput: CheckboxFieldCreateManyInlineInput;
  CheckboxFieldCreateOneInlineInput: CheckboxFieldCreateOneInlineInput;
  CheckboxFieldCreateWithPositionInput: CheckboxFieldCreateWithPositionInput;
  CheckboxFieldEdge: ResolverTypeWrapper<CheckboxFieldEdge>;
  CheckboxFieldManyWhereInput: CheckboxFieldManyWhereInput;
  CheckboxFieldOrderByInput: CheckboxFieldOrderByInput;
  CheckboxFieldParent: ResolversTypes['ContactForm'] | ResolversTypes['Form'];
  CheckboxFieldParentConnectInput: CheckboxFieldParentConnectInput;
  CheckboxFieldParentCreateInput: CheckboxFieldParentCreateInput;
  CheckboxFieldParentCreateManyInlineInput: CheckboxFieldParentCreateManyInlineInput;
  CheckboxFieldParentCreateOneInlineInput: CheckboxFieldParentCreateOneInlineInput;
  CheckboxFieldParentUpdateInput: CheckboxFieldParentUpdateInput;
  CheckboxFieldParentUpdateManyInlineInput: CheckboxFieldParentUpdateManyInlineInput;
  CheckboxFieldParentUpdateManyWithNestedWhereInput: CheckboxFieldParentUpdateManyWithNestedWhereInput;
  CheckboxFieldParentUpdateOneInlineInput: CheckboxFieldParentUpdateOneInlineInput;
  CheckboxFieldParentUpdateWithNestedWhereUniqueInput: CheckboxFieldParentUpdateWithNestedWhereUniqueInput;
  CheckboxFieldParentUpsertWithNestedWhereUniqueInput: CheckboxFieldParentUpsertWithNestedWhereUniqueInput;
  CheckboxFieldParentWhereInput: CheckboxFieldParentWhereInput;
  CheckboxFieldParentWhereUniqueInput: CheckboxFieldParentWhereUniqueInput;
  CheckboxFieldUpdateInput: CheckboxFieldUpdateInput;
  CheckboxFieldUpdateManyInlineInput: CheckboxFieldUpdateManyInlineInput;
  CheckboxFieldUpdateManyInput: CheckboxFieldUpdateManyInput;
  CheckboxFieldUpdateManyWithNestedWhereInput: CheckboxFieldUpdateManyWithNestedWhereInput;
  CheckboxFieldUpdateOneInlineInput: CheckboxFieldUpdateOneInlineInput;
  CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpdateWithNestedWhereUniqueInput: CheckboxFieldUpdateWithNestedWhereUniqueInput;
  CheckboxFieldUpsertInput: CheckboxFieldUpsertInput;
  CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpsertWithNestedWhereUniqueInput: CheckboxFieldUpsertWithNestedWhereUniqueInput;
  CheckboxFieldWhereInput: CheckboxFieldWhereInput;
  CheckboxFieldWhereUniqueInput: CheckboxFieldWhereUniqueInput;
  CloudLocation: ResolverTypeWrapper<CloudLocation>;
  CloudLocationConnectInput: CloudLocationConnectInput;
  CloudLocationConnection: ResolverTypeWrapper<CloudLocationConnection>;
  CloudLocationCreateInput: CloudLocationCreateInput;
  CloudLocationCreateManyInlineInput: CloudLocationCreateManyInlineInput;
  CloudLocationCreateOneInlineInput: CloudLocationCreateOneInlineInput;
  CloudLocationEdge: ResolverTypeWrapper<CloudLocationEdge>;
  CloudLocationManyWhereInput: CloudLocationManyWhereInput;
  CloudLocationOrderByInput: CloudLocationOrderByInput;
  CloudLocationUpdateInput: CloudLocationUpdateInput;
  CloudLocationUpdateManyInlineInput: CloudLocationUpdateManyInlineInput;
  CloudLocationUpdateManyInput: CloudLocationUpdateManyInput;
  CloudLocationUpdateManyWithNestedWhereInput: CloudLocationUpdateManyWithNestedWhereInput;
  CloudLocationUpdateOneInlineInput: CloudLocationUpdateOneInlineInput;
  CloudLocationUpdateWithNestedWhereUniqueInput: CloudLocationUpdateWithNestedWhereUniqueInput;
  CloudLocationUpsertInput: CloudLocationUpsertInput;
  CloudLocationUpsertWithNestedWhereUniqueInput: CloudLocationUpsertWithNestedWhereUniqueInput;
  CloudLocationWhereComparatorInput: CloudLocationWhereComparatorInput;
  CloudLocationWhereInput: CloudLocationWhereInput;
  CloudLocationWhereStageInput: CloudLocationWhereStageInput;
  CloudLocationWhereUniqueInput: CloudLocationWhereUniqueInput;
  Color: ResolverTypeWrapper<Color>;
  ColorInput: ColorInput;
  Configuration: ResolverTypeWrapper<Configuration>;
  ConfigurationConnectInput: ConfigurationConnectInput;
  ConfigurationConnection: ResolverTypeWrapper<ConfigurationConnection>;
  ConfigurationCreateInput: ConfigurationCreateInput;
  ConfigurationCreateManyInlineInput: ConfigurationCreateManyInlineInput;
  ConfigurationCreateOneInlineInput: ConfigurationCreateOneInlineInput;
  ConfigurationEdge: ResolverTypeWrapper<ConfigurationEdge>;
  ConfigurationManyWhereInput: ConfigurationManyWhereInput;
  ConfigurationOrderByInput: ConfigurationOrderByInput;
  ConfigurationUpdateInput: ConfigurationUpdateInput;
  ConfigurationUpdateManyInlineInput: ConfigurationUpdateManyInlineInput;
  ConfigurationUpdateManyInput: ConfigurationUpdateManyInput;
  ConfigurationUpdateManyWithNestedWhereInput: ConfigurationUpdateManyWithNestedWhereInput;
  ConfigurationUpdateOneInlineInput: ConfigurationUpdateOneInlineInput;
  ConfigurationUpdateWithNestedWhereUniqueInput: ConfigurationUpdateWithNestedWhereUniqueInput;
  ConfigurationUpsertInput: ConfigurationUpsertInput;
  ConfigurationUpsertWithNestedWhereUniqueInput: ConfigurationUpsertWithNestedWhereUniqueInput;
  ConfigurationWhereComparatorInput: ConfigurationWhereComparatorInput;
  ConfigurationWhereInput: ConfigurationWhereInput;
  ConfigurationWhereStageInput: ConfigurationWhereStageInput;
  ConfigurationWhereUniqueInput: ConfigurationWhereUniqueInput;
  ConnectPositionInput: ConnectPositionInput;
  ContactForm: ResolverTypeWrapper<Omit<ContactForm, 'fields'> & { fields: Array<ResolversTypes['ContactFormfieldsUnion']> }>;
  ContactFormConnectInput: ContactFormConnectInput;
  ContactFormConnection: ResolverTypeWrapper<ContactFormConnection>;
  ContactFormCreateInput: ContactFormCreateInput;
  ContactFormCreateManyInlineInput: ContactFormCreateManyInlineInput;
  ContactFormCreateOneInlineInput: ContactFormCreateOneInlineInput;
  ContactFormEdge: ResolverTypeWrapper<ContactFormEdge>;
  ContactFormManyWhereInput: ContactFormManyWhereInput;
  ContactFormOrderByInput: ContactFormOrderByInput;
  ContactFormUpdateInput: ContactFormUpdateInput;
  ContactFormUpdateManyInlineInput: ContactFormUpdateManyInlineInput;
  ContactFormUpdateManyInput: ContactFormUpdateManyInput;
  ContactFormUpdateManyWithNestedWhereInput: ContactFormUpdateManyWithNestedWhereInput;
  ContactFormUpdateOneInlineInput: ContactFormUpdateOneInlineInput;
  ContactFormUpdateWithNestedWhereUniqueInput: ContactFormUpdateWithNestedWhereUniqueInput;
  ContactFormUpsertInput: ContactFormUpsertInput;
  ContactFormUpsertWithNestedWhereUniqueInput: ContactFormUpsertWithNestedWhereUniqueInput;
  ContactFormWhereComparatorInput: ContactFormWhereComparatorInput;
  ContactFormWhereInput: ContactFormWhereInput;
  ContactFormWhereStageInput: ContactFormWhereStageInput;
  ContactFormWhereUniqueInput: ContactFormWhereUniqueInput;
  ContactFormfieldsUnion: ResolversTypes['CheckboxField'] | ResolversTypes['FormButton'] | ResolversTypes['SelectField'] | ResolversTypes['TextAreaField'] | ResolversTypes['TextInputField'];
  ContactFormfieldsUnionConnectInput: ContactFormfieldsUnionConnectInput;
  ContactFormfieldsUnionCreateInput: ContactFormfieldsUnionCreateInput;
  ContactFormfieldsUnionCreateManyInlineInput: ContactFormfieldsUnionCreateManyInlineInput;
  ContactFormfieldsUnionCreateOneInlineInput: ContactFormfieldsUnionCreateOneInlineInput;
  ContactFormfieldsUnionCreateWithPositionInput: ContactFormfieldsUnionCreateWithPositionInput;
  ContactFormfieldsUnionUpdateInput: ContactFormfieldsUnionUpdateInput;
  ContactFormfieldsUnionUpdateManyInlineInput: ContactFormfieldsUnionUpdateManyInlineInput;
  ContactFormfieldsUnionUpdateManyWithNestedWhereInput: ContactFormfieldsUnionUpdateManyWithNestedWhereInput;
  ContactFormfieldsUnionUpdateOneInlineInput: ContactFormfieldsUnionUpdateOneInlineInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput;
  ContactFormfieldsUnionWhereInput: ContactFormfieldsUnionWhereInput;
  ContactFormfieldsUnionWhereUniqueInput: ContactFormfieldsUnionWhereUniqueInput;
  ContentButton: ResolverTypeWrapper<ContentButton>;
  ContentButtonConnectInput: ContentButtonConnectInput;
  ContentButtonConnection: ResolverTypeWrapper<ContentButtonConnection>;
  ContentButtonCreateInput: ContentButtonCreateInput;
  ContentButtonCreateManyInlineInput: ContentButtonCreateManyInlineInput;
  ContentButtonCreateOneInlineInput: ContentButtonCreateOneInlineInput;
  ContentButtonEdge: ResolverTypeWrapper<ContentButtonEdge>;
  ContentButtonManyWhereInput: ContentButtonManyWhereInput;
  ContentButtonOrderByInput: ContentButtonOrderByInput;
  ContentButtonUpdateInput: ContentButtonUpdateInput;
  ContentButtonUpdateManyInlineInput: ContentButtonUpdateManyInlineInput;
  ContentButtonUpdateManyInput: ContentButtonUpdateManyInput;
  ContentButtonUpdateManyWithNestedWhereInput: ContentButtonUpdateManyWithNestedWhereInput;
  ContentButtonUpdateOneInlineInput: ContentButtonUpdateOneInlineInput;
  ContentButtonUpdateWithNestedWhereUniqueInput: ContentButtonUpdateWithNestedWhereUniqueInput;
  ContentButtonUpsertInput: ContentButtonUpsertInput;
  ContentButtonUpsertWithNestedWhereUniqueInput: ContentButtonUpsertWithNestedWhereUniqueInput;
  ContentButtonWhereComparatorInput: ContentButtonWhereComparatorInput;
  ContentButtonWhereInput: ContentButtonWhereInput;
  ContentButtonWhereStageInput: ContentButtonWhereStageInput;
  ContentButtonWhereUniqueInput: ContentButtonWhereUniqueInput;
  Date: ResolverTypeWrapper<Scalars['Date']>;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']>;
  DocsGroup: ResolverTypeWrapper<DocsGroup>;
  DocsGroupConnectInput: DocsGroupConnectInput;
  DocsGroupConnection: ResolverTypeWrapper<DocsGroupConnection>;
  DocsGroupCreateInput: DocsGroupCreateInput;
  DocsGroupCreateManyInlineInput: DocsGroupCreateManyInlineInput;
  DocsGroupCreateOneInlineInput: DocsGroupCreateOneInlineInput;
  DocsGroupEdge: ResolverTypeWrapper<DocsGroupEdge>;
  DocsGroupManyWhereInput: DocsGroupManyWhereInput;
  DocsGroupOrderByInput: DocsGroupOrderByInput;
  DocsGroupSummaryRichText: ResolverTypeWrapper<Omit<DocsGroupSummaryRichText, 'references'> & { references: Array<ResolversTypes['DocsGroupSummaryRichTextEmbeddedTypes']> }>;
  DocsGroupSummaryRichTextEmbeddedTypes: ResolversTypes['Admonition'] | ResolversTypes['Asset'] | ResolversTypes['ContentButton'];
  DocsGroupUpdateInput: DocsGroupUpdateInput;
  DocsGroupUpdateManyInlineInput: DocsGroupUpdateManyInlineInput;
  DocsGroupUpdateManyInput: DocsGroupUpdateManyInput;
  DocsGroupUpdateManyWithNestedWhereInput: DocsGroupUpdateManyWithNestedWhereInput;
  DocsGroupUpdateOneInlineInput: DocsGroupUpdateOneInlineInput;
  DocsGroupUpdateWithNestedWhereUniqueInput: DocsGroupUpdateWithNestedWhereUniqueInput;
  DocsGroupUpsertInput: DocsGroupUpsertInput;
  DocsGroupUpsertWithNestedWhereUniqueInput: DocsGroupUpsertWithNestedWhereUniqueInput;
  DocsGroupWhereComparatorInput: DocsGroupWhereComparatorInput;
  DocsGroupWhereInput: DocsGroupWhereInput;
  DocsGroupWhereStageInput: DocsGroupWhereStageInput;
  DocsGroupWhereUniqueInput: DocsGroupWhereUniqueInput;
  DocsPage: ResolverTypeWrapper<DocsPage>;
  DocsPageBodyRichText: ResolverTypeWrapper<Omit<DocsPageBodyRichText, 'references'> & { references: Array<ResolversTypes['DocsPageBodyRichTextEmbeddedTypes']> }>;
  DocsPageBodyRichTextEmbeddedTypes: ResolversTypes['Admonition'] | ResolversTypes['Asset'] | ResolversTypes['ContentButton'];
  DocsPageConnectInput: DocsPageConnectInput;
  DocsPageConnection: ResolverTypeWrapper<DocsPageConnection>;
  DocsPageCreateInput: DocsPageCreateInput;
  DocsPageCreateManyInlineInput: DocsPageCreateManyInlineInput;
  DocsPageCreateOneInlineInput: DocsPageCreateOneInlineInput;
  DocsPageEdge: ResolverTypeWrapper<DocsPageEdge>;
  DocsPageManyWhereInput: DocsPageManyWhereInput;
  DocsPageOrderByInput: DocsPageOrderByInput;
  DocsPageUpdateInput: DocsPageUpdateInput;
  DocsPageUpdateManyInlineInput: DocsPageUpdateManyInlineInput;
  DocsPageUpdateManyInput: DocsPageUpdateManyInput;
  DocsPageUpdateManyWithNestedWhereInput: DocsPageUpdateManyWithNestedWhereInput;
  DocsPageUpdateOneInlineInput: DocsPageUpdateOneInlineInput;
  DocsPageUpdateWithNestedWhereUniqueInput: DocsPageUpdateWithNestedWhereUniqueInput;
  DocsPageUpsertInput: DocsPageUpsertInput;
  DocsPageUpsertWithNestedWhereUniqueInput: DocsPageUpsertWithNestedWhereUniqueInput;
  DocsPageWhereComparatorInput: DocsPageWhereComparatorInput;
  DocsPageWhereInput: DocsPageWhereInput;
  DocsPageWhereStageInput: DocsPageWhereStageInput;
  DocsPageWhereUniqueInput: DocsPageWhereUniqueInput;
  DocumentFileTypes: DocumentFileTypes;
  DocumentOutputInput: DocumentOutputInput;
  DocumentTransformationInput: DocumentTransformationInput;
  DocumentVersion: ResolverTypeWrapper<DocumentVersion>;
  Employee: ResolverTypeWrapper<Employee>;
  EmployeeConnectInput: EmployeeConnectInput;
  EmployeeConnection: ResolverTypeWrapper<EmployeeConnection>;
  EmployeeCreateInput: EmployeeCreateInput;
  EmployeeCreateManyInlineInput: EmployeeCreateManyInlineInput;
  EmployeeCreateOneInlineInput: EmployeeCreateOneInlineInput;
  EmployeeEdge: ResolverTypeWrapper<EmployeeEdge>;
  EmployeeManyWhereInput: EmployeeManyWhereInput;
  EmployeeOrderByInput: EmployeeOrderByInput;
  EmployeeUpdateInput: EmployeeUpdateInput;
  EmployeeUpdateManyInlineInput: EmployeeUpdateManyInlineInput;
  EmployeeUpdateManyInput: EmployeeUpdateManyInput;
  EmployeeUpdateManyWithNestedWhereInput: EmployeeUpdateManyWithNestedWhereInput;
  EmployeeUpdateOneInlineInput: EmployeeUpdateOneInlineInput;
  EmployeeUpdateWithNestedWhereUniqueInput: EmployeeUpdateWithNestedWhereUniqueInput;
  EmployeeUpsertInput: EmployeeUpsertInput;
  EmployeeUpsertWithNestedWhereUniqueInput: EmployeeUpsertWithNestedWhereUniqueInput;
  EmployeeWhereComparatorInput: EmployeeWhereComparatorInput;
  EmployeeWhereInput: EmployeeWhereInput;
  EmployeeWhereStageInput: EmployeeWhereStageInput;
  EmployeeWhereUniqueInput: EmployeeWhereUniqueInput;
  ExternalLink: ResolverTypeWrapper<ExternalLink>;
  ExternalLinkConnectInput: ExternalLinkConnectInput;
  ExternalLinkConnection: ResolverTypeWrapper<ExternalLinkConnection>;
  ExternalLinkCreateInput: ExternalLinkCreateInput;
  ExternalLinkCreateManyInlineInput: ExternalLinkCreateManyInlineInput;
  ExternalLinkCreateOneInlineInput: ExternalLinkCreateOneInlineInput;
  ExternalLinkCreateWithPositionInput: ExternalLinkCreateWithPositionInput;
  ExternalLinkEdge: ResolverTypeWrapper<ExternalLinkEdge>;
  ExternalLinkManyWhereInput: ExternalLinkManyWhereInput;
  ExternalLinkOrderByInput: ExternalLinkOrderByInput;
  ExternalLinkParent: ResolversTypes['FooterGroup'];
  ExternalLinkParentConnectInput: ExternalLinkParentConnectInput;
  ExternalLinkParentCreateInput: ExternalLinkParentCreateInput;
  ExternalLinkParentCreateManyInlineInput: ExternalLinkParentCreateManyInlineInput;
  ExternalLinkParentCreateOneInlineInput: ExternalLinkParentCreateOneInlineInput;
  ExternalLinkParentUpdateInput: ExternalLinkParentUpdateInput;
  ExternalLinkParentUpdateManyInlineInput: ExternalLinkParentUpdateManyInlineInput;
  ExternalLinkParentUpdateManyWithNestedWhereInput: ExternalLinkParentUpdateManyWithNestedWhereInput;
  ExternalLinkParentUpdateOneInlineInput: ExternalLinkParentUpdateOneInlineInput;
  ExternalLinkParentUpdateWithNestedWhereUniqueInput: ExternalLinkParentUpdateWithNestedWhereUniqueInput;
  ExternalLinkParentUpsertWithNestedWhereUniqueInput: ExternalLinkParentUpsertWithNestedWhereUniqueInput;
  ExternalLinkParentWhereInput: ExternalLinkParentWhereInput;
  ExternalLinkParentWhereUniqueInput: ExternalLinkParentWhereUniqueInput;
  ExternalLinkUpdateInput: ExternalLinkUpdateInput;
  ExternalLinkUpdateManyInlineInput: ExternalLinkUpdateManyInlineInput;
  ExternalLinkUpdateManyInput: ExternalLinkUpdateManyInput;
  ExternalLinkUpdateManyWithNestedWhereInput: ExternalLinkUpdateManyWithNestedWhereInput;
  ExternalLinkUpdateOneInlineInput: ExternalLinkUpdateOneInlineInput;
  ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput: ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpdateWithNestedWhereUniqueInput: ExternalLinkUpdateWithNestedWhereUniqueInput;
  ExternalLinkUpsertInput: ExternalLinkUpsertInput;
  ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput: ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpsertWithNestedWhereUniqueInput: ExternalLinkUpsertWithNestedWhereUniqueInput;
  ExternalLinkWhereInput: ExternalLinkWhereInput;
  ExternalLinkWhereUniqueInput: ExternalLinkWhereUniqueInput;
  Feature: ResolverTypeWrapper<Feature>;
  FeatureConnectInput: FeatureConnectInput;
  FeatureConnection: ResolverTypeWrapper<FeatureConnection>;
  FeatureCreateInput: FeatureCreateInput;
  FeatureCreateManyInlineInput: FeatureCreateManyInlineInput;
  FeatureCreateOneInlineInput: FeatureCreateOneInlineInput;
  FeatureCreateWithPositionInput: FeatureCreateWithPositionInput;
  FeatureEdge: ResolverTypeWrapper<FeatureEdge>;
  FeatureManyWhereInput: FeatureManyWhereInput;
  FeatureOrderByInput: FeatureOrderByInput;
  FeatureParent: ResolversTypes['PageContent'];
  FeatureParentConnectInput: FeatureParentConnectInput;
  FeatureParentCreateInput: FeatureParentCreateInput;
  FeatureParentCreateManyInlineInput: FeatureParentCreateManyInlineInput;
  FeatureParentCreateOneInlineInput: FeatureParentCreateOneInlineInput;
  FeatureParentUpdateInput: FeatureParentUpdateInput;
  FeatureParentUpdateManyInlineInput: FeatureParentUpdateManyInlineInput;
  FeatureParentUpdateManyWithNestedWhereInput: FeatureParentUpdateManyWithNestedWhereInput;
  FeatureParentUpdateOneInlineInput: FeatureParentUpdateOneInlineInput;
  FeatureParentUpdateWithNestedWhereUniqueInput: FeatureParentUpdateWithNestedWhereUniqueInput;
  FeatureParentUpsertWithNestedWhereUniqueInput: FeatureParentUpsertWithNestedWhereUniqueInput;
  FeatureParentWhereInput: FeatureParentWhereInput;
  FeatureParentWhereUniqueInput: FeatureParentWhereUniqueInput;
  FeatureUpdateInput: FeatureUpdateInput;
  FeatureUpdateManyInlineInput: FeatureUpdateManyInlineInput;
  FeatureUpdateManyInput: FeatureUpdateManyInput;
  FeatureUpdateManyWithNestedWhereInput: FeatureUpdateManyWithNestedWhereInput;
  FeatureUpdateOneInlineInput: FeatureUpdateOneInlineInput;
  FeatureUpdateWithNestedWhereUniqueAndPositionInput: FeatureUpdateWithNestedWhereUniqueAndPositionInput;
  FeatureUpdateWithNestedWhereUniqueInput: FeatureUpdateWithNestedWhereUniqueInput;
  FeatureUpsertInput: FeatureUpsertInput;
  FeatureUpsertWithNestedWhereUniqueAndPositionInput: FeatureUpsertWithNestedWhereUniqueAndPositionInput;
  FeatureUpsertWithNestedWhereUniqueInput: FeatureUpsertWithNestedWhereUniqueInput;
  FeatureWhereInput: FeatureWhereInput;
  FeatureWhereUniqueInput: FeatureWhereUniqueInput;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  FooterGroup: ResolverTypeWrapper<FooterGroup>;
  FooterGroupConnectInput: FooterGroupConnectInput;
  FooterGroupConnection: ResolverTypeWrapper<FooterGroupConnection>;
  FooterGroupCreateInput: FooterGroupCreateInput;
  FooterGroupCreateManyInlineInput: FooterGroupCreateManyInlineInput;
  FooterGroupCreateOneInlineInput: FooterGroupCreateOneInlineInput;
  FooterGroupEdge: ResolverTypeWrapper<FooterGroupEdge>;
  FooterGroupManyWhereInput: FooterGroupManyWhereInput;
  FooterGroupOrderByInput: FooterGroupOrderByInput;
  FooterGroupUpdateInput: FooterGroupUpdateInput;
  FooterGroupUpdateManyInlineInput: FooterGroupUpdateManyInlineInput;
  FooterGroupUpdateManyInput: FooterGroupUpdateManyInput;
  FooterGroupUpdateManyWithNestedWhereInput: FooterGroupUpdateManyWithNestedWhereInput;
  FooterGroupUpdateOneInlineInput: FooterGroupUpdateOneInlineInput;
  FooterGroupUpdateWithNestedWhereUniqueInput: FooterGroupUpdateWithNestedWhereUniqueInput;
  FooterGroupUpsertInput: FooterGroupUpsertInput;
  FooterGroupUpsertWithNestedWhereUniqueInput: FooterGroupUpsertWithNestedWhereUniqueInput;
  FooterGroupWhereComparatorInput: FooterGroupWhereComparatorInput;
  FooterGroupWhereInput: FooterGroupWhereInput;
  FooterGroupWhereStageInput: FooterGroupWhereStageInput;
  FooterGroupWhereUniqueInput: FooterGroupWhereUniqueInput;
  Form: ResolverTypeWrapper<Omit<Form, 'fields'> & { fields: Array<ResolversTypes['FormfieldsUnion']> }>;
  FormAction: FormAction;
  FormButton: ResolverTypeWrapper<FormButton>;
  FormButtonConnectInput: FormButtonConnectInput;
  FormButtonConnection: ResolverTypeWrapper<FormButtonConnection>;
  FormButtonCreateInput: FormButtonCreateInput;
  FormButtonCreateManyInlineInput: FormButtonCreateManyInlineInput;
  FormButtonCreateOneInlineInput: FormButtonCreateOneInlineInput;
  FormButtonCreateWithPositionInput: FormButtonCreateWithPositionInput;
  FormButtonEdge: ResolverTypeWrapper<FormButtonEdge>;
  FormButtonManyWhereInput: FormButtonManyWhereInput;
  FormButtonOrderByInput: FormButtonOrderByInput;
  FormButtonParent: ResolversTypes['ContactForm'] | ResolversTypes['Form'];
  FormButtonParentConnectInput: FormButtonParentConnectInput;
  FormButtonParentCreateInput: FormButtonParentCreateInput;
  FormButtonParentCreateManyInlineInput: FormButtonParentCreateManyInlineInput;
  FormButtonParentCreateOneInlineInput: FormButtonParentCreateOneInlineInput;
  FormButtonParentUpdateInput: FormButtonParentUpdateInput;
  FormButtonParentUpdateManyInlineInput: FormButtonParentUpdateManyInlineInput;
  FormButtonParentUpdateManyWithNestedWhereInput: FormButtonParentUpdateManyWithNestedWhereInput;
  FormButtonParentUpdateOneInlineInput: FormButtonParentUpdateOneInlineInput;
  FormButtonParentUpdateWithNestedWhereUniqueInput: FormButtonParentUpdateWithNestedWhereUniqueInput;
  FormButtonParentUpsertWithNestedWhereUniqueInput: FormButtonParentUpsertWithNestedWhereUniqueInput;
  FormButtonParentWhereInput: FormButtonParentWhereInput;
  FormButtonParentWhereUniqueInput: FormButtonParentWhereUniqueInput;
  FormButtonUpdateInput: FormButtonUpdateInput;
  FormButtonUpdateManyInlineInput: FormButtonUpdateManyInlineInput;
  FormButtonUpdateManyInput: FormButtonUpdateManyInput;
  FormButtonUpdateManyWithNestedWhereInput: FormButtonUpdateManyWithNestedWhereInput;
  FormButtonUpdateOneInlineInput: FormButtonUpdateOneInlineInput;
  FormButtonUpdateWithNestedWhereUniqueAndPositionInput: FormButtonUpdateWithNestedWhereUniqueAndPositionInput;
  FormButtonUpdateWithNestedWhereUniqueInput: FormButtonUpdateWithNestedWhereUniqueInput;
  FormButtonUpsertInput: FormButtonUpsertInput;
  FormButtonUpsertWithNestedWhereUniqueAndPositionInput: FormButtonUpsertWithNestedWhereUniqueAndPositionInput;
  FormButtonUpsertWithNestedWhereUniqueInput: FormButtonUpsertWithNestedWhereUniqueInput;
  FormButtonWhereInput: FormButtonWhereInput;
  FormButtonWhereUniqueInput: FormButtonWhereUniqueInput;
  FormConnectInput: FormConnectInput;
  FormConnection: ResolverTypeWrapper<FormConnection>;
  FormCreateInput: FormCreateInput;
  FormCreateManyInlineInput: FormCreateManyInlineInput;
  FormCreateOneInlineInput: FormCreateOneInlineInput;
  FormEdge: ResolverTypeWrapper<FormEdge>;
  FormManyWhereInput: FormManyWhereInput;
  FormOrderByInput: FormOrderByInput;
  FormUpdateInput: FormUpdateInput;
  FormUpdateManyInlineInput: FormUpdateManyInlineInput;
  FormUpdateManyInput: FormUpdateManyInput;
  FormUpdateManyWithNestedWhereInput: FormUpdateManyWithNestedWhereInput;
  FormUpdateOneInlineInput: FormUpdateOneInlineInput;
  FormUpdateWithNestedWhereUniqueInput: FormUpdateWithNestedWhereUniqueInput;
  FormUpsertInput: FormUpsertInput;
  FormUpsertWithNestedWhereUniqueInput: FormUpsertWithNestedWhereUniqueInput;
  FormWhereComparatorInput: FormWhereComparatorInput;
  FormWhereInput: FormWhereInput;
  FormWhereStageInput: FormWhereStageInput;
  FormWhereUniqueInput: FormWhereUniqueInput;
  FormfieldsUnion: ResolversTypes['CheckboxField'] | ResolversTypes['SelectField'] | ResolversTypes['TextAreaField'] | ResolversTypes['TextInputField'];
  FormfieldsUnionConnectInput: FormfieldsUnionConnectInput;
  FormfieldsUnionCreateInput: FormfieldsUnionCreateInput;
  FormfieldsUnionCreateManyInlineInput: FormfieldsUnionCreateManyInlineInput;
  FormfieldsUnionCreateOneInlineInput: FormfieldsUnionCreateOneInlineInput;
  FormfieldsUnionCreateWithPositionInput: FormfieldsUnionCreateWithPositionInput;
  FormfieldsUnionUpdateInput: FormfieldsUnionUpdateInput;
  FormfieldsUnionUpdateManyInlineInput: FormfieldsUnionUpdateManyInlineInput;
  FormfieldsUnionUpdateManyWithNestedWhereInput: FormfieldsUnionUpdateManyWithNestedWhereInput;
  FormfieldsUnionUpdateOneInlineInput: FormfieldsUnionUpdateOneInlineInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueInput: FormfieldsUnionUpdateWithNestedWhereUniqueInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueInput: FormfieldsUnionUpsertWithNestedWhereUniqueInput;
  FormfieldsUnionWhereInput: FormfieldsUnionWhereInput;
  FormfieldsUnionWhereUniqueInput: FormfieldsUnionWhereUniqueInput;
  Hex: ResolverTypeWrapper<Scalars['Hex']>;
  HomePage: ResolverTypeWrapper<HomePage>;
  HomePageBlock: ResolverTypeWrapper<HomePageBlock>;
  HomePageBlockConnectInput: HomePageBlockConnectInput;
  HomePageBlockConnection: ResolverTypeWrapper<HomePageBlockConnection>;
  HomePageBlockCreateInput: HomePageBlockCreateInput;
  HomePageBlockCreateManyInlineInput: HomePageBlockCreateManyInlineInput;
  HomePageBlockCreateOneInlineInput: HomePageBlockCreateOneInlineInput;
  HomePageBlockCreateWithPositionInput: HomePageBlockCreateWithPositionInput;
  HomePageBlockEdge: ResolverTypeWrapper<HomePageBlockEdge>;
  HomePageBlockManyWhereInput: HomePageBlockManyWhereInput;
  HomePageBlockOrderByInput: HomePageBlockOrderByInput;
  HomePageBlockParent: ResolversTypes['HomePage'];
  HomePageBlockParentConnectInput: HomePageBlockParentConnectInput;
  HomePageBlockParentCreateInput: HomePageBlockParentCreateInput;
  HomePageBlockParentCreateManyInlineInput: HomePageBlockParentCreateManyInlineInput;
  HomePageBlockParentCreateOneInlineInput: HomePageBlockParentCreateOneInlineInput;
  HomePageBlockParentUpdateInput: HomePageBlockParentUpdateInput;
  HomePageBlockParentUpdateManyInlineInput: HomePageBlockParentUpdateManyInlineInput;
  HomePageBlockParentUpdateManyWithNestedWhereInput: HomePageBlockParentUpdateManyWithNestedWhereInput;
  HomePageBlockParentUpdateOneInlineInput: HomePageBlockParentUpdateOneInlineInput;
  HomePageBlockParentUpdateWithNestedWhereUniqueInput: HomePageBlockParentUpdateWithNestedWhereUniqueInput;
  HomePageBlockParentUpsertWithNestedWhereUniqueInput: HomePageBlockParentUpsertWithNestedWhereUniqueInput;
  HomePageBlockParentWhereInput: HomePageBlockParentWhereInput;
  HomePageBlockParentWhereUniqueInput: HomePageBlockParentWhereUniqueInput;
  HomePageBlockUpdateInput: HomePageBlockUpdateInput;
  HomePageBlockUpdateManyInlineInput: HomePageBlockUpdateManyInlineInput;
  HomePageBlockUpdateManyInput: HomePageBlockUpdateManyInput;
  HomePageBlockUpdateManyWithNestedWhereInput: HomePageBlockUpdateManyWithNestedWhereInput;
  HomePageBlockUpdateOneInlineInput: HomePageBlockUpdateOneInlineInput;
  HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput: HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpdateWithNestedWhereUniqueInput: HomePageBlockUpdateWithNestedWhereUniqueInput;
  HomePageBlockUpsertInput: HomePageBlockUpsertInput;
  HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput: HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpsertWithNestedWhereUniqueInput: HomePageBlockUpsertWithNestedWhereUniqueInput;
  HomePageBlockWhereInput: HomePageBlockWhereInput;
  HomePageBlockWhereUniqueInput: HomePageBlockWhereUniqueInput;
  HomePageConnectInput: HomePageConnectInput;
  HomePageConnection: ResolverTypeWrapper<HomePageConnection>;
  HomePageCreateInput: HomePageCreateInput;
  HomePageCreateManyInlineInput: HomePageCreateManyInlineInput;
  HomePageCreateOneInlineInput: HomePageCreateOneInlineInput;
  HomePageEdge: ResolverTypeWrapper<HomePageEdge>;
  HomePageManyWhereInput: HomePageManyWhereInput;
  HomePageOrderByInput: HomePageOrderByInput;
  HomePageUpdateInput: HomePageUpdateInput;
  HomePageUpdateManyInlineInput: HomePageUpdateManyInlineInput;
  HomePageUpdateManyInput: HomePageUpdateManyInput;
  HomePageUpdateManyWithNestedWhereInput: HomePageUpdateManyWithNestedWhereInput;
  HomePageUpdateOneInlineInput: HomePageUpdateOneInlineInput;
  HomePageUpdateWithNestedWhereUniqueInput: HomePageUpdateWithNestedWhereUniqueInput;
  HomePageUpsertInput: HomePageUpsertInput;
  HomePageUpsertWithNestedWhereUniqueInput: HomePageUpsertWithNestedWhereUniqueInput;
  HomePageWhereComparatorInput: HomePageWhereComparatorInput;
  HomePageWhereInput: HomePageWhereInput;
  HomePageWhereStageInput: HomePageWhereStageInput;
  HomePageWhereUniqueInput: HomePageWhereUniqueInput;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Icon: ResolverTypeWrapper<Icon>;
  IconConnectInput: IconConnectInput;
  IconConnection: ResolverTypeWrapper<IconConnection>;
  IconCreateInput: IconCreateInput;
  IconCreateManyInlineInput: IconCreateManyInlineInput;
  IconCreateOneInlineInput: IconCreateOneInlineInput;
  IconCreateWithPositionInput: IconCreateWithPositionInput;
  IconEdge: ResolverTypeWrapper<IconEdge>;
  IconManyWhereInput: IconManyWhereInput;
  IconOrderByInput: IconOrderByInput;
  IconParent: ResolversTypes['ContactForm'];
  IconParentConnectInput: IconParentConnectInput;
  IconParentCreateInput: IconParentCreateInput;
  IconParentCreateManyInlineInput: IconParentCreateManyInlineInput;
  IconParentCreateOneInlineInput: IconParentCreateOneInlineInput;
  IconParentUpdateInput: IconParentUpdateInput;
  IconParentUpdateManyInlineInput: IconParentUpdateManyInlineInput;
  IconParentUpdateManyWithNestedWhereInput: IconParentUpdateManyWithNestedWhereInput;
  IconParentUpdateOneInlineInput: IconParentUpdateOneInlineInput;
  IconParentUpdateWithNestedWhereUniqueInput: IconParentUpdateWithNestedWhereUniqueInput;
  IconParentUpsertWithNestedWhereUniqueInput: IconParentUpsertWithNestedWhereUniqueInput;
  IconParentWhereInput: IconParentWhereInput;
  IconParentWhereUniqueInput: IconParentWhereUniqueInput;
  IconUpdateInput: IconUpdateInput;
  IconUpdateManyInlineInput: IconUpdateManyInlineInput;
  IconUpdateManyInput: IconUpdateManyInput;
  IconUpdateManyWithNestedWhereInput: IconUpdateManyWithNestedWhereInput;
  IconUpdateOneInlineInput: IconUpdateOneInlineInput;
  IconUpdateWithNestedWhereUniqueAndPositionInput: IconUpdateWithNestedWhereUniqueAndPositionInput;
  IconUpdateWithNestedWhereUniqueInput: IconUpdateWithNestedWhereUniqueInput;
  IconUpsertInput: IconUpsertInput;
  IconUpsertWithNestedWhereUniqueAndPositionInput: IconUpsertWithNestedWhereUniqueAndPositionInput;
  IconUpsertWithNestedWhereUniqueInput: IconUpsertWithNestedWhereUniqueInput;
  IconWhereInput: IconWhereInput;
  IconWhereUniqueInput: IconWhereUniqueInput;
  ImageFit: ImageFit;
  ImageResizeInput: ImageResizeInput;
  ImageTransformationInput: ImageTransformationInput;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  Json: ResolverTypeWrapper<Scalars['Json']>;
  Locale: Locale;
  Location: ResolverTypeWrapper<Location>;
  LocationInput: LocationInput;
  Long: ResolverTypeWrapper<Scalars['Long']>;
  Mutation: ResolverTypeWrapper<{}>;
  Node: ResolversTypes['Admonition'] | ResolversTypes['Asset'] | ResolversTypes['CloudLocation'] | ResolversTypes['Configuration'] | ResolversTypes['ContactForm'] | ResolversTypes['ContentButton'] | ResolversTypes['DocsGroup'] | ResolversTypes['DocsPage'] | ResolversTypes['Employee'] | ResolversTypes['FooterGroup'] | ResolversTypes['Form'] | ResolversTypes['HomePage'] | ResolversTypes['Page'] | ResolversTypes['PageContent'] | ResolversTypes['ScheduledOperation'] | ResolversTypes['ScheduledRelease'] | ResolversTypes['Testimonial'] | ResolversTypes['Theme'] | ResolversTypes['User'];
  Page: ResolverTypeWrapper<Page>;
  PageConnectInput: PageConnectInput;
  PageConnection: ResolverTypeWrapper<PageConnection>;
  PageContent: ResolverTypeWrapper<PageContent>;
  PageContentConnectInput: PageContentConnectInput;
  PageContentConnection: ResolverTypeWrapper<PageContentConnection>;
  PageContentCreateInput: PageContentCreateInput;
  PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
  PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
  PageContentEdge: ResolverTypeWrapper<PageContentEdge>;
  PageContentManyWhereInput: PageContentManyWhereInput;
  PageContentOrderByInput: PageContentOrderByInput;
  PageContentUpdateInput: PageContentUpdateInput;
  PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
  PageContentUpdateManyInput: PageContentUpdateManyInput;
  PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
  PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
  PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
  PageContentUpsertInput: PageContentUpsertInput;
  PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
  PageContentWhereComparatorInput: PageContentWhereComparatorInput;
  PageContentWhereInput: PageContentWhereInput;
  PageContentWhereStageInput: PageContentWhereStageInput;
  PageContentWhereUniqueInput: PageContentWhereUniqueInput;
  PageCreateInput: PageCreateInput;
  PageCreateManyInlineInput: PageCreateManyInlineInput;
  PageCreateOneInlineInput: PageCreateOneInlineInput;
  PageEdge: ResolverTypeWrapper<PageEdge>;
  PageInfo: ResolverTypeWrapper<PageInfo>;
  PageManyWhereInput: PageManyWhereInput;
  PageOrderByInput: PageOrderByInput;
  PageUpdateInput: PageUpdateInput;
  PageUpdateManyInlineInput: PageUpdateManyInlineInput;
  PageUpdateManyInput: PageUpdateManyInput;
  PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
  PageUpdateOneInlineInput: PageUpdateOneInlineInput;
  PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
  PageUpsertInput: PageUpsertInput;
  PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
  PageWhereComparatorInput: PageWhereComparatorInput;
  PageWhereInput: PageWhereInput;
  PageWhereStageInput: PageWhereStageInput;
  PageWhereUniqueInput: PageWhereUniqueInput;
  PublishLocaleInput: PublishLocaleInput;
  Query: ResolverTypeWrapper<{}>;
  RGBA: ResolverTypeWrapper<Rgba>;
  RGBAHue: ResolverTypeWrapper<Scalars['RGBAHue']>;
  RGBAInput: RgbaInput;
  RGBATransparency: ResolverTypeWrapper<Scalars['RGBATransparency']>;
  RichText: ResolverTypeWrapper<RichText>;
  RichTextAST: ResolverTypeWrapper<Scalars['RichTextAST']>;
  ScheduledOperation: ResolverTypeWrapper<Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<ResolversTypes['ScheduledOperationAffectedDocument']> }>;
  ScheduledOperationAffectedDocument: ResolversTypes['Admonition'] | ResolversTypes['Asset'] | ResolversTypes['CloudLocation'] | ResolversTypes['Configuration'] | ResolversTypes['ContactForm'] | ResolversTypes['ContentButton'] | ResolversTypes['DocsGroup'] | ResolversTypes['DocsPage'] | ResolversTypes['Employee'] | ResolversTypes['FooterGroup'] | ResolversTypes['Form'] | ResolversTypes['HomePage'] | ResolversTypes['Page'] | ResolversTypes['PageContent'] | ResolversTypes['Testimonial'] | ResolversTypes['Theme'];
  ScheduledOperationConnectInput: ScheduledOperationConnectInput;
  ScheduledOperationConnection: ResolverTypeWrapper<ScheduledOperationConnection>;
  ScheduledOperationCreateManyInlineInput: ScheduledOperationCreateManyInlineInput;
  ScheduledOperationCreateOneInlineInput: ScheduledOperationCreateOneInlineInput;
  ScheduledOperationEdge: ResolverTypeWrapper<ScheduledOperationEdge>;
  ScheduledOperationManyWhereInput: ScheduledOperationManyWhereInput;
  ScheduledOperationOrderByInput: ScheduledOperationOrderByInput;
  ScheduledOperationStatus: ScheduledOperationStatus;
  ScheduledOperationUpdateManyInlineInput: ScheduledOperationUpdateManyInlineInput;
  ScheduledOperationUpdateOneInlineInput: ScheduledOperationUpdateOneInlineInput;
  ScheduledOperationWhereInput: ScheduledOperationWhereInput;
  ScheduledOperationWhereUniqueInput: ScheduledOperationWhereUniqueInput;
  ScheduledRelease: ResolverTypeWrapper<ScheduledRelease>;
  ScheduledReleaseConnectInput: ScheduledReleaseConnectInput;
  ScheduledReleaseConnection: ResolverTypeWrapper<ScheduledReleaseConnection>;
  ScheduledReleaseCreateInput: ScheduledReleaseCreateInput;
  ScheduledReleaseCreateManyInlineInput: ScheduledReleaseCreateManyInlineInput;
  ScheduledReleaseCreateOneInlineInput: ScheduledReleaseCreateOneInlineInput;
  ScheduledReleaseEdge: ResolverTypeWrapper<ScheduledReleaseEdge>;
  ScheduledReleaseManyWhereInput: ScheduledReleaseManyWhereInput;
  ScheduledReleaseOrderByInput: ScheduledReleaseOrderByInput;
  ScheduledReleaseStatus: ScheduledReleaseStatus;
  ScheduledReleaseUpdateInput: ScheduledReleaseUpdateInput;
  ScheduledReleaseUpdateManyInlineInput: ScheduledReleaseUpdateManyInlineInput;
  ScheduledReleaseUpdateManyInput: ScheduledReleaseUpdateManyInput;
  ScheduledReleaseUpdateManyWithNestedWhereInput: ScheduledReleaseUpdateManyWithNestedWhereInput;
  ScheduledReleaseUpdateOneInlineInput: ScheduledReleaseUpdateOneInlineInput;
  ScheduledReleaseUpdateWithNestedWhereUniqueInput: ScheduledReleaseUpdateWithNestedWhereUniqueInput;
  ScheduledReleaseUpsertInput: ScheduledReleaseUpsertInput;
  ScheduledReleaseUpsertWithNestedWhereUniqueInput: ScheduledReleaseUpsertWithNestedWhereUniqueInput;
  ScheduledReleaseWhereInput: ScheduledReleaseWhereInput;
  ScheduledReleaseWhereUniqueInput: ScheduledReleaseWhereUniqueInput;
  SelectField: ResolverTypeWrapper<SelectField>;
  SelectFieldConnectInput: SelectFieldConnectInput;
  SelectFieldConnection: ResolverTypeWrapper<SelectFieldConnection>;
  SelectFieldCreateInput: SelectFieldCreateInput;
  SelectFieldCreateManyInlineInput: SelectFieldCreateManyInlineInput;
  SelectFieldCreateOneInlineInput: SelectFieldCreateOneInlineInput;
  SelectFieldCreateWithPositionInput: SelectFieldCreateWithPositionInput;
  SelectFieldEdge: ResolverTypeWrapper<SelectFieldEdge>;
  SelectFieldManyWhereInput: SelectFieldManyWhereInput;
  SelectFieldOrderByInput: SelectFieldOrderByInput;
  SelectFieldParent: ResolversTypes['ContactForm'] | ResolversTypes['Form'];
  SelectFieldParentConnectInput: SelectFieldParentConnectInput;
  SelectFieldParentCreateInput: SelectFieldParentCreateInput;
  SelectFieldParentCreateManyInlineInput: SelectFieldParentCreateManyInlineInput;
  SelectFieldParentCreateOneInlineInput: SelectFieldParentCreateOneInlineInput;
  SelectFieldParentUpdateInput: SelectFieldParentUpdateInput;
  SelectFieldParentUpdateManyInlineInput: SelectFieldParentUpdateManyInlineInput;
  SelectFieldParentUpdateManyWithNestedWhereInput: SelectFieldParentUpdateManyWithNestedWhereInput;
  SelectFieldParentUpdateOneInlineInput: SelectFieldParentUpdateOneInlineInput;
  SelectFieldParentUpdateWithNestedWhereUniqueInput: SelectFieldParentUpdateWithNestedWhereUniqueInput;
  SelectFieldParentUpsertWithNestedWhereUniqueInput: SelectFieldParentUpsertWithNestedWhereUniqueInput;
  SelectFieldParentWhereInput: SelectFieldParentWhereInput;
  SelectFieldParentWhereUniqueInput: SelectFieldParentWhereUniqueInput;
  SelectFieldUpdateInput: SelectFieldUpdateInput;
  SelectFieldUpdateManyInlineInput: SelectFieldUpdateManyInlineInput;
  SelectFieldUpdateManyInput: SelectFieldUpdateManyInput;
  SelectFieldUpdateManyWithNestedWhereInput: SelectFieldUpdateManyWithNestedWhereInput;
  SelectFieldUpdateOneInlineInput: SelectFieldUpdateOneInlineInput;
  SelectFieldUpdateWithNestedWhereUniqueAndPositionInput: SelectFieldUpdateWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpdateWithNestedWhereUniqueInput: SelectFieldUpdateWithNestedWhereUniqueInput;
  SelectFieldUpsertInput: SelectFieldUpsertInput;
  SelectFieldUpsertWithNestedWhereUniqueAndPositionInput: SelectFieldUpsertWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpsertWithNestedWhereUniqueInput: SelectFieldUpsertWithNestedWhereUniqueInput;
  SelectFieldWhereInput: SelectFieldWhereInput;
  SelectFieldWhereUniqueInput: SelectFieldWhereUniqueInput;
  SocialLink: ResolverTypeWrapper<SocialLink>;
  SocialLinkConnectInput: SocialLinkConnectInput;
  SocialLinkConnection: ResolverTypeWrapper<SocialLinkConnection>;
  SocialLinkCreateInput: SocialLinkCreateInput;
  SocialLinkCreateManyInlineInput: SocialLinkCreateManyInlineInput;
  SocialLinkCreateOneInlineInput: SocialLinkCreateOneInlineInput;
  SocialLinkCreateWithPositionInput: SocialLinkCreateWithPositionInput;
  SocialLinkEdge: ResolverTypeWrapper<SocialLinkEdge>;
  SocialLinkManyWhereInput: SocialLinkManyWhereInput;
  SocialLinkOrderByInput: SocialLinkOrderByInput;
  SocialLinkParent: ResolversTypes['Configuration'];
  SocialLinkParentConnectInput: SocialLinkParentConnectInput;
  SocialLinkParentCreateInput: SocialLinkParentCreateInput;
  SocialLinkParentCreateManyInlineInput: SocialLinkParentCreateManyInlineInput;
  SocialLinkParentCreateOneInlineInput: SocialLinkParentCreateOneInlineInput;
  SocialLinkParentUpdateInput: SocialLinkParentUpdateInput;
  SocialLinkParentUpdateManyInlineInput: SocialLinkParentUpdateManyInlineInput;
  SocialLinkParentUpdateManyWithNestedWhereInput: SocialLinkParentUpdateManyWithNestedWhereInput;
  SocialLinkParentUpdateOneInlineInput: SocialLinkParentUpdateOneInlineInput;
  SocialLinkParentUpdateWithNestedWhereUniqueInput: SocialLinkParentUpdateWithNestedWhereUniqueInput;
  SocialLinkParentUpsertWithNestedWhereUniqueInput: SocialLinkParentUpsertWithNestedWhereUniqueInput;
  SocialLinkParentWhereInput: SocialLinkParentWhereInput;
  SocialLinkParentWhereUniqueInput: SocialLinkParentWhereUniqueInput;
  SocialLinkUpdateInput: SocialLinkUpdateInput;
  SocialLinkUpdateManyInlineInput: SocialLinkUpdateManyInlineInput;
  SocialLinkUpdateManyInput: SocialLinkUpdateManyInput;
  SocialLinkUpdateManyWithNestedWhereInput: SocialLinkUpdateManyWithNestedWhereInput;
  SocialLinkUpdateOneInlineInput: SocialLinkUpdateOneInlineInput;
  SocialLinkUpdateWithNestedWhereUniqueAndPositionInput: SocialLinkUpdateWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpdateWithNestedWhereUniqueInput: SocialLinkUpdateWithNestedWhereUniqueInput;
  SocialLinkUpsertInput: SocialLinkUpsertInput;
  SocialLinkUpsertWithNestedWhereUniqueAndPositionInput: SocialLinkUpsertWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpsertWithNestedWhereUniqueInput: SocialLinkUpsertWithNestedWhereUniqueInput;
  SocialLinkWhereInput: SocialLinkWhereInput;
  SocialLinkWhereUniqueInput: SocialLinkWhereUniqueInput;
  Stage: Stage;
  String: ResolverTypeWrapper<Scalars['String']>;
  SystemDateTimeFieldVariation: SystemDateTimeFieldVariation;
  Testimonial: ResolverTypeWrapper<Testimonial>;
  TestimonialConnectInput: TestimonialConnectInput;
  TestimonialConnection: ResolverTypeWrapper<TestimonialConnection>;
  TestimonialCreateInput: TestimonialCreateInput;
  TestimonialCreateManyInlineInput: TestimonialCreateManyInlineInput;
  TestimonialCreateOneInlineInput: TestimonialCreateOneInlineInput;
  TestimonialEdge: ResolverTypeWrapper<TestimonialEdge>;
  TestimonialManyWhereInput: TestimonialManyWhereInput;
  TestimonialOrderByInput: TestimonialOrderByInput;
  TestimonialUpdateInput: TestimonialUpdateInput;
  TestimonialUpdateManyInlineInput: TestimonialUpdateManyInlineInput;
  TestimonialUpdateManyInput: TestimonialUpdateManyInput;
  TestimonialUpdateManyWithNestedWhereInput: TestimonialUpdateManyWithNestedWhereInput;
  TestimonialUpdateOneInlineInput: TestimonialUpdateOneInlineInput;
  TestimonialUpdateWithNestedWhereUniqueInput: TestimonialUpdateWithNestedWhereUniqueInput;
  TestimonialUpsertInput: TestimonialUpsertInput;
  TestimonialUpsertWithNestedWhereUniqueInput: TestimonialUpsertWithNestedWhereUniqueInput;
  TestimonialWhereComparatorInput: TestimonialWhereComparatorInput;
  TestimonialWhereInput: TestimonialWhereInput;
  TestimonialWhereStageInput: TestimonialWhereStageInput;
  TestimonialWhereUniqueInput: TestimonialWhereUniqueInput;
  TextAreaField: ResolverTypeWrapper<TextAreaField>;
  TextAreaFieldConnectInput: TextAreaFieldConnectInput;
  TextAreaFieldConnection: ResolverTypeWrapper<TextAreaFieldConnection>;
  TextAreaFieldCreateInput: TextAreaFieldCreateInput;
  TextAreaFieldCreateManyInlineInput: TextAreaFieldCreateManyInlineInput;
  TextAreaFieldCreateOneInlineInput: TextAreaFieldCreateOneInlineInput;
  TextAreaFieldCreateWithPositionInput: TextAreaFieldCreateWithPositionInput;
  TextAreaFieldEdge: ResolverTypeWrapper<TextAreaFieldEdge>;
  TextAreaFieldManyWhereInput: TextAreaFieldManyWhereInput;
  TextAreaFieldOrderByInput: TextAreaFieldOrderByInput;
  TextAreaFieldParent: ResolversTypes['ContactForm'] | ResolversTypes['Form'];
  TextAreaFieldParentConnectInput: TextAreaFieldParentConnectInput;
  TextAreaFieldParentCreateInput: TextAreaFieldParentCreateInput;
  TextAreaFieldParentCreateManyInlineInput: TextAreaFieldParentCreateManyInlineInput;
  TextAreaFieldParentCreateOneInlineInput: TextAreaFieldParentCreateOneInlineInput;
  TextAreaFieldParentUpdateInput: TextAreaFieldParentUpdateInput;
  TextAreaFieldParentUpdateManyInlineInput: TextAreaFieldParentUpdateManyInlineInput;
  TextAreaFieldParentUpdateManyWithNestedWhereInput: TextAreaFieldParentUpdateManyWithNestedWhereInput;
  TextAreaFieldParentUpdateOneInlineInput: TextAreaFieldParentUpdateOneInlineInput;
  TextAreaFieldParentUpdateWithNestedWhereUniqueInput: TextAreaFieldParentUpdateWithNestedWhereUniqueInput;
  TextAreaFieldParentUpsertWithNestedWhereUniqueInput: TextAreaFieldParentUpsertWithNestedWhereUniqueInput;
  TextAreaFieldParentWhereInput: TextAreaFieldParentWhereInput;
  TextAreaFieldParentWhereUniqueInput: TextAreaFieldParentWhereUniqueInput;
  TextAreaFieldUpdateInput: TextAreaFieldUpdateInput;
  TextAreaFieldUpdateManyInlineInput: TextAreaFieldUpdateManyInlineInput;
  TextAreaFieldUpdateManyInput: TextAreaFieldUpdateManyInput;
  TextAreaFieldUpdateManyWithNestedWhereInput: TextAreaFieldUpdateManyWithNestedWhereInput;
  TextAreaFieldUpdateOneInlineInput: TextAreaFieldUpdateOneInlineInput;
  TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpdateWithNestedWhereUniqueInput: TextAreaFieldUpdateWithNestedWhereUniqueInput;
  TextAreaFieldUpsertInput: TextAreaFieldUpsertInput;
  TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpsertWithNestedWhereUniqueInput: TextAreaFieldUpsertWithNestedWhereUniqueInput;
  TextAreaFieldWhereInput: TextAreaFieldWhereInput;
  TextAreaFieldWhereUniqueInput: TextAreaFieldWhereUniqueInput;
  TextInputField: ResolverTypeWrapper<TextInputField>;
  TextInputFieldConnectInput: TextInputFieldConnectInput;
  TextInputFieldConnection: ResolverTypeWrapper<TextInputFieldConnection>;
  TextInputFieldCreateInput: TextInputFieldCreateInput;
  TextInputFieldCreateManyInlineInput: TextInputFieldCreateManyInlineInput;
  TextInputFieldCreateOneInlineInput: TextInputFieldCreateOneInlineInput;
  TextInputFieldCreateWithPositionInput: TextInputFieldCreateWithPositionInput;
  TextInputFieldEdge: ResolverTypeWrapper<TextInputFieldEdge>;
  TextInputFieldManyWhereInput: TextInputFieldManyWhereInput;
  TextInputFieldOrderByInput: TextInputFieldOrderByInput;
  TextInputFieldParent: ResolversTypes['ContactForm'] | ResolversTypes['Form'];
  TextInputFieldParentConnectInput: TextInputFieldParentConnectInput;
  TextInputFieldParentCreateInput: TextInputFieldParentCreateInput;
  TextInputFieldParentCreateManyInlineInput: TextInputFieldParentCreateManyInlineInput;
  TextInputFieldParentCreateOneInlineInput: TextInputFieldParentCreateOneInlineInput;
  TextInputFieldParentUpdateInput: TextInputFieldParentUpdateInput;
  TextInputFieldParentUpdateManyInlineInput: TextInputFieldParentUpdateManyInlineInput;
  TextInputFieldParentUpdateManyWithNestedWhereInput: TextInputFieldParentUpdateManyWithNestedWhereInput;
  TextInputFieldParentUpdateOneInlineInput: TextInputFieldParentUpdateOneInlineInput;
  TextInputFieldParentUpdateWithNestedWhereUniqueInput: TextInputFieldParentUpdateWithNestedWhereUniqueInput;
  TextInputFieldParentUpsertWithNestedWhereUniqueInput: TextInputFieldParentUpsertWithNestedWhereUniqueInput;
  TextInputFieldParentWhereInput: TextInputFieldParentWhereInput;
  TextInputFieldParentWhereUniqueInput: TextInputFieldParentWhereUniqueInput;
  TextInputFieldUpdateInput: TextInputFieldUpdateInput;
  TextInputFieldUpdateManyInlineInput: TextInputFieldUpdateManyInlineInput;
  TextInputFieldUpdateManyInput: TextInputFieldUpdateManyInput;
  TextInputFieldUpdateManyWithNestedWhereInput: TextInputFieldUpdateManyWithNestedWhereInput;
  TextInputFieldUpdateOneInlineInput: TextInputFieldUpdateOneInlineInput;
  TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput: TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpdateWithNestedWhereUniqueInput: TextInputFieldUpdateWithNestedWhereUniqueInput;
  TextInputFieldUpsertInput: TextInputFieldUpsertInput;
  TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput: TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpsertWithNestedWhereUniqueInput: TextInputFieldUpsertWithNestedWhereUniqueInput;
  TextInputFieldWhereInput: TextInputFieldWhereInput;
  TextInputFieldWhereUniqueInput: TextInputFieldWhereUniqueInput;
  TextInputValidationType: TextInputValidationType;
  Theme: ResolverTypeWrapper<Theme>;
  ThemeColor: ThemeColor;
  ThemeColors: ResolverTypeWrapper<ThemeColors>;
  ThemeColorsConnectInput: ThemeColorsConnectInput;
  ThemeColorsConnection: ResolverTypeWrapper<ThemeColorsConnection>;
  ThemeColorsCreateInput: ThemeColorsCreateInput;
  ThemeColorsCreateManyInlineInput: ThemeColorsCreateManyInlineInput;
  ThemeColorsCreateOneInlineInput: ThemeColorsCreateOneInlineInput;
  ThemeColorsCreateWithPositionInput: ThemeColorsCreateWithPositionInput;
  ThemeColorsEdge: ResolverTypeWrapper<ThemeColorsEdge>;
  ThemeColorsManyWhereInput: ThemeColorsManyWhereInput;
  ThemeColorsOrderByInput: ThemeColorsOrderByInput;
  ThemeColorsParent: ResolversTypes['Theme'];
  ThemeColorsParentConnectInput: ThemeColorsParentConnectInput;
  ThemeColorsParentCreateInput: ThemeColorsParentCreateInput;
  ThemeColorsParentCreateManyInlineInput: ThemeColorsParentCreateManyInlineInput;
  ThemeColorsParentCreateOneInlineInput: ThemeColorsParentCreateOneInlineInput;
  ThemeColorsParentUpdateInput: ThemeColorsParentUpdateInput;
  ThemeColorsParentUpdateManyInlineInput: ThemeColorsParentUpdateManyInlineInput;
  ThemeColorsParentUpdateManyWithNestedWhereInput: ThemeColorsParentUpdateManyWithNestedWhereInput;
  ThemeColorsParentUpdateOneInlineInput: ThemeColorsParentUpdateOneInlineInput;
  ThemeColorsParentUpdateWithNestedWhereUniqueInput: ThemeColorsParentUpdateWithNestedWhereUniqueInput;
  ThemeColorsParentUpsertWithNestedWhereUniqueInput: ThemeColorsParentUpsertWithNestedWhereUniqueInput;
  ThemeColorsParentWhereInput: ThemeColorsParentWhereInput;
  ThemeColorsParentWhereUniqueInput: ThemeColorsParentWhereUniqueInput;
  ThemeColorsUpdateInput: ThemeColorsUpdateInput;
  ThemeColorsUpdateManyInlineInput: ThemeColorsUpdateManyInlineInput;
  ThemeColorsUpdateManyInput: ThemeColorsUpdateManyInput;
  ThemeColorsUpdateManyWithNestedWhereInput: ThemeColorsUpdateManyWithNestedWhereInput;
  ThemeColorsUpdateOneInlineInput: ThemeColorsUpdateOneInlineInput;
  ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput: ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpdateWithNestedWhereUniqueInput: ThemeColorsUpdateWithNestedWhereUniqueInput;
  ThemeColorsUpsertInput: ThemeColorsUpsertInput;
  ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput: ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpsertWithNestedWhereUniqueInput: ThemeColorsUpsertWithNestedWhereUniqueInput;
  ThemeColorsWhereInput: ThemeColorsWhereInput;
  ThemeColorsWhereUniqueInput: ThemeColorsWhereUniqueInput;
  ThemeConnectInput: ThemeConnectInput;
  ThemeConnection: ResolverTypeWrapper<ThemeConnection>;
  ThemeCreateInput: ThemeCreateInput;
  ThemeCreateManyInlineInput: ThemeCreateManyInlineInput;
  ThemeCreateOneInlineInput: ThemeCreateOneInlineInput;
  ThemeEdge: ResolverTypeWrapper<ThemeEdge>;
  ThemeFonts: ResolverTypeWrapper<ThemeFonts>;
  ThemeFontsConnectInput: ThemeFontsConnectInput;
  ThemeFontsConnection: ResolverTypeWrapper<ThemeFontsConnection>;
  ThemeFontsCreateInput: ThemeFontsCreateInput;
  ThemeFontsCreateManyInlineInput: ThemeFontsCreateManyInlineInput;
  ThemeFontsCreateOneInlineInput: ThemeFontsCreateOneInlineInput;
  ThemeFontsCreateWithPositionInput: ThemeFontsCreateWithPositionInput;
  ThemeFontsEdge: ResolverTypeWrapper<ThemeFontsEdge>;
  ThemeFontsManyWhereInput: ThemeFontsManyWhereInput;
  ThemeFontsOrderByInput: ThemeFontsOrderByInput;
  ThemeFontsParent: ResolversTypes['Theme'];
  ThemeFontsParentConnectInput: ThemeFontsParentConnectInput;
  ThemeFontsParentCreateInput: ThemeFontsParentCreateInput;
  ThemeFontsParentCreateManyInlineInput: ThemeFontsParentCreateManyInlineInput;
  ThemeFontsParentCreateOneInlineInput: ThemeFontsParentCreateOneInlineInput;
  ThemeFontsParentUpdateInput: ThemeFontsParentUpdateInput;
  ThemeFontsParentUpdateManyInlineInput: ThemeFontsParentUpdateManyInlineInput;
  ThemeFontsParentUpdateManyWithNestedWhereInput: ThemeFontsParentUpdateManyWithNestedWhereInput;
  ThemeFontsParentUpdateOneInlineInput: ThemeFontsParentUpdateOneInlineInput;
  ThemeFontsParentUpdateWithNestedWhereUniqueInput: ThemeFontsParentUpdateWithNestedWhereUniqueInput;
  ThemeFontsParentUpsertWithNestedWhereUniqueInput: ThemeFontsParentUpsertWithNestedWhereUniqueInput;
  ThemeFontsParentWhereInput: ThemeFontsParentWhereInput;
  ThemeFontsParentWhereUniqueInput: ThemeFontsParentWhereUniqueInput;
  ThemeFontsUpdateInput: ThemeFontsUpdateInput;
  ThemeFontsUpdateManyInlineInput: ThemeFontsUpdateManyInlineInput;
  ThemeFontsUpdateManyInput: ThemeFontsUpdateManyInput;
  ThemeFontsUpdateManyWithNestedWhereInput: ThemeFontsUpdateManyWithNestedWhereInput;
  ThemeFontsUpdateOneInlineInput: ThemeFontsUpdateOneInlineInput;
  ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput: ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpdateWithNestedWhereUniqueInput: ThemeFontsUpdateWithNestedWhereUniqueInput;
  ThemeFontsUpsertInput: ThemeFontsUpsertInput;
  ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput: ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpsertWithNestedWhereUniqueInput: ThemeFontsUpsertWithNestedWhereUniqueInput;
  ThemeFontsWhereInput: ThemeFontsWhereInput;
  ThemeFontsWhereUniqueInput: ThemeFontsWhereUniqueInput;
  ThemeManyWhereInput: ThemeManyWhereInput;
  ThemeOrderByInput: ThemeOrderByInput;
  ThemeUpdateInput: ThemeUpdateInput;
  ThemeUpdateManyInlineInput: ThemeUpdateManyInlineInput;
  ThemeUpdateManyInput: ThemeUpdateManyInput;
  ThemeUpdateManyWithNestedWhereInput: ThemeUpdateManyWithNestedWhereInput;
  ThemeUpdateOneInlineInput: ThemeUpdateOneInlineInput;
  ThemeUpdateWithNestedWhereUniqueInput: ThemeUpdateWithNestedWhereUniqueInput;
  ThemeUpsertInput: ThemeUpsertInput;
  ThemeUpsertWithNestedWhereUniqueInput: ThemeUpsertWithNestedWhereUniqueInput;
  ThemeWhereComparatorInput: ThemeWhereComparatorInput;
  ThemeWhereInput: ThemeWhereInput;
  ThemeWhereStageInput: ThemeWhereStageInput;
  ThemeWhereUniqueInput: ThemeWhereUniqueInput;
  UnpublishLocaleInput: UnpublishLocaleInput;
  User: ResolverTypeWrapper<User>;
  UserConnectInput: UserConnectInput;
  UserConnection: ResolverTypeWrapper<UserConnection>;
  UserCreateManyInlineInput: UserCreateManyInlineInput;
  UserCreateOneInlineInput: UserCreateOneInlineInput;
  UserEdge: ResolverTypeWrapper<UserEdge>;
  UserKind: UserKind;
  UserManyWhereInput: UserManyWhereInput;
  UserOrderByInput: UserOrderByInput;
  UserUpdateManyInlineInput: UserUpdateManyInlineInput;
  UserUpdateOneInlineInput: UserUpdateOneInlineInput;
  UserWhereComparatorInput: UserWhereComparatorInput;
  UserWhereInput: UserWhereInput;
  UserWhereStageInput: UserWhereStageInput;
  UserWhereUniqueInput: UserWhereUniqueInput;
  VendorLogo: ResolverTypeWrapper<VendorLogo>;
  VendorLogoConnectInput: VendorLogoConnectInput;
  VendorLogoConnection: ResolverTypeWrapper<VendorLogoConnection>;
  VendorLogoCreateInput: VendorLogoCreateInput;
  VendorLogoCreateManyInlineInput: VendorLogoCreateManyInlineInput;
  VendorLogoCreateOneInlineInput: VendorLogoCreateOneInlineInput;
  VendorLogoCreateWithPositionInput: VendorLogoCreateWithPositionInput;
  VendorLogoEdge: ResolverTypeWrapper<VendorLogoEdge>;
  VendorLogoManyWhereInput: VendorLogoManyWhereInput;
  VendorLogoOrderByInput: VendorLogoOrderByInput;
  VendorLogoParent: ResolversTypes['PageContent'];
  VendorLogoParentConnectInput: VendorLogoParentConnectInput;
  VendorLogoParentCreateInput: VendorLogoParentCreateInput;
  VendorLogoParentCreateManyInlineInput: VendorLogoParentCreateManyInlineInput;
  VendorLogoParentCreateOneInlineInput: VendorLogoParentCreateOneInlineInput;
  VendorLogoParentUpdateInput: VendorLogoParentUpdateInput;
  VendorLogoParentUpdateManyInlineInput: VendorLogoParentUpdateManyInlineInput;
  VendorLogoParentUpdateManyWithNestedWhereInput: VendorLogoParentUpdateManyWithNestedWhereInput;
  VendorLogoParentUpdateOneInlineInput: VendorLogoParentUpdateOneInlineInput;
  VendorLogoParentUpdateWithNestedWhereUniqueInput: VendorLogoParentUpdateWithNestedWhereUniqueInput;
  VendorLogoParentUpsertWithNestedWhereUniqueInput: VendorLogoParentUpsertWithNestedWhereUniqueInput;
  VendorLogoParentWhereInput: VendorLogoParentWhereInput;
  VendorLogoParentWhereUniqueInput: VendorLogoParentWhereUniqueInput;
  VendorLogoUpdateInput: VendorLogoUpdateInput;
  VendorLogoUpdateManyInlineInput: VendorLogoUpdateManyInlineInput;
  VendorLogoUpdateManyInput: VendorLogoUpdateManyInput;
  VendorLogoUpdateManyWithNestedWhereInput: VendorLogoUpdateManyWithNestedWhereInput;
  VendorLogoUpdateOneInlineInput: VendorLogoUpdateOneInlineInput;
  VendorLogoUpdateWithNestedWhereUniqueAndPositionInput: VendorLogoUpdateWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpdateWithNestedWhereUniqueInput: VendorLogoUpdateWithNestedWhereUniqueInput;
  VendorLogoUpsertInput: VendorLogoUpsertInput;
  VendorLogoUpsertWithNestedWhereUniqueAndPositionInput: VendorLogoUpsertWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpsertWithNestedWhereUniqueInput: VendorLogoUpsertWithNestedWhereUniqueInput;
  VendorLogoWhereInput: VendorLogoWhereInput;
  VendorLogoWhereUniqueInput: VendorLogoWhereUniqueInput;
  Version: ResolverTypeWrapper<Version>;
  VersionWhereInput: VersionWhereInput;
  _FilterKind: _FilterKind;
  _MutationInputFieldKind: _MutationInputFieldKind;
  _MutationKind: _MutationKind;
  _OrderDirection: _OrderDirection;
  _RelationInputCardinality: _RelationInputCardinality;
  _RelationInputKind: _RelationInputKind;
  _RelationKind: _RelationKind;
  _SystemDateTimeFieldVariation: _SystemDateTimeFieldVariation;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Admonition: Admonition;
  AdmonitionConnectInput: AdmonitionConnectInput;
  AdmonitionConnection: AdmonitionConnection;
  AdmonitionCreateInput: AdmonitionCreateInput;
  AdmonitionCreateManyInlineInput: AdmonitionCreateManyInlineInput;
  AdmonitionCreateOneInlineInput: AdmonitionCreateOneInlineInput;
  AdmonitionEdge: AdmonitionEdge;
  AdmonitionManyWhereInput: AdmonitionManyWhereInput;
  AdmonitionUpdateInput: AdmonitionUpdateInput;
  AdmonitionUpdateManyInlineInput: AdmonitionUpdateManyInlineInput;
  AdmonitionUpdateManyInput: AdmonitionUpdateManyInput;
  AdmonitionUpdateManyWithNestedWhereInput: AdmonitionUpdateManyWithNestedWhereInput;
  AdmonitionUpdateOneInlineInput: AdmonitionUpdateOneInlineInput;
  AdmonitionUpdateWithNestedWhereUniqueInput: AdmonitionUpdateWithNestedWhereUniqueInput;
  AdmonitionUpsertInput: AdmonitionUpsertInput;
  AdmonitionUpsertWithNestedWhereUniqueInput: AdmonitionUpsertWithNestedWhereUniqueInput;
  AdmonitionWhereComparatorInput: AdmonitionWhereComparatorInput;
  AdmonitionWhereInput: AdmonitionWhereInput;
  AdmonitionWhereStageInput: AdmonitionWhereStageInput;
  AdmonitionWhereUniqueInput: AdmonitionWhereUniqueInput;
  Aggregate: Aggregate;
  Alert: Alert;
  AlertConnectInput: AlertConnectInput;
  AlertConnection: AlertConnection;
  AlertCreateInput: AlertCreateInput;
  AlertCreateManyInlineInput: AlertCreateManyInlineInput;
  AlertCreateOneInlineInput: AlertCreateOneInlineInput;
  AlertCreateWithPositionInput: AlertCreateWithPositionInput;
  AlertEdge: AlertEdge;
  AlertManyWhereInput: AlertManyWhereInput;
  AlertParent: ResolversParentTypes['Configuration'] | ResolversParentTypes['FormButton'];
  AlertParentConnectInput: AlertParentConnectInput;
  AlertParentCreateInput: AlertParentCreateInput;
  AlertParentCreateManyInlineInput: AlertParentCreateManyInlineInput;
  AlertParentCreateOneInlineInput: AlertParentCreateOneInlineInput;
  AlertParentUpdateInput: AlertParentUpdateInput;
  AlertParentUpdateManyInlineInput: AlertParentUpdateManyInlineInput;
  AlertParentUpdateManyWithNestedWhereInput: AlertParentUpdateManyWithNestedWhereInput;
  AlertParentUpdateOneInlineInput: AlertParentUpdateOneInlineInput;
  AlertParentUpdateWithNestedWhereUniqueInput: AlertParentUpdateWithNestedWhereUniqueInput;
  AlertParentUpsertWithNestedWhereUniqueInput: AlertParentUpsertWithNestedWhereUniqueInput;
  AlertParentWhereInput: AlertParentWhereInput;
  AlertParentWhereUniqueInput: AlertParentWhereUniqueInput;
  AlertUpdateInput: AlertUpdateInput;
  AlertUpdateManyInlineInput: AlertUpdateManyInlineInput;
  AlertUpdateManyInput: AlertUpdateManyInput;
  AlertUpdateManyWithNestedWhereInput: AlertUpdateManyWithNestedWhereInput;
  AlertUpdateOneInlineInput: AlertUpdateOneInlineInput;
  AlertUpdateWithNestedWhereUniqueAndPositionInput: AlertUpdateWithNestedWhereUniqueAndPositionInput;
  AlertUpdateWithNestedWhereUniqueInput: AlertUpdateWithNestedWhereUniqueInput;
  AlertUpsertInput: AlertUpsertInput;
  AlertUpsertWithNestedWhereUniqueAndPositionInput: AlertUpsertWithNestedWhereUniqueAndPositionInput;
  AlertUpsertWithNestedWhereUniqueInput: AlertUpsertWithNestedWhereUniqueInput;
  AlertWhereInput: AlertWhereInput;
  AlertWhereUniqueInput: AlertWhereUniqueInput;
  Asset: Asset;
  AssetConnectInput: AssetConnectInput;
  AssetConnection: AssetConnection;
  AssetCreateInput: AssetCreateInput;
  AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
  AssetCreateLocalizationInput: AssetCreateLocalizationInput;
  AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
  AssetCreateManyInlineInput: AssetCreateManyInlineInput;
  AssetCreateOneInlineInput: AssetCreateOneInlineInput;
  AssetEdge: AssetEdge;
  AssetManyWhereInput: AssetManyWhereInput;
  AssetTransformationInput: AssetTransformationInput;
  AssetUpdateInput: AssetUpdateInput;
  AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
  AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
  AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
  AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
  AssetUpdateManyInput: AssetUpdateManyInput;
  AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
  AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
  AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
  AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
  AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
  AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
  AssetUpsertInput: AssetUpsertInput;
  AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
  AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
  AssetWhereComparatorInput: AssetWhereComparatorInput;
  AssetWhereInput: AssetWhereInput;
  AssetWhereStageInput: AssetWhereStageInput;
  AssetWhereUniqueInput: AssetWhereUniqueInput;
  BatchPayload: BatchPayload;
  Boolean: Scalars['Boolean'];
  Button: Button;
  ButtonConnectInput: ButtonConnectInput;
  ButtonConnection: ButtonConnection;
  ButtonCreateInput: ButtonCreateInput;
  ButtonCreateManyInlineInput: ButtonCreateManyInlineInput;
  ButtonCreateOneInlineInput: ButtonCreateOneInlineInput;
  ButtonCreateWithPositionInput: ButtonCreateWithPositionInput;
  ButtonEdge: ButtonEdge;
  ButtonManyWhereInput: ButtonManyWhereInput;
  ButtonParent: ResolversParentTypes['Callout'] | ResolversParentTypes['ContactForm'] | ResolversParentTypes['Feature'] | ResolversParentTypes['HomePageBlock'] | ResolversParentTypes['PageContent'];
  ButtonParentConnectInput: ButtonParentConnectInput;
  ButtonParentCreateInput: ButtonParentCreateInput;
  ButtonParentCreateManyInlineInput: ButtonParentCreateManyInlineInput;
  ButtonParentCreateOneInlineInput: ButtonParentCreateOneInlineInput;
  ButtonParentUpdateInput: ButtonParentUpdateInput;
  ButtonParentUpdateManyInlineInput: ButtonParentUpdateManyInlineInput;
  ButtonParentUpdateManyWithNestedWhereInput: ButtonParentUpdateManyWithNestedWhereInput;
  ButtonParentUpdateOneInlineInput: ButtonParentUpdateOneInlineInput;
  ButtonParentUpdateWithNestedWhereUniqueInput: ButtonParentUpdateWithNestedWhereUniqueInput;
  ButtonParentUpsertWithNestedWhereUniqueInput: ButtonParentUpsertWithNestedWhereUniqueInput;
  ButtonParentWhereInput: ButtonParentWhereInput;
  ButtonParentWhereUniqueInput: ButtonParentWhereUniqueInput;
  ButtonUpdateInput: ButtonUpdateInput;
  ButtonUpdateManyInlineInput: ButtonUpdateManyInlineInput;
  ButtonUpdateManyInput: ButtonUpdateManyInput;
  ButtonUpdateManyWithNestedWhereInput: ButtonUpdateManyWithNestedWhereInput;
  ButtonUpdateOneInlineInput: ButtonUpdateOneInlineInput;
  ButtonUpdateWithNestedWhereUniqueAndPositionInput: ButtonUpdateWithNestedWhereUniqueAndPositionInput;
  ButtonUpdateWithNestedWhereUniqueInput: ButtonUpdateWithNestedWhereUniqueInput;
  ButtonUpsertInput: ButtonUpsertInput;
  ButtonUpsertWithNestedWhereUniqueAndPositionInput: ButtonUpsertWithNestedWhereUniqueAndPositionInput;
  ButtonUpsertWithNestedWhereUniqueInput: ButtonUpsertWithNestedWhereUniqueInput;
  ButtonWhereInput: ButtonWhereInput;
  ButtonWhereUniqueInput: ButtonWhereUniqueInput;
  CallToAction: CallToAction;
  CallToActionConnectInput: CallToActionConnectInput;
  CallToActionConnection: CallToActionConnection;
  CallToActionCreateInput: CallToActionCreateInput;
  CallToActionCreateManyInlineInput: CallToActionCreateManyInlineInput;
  CallToActionCreateOneInlineInput: CallToActionCreateOneInlineInput;
  CallToActionCreateWithPositionInput: CallToActionCreateWithPositionInput;
  CallToActionEdge: CallToActionEdge;
  CallToActionManyWhereInput: CallToActionManyWhereInput;
  CallToActionParent: ResolversParentTypes['Configuration'];
  CallToActionParentConnectInput: CallToActionParentConnectInput;
  CallToActionParentCreateInput: CallToActionParentCreateInput;
  CallToActionParentCreateManyInlineInput: CallToActionParentCreateManyInlineInput;
  CallToActionParentCreateOneInlineInput: CallToActionParentCreateOneInlineInput;
  CallToActionParentUpdateInput: CallToActionParentUpdateInput;
  CallToActionParentUpdateManyInlineInput: CallToActionParentUpdateManyInlineInput;
  CallToActionParentUpdateManyWithNestedWhereInput: CallToActionParentUpdateManyWithNestedWhereInput;
  CallToActionParentUpdateOneInlineInput: CallToActionParentUpdateOneInlineInput;
  CallToActionParentUpdateWithNestedWhereUniqueInput: CallToActionParentUpdateWithNestedWhereUniqueInput;
  CallToActionParentUpsertWithNestedWhereUniqueInput: CallToActionParentUpsertWithNestedWhereUniqueInput;
  CallToActionParentWhereInput: CallToActionParentWhereInput;
  CallToActionParentWhereUniqueInput: CallToActionParentWhereUniqueInput;
  CallToActionSettings: CallToActionSettings;
  CallToActionSettingsConnectInput: CallToActionSettingsConnectInput;
  CallToActionSettingsConnection: CallToActionSettingsConnection;
  CallToActionSettingsCreateInput: CallToActionSettingsCreateInput;
  CallToActionSettingsCreateManyInlineInput: CallToActionSettingsCreateManyInlineInput;
  CallToActionSettingsCreateOneInlineInput: CallToActionSettingsCreateOneInlineInput;
  CallToActionSettingsCreateWithPositionInput: CallToActionSettingsCreateWithPositionInput;
  CallToActionSettingsEdge: CallToActionSettingsEdge;
  CallToActionSettingsManyWhereInput: CallToActionSettingsManyWhereInput;
  CallToActionSettingsParent: ResolversParentTypes['DocsGroup'] | ResolversParentTypes['PageContent'];
  CallToActionSettingsParentConnectInput: CallToActionSettingsParentConnectInput;
  CallToActionSettingsParentCreateInput: CallToActionSettingsParentCreateInput;
  CallToActionSettingsParentCreateManyInlineInput: CallToActionSettingsParentCreateManyInlineInput;
  CallToActionSettingsParentCreateOneInlineInput: CallToActionSettingsParentCreateOneInlineInput;
  CallToActionSettingsParentUpdateInput: CallToActionSettingsParentUpdateInput;
  CallToActionSettingsParentUpdateManyInlineInput: CallToActionSettingsParentUpdateManyInlineInput;
  CallToActionSettingsParentUpdateManyWithNestedWhereInput: CallToActionSettingsParentUpdateManyWithNestedWhereInput;
  CallToActionSettingsParentUpdateOneInlineInput: CallToActionSettingsParentUpdateOneInlineInput;
  CallToActionSettingsParentUpdateWithNestedWhereUniqueInput: CallToActionSettingsParentUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsParentUpsertWithNestedWhereUniqueInput: CallToActionSettingsParentUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsParentWhereInput: CallToActionSettingsParentWhereInput;
  CallToActionSettingsParentWhereUniqueInput: CallToActionSettingsParentWhereUniqueInput;
  CallToActionSettingsUpdateInput: CallToActionSettingsUpdateInput;
  CallToActionSettingsUpdateManyInlineInput: CallToActionSettingsUpdateManyInlineInput;
  CallToActionSettingsUpdateManyInput: CallToActionSettingsUpdateManyInput;
  CallToActionSettingsUpdateManyWithNestedWhereInput: CallToActionSettingsUpdateManyWithNestedWhereInput;
  CallToActionSettingsUpdateOneInlineInput: CallToActionSettingsUpdateOneInlineInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueInput: CallToActionSettingsUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsUpsertInput: CallToActionSettingsUpsertInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueInput: CallToActionSettingsUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsWhereInput: CallToActionSettingsWhereInput;
  CallToActionSettingsWhereUniqueInput: CallToActionSettingsWhereUniqueInput;
  CallToActionUpdateInput: CallToActionUpdateInput;
  CallToActionUpdateManyInlineInput: CallToActionUpdateManyInlineInput;
  CallToActionUpdateManyInput: CallToActionUpdateManyInput;
  CallToActionUpdateManyWithNestedWhereInput: CallToActionUpdateManyWithNestedWhereInput;
  CallToActionUpdateOneInlineInput: CallToActionUpdateOneInlineInput;
  CallToActionUpdateWithNestedWhereUniqueAndPositionInput: CallToActionUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionUpdateWithNestedWhereUniqueInput: CallToActionUpdateWithNestedWhereUniqueInput;
  CallToActionUpsertInput: CallToActionUpsertInput;
  CallToActionUpsertWithNestedWhereUniqueAndPositionInput: CallToActionUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionUpsertWithNestedWhereUniqueInput: CallToActionUpsertWithNestedWhereUniqueInput;
  CallToActionWhereInput: CallToActionWhereInput;
  CallToActionWhereUniqueInput: CallToActionWhereUniqueInput;
  Callout: Callout;
  CalloutConnectInput: CalloutConnectInput;
  CalloutConnection: CalloutConnection;
  CalloutCreateInput: CalloutCreateInput;
  CalloutCreateManyInlineInput: CalloutCreateManyInlineInput;
  CalloutCreateOneInlineInput: CalloutCreateOneInlineInput;
  CalloutCreateWithPositionInput: CalloutCreateWithPositionInput;
  CalloutEdge: CalloutEdge;
  CalloutManyWhereInput: CalloutManyWhereInput;
  CalloutParent: ResolversParentTypes['Page'];
  CalloutParentConnectInput: CalloutParentConnectInput;
  CalloutParentCreateInput: CalloutParentCreateInput;
  CalloutParentCreateManyInlineInput: CalloutParentCreateManyInlineInput;
  CalloutParentCreateOneInlineInput: CalloutParentCreateOneInlineInput;
  CalloutParentUpdateInput: CalloutParentUpdateInput;
  CalloutParentUpdateManyInlineInput: CalloutParentUpdateManyInlineInput;
  CalloutParentUpdateManyWithNestedWhereInput: CalloutParentUpdateManyWithNestedWhereInput;
  CalloutParentUpdateOneInlineInput: CalloutParentUpdateOneInlineInput;
  CalloutParentUpdateWithNestedWhereUniqueInput: CalloutParentUpdateWithNestedWhereUniqueInput;
  CalloutParentUpsertWithNestedWhereUniqueInput: CalloutParentUpsertWithNestedWhereUniqueInput;
  CalloutParentWhereInput: CalloutParentWhereInput;
  CalloutParentWhereUniqueInput: CalloutParentWhereUniqueInput;
  CalloutUpdateInput: CalloutUpdateInput;
  CalloutUpdateManyInlineInput: CalloutUpdateManyInlineInput;
  CalloutUpdateManyInput: CalloutUpdateManyInput;
  CalloutUpdateManyWithNestedWhereInput: CalloutUpdateManyWithNestedWhereInput;
  CalloutUpdateOneInlineInput: CalloutUpdateOneInlineInput;
  CalloutUpdateWithNestedWhereUniqueAndPositionInput: CalloutUpdateWithNestedWhereUniqueAndPositionInput;
  CalloutUpdateWithNestedWhereUniqueInput: CalloutUpdateWithNestedWhereUniqueInput;
  CalloutUpsertInput: CalloutUpsertInput;
  CalloutUpsertWithNestedWhereUniqueAndPositionInput: CalloutUpsertWithNestedWhereUniqueAndPositionInput;
  CalloutUpsertWithNestedWhereUniqueInput: CalloutUpsertWithNestedWhereUniqueInput;
  CalloutWhereInput: CalloutWhereInput;
  CalloutWhereUniqueInput: CalloutWhereUniqueInput;
  CheckboxField: CheckboxField;
  CheckboxFieldConnectInput: CheckboxFieldConnectInput;
  CheckboxFieldConnection: CheckboxFieldConnection;
  CheckboxFieldCreateInput: CheckboxFieldCreateInput;
  CheckboxFieldCreateManyInlineInput: CheckboxFieldCreateManyInlineInput;
  CheckboxFieldCreateOneInlineInput: CheckboxFieldCreateOneInlineInput;
  CheckboxFieldCreateWithPositionInput: CheckboxFieldCreateWithPositionInput;
  CheckboxFieldEdge: CheckboxFieldEdge;
  CheckboxFieldManyWhereInput: CheckboxFieldManyWhereInput;
  CheckboxFieldParent: ResolversParentTypes['ContactForm'] | ResolversParentTypes['Form'];
  CheckboxFieldParentConnectInput: CheckboxFieldParentConnectInput;
  CheckboxFieldParentCreateInput: CheckboxFieldParentCreateInput;
  CheckboxFieldParentCreateManyInlineInput: CheckboxFieldParentCreateManyInlineInput;
  CheckboxFieldParentCreateOneInlineInput: CheckboxFieldParentCreateOneInlineInput;
  CheckboxFieldParentUpdateInput: CheckboxFieldParentUpdateInput;
  CheckboxFieldParentUpdateManyInlineInput: CheckboxFieldParentUpdateManyInlineInput;
  CheckboxFieldParentUpdateManyWithNestedWhereInput: CheckboxFieldParentUpdateManyWithNestedWhereInput;
  CheckboxFieldParentUpdateOneInlineInput: CheckboxFieldParentUpdateOneInlineInput;
  CheckboxFieldParentUpdateWithNestedWhereUniqueInput: CheckboxFieldParentUpdateWithNestedWhereUniqueInput;
  CheckboxFieldParentUpsertWithNestedWhereUniqueInput: CheckboxFieldParentUpsertWithNestedWhereUniqueInput;
  CheckboxFieldParentWhereInput: CheckboxFieldParentWhereInput;
  CheckboxFieldParentWhereUniqueInput: CheckboxFieldParentWhereUniqueInput;
  CheckboxFieldUpdateInput: CheckboxFieldUpdateInput;
  CheckboxFieldUpdateManyInlineInput: CheckboxFieldUpdateManyInlineInput;
  CheckboxFieldUpdateManyInput: CheckboxFieldUpdateManyInput;
  CheckboxFieldUpdateManyWithNestedWhereInput: CheckboxFieldUpdateManyWithNestedWhereInput;
  CheckboxFieldUpdateOneInlineInput: CheckboxFieldUpdateOneInlineInput;
  CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpdateWithNestedWhereUniqueInput: CheckboxFieldUpdateWithNestedWhereUniqueInput;
  CheckboxFieldUpsertInput: CheckboxFieldUpsertInput;
  CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpsertWithNestedWhereUniqueInput: CheckboxFieldUpsertWithNestedWhereUniqueInput;
  CheckboxFieldWhereInput: CheckboxFieldWhereInput;
  CheckboxFieldWhereUniqueInput: CheckboxFieldWhereUniqueInput;
  CloudLocation: CloudLocation;
  CloudLocationConnectInput: CloudLocationConnectInput;
  CloudLocationConnection: CloudLocationConnection;
  CloudLocationCreateInput: CloudLocationCreateInput;
  CloudLocationCreateManyInlineInput: CloudLocationCreateManyInlineInput;
  CloudLocationCreateOneInlineInput: CloudLocationCreateOneInlineInput;
  CloudLocationEdge: CloudLocationEdge;
  CloudLocationManyWhereInput: CloudLocationManyWhereInput;
  CloudLocationUpdateInput: CloudLocationUpdateInput;
  CloudLocationUpdateManyInlineInput: CloudLocationUpdateManyInlineInput;
  CloudLocationUpdateManyInput: CloudLocationUpdateManyInput;
  CloudLocationUpdateManyWithNestedWhereInput: CloudLocationUpdateManyWithNestedWhereInput;
  CloudLocationUpdateOneInlineInput: CloudLocationUpdateOneInlineInput;
  CloudLocationUpdateWithNestedWhereUniqueInput: CloudLocationUpdateWithNestedWhereUniqueInput;
  CloudLocationUpsertInput: CloudLocationUpsertInput;
  CloudLocationUpsertWithNestedWhereUniqueInput: CloudLocationUpsertWithNestedWhereUniqueInput;
  CloudLocationWhereComparatorInput: CloudLocationWhereComparatorInput;
  CloudLocationWhereInput: CloudLocationWhereInput;
  CloudLocationWhereStageInput: CloudLocationWhereStageInput;
  CloudLocationWhereUniqueInput: CloudLocationWhereUniqueInput;
  Color: Color;
  ColorInput: ColorInput;
  Configuration: Configuration;
  ConfigurationConnectInput: ConfigurationConnectInput;
  ConfigurationConnection: ConfigurationConnection;
  ConfigurationCreateInput: ConfigurationCreateInput;
  ConfigurationCreateManyInlineInput: ConfigurationCreateManyInlineInput;
  ConfigurationCreateOneInlineInput: ConfigurationCreateOneInlineInput;
  ConfigurationEdge: ConfigurationEdge;
  ConfigurationManyWhereInput: ConfigurationManyWhereInput;
  ConfigurationUpdateInput: ConfigurationUpdateInput;
  ConfigurationUpdateManyInlineInput: ConfigurationUpdateManyInlineInput;
  ConfigurationUpdateManyInput: ConfigurationUpdateManyInput;
  ConfigurationUpdateManyWithNestedWhereInput: ConfigurationUpdateManyWithNestedWhereInput;
  ConfigurationUpdateOneInlineInput: ConfigurationUpdateOneInlineInput;
  ConfigurationUpdateWithNestedWhereUniqueInput: ConfigurationUpdateWithNestedWhereUniqueInput;
  ConfigurationUpsertInput: ConfigurationUpsertInput;
  ConfigurationUpsertWithNestedWhereUniqueInput: ConfigurationUpsertWithNestedWhereUniqueInput;
  ConfigurationWhereComparatorInput: ConfigurationWhereComparatorInput;
  ConfigurationWhereInput: ConfigurationWhereInput;
  ConfigurationWhereStageInput: ConfigurationWhereStageInput;
  ConfigurationWhereUniqueInput: ConfigurationWhereUniqueInput;
  ConnectPositionInput: ConnectPositionInput;
  ContactForm: Omit<ContactForm, 'fields'> & { fields: Array<ResolversParentTypes['ContactFormfieldsUnion']> };
  ContactFormConnectInput: ContactFormConnectInput;
  ContactFormConnection: ContactFormConnection;
  ContactFormCreateInput: ContactFormCreateInput;
  ContactFormCreateManyInlineInput: ContactFormCreateManyInlineInput;
  ContactFormCreateOneInlineInput: ContactFormCreateOneInlineInput;
  ContactFormEdge: ContactFormEdge;
  ContactFormManyWhereInput: ContactFormManyWhereInput;
  ContactFormUpdateInput: ContactFormUpdateInput;
  ContactFormUpdateManyInlineInput: ContactFormUpdateManyInlineInput;
  ContactFormUpdateManyInput: ContactFormUpdateManyInput;
  ContactFormUpdateManyWithNestedWhereInput: ContactFormUpdateManyWithNestedWhereInput;
  ContactFormUpdateOneInlineInput: ContactFormUpdateOneInlineInput;
  ContactFormUpdateWithNestedWhereUniqueInput: ContactFormUpdateWithNestedWhereUniqueInput;
  ContactFormUpsertInput: ContactFormUpsertInput;
  ContactFormUpsertWithNestedWhereUniqueInput: ContactFormUpsertWithNestedWhereUniqueInput;
  ContactFormWhereComparatorInput: ContactFormWhereComparatorInput;
  ContactFormWhereInput: ContactFormWhereInput;
  ContactFormWhereStageInput: ContactFormWhereStageInput;
  ContactFormWhereUniqueInput: ContactFormWhereUniqueInput;
  ContactFormfieldsUnion: ResolversParentTypes['CheckboxField'] | ResolversParentTypes['FormButton'] | ResolversParentTypes['SelectField'] | ResolversParentTypes['TextAreaField'] | ResolversParentTypes['TextInputField'];
  ContactFormfieldsUnionConnectInput: ContactFormfieldsUnionConnectInput;
  ContactFormfieldsUnionCreateInput: ContactFormfieldsUnionCreateInput;
  ContactFormfieldsUnionCreateManyInlineInput: ContactFormfieldsUnionCreateManyInlineInput;
  ContactFormfieldsUnionCreateOneInlineInput: ContactFormfieldsUnionCreateOneInlineInput;
  ContactFormfieldsUnionCreateWithPositionInput: ContactFormfieldsUnionCreateWithPositionInput;
  ContactFormfieldsUnionUpdateInput: ContactFormfieldsUnionUpdateInput;
  ContactFormfieldsUnionUpdateManyInlineInput: ContactFormfieldsUnionUpdateManyInlineInput;
  ContactFormfieldsUnionUpdateManyWithNestedWhereInput: ContactFormfieldsUnionUpdateManyWithNestedWhereInput;
  ContactFormfieldsUnionUpdateOneInlineInput: ContactFormfieldsUnionUpdateOneInlineInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput;
  ContactFormfieldsUnionWhereInput: ContactFormfieldsUnionWhereInput;
  ContactFormfieldsUnionWhereUniqueInput: ContactFormfieldsUnionWhereUniqueInput;
  ContentButton: ContentButton;
  ContentButtonConnectInput: ContentButtonConnectInput;
  ContentButtonConnection: ContentButtonConnection;
  ContentButtonCreateInput: ContentButtonCreateInput;
  ContentButtonCreateManyInlineInput: ContentButtonCreateManyInlineInput;
  ContentButtonCreateOneInlineInput: ContentButtonCreateOneInlineInput;
  ContentButtonEdge: ContentButtonEdge;
  ContentButtonManyWhereInput: ContentButtonManyWhereInput;
  ContentButtonUpdateInput: ContentButtonUpdateInput;
  ContentButtonUpdateManyInlineInput: ContentButtonUpdateManyInlineInput;
  ContentButtonUpdateManyInput: ContentButtonUpdateManyInput;
  ContentButtonUpdateManyWithNestedWhereInput: ContentButtonUpdateManyWithNestedWhereInput;
  ContentButtonUpdateOneInlineInput: ContentButtonUpdateOneInlineInput;
  ContentButtonUpdateWithNestedWhereUniqueInput: ContentButtonUpdateWithNestedWhereUniqueInput;
  ContentButtonUpsertInput: ContentButtonUpsertInput;
  ContentButtonUpsertWithNestedWhereUniqueInput: ContentButtonUpsertWithNestedWhereUniqueInput;
  ContentButtonWhereComparatorInput: ContentButtonWhereComparatorInput;
  ContentButtonWhereInput: ContentButtonWhereInput;
  ContentButtonWhereStageInput: ContentButtonWhereStageInput;
  ContentButtonWhereUniqueInput: ContentButtonWhereUniqueInput;
  Date: Scalars['Date'];
  DateTime: Scalars['DateTime'];
  DocsGroup: DocsGroup;
  DocsGroupConnectInput: DocsGroupConnectInput;
  DocsGroupConnection: DocsGroupConnection;
  DocsGroupCreateInput: DocsGroupCreateInput;
  DocsGroupCreateManyInlineInput: DocsGroupCreateManyInlineInput;
  DocsGroupCreateOneInlineInput: DocsGroupCreateOneInlineInput;
  DocsGroupEdge: DocsGroupEdge;
  DocsGroupManyWhereInput: DocsGroupManyWhereInput;
  DocsGroupSummaryRichText: Omit<DocsGroupSummaryRichText, 'references'> & { references: Array<ResolversParentTypes['DocsGroupSummaryRichTextEmbeddedTypes']> };
  DocsGroupSummaryRichTextEmbeddedTypes: ResolversParentTypes['Admonition'] | ResolversParentTypes['Asset'] | ResolversParentTypes['ContentButton'];
  DocsGroupUpdateInput: DocsGroupUpdateInput;
  DocsGroupUpdateManyInlineInput: DocsGroupUpdateManyInlineInput;
  DocsGroupUpdateManyInput: DocsGroupUpdateManyInput;
  DocsGroupUpdateManyWithNestedWhereInput: DocsGroupUpdateManyWithNestedWhereInput;
  DocsGroupUpdateOneInlineInput: DocsGroupUpdateOneInlineInput;
  DocsGroupUpdateWithNestedWhereUniqueInput: DocsGroupUpdateWithNestedWhereUniqueInput;
  DocsGroupUpsertInput: DocsGroupUpsertInput;
  DocsGroupUpsertWithNestedWhereUniqueInput: DocsGroupUpsertWithNestedWhereUniqueInput;
  DocsGroupWhereComparatorInput: DocsGroupWhereComparatorInput;
  DocsGroupWhereInput: DocsGroupWhereInput;
  DocsGroupWhereStageInput: DocsGroupWhereStageInput;
  DocsGroupWhereUniqueInput: DocsGroupWhereUniqueInput;
  DocsPage: DocsPage;
  DocsPageBodyRichText: Omit<DocsPageBodyRichText, 'references'> & { references: Array<ResolversParentTypes['DocsPageBodyRichTextEmbeddedTypes']> };
  DocsPageBodyRichTextEmbeddedTypes: ResolversParentTypes['Admonition'] | ResolversParentTypes['Asset'] | ResolversParentTypes['ContentButton'];
  DocsPageConnectInput: DocsPageConnectInput;
  DocsPageConnection: DocsPageConnection;
  DocsPageCreateInput: DocsPageCreateInput;
  DocsPageCreateManyInlineInput: DocsPageCreateManyInlineInput;
  DocsPageCreateOneInlineInput: DocsPageCreateOneInlineInput;
  DocsPageEdge: DocsPageEdge;
  DocsPageManyWhereInput: DocsPageManyWhereInput;
  DocsPageUpdateInput: DocsPageUpdateInput;
  DocsPageUpdateManyInlineInput: DocsPageUpdateManyInlineInput;
  DocsPageUpdateManyInput: DocsPageUpdateManyInput;
  DocsPageUpdateManyWithNestedWhereInput: DocsPageUpdateManyWithNestedWhereInput;
  DocsPageUpdateOneInlineInput: DocsPageUpdateOneInlineInput;
  DocsPageUpdateWithNestedWhereUniqueInput: DocsPageUpdateWithNestedWhereUniqueInput;
  DocsPageUpsertInput: DocsPageUpsertInput;
  DocsPageUpsertWithNestedWhereUniqueInput: DocsPageUpsertWithNestedWhereUniqueInput;
  DocsPageWhereComparatorInput: DocsPageWhereComparatorInput;
  DocsPageWhereInput: DocsPageWhereInput;
  DocsPageWhereStageInput: DocsPageWhereStageInput;
  DocsPageWhereUniqueInput: DocsPageWhereUniqueInput;
  DocumentOutputInput: DocumentOutputInput;
  DocumentTransformationInput: DocumentTransformationInput;
  DocumentVersion: DocumentVersion;
  Employee: Employee;
  EmployeeConnectInput: EmployeeConnectInput;
  EmployeeConnection: EmployeeConnection;
  EmployeeCreateInput: EmployeeCreateInput;
  EmployeeCreateManyInlineInput: EmployeeCreateManyInlineInput;
  EmployeeCreateOneInlineInput: EmployeeCreateOneInlineInput;
  EmployeeEdge: EmployeeEdge;
  EmployeeManyWhereInput: EmployeeManyWhereInput;
  EmployeeUpdateInput: EmployeeUpdateInput;
  EmployeeUpdateManyInlineInput: EmployeeUpdateManyInlineInput;
  EmployeeUpdateManyInput: EmployeeUpdateManyInput;
  EmployeeUpdateManyWithNestedWhereInput: EmployeeUpdateManyWithNestedWhereInput;
  EmployeeUpdateOneInlineInput: EmployeeUpdateOneInlineInput;
  EmployeeUpdateWithNestedWhereUniqueInput: EmployeeUpdateWithNestedWhereUniqueInput;
  EmployeeUpsertInput: EmployeeUpsertInput;
  EmployeeUpsertWithNestedWhereUniqueInput: EmployeeUpsertWithNestedWhereUniqueInput;
  EmployeeWhereComparatorInput: EmployeeWhereComparatorInput;
  EmployeeWhereInput: EmployeeWhereInput;
  EmployeeWhereStageInput: EmployeeWhereStageInput;
  EmployeeWhereUniqueInput: EmployeeWhereUniqueInput;
  ExternalLink: ExternalLink;
  ExternalLinkConnectInput: ExternalLinkConnectInput;
  ExternalLinkConnection: ExternalLinkConnection;
  ExternalLinkCreateInput: ExternalLinkCreateInput;
  ExternalLinkCreateManyInlineInput: ExternalLinkCreateManyInlineInput;
  ExternalLinkCreateOneInlineInput: ExternalLinkCreateOneInlineInput;
  ExternalLinkCreateWithPositionInput: ExternalLinkCreateWithPositionInput;
  ExternalLinkEdge: ExternalLinkEdge;
  ExternalLinkManyWhereInput: ExternalLinkManyWhereInput;
  ExternalLinkParent: ResolversParentTypes['FooterGroup'];
  ExternalLinkParentConnectInput: ExternalLinkParentConnectInput;
  ExternalLinkParentCreateInput: ExternalLinkParentCreateInput;
  ExternalLinkParentCreateManyInlineInput: ExternalLinkParentCreateManyInlineInput;
  ExternalLinkParentCreateOneInlineInput: ExternalLinkParentCreateOneInlineInput;
  ExternalLinkParentUpdateInput: ExternalLinkParentUpdateInput;
  ExternalLinkParentUpdateManyInlineInput: ExternalLinkParentUpdateManyInlineInput;
  ExternalLinkParentUpdateManyWithNestedWhereInput: ExternalLinkParentUpdateManyWithNestedWhereInput;
  ExternalLinkParentUpdateOneInlineInput: ExternalLinkParentUpdateOneInlineInput;
  ExternalLinkParentUpdateWithNestedWhereUniqueInput: ExternalLinkParentUpdateWithNestedWhereUniqueInput;
  ExternalLinkParentUpsertWithNestedWhereUniqueInput: ExternalLinkParentUpsertWithNestedWhereUniqueInput;
  ExternalLinkParentWhereInput: ExternalLinkParentWhereInput;
  ExternalLinkParentWhereUniqueInput: ExternalLinkParentWhereUniqueInput;
  ExternalLinkUpdateInput: ExternalLinkUpdateInput;
  ExternalLinkUpdateManyInlineInput: ExternalLinkUpdateManyInlineInput;
  ExternalLinkUpdateManyInput: ExternalLinkUpdateManyInput;
  ExternalLinkUpdateManyWithNestedWhereInput: ExternalLinkUpdateManyWithNestedWhereInput;
  ExternalLinkUpdateOneInlineInput: ExternalLinkUpdateOneInlineInput;
  ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput: ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpdateWithNestedWhereUniqueInput: ExternalLinkUpdateWithNestedWhereUniqueInput;
  ExternalLinkUpsertInput: ExternalLinkUpsertInput;
  ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput: ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpsertWithNestedWhereUniqueInput: ExternalLinkUpsertWithNestedWhereUniqueInput;
  ExternalLinkWhereInput: ExternalLinkWhereInput;
  ExternalLinkWhereUniqueInput: ExternalLinkWhereUniqueInput;
  Feature: Feature;
  FeatureConnectInput: FeatureConnectInput;
  FeatureConnection: FeatureConnection;
  FeatureCreateInput: FeatureCreateInput;
  FeatureCreateManyInlineInput: FeatureCreateManyInlineInput;
  FeatureCreateOneInlineInput: FeatureCreateOneInlineInput;
  FeatureCreateWithPositionInput: FeatureCreateWithPositionInput;
  FeatureEdge: FeatureEdge;
  FeatureManyWhereInput: FeatureManyWhereInput;
  FeatureParent: ResolversParentTypes['PageContent'];
  FeatureParentConnectInput: FeatureParentConnectInput;
  FeatureParentCreateInput: FeatureParentCreateInput;
  FeatureParentCreateManyInlineInput: FeatureParentCreateManyInlineInput;
  FeatureParentCreateOneInlineInput: FeatureParentCreateOneInlineInput;
  FeatureParentUpdateInput: FeatureParentUpdateInput;
  FeatureParentUpdateManyInlineInput: FeatureParentUpdateManyInlineInput;
  FeatureParentUpdateManyWithNestedWhereInput: FeatureParentUpdateManyWithNestedWhereInput;
  FeatureParentUpdateOneInlineInput: FeatureParentUpdateOneInlineInput;
  FeatureParentUpdateWithNestedWhereUniqueInput: FeatureParentUpdateWithNestedWhereUniqueInput;
  FeatureParentUpsertWithNestedWhereUniqueInput: FeatureParentUpsertWithNestedWhereUniqueInput;
  FeatureParentWhereInput: FeatureParentWhereInput;
  FeatureParentWhereUniqueInput: FeatureParentWhereUniqueInput;
  FeatureUpdateInput: FeatureUpdateInput;
  FeatureUpdateManyInlineInput: FeatureUpdateManyInlineInput;
  FeatureUpdateManyInput: FeatureUpdateManyInput;
  FeatureUpdateManyWithNestedWhereInput: FeatureUpdateManyWithNestedWhereInput;
  FeatureUpdateOneInlineInput: FeatureUpdateOneInlineInput;
  FeatureUpdateWithNestedWhereUniqueAndPositionInput: FeatureUpdateWithNestedWhereUniqueAndPositionInput;
  FeatureUpdateWithNestedWhereUniqueInput: FeatureUpdateWithNestedWhereUniqueInput;
  FeatureUpsertInput: FeatureUpsertInput;
  FeatureUpsertWithNestedWhereUniqueAndPositionInput: FeatureUpsertWithNestedWhereUniqueAndPositionInput;
  FeatureUpsertWithNestedWhereUniqueInput: FeatureUpsertWithNestedWhereUniqueInput;
  FeatureWhereInput: FeatureWhereInput;
  FeatureWhereUniqueInput: FeatureWhereUniqueInput;
  Float: Scalars['Float'];
  FooterGroup: FooterGroup;
  FooterGroupConnectInput: FooterGroupConnectInput;
  FooterGroupConnection: FooterGroupConnection;
  FooterGroupCreateInput: FooterGroupCreateInput;
  FooterGroupCreateManyInlineInput: FooterGroupCreateManyInlineInput;
  FooterGroupCreateOneInlineInput: FooterGroupCreateOneInlineInput;
  FooterGroupEdge: FooterGroupEdge;
  FooterGroupManyWhereInput: FooterGroupManyWhereInput;
  FooterGroupUpdateInput: FooterGroupUpdateInput;
  FooterGroupUpdateManyInlineInput: FooterGroupUpdateManyInlineInput;
  FooterGroupUpdateManyInput: FooterGroupUpdateManyInput;
  FooterGroupUpdateManyWithNestedWhereInput: FooterGroupUpdateManyWithNestedWhereInput;
  FooterGroupUpdateOneInlineInput: FooterGroupUpdateOneInlineInput;
  FooterGroupUpdateWithNestedWhereUniqueInput: FooterGroupUpdateWithNestedWhereUniqueInput;
  FooterGroupUpsertInput: FooterGroupUpsertInput;
  FooterGroupUpsertWithNestedWhereUniqueInput: FooterGroupUpsertWithNestedWhereUniqueInput;
  FooterGroupWhereComparatorInput: FooterGroupWhereComparatorInput;
  FooterGroupWhereInput: FooterGroupWhereInput;
  FooterGroupWhereStageInput: FooterGroupWhereStageInput;
  FooterGroupWhereUniqueInput: FooterGroupWhereUniqueInput;
  Form: Omit<Form, 'fields'> & { fields: Array<ResolversParentTypes['FormfieldsUnion']> };
  FormButton: FormButton;
  FormButtonConnectInput: FormButtonConnectInput;
  FormButtonConnection: FormButtonConnection;
  FormButtonCreateInput: FormButtonCreateInput;
  FormButtonCreateManyInlineInput: FormButtonCreateManyInlineInput;
  FormButtonCreateOneInlineInput: FormButtonCreateOneInlineInput;
  FormButtonCreateWithPositionInput: FormButtonCreateWithPositionInput;
  FormButtonEdge: FormButtonEdge;
  FormButtonManyWhereInput: FormButtonManyWhereInput;
  FormButtonParent: ResolversParentTypes['ContactForm'] | ResolversParentTypes['Form'];
  FormButtonParentConnectInput: FormButtonParentConnectInput;
  FormButtonParentCreateInput: FormButtonParentCreateInput;
  FormButtonParentCreateManyInlineInput: FormButtonParentCreateManyInlineInput;
  FormButtonParentCreateOneInlineInput: FormButtonParentCreateOneInlineInput;
  FormButtonParentUpdateInput: FormButtonParentUpdateInput;
  FormButtonParentUpdateManyInlineInput: FormButtonParentUpdateManyInlineInput;
  FormButtonParentUpdateManyWithNestedWhereInput: FormButtonParentUpdateManyWithNestedWhereInput;
  FormButtonParentUpdateOneInlineInput: FormButtonParentUpdateOneInlineInput;
  FormButtonParentUpdateWithNestedWhereUniqueInput: FormButtonParentUpdateWithNestedWhereUniqueInput;
  FormButtonParentUpsertWithNestedWhereUniqueInput: FormButtonParentUpsertWithNestedWhereUniqueInput;
  FormButtonParentWhereInput: FormButtonParentWhereInput;
  FormButtonParentWhereUniqueInput: FormButtonParentWhereUniqueInput;
  FormButtonUpdateInput: FormButtonUpdateInput;
  FormButtonUpdateManyInlineInput: FormButtonUpdateManyInlineInput;
  FormButtonUpdateManyInput: FormButtonUpdateManyInput;
  FormButtonUpdateManyWithNestedWhereInput: FormButtonUpdateManyWithNestedWhereInput;
  FormButtonUpdateOneInlineInput: FormButtonUpdateOneInlineInput;
  FormButtonUpdateWithNestedWhereUniqueAndPositionInput: FormButtonUpdateWithNestedWhereUniqueAndPositionInput;
  FormButtonUpdateWithNestedWhereUniqueInput: FormButtonUpdateWithNestedWhereUniqueInput;
  FormButtonUpsertInput: FormButtonUpsertInput;
  FormButtonUpsertWithNestedWhereUniqueAndPositionInput: FormButtonUpsertWithNestedWhereUniqueAndPositionInput;
  FormButtonUpsertWithNestedWhereUniqueInput: FormButtonUpsertWithNestedWhereUniqueInput;
  FormButtonWhereInput: FormButtonWhereInput;
  FormButtonWhereUniqueInput: FormButtonWhereUniqueInput;
  FormConnectInput: FormConnectInput;
  FormConnection: FormConnection;
  FormCreateInput: FormCreateInput;
  FormCreateManyInlineInput: FormCreateManyInlineInput;
  FormCreateOneInlineInput: FormCreateOneInlineInput;
  FormEdge: FormEdge;
  FormManyWhereInput: FormManyWhereInput;
  FormUpdateInput: FormUpdateInput;
  FormUpdateManyInlineInput: FormUpdateManyInlineInput;
  FormUpdateManyInput: FormUpdateManyInput;
  FormUpdateManyWithNestedWhereInput: FormUpdateManyWithNestedWhereInput;
  FormUpdateOneInlineInput: FormUpdateOneInlineInput;
  FormUpdateWithNestedWhereUniqueInput: FormUpdateWithNestedWhereUniqueInput;
  FormUpsertInput: FormUpsertInput;
  FormUpsertWithNestedWhereUniqueInput: FormUpsertWithNestedWhereUniqueInput;
  FormWhereComparatorInput: FormWhereComparatorInput;
  FormWhereInput: FormWhereInput;
  FormWhereStageInput: FormWhereStageInput;
  FormWhereUniqueInput: FormWhereUniqueInput;
  FormfieldsUnion: ResolversParentTypes['CheckboxField'] | ResolversParentTypes['SelectField'] | ResolversParentTypes['TextAreaField'] | ResolversParentTypes['TextInputField'];
  FormfieldsUnionConnectInput: FormfieldsUnionConnectInput;
  FormfieldsUnionCreateInput: FormfieldsUnionCreateInput;
  FormfieldsUnionCreateManyInlineInput: FormfieldsUnionCreateManyInlineInput;
  FormfieldsUnionCreateOneInlineInput: FormfieldsUnionCreateOneInlineInput;
  FormfieldsUnionCreateWithPositionInput: FormfieldsUnionCreateWithPositionInput;
  FormfieldsUnionUpdateInput: FormfieldsUnionUpdateInput;
  FormfieldsUnionUpdateManyInlineInput: FormfieldsUnionUpdateManyInlineInput;
  FormfieldsUnionUpdateManyWithNestedWhereInput: FormfieldsUnionUpdateManyWithNestedWhereInput;
  FormfieldsUnionUpdateOneInlineInput: FormfieldsUnionUpdateOneInlineInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueInput: FormfieldsUnionUpdateWithNestedWhereUniqueInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueInput: FormfieldsUnionUpsertWithNestedWhereUniqueInput;
  FormfieldsUnionWhereInput: FormfieldsUnionWhereInput;
  FormfieldsUnionWhereUniqueInput: FormfieldsUnionWhereUniqueInput;
  Hex: Scalars['Hex'];
  HomePage: HomePage;
  HomePageBlock: HomePageBlock;
  HomePageBlockConnectInput: HomePageBlockConnectInput;
  HomePageBlockConnection: HomePageBlockConnection;
  HomePageBlockCreateInput: HomePageBlockCreateInput;
  HomePageBlockCreateManyInlineInput: HomePageBlockCreateManyInlineInput;
  HomePageBlockCreateOneInlineInput: HomePageBlockCreateOneInlineInput;
  HomePageBlockCreateWithPositionInput: HomePageBlockCreateWithPositionInput;
  HomePageBlockEdge: HomePageBlockEdge;
  HomePageBlockManyWhereInput: HomePageBlockManyWhereInput;
  HomePageBlockParent: ResolversParentTypes['HomePage'];
  HomePageBlockParentConnectInput: HomePageBlockParentConnectInput;
  HomePageBlockParentCreateInput: HomePageBlockParentCreateInput;
  HomePageBlockParentCreateManyInlineInput: HomePageBlockParentCreateManyInlineInput;
  HomePageBlockParentCreateOneInlineInput: HomePageBlockParentCreateOneInlineInput;
  HomePageBlockParentUpdateInput: HomePageBlockParentUpdateInput;
  HomePageBlockParentUpdateManyInlineInput: HomePageBlockParentUpdateManyInlineInput;
  HomePageBlockParentUpdateManyWithNestedWhereInput: HomePageBlockParentUpdateManyWithNestedWhereInput;
  HomePageBlockParentUpdateOneInlineInput: HomePageBlockParentUpdateOneInlineInput;
  HomePageBlockParentUpdateWithNestedWhereUniqueInput: HomePageBlockParentUpdateWithNestedWhereUniqueInput;
  HomePageBlockParentUpsertWithNestedWhereUniqueInput: HomePageBlockParentUpsertWithNestedWhereUniqueInput;
  HomePageBlockParentWhereInput: HomePageBlockParentWhereInput;
  HomePageBlockParentWhereUniqueInput: HomePageBlockParentWhereUniqueInput;
  HomePageBlockUpdateInput: HomePageBlockUpdateInput;
  HomePageBlockUpdateManyInlineInput: HomePageBlockUpdateManyInlineInput;
  HomePageBlockUpdateManyInput: HomePageBlockUpdateManyInput;
  HomePageBlockUpdateManyWithNestedWhereInput: HomePageBlockUpdateManyWithNestedWhereInput;
  HomePageBlockUpdateOneInlineInput: HomePageBlockUpdateOneInlineInput;
  HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput: HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpdateWithNestedWhereUniqueInput: HomePageBlockUpdateWithNestedWhereUniqueInput;
  HomePageBlockUpsertInput: HomePageBlockUpsertInput;
  HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput: HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpsertWithNestedWhereUniqueInput: HomePageBlockUpsertWithNestedWhereUniqueInput;
  HomePageBlockWhereInput: HomePageBlockWhereInput;
  HomePageBlockWhereUniqueInput: HomePageBlockWhereUniqueInput;
  HomePageConnectInput: HomePageConnectInput;
  HomePageConnection: HomePageConnection;
  HomePageCreateInput: HomePageCreateInput;
  HomePageCreateManyInlineInput: HomePageCreateManyInlineInput;
  HomePageCreateOneInlineInput: HomePageCreateOneInlineInput;
  HomePageEdge: HomePageEdge;
  HomePageManyWhereInput: HomePageManyWhereInput;
  HomePageUpdateInput: HomePageUpdateInput;
  HomePageUpdateManyInlineInput: HomePageUpdateManyInlineInput;
  HomePageUpdateManyInput: HomePageUpdateManyInput;
  HomePageUpdateManyWithNestedWhereInput: HomePageUpdateManyWithNestedWhereInput;
  HomePageUpdateOneInlineInput: HomePageUpdateOneInlineInput;
  HomePageUpdateWithNestedWhereUniqueInput: HomePageUpdateWithNestedWhereUniqueInput;
  HomePageUpsertInput: HomePageUpsertInput;
  HomePageUpsertWithNestedWhereUniqueInput: HomePageUpsertWithNestedWhereUniqueInput;
  HomePageWhereComparatorInput: HomePageWhereComparatorInput;
  HomePageWhereInput: HomePageWhereInput;
  HomePageWhereStageInput: HomePageWhereStageInput;
  HomePageWhereUniqueInput: HomePageWhereUniqueInput;
  ID: Scalars['ID'];
  Icon: Icon;
  IconConnectInput: IconConnectInput;
  IconConnection: IconConnection;
  IconCreateInput: IconCreateInput;
  IconCreateManyInlineInput: IconCreateManyInlineInput;
  IconCreateOneInlineInput: IconCreateOneInlineInput;
  IconCreateWithPositionInput: IconCreateWithPositionInput;
  IconEdge: IconEdge;
  IconManyWhereInput: IconManyWhereInput;
  IconParent: ResolversParentTypes['ContactForm'];
  IconParentConnectInput: IconParentConnectInput;
  IconParentCreateInput: IconParentCreateInput;
  IconParentCreateManyInlineInput: IconParentCreateManyInlineInput;
  IconParentCreateOneInlineInput: IconParentCreateOneInlineInput;
  IconParentUpdateInput: IconParentUpdateInput;
  IconParentUpdateManyInlineInput: IconParentUpdateManyInlineInput;
  IconParentUpdateManyWithNestedWhereInput: IconParentUpdateManyWithNestedWhereInput;
  IconParentUpdateOneInlineInput: IconParentUpdateOneInlineInput;
  IconParentUpdateWithNestedWhereUniqueInput: IconParentUpdateWithNestedWhereUniqueInput;
  IconParentUpsertWithNestedWhereUniqueInput: IconParentUpsertWithNestedWhereUniqueInput;
  IconParentWhereInput: IconParentWhereInput;
  IconParentWhereUniqueInput: IconParentWhereUniqueInput;
  IconUpdateInput: IconUpdateInput;
  IconUpdateManyInlineInput: IconUpdateManyInlineInput;
  IconUpdateManyInput: IconUpdateManyInput;
  IconUpdateManyWithNestedWhereInput: IconUpdateManyWithNestedWhereInput;
  IconUpdateOneInlineInput: IconUpdateOneInlineInput;
  IconUpdateWithNestedWhereUniqueAndPositionInput: IconUpdateWithNestedWhereUniqueAndPositionInput;
  IconUpdateWithNestedWhereUniqueInput: IconUpdateWithNestedWhereUniqueInput;
  IconUpsertInput: IconUpsertInput;
  IconUpsertWithNestedWhereUniqueAndPositionInput: IconUpsertWithNestedWhereUniqueAndPositionInput;
  IconUpsertWithNestedWhereUniqueInput: IconUpsertWithNestedWhereUniqueInput;
  IconWhereInput: IconWhereInput;
  IconWhereUniqueInput: IconWhereUniqueInput;
  ImageResizeInput: ImageResizeInput;
  ImageTransformationInput: ImageTransformationInput;
  Int: Scalars['Int'];
  Json: Scalars['Json'];
  Location: Location;
  LocationInput: LocationInput;
  Long: Scalars['Long'];
  Mutation: {};
  Node: ResolversParentTypes['Admonition'] | ResolversParentTypes['Asset'] | ResolversParentTypes['CloudLocation'] | ResolversParentTypes['Configuration'] | ResolversParentTypes['ContactForm'] | ResolversParentTypes['ContentButton'] | ResolversParentTypes['DocsGroup'] | ResolversParentTypes['DocsPage'] | ResolversParentTypes['Employee'] | ResolversParentTypes['FooterGroup'] | ResolversParentTypes['Form'] | ResolversParentTypes['HomePage'] | ResolversParentTypes['Page'] | ResolversParentTypes['PageContent'] | ResolversParentTypes['ScheduledOperation'] | ResolversParentTypes['ScheduledRelease'] | ResolversParentTypes['Testimonial'] | ResolversParentTypes['Theme'] | ResolversParentTypes['User'];
  Page: Page;
  PageConnectInput: PageConnectInput;
  PageConnection: PageConnection;
  PageContent: PageContent;
  PageContentConnectInput: PageContentConnectInput;
  PageContentConnection: PageContentConnection;
  PageContentCreateInput: PageContentCreateInput;
  PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
  PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
  PageContentEdge: PageContentEdge;
  PageContentManyWhereInput: PageContentManyWhereInput;
  PageContentUpdateInput: PageContentUpdateInput;
  PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
  PageContentUpdateManyInput: PageContentUpdateManyInput;
  PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
  PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
  PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
  PageContentUpsertInput: PageContentUpsertInput;
  PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
  PageContentWhereComparatorInput: PageContentWhereComparatorInput;
  PageContentWhereInput: PageContentWhereInput;
  PageContentWhereStageInput: PageContentWhereStageInput;
  PageContentWhereUniqueInput: PageContentWhereUniqueInput;
  PageCreateInput: PageCreateInput;
  PageCreateManyInlineInput: PageCreateManyInlineInput;
  PageCreateOneInlineInput: PageCreateOneInlineInput;
  PageEdge: PageEdge;
  PageInfo: PageInfo;
  PageManyWhereInput: PageManyWhereInput;
  PageUpdateInput: PageUpdateInput;
  PageUpdateManyInlineInput: PageUpdateManyInlineInput;
  PageUpdateManyInput: PageUpdateManyInput;
  PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
  PageUpdateOneInlineInput: PageUpdateOneInlineInput;
  PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
  PageUpsertInput: PageUpsertInput;
  PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
  PageWhereComparatorInput: PageWhereComparatorInput;
  PageWhereInput: PageWhereInput;
  PageWhereStageInput: PageWhereStageInput;
  PageWhereUniqueInput: PageWhereUniqueInput;
  PublishLocaleInput: PublishLocaleInput;
  Query: {};
  RGBA: Rgba;
  RGBAHue: Scalars['RGBAHue'];
  RGBAInput: RgbaInput;
  RGBATransparency: Scalars['RGBATransparency'];
  RichText: RichText;
  RichTextAST: Scalars['RichTextAST'];
  ScheduledOperation: Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<ResolversParentTypes['ScheduledOperationAffectedDocument']> };
  ScheduledOperationAffectedDocument: ResolversParentTypes['Admonition'] | ResolversParentTypes['Asset'] | ResolversParentTypes['CloudLocation'] | ResolversParentTypes['Configuration'] | ResolversParentTypes['ContactForm'] | ResolversParentTypes['ContentButton'] | ResolversParentTypes['DocsGroup'] | ResolversParentTypes['DocsPage'] | ResolversParentTypes['Employee'] | ResolversParentTypes['FooterGroup'] | ResolversParentTypes['Form'] | ResolversParentTypes['HomePage'] | ResolversParentTypes['Page'] | ResolversParentTypes['PageContent'] | ResolversParentTypes['Testimonial'] | ResolversParentTypes['Theme'];
  ScheduledOperationConnectInput: ScheduledOperationConnectInput;
  ScheduledOperationConnection: ScheduledOperationConnection;
  ScheduledOperationCreateManyInlineInput: ScheduledOperationCreateManyInlineInput;
  ScheduledOperationCreateOneInlineInput: ScheduledOperationCreateOneInlineInput;
  ScheduledOperationEdge: ScheduledOperationEdge;
  ScheduledOperationManyWhereInput: ScheduledOperationManyWhereInput;
  ScheduledOperationUpdateManyInlineInput: ScheduledOperationUpdateManyInlineInput;
  ScheduledOperationUpdateOneInlineInput: ScheduledOperationUpdateOneInlineInput;
  ScheduledOperationWhereInput: ScheduledOperationWhereInput;
  ScheduledOperationWhereUniqueInput: ScheduledOperationWhereUniqueInput;
  ScheduledRelease: ScheduledRelease;
  ScheduledReleaseConnectInput: ScheduledReleaseConnectInput;
  ScheduledReleaseConnection: ScheduledReleaseConnection;
  ScheduledReleaseCreateInput: ScheduledReleaseCreateInput;
  ScheduledReleaseCreateManyInlineInput: ScheduledReleaseCreateManyInlineInput;
  ScheduledReleaseCreateOneInlineInput: ScheduledReleaseCreateOneInlineInput;
  ScheduledReleaseEdge: ScheduledReleaseEdge;
  ScheduledReleaseManyWhereInput: ScheduledReleaseManyWhereInput;
  ScheduledReleaseUpdateInput: ScheduledReleaseUpdateInput;
  ScheduledReleaseUpdateManyInlineInput: ScheduledReleaseUpdateManyInlineInput;
  ScheduledReleaseUpdateManyInput: ScheduledReleaseUpdateManyInput;
  ScheduledReleaseUpdateManyWithNestedWhereInput: ScheduledReleaseUpdateManyWithNestedWhereInput;
  ScheduledReleaseUpdateOneInlineInput: ScheduledReleaseUpdateOneInlineInput;
  ScheduledReleaseUpdateWithNestedWhereUniqueInput: ScheduledReleaseUpdateWithNestedWhereUniqueInput;
  ScheduledReleaseUpsertInput: ScheduledReleaseUpsertInput;
  ScheduledReleaseUpsertWithNestedWhereUniqueInput: ScheduledReleaseUpsertWithNestedWhereUniqueInput;
  ScheduledReleaseWhereInput: ScheduledReleaseWhereInput;
  ScheduledReleaseWhereUniqueInput: ScheduledReleaseWhereUniqueInput;
  SelectField: SelectField;
  SelectFieldConnectInput: SelectFieldConnectInput;
  SelectFieldConnection: SelectFieldConnection;
  SelectFieldCreateInput: SelectFieldCreateInput;
  SelectFieldCreateManyInlineInput: SelectFieldCreateManyInlineInput;
  SelectFieldCreateOneInlineInput: SelectFieldCreateOneInlineInput;
  SelectFieldCreateWithPositionInput: SelectFieldCreateWithPositionInput;
  SelectFieldEdge: SelectFieldEdge;
  SelectFieldManyWhereInput: SelectFieldManyWhereInput;
  SelectFieldParent: ResolversParentTypes['ContactForm'] | ResolversParentTypes['Form'];
  SelectFieldParentConnectInput: SelectFieldParentConnectInput;
  SelectFieldParentCreateInput: SelectFieldParentCreateInput;
  SelectFieldParentCreateManyInlineInput: SelectFieldParentCreateManyInlineInput;
  SelectFieldParentCreateOneInlineInput: SelectFieldParentCreateOneInlineInput;
  SelectFieldParentUpdateInput: SelectFieldParentUpdateInput;
  SelectFieldParentUpdateManyInlineInput: SelectFieldParentUpdateManyInlineInput;
  SelectFieldParentUpdateManyWithNestedWhereInput: SelectFieldParentUpdateManyWithNestedWhereInput;
  SelectFieldParentUpdateOneInlineInput: SelectFieldParentUpdateOneInlineInput;
  SelectFieldParentUpdateWithNestedWhereUniqueInput: SelectFieldParentUpdateWithNestedWhereUniqueInput;
  SelectFieldParentUpsertWithNestedWhereUniqueInput: SelectFieldParentUpsertWithNestedWhereUniqueInput;
  SelectFieldParentWhereInput: SelectFieldParentWhereInput;
  SelectFieldParentWhereUniqueInput: SelectFieldParentWhereUniqueInput;
  SelectFieldUpdateInput: SelectFieldUpdateInput;
  SelectFieldUpdateManyInlineInput: SelectFieldUpdateManyInlineInput;
  SelectFieldUpdateManyInput: SelectFieldUpdateManyInput;
  SelectFieldUpdateManyWithNestedWhereInput: SelectFieldUpdateManyWithNestedWhereInput;
  SelectFieldUpdateOneInlineInput: SelectFieldUpdateOneInlineInput;
  SelectFieldUpdateWithNestedWhereUniqueAndPositionInput: SelectFieldUpdateWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpdateWithNestedWhereUniqueInput: SelectFieldUpdateWithNestedWhereUniqueInput;
  SelectFieldUpsertInput: SelectFieldUpsertInput;
  SelectFieldUpsertWithNestedWhereUniqueAndPositionInput: SelectFieldUpsertWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpsertWithNestedWhereUniqueInput: SelectFieldUpsertWithNestedWhereUniqueInput;
  SelectFieldWhereInput: SelectFieldWhereInput;
  SelectFieldWhereUniqueInput: SelectFieldWhereUniqueInput;
  SocialLink: SocialLink;
  SocialLinkConnectInput: SocialLinkConnectInput;
  SocialLinkConnection: SocialLinkConnection;
  SocialLinkCreateInput: SocialLinkCreateInput;
  SocialLinkCreateManyInlineInput: SocialLinkCreateManyInlineInput;
  SocialLinkCreateOneInlineInput: SocialLinkCreateOneInlineInput;
  SocialLinkCreateWithPositionInput: SocialLinkCreateWithPositionInput;
  SocialLinkEdge: SocialLinkEdge;
  SocialLinkManyWhereInput: SocialLinkManyWhereInput;
  SocialLinkParent: ResolversParentTypes['Configuration'];
  SocialLinkParentConnectInput: SocialLinkParentConnectInput;
  SocialLinkParentCreateInput: SocialLinkParentCreateInput;
  SocialLinkParentCreateManyInlineInput: SocialLinkParentCreateManyInlineInput;
  SocialLinkParentCreateOneInlineInput: SocialLinkParentCreateOneInlineInput;
  SocialLinkParentUpdateInput: SocialLinkParentUpdateInput;
  SocialLinkParentUpdateManyInlineInput: SocialLinkParentUpdateManyInlineInput;
  SocialLinkParentUpdateManyWithNestedWhereInput: SocialLinkParentUpdateManyWithNestedWhereInput;
  SocialLinkParentUpdateOneInlineInput: SocialLinkParentUpdateOneInlineInput;
  SocialLinkParentUpdateWithNestedWhereUniqueInput: SocialLinkParentUpdateWithNestedWhereUniqueInput;
  SocialLinkParentUpsertWithNestedWhereUniqueInput: SocialLinkParentUpsertWithNestedWhereUniqueInput;
  SocialLinkParentWhereInput: SocialLinkParentWhereInput;
  SocialLinkParentWhereUniqueInput: SocialLinkParentWhereUniqueInput;
  SocialLinkUpdateInput: SocialLinkUpdateInput;
  SocialLinkUpdateManyInlineInput: SocialLinkUpdateManyInlineInput;
  SocialLinkUpdateManyInput: SocialLinkUpdateManyInput;
  SocialLinkUpdateManyWithNestedWhereInput: SocialLinkUpdateManyWithNestedWhereInput;
  SocialLinkUpdateOneInlineInput: SocialLinkUpdateOneInlineInput;
  SocialLinkUpdateWithNestedWhereUniqueAndPositionInput: SocialLinkUpdateWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpdateWithNestedWhereUniqueInput: SocialLinkUpdateWithNestedWhereUniqueInput;
  SocialLinkUpsertInput: SocialLinkUpsertInput;
  SocialLinkUpsertWithNestedWhereUniqueAndPositionInput: SocialLinkUpsertWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpsertWithNestedWhereUniqueInput: SocialLinkUpsertWithNestedWhereUniqueInput;
  SocialLinkWhereInput: SocialLinkWhereInput;
  SocialLinkWhereUniqueInput: SocialLinkWhereUniqueInput;
  String: Scalars['String'];
  Testimonial: Testimonial;
  TestimonialConnectInput: TestimonialConnectInput;
  TestimonialConnection: TestimonialConnection;
  TestimonialCreateInput: TestimonialCreateInput;
  TestimonialCreateManyInlineInput: TestimonialCreateManyInlineInput;
  TestimonialCreateOneInlineInput: TestimonialCreateOneInlineInput;
  TestimonialEdge: TestimonialEdge;
  TestimonialManyWhereInput: TestimonialManyWhereInput;
  TestimonialUpdateInput: TestimonialUpdateInput;
  TestimonialUpdateManyInlineInput: TestimonialUpdateManyInlineInput;
  TestimonialUpdateManyInput: TestimonialUpdateManyInput;
  TestimonialUpdateManyWithNestedWhereInput: TestimonialUpdateManyWithNestedWhereInput;
  TestimonialUpdateOneInlineInput: TestimonialUpdateOneInlineInput;
  TestimonialUpdateWithNestedWhereUniqueInput: TestimonialUpdateWithNestedWhereUniqueInput;
  TestimonialUpsertInput: TestimonialUpsertInput;
  TestimonialUpsertWithNestedWhereUniqueInput: TestimonialUpsertWithNestedWhereUniqueInput;
  TestimonialWhereComparatorInput: TestimonialWhereComparatorInput;
  TestimonialWhereInput: TestimonialWhereInput;
  TestimonialWhereStageInput: TestimonialWhereStageInput;
  TestimonialWhereUniqueInput: TestimonialWhereUniqueInput;
  TextAreaField: TextAreaField;
  TextAreaFieldConnectInput: TextAreaFieldConnectInput;
  TextAreaFieldConnection: TextAreaFieldConnection;
  TextAreaFieldCreateInput: TextAreaFieldCreateInput;
  TextAreaFieldCreateManyInlineInput: TextAreaFieldCreateManyInlineInput;
  TextAreaFieldCreateOneInlineInput: TextAreaFieldCreateOneInlineInput;
  TextAreaFieldCreateWithPositionInput: TextAreaFieldCreateWithPositionInput;
  TextAreaFieldEdge: TextAreaFieldEdge;
  TextAreaFieldManyWhereInput: TextAreaFieldManyWhereInput;
  TextAreaFieldParent: ResolversParentTypes['ContactForm'] | ResolversParentTypes['Form'];
  TextAreaFieldParentConnectInput: TextAreaFieldParentConnectInput;
  TextAreaFieldParentCreateInput: TextAreaFieldParentCreateInput;
  TextAreaFieldParentCreateManyInlineInput: TextAreaFieldParentCreateManyInlineInput;
  TextAreaFieldParentCreateOneInlineInput: TextAreaFieldParentCreateOneInlineInput;
  TextAreaFieldParentUpdateInput: TextAreaFieldParentUpdateInput;
  TextAreaFieldParentUpdateManyInlineInput: TextAreaFieldParentUpdateManyInlineInput;
  TextAreaFieldParentUpdateManyWithNestedWhereInput: TextAreaFieldParentUpdateManyWithNestedWhereInput;
  TextAreaFieldParentUpdateOneInlineInput: TextAreaFieldParentUpdateOneInlineInput;
  TextAreaFieldParentUpdateWithNestedWhereUniqueInput: TextAreaFieldParentUpdateWithNestedWhereUniqueInput;
  TextAreaFieldParentUpsertWithNestedWhereUniqueInput: TextAreaFieldParentUpsertWithNestedWhereUniqueInput;
  TextAreaFieldParentWhereInput: TextAreaFieldParentWhereInput;
  TextAreaFieldParentWhereUniqueInput: TextAreaFieldParentWhereUniqueInput;
  TextAreaFieldUpdateInput: TextAreaFieldUpdateInput;
  TextAreaFieldUpdateManyInlineInput: TextAreaFieldUpdateManyInlineInput;
  TextAreaFieldUpdateManyInput: TextAreaFieldUpdateManyInput;
  TextAreaFieldUpdateManyWithNestedWhereInput: TextAreaFieldUpdateManyWithNestedWhereInput;
  TextAreaFieldUpdateOneInlineInput: TextAreaFieldUpdateOneInlineInput;
  TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpdateWithNestedWhereUniqueInput: TextAreaFieldUpdateWithNestedWhereUniqueInput;
  TextAreaFieldUpsertInput: TextAreaFieldUpsertInput;
  TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpsertWithNestedWhereUniqueInput: TextAreaFieldUpsertWithNestedWhereUniqueInput;
  TextAreaFieldWhereInput: TextAreaFieldWhereInput;
  TextAreaFieldWhereUniqueInput: TextAreaFieldWhereUniqueInput;
  TextInputField: TextInputField;
  TextInputFieldConnectInput: TextInputFieldConnectInput;
  TextInputFieldConnection: TextInputFieldConnection;
  TextInputFieldCreateInput: TextInputFieldCreateInput;
  TextInputFieldCreateManyInlineInput: TextInputFieldCreateManyInlineInput;
  TextInputFieldCreateOneInlineInput: TextInputFieldCreateOneInlineInput;
  TextInputFieldCreateWithPositionInput: TextInputFieldCreateWithPositionInput;
  TextInputFieldEdge: TextInputFieldEdge;
  TextInputFieldManyWhereInput: TextInputFieldManyWhereInput;
  TextInputFieldParent: ResolversParentTypes['ContactForm'] | ResolversParentTypes['Form'];
  TextInputFieldParentConnectInput: TextInputFieldParentConnectInput;
  TextInputFieldParentCreateInput: TextInputFieldParentCreateInput;
  TextInputFieldParentCreateManyInlineInput: TextInputFieldParentCreateManyInlineInput;
  TextInputFieldParentCreateOneInlineInput: TextInputFieldParentCreateOneInlineInput;
  TextInputFieldParentUpdateInput: TextInputFieldParentUpdateInput;
  TextInputFieldParentUpdateManyInlineInput: TextInputFieldParentUpdateManyInlineInput;
  TextInputFieldParentUpdateManyWithNestedWhereInput: TextInputFieldParentUpdateManyWithNestedWhereInput;
  TextInputFieldParentUpdateOneInlineInput: TextInputFieldParentUpdateOneInlineInput;
  TextInputFieldParentUpdateWithNestedWhereUniqueInput: TextInputFieldParentUpdateWithNestedWhereUniqueInput;
  TextInputFieldParentUpsertWithNestedWhereUniqueInput: TextInputFieldParentUpsertWithNestedWhereUniqueInput;
  TextInputFieldParentWhereInput: TextInputFieldParentWhereInput;
  TextInputFieldParentWhereUniqueInput: TextInputFieldParentWhereUniqueInput;
  TextInputFieldUpdateInput: TextInputFieldUpdateInput;
  TextInputFieldUpdateManyInlineInput: TextInputFieldUpdateManyInlineInput;
  TextInputFieldUpdateManyInput: TextInputFieldUpdateManyInput;
  TextInputFieldUpdateManyWithNestedWhereInput: TextInputFieldUpdateManyWithNestedWhereInput;
  TextInputFieldUpdateOneInlineInput: TextInputFieldUpdateOneInlineInput;
  TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput: TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpdateWithNestedWhereUniqueInput: TextInputFieldUpdateWithNestedWhereUniqueInput;
  TextInputFieldUpsertInput: TextInputFieldUpsertInput;
  TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput: TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpsertWithNestedWhereUniqueInput: TextInputFieldUpsertWithNestedWhereUniqueInput;
  TextInputFieldWhereInput: TextInputFieldWhereInput;
  TextInputFieldWhereUniqueInput: TextInputFieldWhereUniqueInput;
  Theme: Theme;
  ThemeColors: ThemeColors;
  ThemeColorsConnectInput: ThemeColorsConnectInput;
  ThemeColorsConnection: ThemeColorsConnection;
  ThemeColorsCreateInput: ThemeColorsCreateInput;
  ThemeColorsCreateManyInlineInput: ThemeColorsCreateManyInlineInput;
  ThemeColorsCreateOneInlineInput: ThemeColorsCreateOneInlineInput;
  ThemeColorsCreateWithPositionInput: ThemeColorsCreateWithPositionInput;
  ThemeColorsEdge: ThemeColorsEdge;
  ThemeColorsManyWhereInput: ThemeColorsManyWhereInput;
  ThemeColorsParent: ResolversParentTypes['Theme'];
  ThemeColorsParentConnectInput: ThemeColorsParentConnectInput;
  ThemeColorsParentCreateInput: ThemeColorsParentCreateInput;
  ThemeColorsParentCreateManyInlineInput: ThemeColorsParentCreateManyInlineInput;
  ThemeColorsParentCreateOneInlineInput: ThemeColorsParentCreateOneInlineInput;
  ThemeColorsParentUpdateInput: ThemeColorsParentUpdateInput;
  ThemeColorsParentUpdateManyInlineInput: ThemeColorsParentUpdateManyInlineInput;
  ThemeColorsParentUpdateManyWithNestedWhereInput: ThemeColorsParentUpdateManyWithNestedWhereInput;
  ThemeColorsParentUpdateOneInlineInput: ThemeColorsParentUpdateOneInlineInput;
  ThemeColorsParentUpdateWithNestedWhereUniqueInput: ThemeColorsParentUpdateWithNestedWhereUniqueInput;
  ThemeColorsParentUpsertWithNestedWhereUniqueInput: ThemeColorsParentUpsertWithNestedWhereUniqueInput;
  ThemeColorsParentWhereInput: ThemeColorsParentWhereInput;
  ThemeColorsParentWhereUniqueInput: ThemeColorsParentWhereUniqueInput;
  ThemeColorsUpdateInput: ThemeColorsUpdateInput;
  ThemeColorsUpdateManyInlineInput: ThemeColorsUpdateManyInlineInput;
  ThemeColorsUpdateManyInput: ThemeColorsUpdateManyInput;
  ThemeColorsUpdateManyWithNestedWhereInput: ThemeColorsUpdateManyWithNestedWhereInput;
  ThemeColorsUpdateOneInlineInput: ThemeColorsUpdateOneInlineInput;
  ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput: ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpdateWithNestedWhereUniqueInput: ThemeColorsUpdateWithNestedWhereUniqueInput;
  ThemeColorsUpsertInput: ThemeColorsUpsertInput;
  ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput: ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpsertWithNestedWhereUniqueInput: ThemeColorsUpsertWithNestedWhereUniqueInput;
  ThemeColorsWhereInput: ThemeColorsWhereInput;
  ThemeColorsWhereUniqueInput: ThemeColorsWhereUniqueInput;
  ThemeConnectInput: ThemeConnectInput;
  ThemeConnection: ThemeConnection;
  ThemeCreateInput: ThemeCreateInput;
  ThemeCreateManyInlineInput: ThemeCreateManyInlineInput;
  ThemeCreateOneInlineInput: ThemeCreateOneInlineInput;
  ThemeEdge: ThemeEdge;
  ThemeFonts: ThemeFonts;
  ThemeFontsConnectInput: ThemeFontsConnectInput;
  ThemeFontsConnection: ThemeFontsConnection;
  ThemeFontsCreateInput: ThemeFontsCreateInput;
  ThemeFontsCreateManyInlineInput: ThemeFontsCreateManyInlineInput;
  ThemeFontsCreateOneInlineInput: ThemeFontsCreateOneInlineInput;
  ThemeFontsCreateWithPositionInput: ThemeFontsCreateWithPositionInput;
  ThemeFontsEdge: ThemeFontsEdge;
  ThemeFontsManyWhereInput: ThemeFontsManyWhereInput;
  ThemeFontsParent: ResolversParentTypes['Theme'];
  ThemeFontsParentConnectInput: ThemeFontsParentConnectInput;
  ThemeFontsParentCreateInput: ThemeFontsParentCreateInput;
  ThemeFontsParentCreateManyInlineInput: ThemeFontsParentCreateManyInlineInput;
  ThemeFontsParentCreateOneInlineInput: ThemeFontsParentCreateOneInlineInput;
  ThemeFontsParentUpdateInput: ThemeFontsParentUpdateInput;
  ThemeFontsParentUpdateManyInlineInput: ThemeFontsParentUpdateManyInlineInput;
  ThemeFontsParentUpdateManyWithNestedWhereInput: ThemeFontsParentUpdateManyWithNestedWhereInput;
  ThemeFontsParentUpdateOneInlineInput: ThemeFontsParentUpdateOneInlineInput;
  ThemeFontsParentUpdateWithNestedWhereUniqueInput: ThemeFontsParentUpdateWithNestedWhereUniqueInput;
  ThemeFontsParentUpsertWithNestedWhereUniqueInput: ThemeFontsParentUpsertWithNestedWhereUniqueInput;
  ThemeFontsParentWhereInput: ThemeFontsParentWhereInput;
  ThemeFontsParentWhereUniqueInput: ThemeFontsParentWhereUniqueInput;
  ThemeFontsUpdateInput: ThemeFontsUpdateInput;
  ThemeFontsUpdateManyInlineInput: ThemeFontsUpdateManyInlineInput;
  ThemeFontsUpdateManyInput: ThemeFontsUpdateManyInput;
  ThemeFontsUpdateManyWithNestedWhereInput: ThemeFontsUpdateManyWithNestedWhereInput;
  ThemeFontsUpdateOneInlineInput: ThemeFontsUpdateOneInlineInput;
  ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput: ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpdateWithNestedWhereUniqueInput: ThemeFontsUpdateWithNestedWhereUniqueInput;
  ThemeFontsUpsertInput: ThemeFontsUpsertInput;
  ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput: ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpsertWithNestedWhereUniqueInput: ThemeFontsUpsertWithNestedWhereUniqueInput;
  ThemeFontsWhereInput: ThemeFontsWhereInput;
  ThemeFontsWhereUniqueInput: ThemeFontsWhereUniqueInput;
  ThemeManyWhereInput: ThemeManyWhereInput;
  ThemeUpdateInput: ThemeUpdateInput;
  ThemeUpdateManyInlineInput: ThemeUpdateManyInlineInput;
  ThemeUpdateManyInput: ThemeUpdateManyInput;
  ThemeUpdateManyWithNestedWhereInput: ThemeUpdateManyWithNestedWhereInput;
  ThemeUpdateOneInlineInput: ThemeUpdateOneInlineInput;
  ThemeUpdateWithNestedWhereUniqueInput: ThemeUpdateWithNestedWhereUniqueInput;
  ThemeUpsertInput: ThemeUpsertInput;
  ThemeUpsertWithNestedWhereUniqueInput: ThemeUpsertWithNestedWhereUniqueInput;
  ThemeWhereComparatorInput: ThemeWhereComparatorInput;
  ThemeWhereInput: ThemeWhereInput;
  ThemeWhereStageInput: ThemeWhereStageInput;
  ThemeWhereUniqueInput: ThemeWhereUniqueInput;
  UnpublishLocaleInput: UnpublishLocaleInput;
  User: User;
  UserConnectInput: UserConnectInput;
  UserConnection: UserConnection;
  UserCreateManyInlineInput: UserCreateManyInlineInput;
  UserCreateOneInlineInput: UserCreateOneInlineInput;
  UserEdge: UserEdge;
  UserManyWhereInput: UserManyWhereInput;
  UserUpdateManyInlineInput: UserUpdateManyInlineInput;
  UserUpdateOneInlineInput: UserUpdateOneInlineInput;
  UserWhereComparatorInput: UserWhereComparatorInput;
  UserWhereInput: UserWhereInput;
  UserWhereStageInput: UserWhereStageInput;
  UserWhereUniqueInput: UserWhereUniqueInput;
  VendorLogo: VendorLogo;
  VendorLogoConnectInput: VendorLogoConnectInput;
  VendorLogoConnection: VendorLogoConnection;
  VendorLogoCreateInput: VendorLogoCreateInput;
  VendorLogoCreateManyInlineInput: VendorLogoCreateManyInlineInput;
  VendorLogoCreateOneInlineInput: VendorLogoCreateOneInlineInput;
  VendorLogoCreateWithPositionInput: VendorLogoCreateWithPositionInput;
  VendorLogoEdge: VendorLogoEdge;
  VendorLogoManyWhereInput: VendorLogoManyWhereInput;
  VendorLogoParent: ResolversParentTypes['PageContent'];
  VendorLogoParentConnectInput: VendorLogoParentConnectInput;
  VendorLogoParentCreateInput: VendorLogoParentCreateInput;
  VendorLogoParentCreateManyInlineInput: VendorLogoParentCreateManyInlineInput;
  VendorLogoParentCreateOneInlineInput: VendorLogoParentCreateOneInlineInput;
  VendorLogoParentUpdateInput: VendorLogoParentUpdateInput;
  VendorLogoParentUpdateManyInlineInput: VendorLogoParentUpdateManyInlineInput;
  VendorLogoParentUpdateManyWithNestedWhereInput: VendorLogoParentUpdateManyWithNestedWhereInput;
  VendorLogoParentUpdateOneInlineInput: VendorLogoParentUpdateOneInlineInput;
  VendorLogoParentUpdateWithNestedWhereUniqueInput: VendorLogoParentUpdateWithNestedWhereUniqueInput;
  VendorLogoParentUpsertWithNestedWhereUniqueInput: VendorLogoParentUpsertWithNestedWhereUniqueInput;
  VendorLogoParentWhereInput: VendorLogoParentWhereInput;
  VendorLogoParentWhereUniqueInput: VendorLogoParentWhereUniqueInput;
  VendorLogoUpdateInput: VendorLogoUpdateInput;
  VendorLogoUpdateManyInlineInput: VendorLogoUpdateManyInlineInput;
  VendorLogoUpdateManyInput: VendorLogoUpdateManyInput;
  VendorLogoUpdateManyWithNestedWhereInput: VendorLogoUpdateManyWithNestedWhereInput;
  VendorLogoUpdateOneInlineInput: VendorLogoUpdateOneInlineInput;
  VendorLogoUpdateWithNestedWhereUniqueAndPositionInput: VendorLogoUpdateWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpdateWithNestedWhereUniqueInput: VendorLogoUpdateWithNestedWhereUniqueInput;
  VendorLogoUpsertInput: VendorLogoUpsertInput;
  VendorLogoUpsertWithNestedWhereUniqueAndPositionInput: VendorLogoUpsertWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpsertWithNestedWhereUniqueInput: VendorLogoUpsertWithNestedWhereUniqueInput;
  VendorLogoWhereInput: VendorLogoWhereInput;
  VendorLogoWhereUniqueInput: VendorLogoWhereUniqueInput;
  Version: Version;
  VersionWhereInput: VersionWhereInput;
};

export type AdmonitionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Admonition'] = ResolversParentTypes['Admonition']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AdmonitionCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<AdmonitionDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<AdmonitionHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AdmonitionPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<AdmonitionScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['AdmonitionType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AdmonitionUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdmonitionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdmonitionConnection'] = ResolversParentTypes['AdmonitionConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AdmonitionEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdmonitionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdmonitionEdge'] = ResolversParentTypes['AdmonitionEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Admonition'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['Aggregate'] = ResolversParentTypes['Aggregate']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertResolvers<ContextType = any, ParentType extends ResolversParentTypes['Alert'] = ResolversParentTypes['Alert']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  level?: Resolver<ResolversTypes['AlertLevel'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AlertConnection'] = ResolversParentTypes['AlertConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AlertEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AlertEdge'] = ResolversParentTypes['AlertEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Alert'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['AlertParent'] = ResolversParentTypes['AlertParent']> = {
  __resolveType: TypeResolveFn<'Configuration' | 'FormButton', ParentType, ContextType>;
};

export type AssetResolvers<ContextType = any, ParentType extends ResolversParentTypes['Asset'] = ResolversParentTypes['Asset']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetCreatedAtArgs, 'variation'>>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  fileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  handle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<AssetHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  imagePageContent?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<AssetImagePageContentArgs>>;
  imageTestimonial?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, Partial<AssetImageTestimonialArgs>>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetLocalizationsArgs, 'includeCurrent' | 'locales'>>;
  mainVideoHomePage?: Resolver<Array<ResolversTypes['HomePage']>, ParentType, ContextType, Partial<AssetMainVideoHomePageArgs>>;
  mimeType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  photoEmployee?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, Partial<AssetPhotoEmployeeArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<AssetPublishedAtArgs, 'variation'>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<AssetScheduledInArgs>>;
  size?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetUpdatedAtArgs, 'variation'>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetUpdatedByArgs>>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType, Partial<AssetUrlArgs>>;
  width?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssetConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssetConnection'] = ResolversParentTypes['AssetConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AssetEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssetEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssetEdge'] = ResolversParentTypes['AssetEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Asset'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BatchPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BatchPayload'] = ResolversParentTypes['BatchPayload']> = {
  count?: Resolver<ResolversTypes['Long'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonResolvers<ContextType = any, ParentType extends ResolversParentTypes['Button'] = ResolversParentTypes['Button']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  variant?: Resolver<Maybe<ResolversTypes['ButtonVariant']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ButtonConnection'] = ResolversParentTypes['ButtonConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ButtonEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ButtonEdge'] = ResolversParentTypes['ButtonEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Button'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ButtonParent'] = ResolversParentTypes['ButtonParent']> = {
  __resolveType: TypeResolveFn<'Callout' | 'ContactForm' | 'Feature' | 'HomePageBlock' | 'PageContent', ParentType, ContextType>;
};

export type CallToActionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToAction'] = ResolversParentTypes['CallToAction']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  shown?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionConnection'] = ResolversParentTypes['CallToActionConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CallToActionEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionEdge'] = ResolversParentTypes['CallToActionEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CallToAction'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionParent'] = ResolversParentTypes['CallToActionParent']> = {
  __resolveType: TypeResolveFn<'Configuration', ParentType, ContextType>;
};

export type CallToActionSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettings'] = ResolversParentTypes['CallToActionSettings']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  enable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  icon?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<CallToActionSettingsIconArgs>>;
  iconColor?: Resolver<Maybe<ResolversTypes['ThemeColor']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionSettingsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettingsConnection'] = ResolversParentTypes['CallToActionSettingsConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CallToActionSettingsEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionSettingsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettingsEdge'] = ResolversParentTypes['CallToActionSettingsEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CallToActionSettings'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionSettingsParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettingsParent'] = ResolversParentTypes['CallToActionSettingsParent']> = {
  __resolveType: TypeResolveFn<'DocsGroup' | 'PageContent', ParentType, ContextType>;
};

export type CalloutResolvers<ContextType = any, ParentType extends ResolversParentTypes['Callout'] = ResolversParentTypes['Callout']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<CalloutButtonArgs>>;
  form?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, Partial<CalloutFormArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalloutConnection'] = ResolversParentTypes['CalloutConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CalloutEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalloutEdge'] = ResolversParentTypes['CalloutEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalloutParent'] = ResolversParentTypes['CalloutParent']> = {
  __resolveType: TypeResolveFn<'Page', ParentType, ContextType>;
};

export type CheckboxFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxField'] = ResolversParentTypes['CheckboxField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  multiple?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  options?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckboxFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxFieldConnection'] = ResolversParentTypes['CheckboxFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CheckboxFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckboxFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxFieldEdge'] = ResolversParentTypes['CheckboxFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CheckboxField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckboxFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxFieldParent'] = ResolversParentTypes['CheckboxFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type CloudLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CloudLocation'] = ResolversParentTypes['CloudLocation']> = {
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  coordinates?: Resolver<ResolversTypes['Location'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<CloudLocationCreatedByArgs>>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<CloudLocationDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<CloudLocationHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  identifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<CloudLocationPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<CloudLocationScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  testUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  timeout?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<CloudLocationUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CloudLocationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CloudLocationConnection'] = ResolversParentTypes['CloudLocationConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CloudLocationEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CloudLocationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CloudLocationEdge'] = ResolversParentTypes['CloudLocationEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CloudLocation'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ColorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Color'] = ResolversParentTypes['Color']> = {
  css?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hex?: Resolver<ResolversTypes['Hex'], ParentType, ContextType>;
  rgba?: Resolver<ResolversTypes['RGBA'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Configuration'] = ResolversParentTypes['Configuration']> = {
  callToAction?: Resolver<ResolversTypes['CallToAction'], ParentType, ContextType, Partial<ConfigurationCallToActionArgs>>;
  contactForms?: Resolver<Array<ResolversTypes['ContactForm']>, ParentType, ContextType, Partial<ConfigurationContactFormsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ConfigurationCreatedByArgs>>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  docsGroups?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, Partial<ConfigurationDocsGroupsArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<ConfigurationDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  employees?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, Partial<ConfigurationEmployeesArgs>>;
  errorMessage?: Resolver<ResolversTypes['Alert'], ParentType, ContextType, Partial<ConfigurationErrorMessageArgs>>;
  footerGroups?: Resolver<Array<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<ConfigurationFooterGroupsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ConfigurationHistoryArgs, 'limit' | 'skip'>>;
  hqAddress?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hqCoordinates?: Resolver<ResolversTypes['Location'], ParentType, ContextType>;
  hqMapInfo?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  openMapsText?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  organizationName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ConfigurationPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ConfigurationScheduledInArgs>>;
  slogan?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  socialLinks?: Resolver<Array<ResolversTypes['SocialLink']>, ParentType, ContextType, Partial<ConfigurationSocialLinksArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subscribe?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, Partial<ConfigurationSubscribeArgs>>;
  testimonials?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, Partial<ConfigurationTestimonialsArgs>>;
  theme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, Partial<ConfigurationThemeArgs>>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  titleOverrides?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ConfigurationUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurationConnection'] = ResolversParentTypes['ConfigurationConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ConfigurationEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurationEdge'] = ResolversParentTypes['ConfigurationEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Configuration'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactForm'] = ResolversParentTypes['ContactForm']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  button?: Resolver<ResolversTypes['Button'], ParentType, ContextType, Partial<ContactFormButtonArgs>>;
  color?: Resolver<ResolversTypes['ThemeColor'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContactFormCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<ContactFormDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  fields?: Resolver<Array<ResolversTypes['ContactFormfieldsUnion']>, ParentType, ContextType, Partial<ContactFormFieldsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ContactFormHistoryArgs, 'limit' | 'skip'>>;
  icon?: Resolver<ResolversTypes['Icon'], ParentType, ContextType, Partial<ContactFormIconArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContactFormPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ContactFormScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContactFormUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactFormConnection'] = ResolversParentTypes['ContactFormConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ContactFormEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactFormEdge'] = ResolversParentTypes['ContactFormEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ContactForm'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormfieldsUnionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactFormfieldsUnion'] = ResolversParentTypes['ContactFormfieldsUnion']> = {
  __resolveType: TypeResolveFn<'CheckboxField' | 'FormButton' | 'SelectField' | 'TextAreaField' | 'TextInputField', ParentType, ContextType>;
};

export type ContentButtonResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentButton'] = ResolversParentTypes['ContentButton']> = {
  colorScheme?: Resolver<Maybe<ResolversTypes['ThemeColor']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentButtonCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<ContentButtonDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ContentButtonHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  link?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentButtonPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ContentButtonScheduledInArgs>>;
  showIcon?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentButtonUpdatedByArgs>>;
  variant?: Resolver<Maybe<ResolversTypes['ButtonVariant']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentButtonConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentButtonConnection'] = ResolversParentTypes['ContentButtonConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ContentButtonEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentButtonEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentButtonEdge'] = ResolversParentTypes['ContentButtonEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ContentButton'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DocsGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroup'] = ResolversParentTypes['DocsGroup']> = {
  callToAction?: Resolver<ResolversTypes['CallToActionSettings'], ParentType, ContextType, Partial<DocsGroupCallToActionArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsGroupCreatedByArgs>>;
  docsPages?: Resolver<Array<ResolversTypes['DocsPage']>, ParentType, ContextType, Partial<DocsGroupDocsPagesArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<DocsGroupDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<DocsGroupFooterGroupArgs>>;
  footerTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<DocsGroupHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsGroupPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<DocsGroupScheduledInArgs>>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  summary?: Resolver<ResolversTypes['DocsGroupSummaryRichText'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsGroupUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupConnection'] = ResolversParentTypes['DocsGroupConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DocsGroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupEdge'] = ResolversParentTypes['DocsGroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['DocsGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupSummaryRichTextResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupSummaryRichText'] = ResolversParentTypes['DocsGroupSummaryRichText']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  json?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  references?: Resolver<Array<ResolversTypes['DocsGroupSummaryRichTextEmbeddedTypes']>, ParentType, ContextType, Partial<DocsGroupSummaryRichTextReferencesArgs>>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupSummaryRichTextEmbeddedTypesResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupSummaryRichTextEmbeddedTypes'] = ResolversParentTypes['DocsGroupSummaryRichTextEmbeddedTypes']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'ContentButton', ParentType, ContextType>;
};

export type DocsPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPage'] = ResolversParentTypes['DocsPage']> = {
  body?: Resolver<ResolversTypes['DocsPageBodyRichText'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsPageCreatedByArgs>>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  docsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, Partial<DocsPageDocsGroupArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<DocsPageDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<DocsPageHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsPagePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<DocsPageScheduledInArgs>>;
  showUpdatedDate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsPageUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsPageBodyRichTextResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageBodyRichText'] = ResolversParentTypes['DocsPageBodyRichText']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  json?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  references?: Resolver<Array<ResolversTypes['DocsPageBodyRichTextEmbeddedTypes']>, ParentType, ContextType, Partial<DocsPageBodyRichTextReferencesArgs>>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsPageBodyRichTextEmbeddedTypesResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageBodyRichTextEmbeddedTypes'] = ResolversParentTypes['DocsPageBodyRichTextEmbeddedTypes']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'ContentButton', ParentType, ContextType>;
};

export type DocsPageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageConnection'] = ResolversParentTypes['DocsPageConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DocsPageEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsPageEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageEdge'] = ResolversParentTypes['DocsPageEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['DocsPage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentVersionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentVersion'] = ResolversParentTypes['DocumentVersion']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmployeeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Employee'] = ResolversParentTypes['Employee']> = {
  bio?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<EmployeeCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<EmployeeDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<EmployeeHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  photo?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<EmployeePhotoArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<EmployeePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<EmployeeScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<EmployeeUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmployeeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmployeeConnection'] = ResolversParentTypes['EmployeeConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['EmployeeEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmployeeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmployeeEdge'] = ResolversParentTypes['EmployeeEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Employee'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalLinkResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLink'] = ResolversParentTypes['ExternalLink']> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  showIcon?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalLinkConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLinkConnection'] = ResolversParentTypes['ExternalLinkConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ExternalLinkEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalLinkEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLinkEdge'] = ResolversParentTypes['ExternalLinkEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ExternalLink'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalLinkParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLinkParent'] = ResolversParentTypes['ExternalLinkParent']> = {
  __resolveType: TypeResolveFn<'FooterGroup', ParentType, ContextType>;
};

export type FeatureResolvers<ContextType = any, ParentType extends ResolversParentTypes['Feature'] = ResolversParentTypes['Feature']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<FeatureButtonArgs>>;
  icon?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<FeatureIconArgs>>;
  iconColor?: Resolver<Maybe<ResolversTypes['ThemeColor']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeatureConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeatureConnection'] = ResolversParentTypes['FeatureConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FeatureEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeatureEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeatureEdge'] = ResolversParentTypes['FeatureEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Feature'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeatureParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeatureParent'] = ResolversParentTypes['FeatureParent']> = {
  __resolveType: TypeResolveFn<'PageContent', ParentType, ContextType>;
};

export type FooterGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['FooterGroup'] = ResolversParentTypes['FooterGroup']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterGroupCreatedByArgs>>;
  docsGroup?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, Partial<FooterGroupDocsGroupArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<FooterGroupDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  externalLinks?: Resolver<Array<ResolversTypes['ExternalLink']>, ParentType, ContextType, Partial<FooterGroupExternalLinksArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<FooterGroupHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pageContents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<FooterGroupPageContentsArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<FooterGroupPagesArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterGroupPublishedByArgs>>;
  row?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<FooterGroupScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterGroupUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FooterGroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FooterGroupConnection'] = ResolversParentTypes['FooterGroupConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FooterGroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FooterGroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FooterGroupEdge'] = ResolversParentTypes['FooterGroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['FooterGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormResolvers<ContextType = any, ParentType extends ResolversParentTypes['Form'] = ResolversParentTypes['Form']> = {
  button?: Resolver<ResolversTypes['FormButton'], ParentType, ContextType, Partial<FormButtonArgs>>;
  colorScheme?: Resolver<ResolversTypes['ThemeColor'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FormCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<FormDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  fields?: Resolver<Array<ResolversTypes['FormfieldsUnion']>, ParentType, ContextType, Partial<FormFieldsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<FormHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  pageContents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<FormPageContentsArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FormPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<FormScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FormUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButton'] = ResolversParentTypes['FormButton']> = {
  action?: Resolver<Maybe<ResolversTypes['FormAction']>, ParentType, ContextType>;
  alert?: Resolver<Maybe<ResolversTypes['Alert']>, ParentType, ContextType, Partial<FormButtonAlertArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  variant?: Resolver<Maybe<ResolversTypes['ButtonVariant']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButtonConnection'] = ResolversParentTypes['FormButtonConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FormButtonEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButtonEdge'] = ResolversParentTypes['FormButtonEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['FormButton'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButtonParent'] = ResolversParentTypes['FormButtonParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type FormConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormConnection'] = ResolversParentTypes['FormConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FormEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormEdge'] = ResolversParentTypes['FormEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Form'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormfieldsUnionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormfieldsUnion'] = ResolversParentTypes['FormfieldsUnion']> = {
  __resolveType: TypeResolveFn<'CheckboxField' | 'SelectField' | 'TextAreaField' | 'TextInputField', ParentType, ContextType>;
};

export interface HexScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Hex'], any> {
  name: 'Hex';
}

export type HomePageResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePage'] = ResolversParentTypes['HomePage']> = {
  blocks?: Resolver<Array<ResolversTypes['HomePageBlock']>, ParentType, ContextType, Partial<HomePageBlocksArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HomePageCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<HomePageDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<HomePageHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  mainVideo?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<HomePageMainVideoArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HomePagePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<HomePageScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HomePageUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlock'] = ResolversParentTypes['HomePageBlock']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<HomePageBlockButtonArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<HomePageBlockImageArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlockConnection'] = ResolversParentTypes['HomePageBlockConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['HomePageBlockEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlockEdge'] = ResolversParentTypes['HomePageBlockEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['HomePageBlock'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlockParent'] = ResolversParentTypes['HomePageBlockParent']> = {
  __resolveType: TypeResolveFn<'HomePage', ParentType, ContextType>;
};

export type HomePageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageConnection'] = ResolversParentTypes['HomePageConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['HomePageEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageEdge'] = ResolversParentTypes['HomePageEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['HomePage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IconResolvers<ContextType = any, ParentType extends ResolversParentTypes['Icon'] = ResolversParentTypes['Icon']> = {
  family?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IconConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['IconConnection'] = ResolversParentTypes['IconConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['IconEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IconEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['IconEdge'] = ResolversParentTypes['IconEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Icon'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type IconParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['IconParent'] = ResolversParentTypes['IconParent']> = {
  __resolveType: TypeResolveFn<'ContactForm', ParentType, ContextType>;
};

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Json'], any> {
  name: 'Json';
}

export type LocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']> = {
  distance?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<LocationDistanceArgs, 'from'>>;
  latitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  longitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface LongScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Long'], any> {
  name: 'Long';
}

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  createAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationCreateAdmonitionArgs, 'data'>>;
  createAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationCreateAssetArgs, 'data'>>;
  createCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationCreateCloudLocationArgs, 'data'>>;
  createConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationCreateConfigurationArgs, 'data'>>;
  createContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationCreateContactFormArgs, 'data'>>;
  createContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationCreateContentButtonArgs, 'data'>>;
  createDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationCreateDocsGroupArgs, 'data'>>;
  createDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationCreateDocsPageArgs, 'data'>>;
  createEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationCreateEmployeeArgs, 'data'>>;
  createFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationCreateFooterGroupArgs, 'data'>>;
  createForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationCreateFormArgs, 'data'>>;
  createHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationCreateHomePageArgs, 'data'>>;
  createPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationCreatePageArgs, 'data'>>;
  createPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationCreatePageContentArgs, 'data'>>;
  createScheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<MutationCreateScheduledReleaseArgs, 'data'>>;
  createTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationCreateTestimonialArgs, 'data'>>;
  createTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationCreateThemeArgs, 'data'>>;
  deleteAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationDeleteAdmonitionArgs, 'where'>>;
  deleteAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationDeleteAssetArgs, 'where'>>;
  deleteCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationDeleteCloudLocationArgs, 'where'>>;
  deleteConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationDeleteConfigurationArgs, 'where'>>;
  deleteContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationDeleteContactFormArgs, 'where'>>;
  deleteContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationDeleteContentButtonArgs, 'where'>>;
  deleteDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationDeleteDocsGroupArgs, 'where'>>;
  deleteDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationDeleteDocsPageArgs, 'where'>>;
  deleteEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationDeleteEmployeeArgs, 'where'>>;
  deleteFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationDeleteFooterGroupArgs, 'where'>>;
  deleteForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationDeleteFormArgs, 'where'>>;
  deleteHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationDeleteHomePageArgs, 'where'>>;
  deleteManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyAdmonitionsArgs>>;
  deleteManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, Partial<MutationDeleteManyAdmonitionsConnectionArgs>>;
  deleteManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyAssetsArgs>>;
  deleteManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, Partial<MutationDeleteManyAssetsConnectionArgs>>;
  deleteManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyCloudLocationsArgs>>;
  deleteManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, Partial<MutationDeleteManyCloudLocationsConnectionArgs>>;
  deleteManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyConfigurationsArgs>>;
  deleteManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, Partial<MutationDeleteManyConfigurationsConnectionArgs>>;
  deleteManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyContactFormsArgs>>;
  deleteManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, Partial<MutationDeleteManyContactFormsConnectionArgs>>;
  deleteManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyContentButtonsArgs>>;
  deleteManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, Partial<MutationDeleteManyContentButtonsConnectionArgs>>;
  deleteManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyDocsGroupsArgs>>;
  deleteManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, Partial<MutationDeleteManyDocsGroupsConnectionArgs>>;
  deleteManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyDocsPagesArgs>>;
  deleteManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, Partial<MutationDeleteManyDocsPagesConnectionArgs>>;
  deleteManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyEmployeesArgs>>;
  deleteManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, Partial<MutationDeleteManyEmployeesConnectionArgs>>;
  deleteManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyFooterGroupsArgs>>;
  deleteManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, Partial<MutationDeleteManyFooterGroupsConnectionArgs>>;
  deleteManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyFormsArgs>>;
  deleteManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, Partial<MutationDeleteManyFormsConnectionArgs>>;
  deleteManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyHomePagesArgs>>;
  deleteManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, Partial<MutationDeleteManyHomePagesConnectionArgs>>;
  deleteManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyPageContentsArgs>>;
  deleteManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, Partial<MutationDeleteManyPageContentsConnectionArgs>>;
  deleteManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyPagesArgs>>;
  deleteManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, Partial<MutationDeleteManyPagesConnectionArgs>>;
  deleteManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyTestimonialsArgs>>;
  deleteManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, Partial<MutationDeleteManyTestimonialsConnectionArgs>>;
  deleteManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyThemesArgs>>;
  deleteManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, Partial<MutationDeleteManyThemesConnectionArgs>>;
  deletePage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationDeletePageArgs, 'where'>>;
  deletePageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationDeletePageContentArgs, 'where'>>;
  deleteScheduledOperation?: Resolver<Maybe<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<MutationDeleteScheduledOperationArgs, 'where'>>;
  deleteScheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<MutationDeleteScheduledReleaseArgs, 'where'>>;
  deleteTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationDeleteTestimonialArgs, 'where'>>;
  deleteTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationDeleteThemeArgs, 'where'>>;
  publishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationPublishAdmonitionArgs, 'to' | 'where'>>;
  publishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationPublishAssetArgs, 'publishBase' | 'to' | 'where' | 'withDefaultLocale'>>;
  publishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationPublishCloudLocationArgs, 'to' | 'where'>>;
  publishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationPublishConfigurationArgs, 'to' | 'where'>>;
  publishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationPublishContactFormArgs, 'to' | 'where'>>;
  publishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationPublishContentButtonArgs, 'to' | 'where'>>;
  publishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationPublishDocsGroupArgs, 'to' | 'where'>>;
  publishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationPublishDocsPageArgs, 'to' | 'where'>>;
  publishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationPublishEmployeeArgs, 'to' | 'where'>>;
  publishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationPublishFooterGroupArgs, 'to' | 'where'>>;
  publishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationPublishFormArgs, 'to' | 'where'>>;
  publishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationPublishHomePageArgs, 'to' | 'where'>>;
  publishManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyAdmonitionsArgs, 'to'>>;
  publishManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<MutationPublishManyAdmonitionsConnectionArgs, 'from' | 'to'>>;
  publishManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyAssetsArgs, 'publishBase' | 'to' | 'withDefaultLocale'>>;
  publishManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<MutationPublishManyAssetsConnectionArgs, 'from' | 'publishBase' | 'to' | 'withDefaultLocale'>>;
  publishManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyCloudLocationsArgs, 'to'>>;
  publishManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<MutationPublishManyCloudLocationsConnectionArgs, 'from' | 'to'>>;
  publishManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyConfigurationsArgs, 'to'>>;
  publishManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<MutationPublishManyConfigurationsConnectionArgs, 'from' | 'to'>>;
  publishManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyContactFormsArgs, 'to'>>;
  publishManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<MutationPublishManyContactFormsConnectionArgs, 'from' | 'to'>>;
  publishManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyContentButtonsArgs, 'to'>>;
  publishManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<MutationPublishManyContentButtonsConnectionArgs, 'from' | 'to'>>;
  publishManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyDocsGroupsArgs, 'to'>>;
  publishManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<MutationPublishManyDocsGroupsConnectionArgs, 'from' | 'to'>>;
  publishManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyDocsPagesArgs, 'to'>>;
  publishManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<MutationPublishManyDocsPagesConnectionArgs, 'from' | 'to'>>;
  publishManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyEmployeesArgs, 'to'>>;
  publishManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<MutationPublishManyEmployeesConnectionArgs, 'from' | 'to'>>;
  publishManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyFooterGroupsArgs, 'to'>>;
  publishManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<MutationPublishManyFooterGroupsConnectionArgs, 'from' | 'to'>>;
  publishManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyFormsArgs, 'to'>>;
  publishManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<MutationPublishManyFormsConnectionArgs, 'from' | 'to'>>;
  publishManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyHomePagesArgs, 'to'>>;
  publishManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<MutationPublishManyHomePagesConnectionArgs, 'from' | 'to'>>;
  publishManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyPageContentsArgs, 'to'>>;
  publishManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<MutationPublishManyPageContentsConnectionArgs, 'from' | 'to'>>;
  publishManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyPagesArgs, 'to'>>;
  publishManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<MutationPublishManyPagesConnectionArgs, 'from' | 'to'>>;
  publishManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyTestimonialsArgs, 'to'>>;
  publishManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<MutationPublishManyTestimonialsConnectionArgs, 'from' | 'to'>>;
  publishManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyThemesArgs, 'to'>>;
  publishManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<MutationPublishManyThemesConnectionArgs, 'from' | 'to'>>;
  publishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationPublishPageArgs, 'to' | 'where'>>;
  publishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationPublishPageContentArgs, 'to' | 'where'>>;
  publishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationPublishTestimonialArgs, 'to' | 'where'>>;
  publishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationPublishThemeArgs, 'to' | 'where'>>;
  schedulePublishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationSchedulePublishAdmonitionArgs, 'to' | 'where'>>;
  schedulePublishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationSchedulePublishAssetArgs, 'publishBase' | 'to' | 'where' | 'withDefaultLocale'>>;
  schedulePublishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationSchedulePublishCloudLocationArgs, 'to' | 'where'>>;
  schedulePublishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationSchedulePublishConfigurationArgs, 'to' | 'where'>>;
  schedulePublishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationSchedulePublishContactFormArgs, 'to' | 'where'>>;
  schedulePublishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationSchedulePublishContentButtonArgs, 'to' | 'where'>>;
  schedulePublishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationSchedulePublishDocsGroupArgs, 'to' | 'where'>>;
  schedulePublishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationSchedulePublishDocsPageArgs, 'to' | 'where'>>;
  schedulePublishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationSchedulePublishEmployeeArgs, 'to' | 'where'>>;
  schedulePublishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationSchedulePublishFooterGroupArgs, 'to' | 'where'>>;
  schedulePublishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationSchedulePublishFormArgs, 'to' | 'where'>>;
  schedulePublishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationSchedulePublishHomePageArgs, 'to' | 'where'>>;
  schedulePublishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationSchedulePublishPageArgs, 'to' | 'where'>>;
  schedulePublishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationSchedulePublishPageContentArgs, 'to' | 'where'>>;
  schedulePublishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationSchedulePublishTestimonialArgs, 'to' | 'where'>>;
  schedulePublishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationSchedulePublishThemeArgs, 'to' | 'where'>>;
  scheduleUnpublishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishAdmonitionArgs, 'from' | 'where'>>;
  scheduleUnpublishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishAssetArgs, 'from' | 'unpublishBase' | 'where'>>;
  scheduleUnpublishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishCloudLocationArgs, 'from' | 'where'>>;
  scheduleUnpublishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishConfigurationArgs, 'from' | 'where'>>;
  scheduleUnpublishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishContactFormArgs, 'from' | 'where'>>;
  scheduleUnpublishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishContentButtonArgs, 'from' | 'where'>>;
  scheduleUnpublishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishDocsGroupArgs, 'from' | 'where'>>;
  scheduleUnpublishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishDocsPageArgs, 'from' | 'where'>>;
  scheduleUnpublishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishEmployeeArgs, 'from' | 'where'>>;
  scheduleUnpublishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishFooterGroupArgs, 'from' | 'where'>>;
  scheduleUnpublishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishFormArgs, 'from' | 'where'>>;
  scheduleUnpublishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishHomePageArgs, 'from' | 'where'>>;
  scheduleUnpublishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishPageArgs, 'from' | 'where'>>;
  scheduleUnpublishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishPageContentArgs, 'from' | 'where'>>;
  scheduleUnpublishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishTestimonialArgs, 'from' | 'where'>>;
  scheduleUnpublishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishThemeArgs, 'from' | 'where'>>;
  unpublishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationUnpublishAdmonitionArgs, 'from' | 'where'>>;
  unpublishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationUnpublishAssetArgs, 'from' | 'unpublishBase' | 'where'>>;
  unpublishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationUnpublishCloudLocationArgs, 'from' | 'where'>>;
  unpublishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationUnpublishConfigurationArgs, 'from' | 'where'>>;
  unpublishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationUnpublishContactFormArgs, 'from' | 'where'>>;
  unpublishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationUnpublishContentButtonArgs, 'from' | 'where'>>;
  unpublishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationUnpublishDocsGroupArgs, 'from' | 'where'>>;
  unpublishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationUnpublishDocsPageArgs, 'from' | 'where'>>;
  unpublishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationUnpublishEmployeeArgs, 'from' | 'where'>>;
  unpublishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationUnpublishFooterGroupArgs, 'from' | 'where'>>;
  unpublishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationUnpublishFormArgs, 'from' | 'where'>>;
  unpublishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationUnpublishHomePageArgs, 'from' | 'where'>>;
  unpublishManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyAdmonitionsArgs, 'from'>>;
  unpublishManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyAdmonitionsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyAssetsArgs, 'from' | 'unpublishBase'>>;
  unpublishManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyAssetsConnectionArgs, 'from' | 'stage' | 'unpublishBase'>>;
  unpublishManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyCloudLocationsArgs, 'from'>>;
  unpublishManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyCloudLocationsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyConfigurationsArgs, 'from'>>;
  unpublishManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyConfigurationsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyContactFormsArgs, 'from'>>;
  unpublishManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyContactFormsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyContentButtonsArgs, 'from'>>;
  unpublishManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyContentButtonsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsGroupsArgs, 'from'>>;
  unpublishManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsGroupsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsPagesArgs, 'from'>>;
  unpublishManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsPagesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyEmployeesArgs, 'from'>>;
  unpublishManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyEmployeesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyFooterGroupsArgs, 'from'>>;
  unpublishManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyFooterGroupsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyFormsArgs, 'from'>>;
  unpublishManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyFormsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyHomePagesArgs, 'from'>>;
  unpublishManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyHomePagesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyPageContentsArgs, 'from'>>;
  unpublishManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyPageContentsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyPagesArgs, 'from'>>;
  unpublishManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyPagesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyTestimonialsArgs, 'from'>>;
  unpublishManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyTestimonialsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyThemesArgs, 'from'>>;
  unpublishManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyThemesConnectionArgs, 'from' | 'stage'>>;
  unpublishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationUnpublishPageArgs, 'from' | 'where'>>;
  unpublishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationUnpublishPageContentArgs, 'from' | 'where'>>;
  unpublishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationUnpublishTestimonialArgs, 'from' | 'where'>>;
  unpublishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationUnpublishThemeArgs, 'from' | 'where'>>;
  updateAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationUpdateAdmonitionArgs, 'data' | 'where'>>;
  updateAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationUpdateAssetArgs, 'data' | 'where'>>;
  updateCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationUpdateCloudLocationArgs, 'data' | 'where'>>;
  updateConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationUpdateConfigurationArgs, 'data' | 'where'>>;
  updateContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationUpdateContactFormArgs, 'data' | 'where'>>;
  updateContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationUpdateContentButtonArgs, 'data' | 'where'>>;
  updateDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationUpdateDocsGroupArgs, 'data' | 'where'>>;
  updateDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationUpdateDocsPageArgs, 'data' | 'where'>>;
  updateEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationUpdateEmployeeArgs, 'data' | 'where'>>;
  updateFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationUpdateFooterGroupArgs, 'data' | 'where'>>;
  updateForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationUpdateFormArgs, 'data' | 'where'>>;
  updateHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationUpdateHomePageArgs, 'data' | 'where'>>;
  updateManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyAdmonitionsArgs, 'data'>>;
  updateManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyAdmonitionsConnectionArgs, 'data'>>;
  updateManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyAssetsArgs, 'data'>>;
  updateManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyAssetsConnectionArgs, 'data'>>;
  updateManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyCloudLocationsArgs, 'data'>>;
  updateManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyCloudLocationsConnectionArgs, 'data'>>;
  updateManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyConfigurationsArgs, 'data'>>;
  updateManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyConfigurationsConnectionArgs, 'data'>>;
  updateManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyContactFormsArgs, 'data'>>;
  updateManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyContactFormsConnectionArgs, 'data'>>;
  updateManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyContentButtonsArgs, 'data'>>;
  updateManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyContentButtonsConnectionArgs, 'data'>>;
  updateManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsGroupsArgs, 'data'>>;
  updateManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsGroupsConnectionArgs, 'data'>>;
  updateManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsPagesArgs, 'data'>>;
  updateManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsPagesConnectionArgs, 'data'>>;
  updateManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyEmployeesArgs, 'data'>>;
  updateManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyEmployeesConnectionArgs, 'data'>>;
  updateManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyFooterGroupsArgs, 'data'>>;
  updateManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyFooterGroupsConnectionArgs, 'data'>>;
  updateManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyFormsArgs, 'data'>>;
  updateManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyFormsConnectionArgs, 'data'>>;
  updateManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyHomePagesArgs, 'data'>>;
  updateManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyHomePagesConnectionArgs, 'data'>>;
  updateManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyPageContentsArgs, 'data'>>;
  updateManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyPageContentsConnectionArgs, 'data'>>;
  updateManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyPagesArgs, 'data'>>;
  updateManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyPagesConnectionArgs, 'data'>>;
  updateManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyTestimonialsArgs, 'data'>>;
  updateManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyTestimonialsConnectionArgs, 'data'>>;
  updateManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyThemesArgs, 'data'>>;
  updateManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyThemesConnectionArgs, 'data'>>;
  updatePage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationUpdatePageArgs, 'data' | 'where'>>;
  updatePageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationUpdatePageContentArgs, 'data' | 'where'>>;
  updateScheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<MutationUpdateScheduledReleaseArgs, 'data' | 'where'>>;
  updateTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationUpdateTestimonialArgs, 'data' | 'where'>>;
  updateTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationUpdateThemeArgs, 'data' | 'where'>>;
  upsertAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationUpsertAdmonitionArgs, 'upsert' | 'where'>>;
  upsertAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationUpsertAssetArgs, 'upsert' | 'where'>>;
  upsertCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationUpsertCloudLocationArgs, 'upsert' | 'where'>>;
  upsertConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationUpsertConfigurationArgs, 'upsert' | 'where'>>;
  upsertContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationUpsertContactFormArgs, 'upsert' | 'where'>>;
  upsertContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationUpsertContentButtonArgs, 'upsert' | 'where'>>;
  upsertDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationUpsertDocsGroupArgs, 'upsert' | 'where'>>;
  upsertDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationUpsertDocsPageArgs, 'upsert' | 'where'>>;
  upsertEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationUpsertEmployeeArgs, 'upsert' | 'where'>>;
  upsertFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationUpsertFooterGroupArgs, 'upsert' | 'where'>>;
  upsertForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationUpsertFormArgs, 'upsert' | 'where'>>;
  upsertHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationUpsertHomePageArgs, 'upsert' | 'where'>>;
  upsertPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationUpsertPageArgs, 'upsert' | 'where'>>;
  upsertPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationUpsertPageContentArgs, 'upsert' | 'where'>>;
  upsertTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationUpsertTestimonialArgs, 'upsert' | 'where'>>;
  upsertTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationUpsertThemeArgs, 'upsert' | 'where'>>;
};

export type NodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'CloudLocation' | 'Configuration' | 'ContactForm' | 'ContentButton' | 'DocsGroup' | 'DocsPage' | 'Employee' | 'FooterGroup' | 'Form' | 'HomePage' | 'Page' | 'PageContent' | 'ScheduledOperation' | 'ScheduledRelease' | 'Testimonial' | 'Theme' | 'User', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
};

export type PageResolvers<ContextType = any, ParentType extends ResolversParentTypes['Page'] = ResolversParentTypes['Page']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  callout?: Resolver<Maybe<ResolversTypes['Callout']>, ParentType, ContextType, Partial<PageCalloutArgs>>;
  contents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<PageContentsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PageDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<PageFooterGroupArgs>>;
  footerTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PageHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PagePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<PageScheduledInArgs>>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageConnection'] = ResolversParentTypes['PageConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['PageEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageContentResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageContent'] = ResolversParentTypes['PageContent']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<PageContentButtonArgs>>;
  callToAction?: Resolver<ResolversTypes['CallToActionSettings'], ParentType, ContextType, Partial<PageContentCallToActionArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageContentCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<PageContentDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  features?: Resolver<Array<ResolversTypes['Feature']>, ParentType, ContextType, Partial<PageContentFeaturesArgs>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<PageContentFooterGroupArgs>>;
  footerTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  form?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, Partial<PageContentFormArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PageContentHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<PageContentImageArgs>>;
  page?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, Partial<PageContentPageArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageContentPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<PageContentScheduledInArgs>>;
  showUpdatedDate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageContentUpdatedByArgs>>;
  vendorLogo?: Resolver<Maybe<ResolversTypes['VendorLogo']>, ParentType, ContextType, Partial<PageContentVendorLogoArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageContentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageContentConnection'] = ResolversParentTypes['PageContentConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['PageContentEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageContentEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageContentEdge'] = ResolversParentTypes['PageContentEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['PageContent'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageEdge'] = ResolversParentTypes['PageEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Page'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  pageSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  admonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<QueryAdmonitionArgs, 'locales' | 'stage' | 'where'>>;
  admonitionVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryAdmonitionVersionArgs, 'where'>>;
  admonitions?: Resolver<Array<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<QueryAdmonitionsArgs, 'locales' | 'stage'>>;
  admonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<QueryAdmonitionsConnectionArgs, 'locales' | 'stage'>>;
  asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<QueryAssetArgs, 'locales' | 'stage' | 'where'>>;
  assetVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryAssetVersionArgs, 'where'>>;
  assets?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<QueryAssetsArgs, 'locales' | 'stage'>>;
  assetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<QueryAssetsConnectionArgs, 'locales' | 'stage'>>;
  cloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<QueryCloudLocationArgs, 'locales' | 'stage' | 'where'>>;
  cloudLocationVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryCloudLocationVersionArgs, 'where'>>;
  cloudLocations?: Resolver<Array<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<QueryCloudLocationsArgs, 'locales' | 'stage'>>;
  cloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<QueryCloudLocationsConnectionArgs, 'locales' | 'stage'>>;
  configuration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<QueryConfigurationArgs, 'locales' | 'stage' | 'where'>>;
  configurationVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryConfigurationVersionArgs, 'where'>>;
  configurations?: Resolver<Array<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<QueryConfigurationsArgs, 'locales' | 'stage'>>;
  configurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<QueryConfigurationsConnectionArgs, 'locales' | 'stage'>>;
  contactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<QueryContactFormArgs, 'locales' | 'stage' | 'where'>>;
  contactFormVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryContactFormVersionArgs, 'where'>>;
  contactForms?: Resolver<Array<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<QueryContactFormsArgs, 'locales' | 'stage'>>;
  contactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<QueryContactFormsConnectionArgs, 'locales' | 'stage'>>;
  contentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<QueryContentButtonArgs, 'locales' | 'stage' | 'where'>>;
  contentButtonVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryContentButtonVersionArgs, 'where'>>;
  contentButtons?: Resolver<Array<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<QueryContentButtonsArgs, 'locales' | 'stage'>>;
  contentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<QueryContentButtonsConnectionArgs, 'locales' | 'stage'>>;
  docsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<QueryDocsGroupArgs, 'locales' | 'stage' | 'where'>>;
  docsGroupVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryDocsGroupVersionArgs, 'where'>>;
  docsGroups?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<QueryDocsGroupsArgs, 'locales' | 'stage'>>;
  docsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<QueryDocsGroupsConnectionArgs, 'locales' | 'stage'>>;
  docsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<QueryDocsPageArgs, 'locales' | 'stage' | 'where'>>;
  docsPageVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryDocsPageVersionArgs, 'where'>>;
  docsPages?: Resolver<Array<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<QueryDocsPagesArgs, 'locales' | 'stage'>>;
  docsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<QueryDocsPagesConnectionArgs, 'locales' | 'stage'>>;
  employee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<QueryEmployeeArgs, 'locales' | 'stage' | 'where'>>;
  employeeVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryEmployeeVersionArgs, 'where'>>;
  employees?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<QueryEmployeesArgs, 'locales' | 'stage'>>;
  employeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<QueryEmployeesConnectionArgs, 'locales' | 'stage'>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<QueryFooterGroupArgs, 'locales' | 'stage' | 'where'>>;
  footerGroupVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryFooterGroupVersionArgs, 'where'>>;
  footerGroups?: Resolver<Array<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<QueryFooterGroupsArgs, 'locales' | 'stage'>>;
  footerGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<QueryFooterGroupsConnectionArgs, 'locales' | 'stage'>>;
  form?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<QueryFormArgs, 'locales' | 'stage' | 'where'>>;
  formVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryFormVersionArgs, 'where'>>;
  forms?: Resolver<Array<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<QueryFormsArgs, 'locales' | 'stage'>>;
  formsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<QueryFormsConnectionArgs, 'locales' | 'stage'>>;
  homePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<QueryHomePageArgs, 'locales' | 'stage' | 'where'>>;
  homePageVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryHomePageVersionArgs, 'where'>>;
  homePages?: Resolver<Array<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<QueryHomePagesArgs, 'locales' | 'stage'>>;
  homePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<QueryHomePagesConnectionArgs, 'locales' | 'stage'>>;
  node?: Resolver<Maybe<ResolversTypes['Node']>, ParentType, ContextType, RequireFields<QueryNodeArgs, 'id' | 'locales' | 'stage'>>;
  page?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<QueryPageArgs, 'locales' | 'stage' | 'where'>>;
  pageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<QueryPageContentArgs, 'locales' | 'stage' | 'where'>>;
  pageContentVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryPageContentVersionArgs, 'where'>>;
  pageContents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<QueryPageContentsArgs, 'locales' | 'stage'>>;
  pageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<QueryPageContentsConnectionArgs, 'locales' | 'stage'>>;
  pageVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryPageVersionArgs, 'where'>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<QueryPagesArgs, 'locales' | 'stage'>>;
  pagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<QueryPagesConnectionArgs, 'locales' | 'stage'>>;
  scheduledOperation?: Resolver<Maybe<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<QueryScheduledOperationArgs, 'locales' | 'stage' | 'where'>>;
  scheduledOperations?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<QueryScheduledOperationsArgs, 'locales' | 'stage'>>;
  scheduledOperationsConnection?: Resolver<ResolversTypes['ScheduledOperationConnection'], ParentType, ContextType, RequireFields<QueryScheduledOperationsConnectionArgs, 'locales' | 'stage'>>;
  scheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<QueryScheduledReleaseArgs, 'locales' | 'stage' | 'where'>>;
  scheduledReleases?: Resolver<Array<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<QueryScheduledReleasesArgs, 'locales' | 'stage'>>;
  scheduledReleasesConnection?: Resolver<ResolversTypes['ScheduledReleaseConnection'], ParentType, ContextType, RequireFields<QueryScheduledReleasesConnectionArgs, 'locales' | 'stage'>>;
  testimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<QueryTestimonialArgs, 'locales' | 'stage' | 'where'>>;
  testimonialVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryTestimonialVersionArgs, 'where'>>;
  testimonials?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<QueryTestimonialsArgs, 'locales' | 'stage'>>;
  testimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<QueryTestimonialsConnectionArgs, 'locales' | 'stage'>>;
  theme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<QueryThemeArgs, 'locales' | 'stage' | 'where'>>;
  themeVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryThemeVersionArgs, 'where'>>;
  themes?: Resolver<Array<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<QueryThemesArgs, 'locales' | 'stage'>>;
  themesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<QueryThemesConnectionArgs, 'locales' | 'stage'>>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryUserArgs, 'locales' | 'stage' | 'where'>>;
  users?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryUsersArgs, 'locales' | 'stage'>>;
  usersConnection?: Resolver<ResolversTypes['UserConnection'], ParentType, ContextType, RequireFields<QueryUsersConnectionArgs, 'locales' | 'stage'>>;
};

export type RgbaResolvers<ContextType = any, ParentType extends ResolversParentTypes['RGBA'] = ResolversParentTypes['RGBA']> = {
  a?: Resolver<ResolversTypes['RGBATransparency'], ParentType, ContextType>;
  b?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  g?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  r?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface RgbaHueScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBAHue'], any> {
  name: 'RGBAHue';
}

export interface RgbaTransparencyScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBATransparency'], any> {
  name: 'RGBATransparency';
}

export type RichTextResolvers<ContextType = any, ParentType extends ResolversParentTypes['RichText'] = ResolversParentTypes['RichText']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface RichTextAstScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RichTextAST'], any> {
  name: 'RichTextAST';
}

export type ScheduledOperationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperation'] = ResolversParentTypes['ScheduledOperation']> = {
  affectedDocuments?: Resolver<Array<ResolversTypes['ScheduledOperationAffectedDocument']>, ParentType, ContextType, Partial<ScheduledOperationAffectedDocumentsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationCreatedByArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<ScheduledOperationDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  errorMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationPublishedByArgs>>;
  rawPayload?: Resolver<ResolversTypes['Json'], ParentType, ContextType>;
  release?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, Partial<ScheduledOperationReleaseArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['ScheduledOperationStatus'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledOperationAffectedDocumentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperationAffectedDocument'] = ResolversParentTypes['ScheduledOperationAffectedDocument']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'CloudLocation' | 'Configuration' | 'ContactForm' | 'ContentButton' | 'DocsGroup' | 'DocsPage' | 'Employee' | 'FooterGroup' | 'Form' | 'HomePage' | 'Page' | 'PageContent' | 'Testimonial' | 'Theme', ParentType, ContextType>;
};

export type ScheduledOperationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperationConnection'] = ResolversParentTypes['ScheduledOperationConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ScheduledOperationEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledOperationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperationEdge'] = ResolversParentTypes['ScheduledOperationEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ScheduledOperation'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledReleaseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledRelease'] = ResolversParentTypes['ScheduledRelease']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleaseCreatedByArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<ScheduledReleaseDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  errorMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isImplicit?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  operations?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ScheduledReleaseOperationsArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleasePublishedByArgs>>;
  releaseAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['ScheduledReleaseStatus'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleaseUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledReleaseConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledReleaseConnection'] = ResolversParentTypes['ScheduledReleaseConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ScheduledReleaseEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledReleaseEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledReleaseEdge'] = ResolversParentTypes['ScheduledReleaseEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ScheduledRelease'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectField'] = ResolversParentTypes['SelectField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  multiple?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  options?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectFieldConnection'] = ResolversParentTypes['SelectFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['SelectFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectFieldEdge'] = ResolversParentTypes['SelectFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['SelectField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectFieldParent'] = ResolversParentTypes['SelectFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type SocialLinkResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLink'] = ResolversParentTypes['SocialLink']> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  iconName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SocialLinkConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLinkConnection'] = ResolversParentTypes['SocialLinkConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['SocialLinkEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SocialLinkEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLinkEdge'] = ResolversParentTypes['SocialLinkEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['SocialLink'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SocialLinkParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLinkParent'] = ResolversParentTypes['SocialLinkParent']> = {
  __resolveType: TypeResolveFn<'Configuration', ParentType, ContextType>;
};

export type TestimonialResolvers<ContextType = any, ParentType extends ResolversParentTypes['Testimonial'] = ResolversParentTypes['Testimonial']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<TestimonialCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<TestimonialDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<TestimonialHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<TestimonialImageArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<TestimonialPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<TestimonialScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<TestimonialUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TestimonialConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TestimonialConnection'] = ResolversParentTypes['TestimonialConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['TestimonialEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TestimonialEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TestimonialEdge'] = ResolversParentTypes['TestimonialEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Testimonial'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaField'] = ResolversParentTypes['TextAreaField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaFieldConnection'] = ResolversParentTypes['TextAreaFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['TextAreaFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaFieldEdge'] = ResolversParentTypes['TextAreaFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['TextAreaField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaFieldParent'] = ResolversParentTypes['TextAreaFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type TextInputFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputField'] = ResolversParentTypes['TextInputField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  validationType?: Resolver<Maybe<ResolversTypes['TextInputValidationType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextInputFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputFieldConnection'] = ResolversParentTypes['TextInputFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['TextInputFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextInputFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputFieldEdge'] = ResolversParentTypes['TextInputFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['TextInputField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextInputFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputFieldParent'] = ResolversParentTypes['TextInputFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type ThemeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Theme'] = ResolversParentTypes['Theme']> = {
  colors?: Resolver<ResolversTypes['ThemeColors'], ParentType, ContextType, Partial<ThemeColorsArgs>>;
  configurations?: Resolver<Array<ResolversTypes['Configuration']>, ParentType, ContextType, Partial<ThemeConfigurationsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ThemeCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<ThemeDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  fonts?: Resolver<ResolversTypes['ThemeFonts'], ParentType, ContextType, Partial<ThemeFontsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ThemeHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ThemePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ThemeScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ThemeUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColors'] = ResolversParentTypes['ThemeColors']> = {
  black?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  blue?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  cyan?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  dark?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  gray?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  green?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  light?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  orange?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  pink?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  primary?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  purple?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  red?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  secondary?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  teal?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  tertiary?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  white?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  yellow?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColorsConnection'] = ResolversParentTypes['ThemeColorsConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ThemeColorsEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColorsEdge'] = ResolversParentTypes['ThemeColorsEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ThemeColors'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColorsParent'] = ResolversParentTypes['ThemeColorsParent']> = {
  __resolveType: TypeResolveFn<'Theme', ParentType, ContextType>;
};

export type ThemeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeConnection'] = ResolversParentTypes['ThemeConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ThemeEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeEdge'] = ResolversParentTypes['ThemeEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Theme'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeFontsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeFonts'] = ResolversParentTypes['ThemeFonts']> = {
  black?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  bold?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  extrabold?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hairline?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  headings?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  light?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  medium?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  monospace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  normal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  semibold?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  thin?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeFontsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeFontsConnection'] = ResolversParentTypes['ThemeFontsConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ThemeFontsEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeFontsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeFontsEdge'] = ResolversParentTypes['ThemeFontsEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ThemeFonts'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeFontsParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeFontsParent'] = ResolversParentTypes['ThemeFontsParent']> = {
  __resolveType: TypeResolveFn<'Theme', ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<UserDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['UserKind'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserConnection'] = ResolversParentTypes['UserConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['UserEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserEdge'] = ResolversParentTypes['UserEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogo'] = ResolversParentTypes['VendorLogo']> = {
  darkColor?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lightColor?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  logo?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<VendorLogoLogoArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  postText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pretext?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogoConnection'] = ResolversParentTypes['VendorLogoConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['VendorLogoEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogoEdge'] = ResolversParentTypes['VendorLogoEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['VendorLogo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogoParent'] = ResolversParentTypes['VendorLogoParent']> = {
  __resolveType: TypeResolveFn<'PageContent', ParentType, ContextType>;
};

export type VersionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Version'] = ResolversParentTypes['Version']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Admonition?: AdmonitionResolvers<ContextType>;
  AdmonitionConnection?: AdmonitionConnectionResolvers<ContextType>;
  AdmonitionEdge?: AdmonitionEdgeResolvers<ContextType>;
  Aggregate?: AggregateResolvers<ContextType>;
  Alert?: AlertResolvers<ContextType>;
  AlertConnection?: AlertConnectionResolvers<ContextType>;
  AlertEdge?: AlertEdgeResolvers<ContextType>;
  AlertParent?: AlertParentResolvers<ContextType>;
  Asset?: AssetResolvers<ContextType>;
  AssetConnection?: AssetConnectionResolvers<ContextType>;
  AssetEdge?: AssetEdgeResolvers<ContextType>;
  BatchPayload?: BatchPayloadResolvers<ContextType>;
  Button?: ButtonResolvers<ContextType>;
  ButtonConnection?: ButtonConnectionResolvers<ContextType>;
  ButtonEdge?: ButtonEdgeResolvers<ContextType>;
  ButtonParent?: ButtonParentResolvers<ContextType>;
  CallToAction?: CallToActionResolvers<ContextType>;
  CallToActionConnection?: CallToActionConnectionResolvers<ContextType>;
  CallToActionEdge?: CallToActionEdgeResolvers<ContextType>;
  CallToActionParent?: CallToActionParentResolvers<ContextType>;
  CallToActionSettings?: CallToActionSettingsResolvers<ContextType>;
  CallToActionSettingsConnection?: CallToActionSettingsConnectionResolvers<ContextType>;
  CallToActionSettingsEdge?: CallToActionSettingsEdgeResolvers<ContextType>;
  CallToActionSettingsParent?: CallToActionSettingsParentResolvers<ContextType>;
  Callout?: CalloutResolvers<ContextType>;
  CalloutConnection?: CalloutConnectionResolvers<ContextType>;
  CalloutEdge?: CalloutEdgeResolvers<ContextType>;
  CalloutParent?: CalloutParentResolvers<ContextType>;
  CheckboxField?: CheckboxFieldResolvers<ContextType>;
  CheckboxFieldConnection?: CheckboxFieldConnectionResolvers<ContextType>;
  CheckboxFieldEdge?: CheckboxFieldEdgeResolvers<ContextType>;
  CheckboxFieldParent?: CheckboxFieldParentResolvers<ContextType>;
  CloudLocation?: CloudLocationResolvers<ContextType>;
  CloudLocationConnection?: CloudLocationConnectionResolvers<ContextType>;
  CloudLocationEdge?: CloudLocationEdgeResolvers<ContextType>;
  Color?: ColorResolvers<ContextType>;
  Configuration?: ConfigurationResolvers<ContextType>;
  ConfigurationConnection?: ConfigurationConnectionResolvers<ContextType>;
  ConfigurationEdge?: ConfigurationEdgeResolvers<ContextType>;
  ContactForm?: ContactFormResolvers<ContextType>;
  ContactFormConnection?: ContactFormConnectionResolvers<ContextType>;
  ContactFormEdge?: ContactFormEdgeResolvers<ContextType>;
  ContactFormfieldsUnion?: ContactFormfieldsUnionResolvers<ContextType>;
  ContentButton?: ContentButtonResolvers<ContextType>;
  ContentButtonConnection?: ContentButtonConnectionResolvers<ContextType>;
  ContentButtonEdge?: ContentButtonEdgeResolvers<ContextType>;
  Date?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  DocsGroup?: DocsGroupResolvers<ContextType>;
  DocsGroupConnection?: DocsGroupConnectionResolvers<ContextType>;
  DocsGroupEdge?: DocsGroupEdgeResolvers<ContextType>;
  DocsGroupSummaryRichText?: DocsGroupSummaryRichTextResolvers<ContextType>;
  DocsGroupSummaryRichTextEmbeddedTypes?: DocsGroupSummaryRichTextEmbeddedTypesResolvers<ContextType>;
  DocsPage?: DocsPageResolvers<ContextType>;
  DocsPageBodyRichText?: DocsPageBodyRichTextResolvers<ContextType>;
  DocsPageBodyRichTextEmbeddedTypes?: DocsPageBodyRichTextEmbeddedTypesResolvers<ContextType>;
  DocsPageConnection?: DocsPageConnectionResolvers<ContextType>;
  DocsPageEdge?: DocsPageEdgeResolvers<ContextType>;
  DocumentVersion?: DocumentVersionResolvers<ContextType>;
  Employee?: EmployeeResolvers<ContextType>;
  EmployeeConnection?: EmployeeConnectionResolvers<ContextType>;
  EmployeeEdge?: EmployeeEdgeResolvers<ContextType>;
  ExternalLink?: ExternalLinkResolvers<ContextType>;
  ExternalLinkConnection?: ExternalLinkConnectionResolvers<ContextType>;
  ExternalLinkEdge?: ExternalLinkEdgeResolvers<ContextType>;
  ExternalLinkParent?: ExternalLinkParentResolvers<ContextType>;
  Feature?: FeatureResolvers<ContextType>;
  FeatureConnection?: FeatureConnectionResolvers<ContextType>;
  FeatureEdge?: FeatureEdgeResolvers<ContextType>;
  FeatureParent?: FeatureParentResolvers<ContextType>;
  FooterGroup?: FooterGroupResolvers<ContextType>;
  FooterGroupConnection?: FooterGroupConnectionResolvers<ContextType>;
  FooterGroupEdge?: FooterGroupEdgeResolvers<ContextType>;
  Form?: FormResolvers<ContextType>;
  FormButton?: FormButtonResolvers<ContextType>;
  FormButtonConnection?: FormButtonConnectionResolvers<ContextType>;
  FormButtonEdge?: FormButtonEdgeResolvers<ContextType>;
  FormButtonParent?: FormButtonParentResolvers<ContextType>;
  FormConnection?: FormConnectionResolvers<ContextType>;
  FormEdge?: FormEdgeResolvers<ContextType>;
  FormfieldsUnion?: FormfieldsUnionResolvers<ContextType>;
  Hex?: GraphQLScalarType;
  HomePage?: HomePageResolvers<ContextType>;
  HomePageBlock?: HomePageBlockResolvers<ContextType>;
  HomePageBlockConnection?: HomePageBlockConnectionResolvers<ContextType>;
  HomePageBlockEdge?: HomePageBlockEdgeResolvers<ContextType>;
  HomePageBlockParent?: HomePageBlockParentResolvers<ContextType>;
  HomePageConnection?: HomePageConnectionResolvers<ContextType>;
  HomePageEdge?: HomePageEdgeResolvers<ContextType>;
  Icon?: IconResolvers<ContextType>;
  IconConnection?: IconConnectionResolvers<ContextType>;
  IconEdge?: IconEdgeResolvers<ContextType>;
  IconParent?: IconParentResolvers<ContextType>;
  Json?: GraphQLScalarType;
  Location?: LocationResolvers<ContextType>;
  Long?: GraphQLScalarType;
  Mutation?: MutationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  Page?: PageResolvers<ContextType>;
  PageConnection?: PageConnectionResolvers<ContextType>;
  PageContent?: PageContentResolvers<ContextType>;
  PageContentConnection?: PageContentConnectionResolvers<ContextType>;
  PageContentEdge?: PageContentEdgeResolvers<ContextType>;
  PageEdge?: PageEdgeResolvers<ContextType>;
  PageInfo?: PageInfoResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  RGBA?: RgbaResolvers<ContextType>;
  RGBAHue?: GraphQLScalarType;
  RGBATransparency?: GraphQLScalarType;
  RichText?: RichTextResolvers<ContextType>;
  RichTextAST?: GraphQLScalarType;
  ScheduledOperation?: ScheduledOperationResolvers<ContextType>;
  ScheduledOperationAffectedDocument?: ScheduledOperationAffectedDocumentResolvers<ContextType>;
  ScheduledOperationConnection?: ScheduledOperationConnectionResolvers<ContextType>;
  ScheduledOperationEdge?: ScheduledOperationEdgeResolvers<ContextType>;
  ScheduledRelease?: ScheduledReleaseResolvers<ContextType>;
  ScheduledReleaseConnection?: ScheduledReleaseConnectionResolvers<ContextType>;
  ScheduledReleaseEdge?: ScheduledReleaseEdgeResolvers<ContextType>;
  SelectField?: SelectFieldResolvers<ContextType>;
  SelectFieldConnection?: SelectFieldConnectionResolvers<ContextType>;
  SelectFieldEdge?: SelectFieldEdgeResolvers<ContextType>;
  SelectFieldParent?: SelectFieldParentResolvers<ContextType>;
  SocialLink?: SocialLinkResolvers<ContextType>;
  SocialLinkConnection?: SocialLinkConnectionResolvers<ContextType>;
  SocialLinkEdge?: SocialLinkEdgeResolvers<ContextType>;
  SocialLinkParent?: SocialLinkParentResolvers<ContextType>;
  Testimonial?: TestimonialResolvers<ContextType>;
  TestimonialConnection?: TestimonialConnectionResolvers<ContextType>;
  TestimonialEdge?: TestimonialEdgeResolvers<ContextType>;
  TextAreaField?: TextAreaFieldResolvers<ContextType>;
  TextAreaFieldConnection?: TextAreaFieldConnectionResolvers<ContextType>;
  TextAreaFieldEdge?: TextAreaFieldEdgeResolvers<ContextType>;
  TextAreaFieldParent?: TextAreaFieldParentResolvers<ContextType>;
  TextInputField?: TextInputFieldResolvers<ContextType>;
  TextInputFieldConnection?: TextInputFieldConnectionResolvers<ContextType>;
  TextInputFieldEdge?: TextInputFieldEdgeResolvers<ContextType>;
  TextInputFieldParent?: TextInputFieldParentResolvers<ContextType>;
  Theme?: ThemeResolvers<ContextType>;
  ThemeColors?: ThemeColorsResolvers<ContextType>;
  ThemeColorsConnection?: ThemeColorsConnectionResolvers<ContextType>;
  ThemeColorsEdge?: ThemeColorsEdgeResolvers<ContextType>;
  ThemeColorsParent?: ThemeColorsParentResolvers<ContextType>;
  ThemeConnection?: ThemeConnectionResolvers<ContextType>;
  ThemeEdge?: ThemeEdgeResolvers<ContextType>;
  ThemeFonts?: ThemeFontsResolvers<ContextType>;
  ThemeFontsConnection?: ThemeFontsConnectionResolvers<ContextType>;
  ThemeFontsEdge?: ThemeFontsEdgeResolvers<ContextType>;
  ThemeFontsParent?: ThemeFontsParentResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserConnection?: UserConnectionResolvers<ContextType>;
  UserEdge?: UserEdgeResolvers<ContextType>;
  VendorLogo?: VendorLogoResolvers<ContextType>;
  VendorLogoConnection?: VendorLogoConnectionResolvers<ContextType>;
  VendorLogoEdge?: VendorLogoEdgeResolvers<ContextType>;
  VendorLogoParent?: VendorLogoParentResolvers<ContextType>;
  Version?: VersionResolvers<ContextType>;
};

