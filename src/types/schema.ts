/* eslint-disable */

// WARNING
//
// This file is automatically generated by GraphQL Code Generator
// If you modify it, your changes will be overwritten. So don't modify it.
// Or do, whatever. I'm not your mother.
//
// END OF WARNING

import { RichTextContent } from '@graphcms/rich-text-types';
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: string; output: string; }
  DateTime: { input: string; output: string; }
  Hex: { input: string; output: string; }
  Json: { input: string; output: string; }
  Long: { input: string; output: string; }
  RGBAHue: { input: any; output: any; }
  RGBATransparency: { input: any; output: any; }
  RichTextAST: { input: RichTextContent; output: RichTextContent; }
};

export type Address = Entity & {
  __typename?: 'Address';
  address1: Scalars['String']['output'];
  address2?: Maybe<Scalars['String']['output']>;
  address3?: Maybe<Scalars['String']['output']>;
  city: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System stage field */
  stage: Stage;
  state: Scalars['String']['output'];
  zipCode: Scalars['String']['output'];
};

export type AddressConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AddressWhereUniqueInput;
};

/** A connection to a list of items. */
export type AddressConnection = {
  __typename?: 'AddressConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AddressEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AddressCreateInput = {
  address1: Scalars['String']['input'];
  address2?: InputMaybe<Scalars['String']['input']>;
  address3?: InputMaybe<Scalars['String']['input']>;
  city: Scalars['String']['input'];
  state: Scalars['String']['input'];
  zipCode: Scalars['String']['input'];
};

export type AddressCreateManyInlineInput = {
  /** Create and connect multiple existing Address documents */
  create?: InputMaybe<Array<AddressCreateInput>>;
};

export type AddressCreateOneInlineInput = {
  /** Create and connect one Address document */
  create?: InputMaybe<AddressCreateInput>;
};

export type AddressCreateWithPositionInput = {
  /** Document to create */
  data: AddressCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AddressEdge = {
  __typename?: 'AddressEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Address;
};

/** Identifies documents */
export type AddressManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AddressWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AddressWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AddressWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  address1?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  address1_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  address1_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  address1_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  address1_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  address1_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  address1_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  address1_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  address1_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  address1_starts_with?: InputMaybe<Scalars['String']['input']>;
  address2?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  address2_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  address2_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  address2_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  address2_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  address2_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  address2_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  address2_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  address2_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  address2_starts_with?: InputMaybe<Scalars['String']['input']>;
  address3?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  address3_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  address3_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  address3_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  address3_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  address3_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  address3_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  address3_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  address3_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  address3_starts_with?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  city_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  city_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  city_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  city_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  city_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  city_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  city_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  city_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  city_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  state_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  state_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  state_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  state_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  state_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  state_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  state_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  state_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  state_starts_with?: InputMaybe<Scalars['String']['input']>;
  zipCode?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  zipCode_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  zipCode_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  zipCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  zipCode_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  zipCode_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  zipCode_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  zipCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  zipCode_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  zipCode_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum AddressOrderByInput {
  Address1Asc = 'address1_ASC',
  Address1Desc = 'address1_DESC',
  Address2Asc = 'address2_ASC',
  Address2Desc = 'address2_DESC',
  Address3Asc = 'address3_ASC',
  Address3Desc = 'address3_DESC',
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  StateAsc = 'state_ASC',
  StateDesc = 'state_DESC',
  ZipCodeAsc = 'zipCode_ASC',
  ZipCodeDesc = 'zipCode_DESC'
}

export type AddressParent = OfficeLocation;

export type AddressParentConnectInput = {
  OfficeLocation?: InputMaybe<OfficeLocationConnectInput>;
};

export type AddressParentCreateInput = {
  OfficeLocation?: InputMaybe<OfficeLocationCreateInput>;
};

export type AddressParentCreateManyInlineInput = {
  /** Connect multiple existing AddressParent documents */
  connect?: InputMaybe<Array<AddressParentWhereUniqueInput>>;
  /** Create and connect multiple existing AddressParent documents */
  create?: InputMaybe<Array<AddressParentCreateInput>>;
};

export type AddressParentCreateOneInlineInput = {
  /** Connect one existing AddressParent document */
  connect?: InputMaybe<AddressParentWhereUniqueInput>;
  /** Create and connect one AddressParent document */
  create?: InputMaybe<AddressParentCreateInput>;
};

export type AddressParentUpdateInput = {
  OfficeLocation?: InputMaybe<OfficeLocationUpdateInput>;
};

export type AddressParentUpdateManyInlineInput = {
  /** Connect multiple existing AddressParent documents */
  connect?: InputMaybe<Array<AddressParentConnectInput>>;
  /** Create and connect multiple AddressParent documents */
  create?: InputMaybe<Array<AddressParentCreateInput>>;
  /** Delete multiple AddressParent documents */
  delete?: InputMaybe<Array<AddressParentWhereUniqueInput>>;
  /** Disconnect multiple AddressParent documents */
  disconnect?: InputMaybe<Array<AddressParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing AddressParent documents */
  set?: InputMaybe<Array<AddressParentWhereUniqueInput>>;
  /** Update multiple AddressParent documents */
  update?: InputMaybe<Array<AddressParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple AddressParent documents */
  upsert?: InputMaybe<Array<AddressParentUpsertWithNestedWhereUniqueInput>>;
};

export type AddressParentUpdateManyWithNestedWhereInput = {
  OfficeLocation?: InputMaybe<OfficeLocationUpdateManyWithNestedWhereInput>;
};

export type AddressParentUpdateOneInlineInput = {
  /** Connect existing AddressParent document */
  connect?: InputMaybe<AddressParentWhereUniqueInput>;
  /** Create and connect one AddressParent document */
  create?: InputMaybe<AddressParentCreateInput>;
  /** Delete currently connected AddressParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected AddressParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single AddressParent document */
  update?: InputMaybe<AddressParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AddressParent document */
  upsert?: InputMaybe<AddressParentUpsertWithNestedWhereUniqueInput>;
};

export type AddressParentUpdateWithNestedWhereUniqueInput = {
  OfficeLocation?: InputMaybe<OfficeLocationUpdateWithNestedWhereUniqueInput>;
};

export type AddressParentUpsertWithNestedWhereUniqueInput = {
  OfficeLocation?: InputMaybe<OfficeLocationUpsertWithNestedWhereUniqueInput>;
};

export type AddressParentWhereInput = {
  OfficeLocation?: InputMaybe<OfficeLocationWhereInput>;
};

export type AddressParentWhereUniqueInput = {
  OfficeLocation?: InputMaybe<OfficeLocationWhereUniqueInput>;
};

export type AddressSearchField = Entity & {
  __typename?: 'AddressSearchField';
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  locationType: LocationType;
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
};

export type AddressSearchFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AddressSearchFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type AddressSearchFieldConnection = {
  __typename?: 'AddressSearchFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AddressSearchFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AddressSearchFieldCreateInput = {
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  locationType: LocationType;
  required: Scalars['Boolean']['input'];
};

export type AddressSearchFieldCreateManyInlineInput = {
  /** Create and connect multiple existing AddressSearchField documents */
  create?: InputMaybe<Array<AddressSearchFieldCreateInput>>;
};

export type AddressSearchFieldCreateOneInlineInput = {
  /** Create and connect one AddressSearchField document */
  create?: InputMaybe<AddressSearchFieldCreateInput>;
};

export type AddressSearchFieldCreateWithPositionInput = {
  /** Document to create */
  data: AddressSearchFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AddressSearchFieldEdge = {
  __typename?: 'AddressSearchFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: AddressSearchField;
};

/** Identifies documents */
export type AddressSearchFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AddressSearchFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AddressSearchFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AddressSearchFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  locationType?: InputMaybe<LocationType>;
  /** All values that are contained in given list. */
  locationType_in?: InputMaybe<Array<InputMaybe<LocationType>>>;
  /** Any other value that exists and is not equal to the given value. */
  locationType_not?: InputMaybe<LocationType>;
  /** All values that are not contained in given list. */
  locationType_not_in?: InputMaybe<Array<InputMaybe<LocationType>>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum AddressSearchFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  LocationTypeAsc = 'locationType_ASC',
  LocationTypeDesc = 'locationType_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type AddressSearchFieldParent = Form;

export type AddressSearchFieldParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
};

export type AddressSearchFieldParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
};

export type AddressSearchFieldParentCreateManyInlineInput = {
  /** Connect multiple existing AddressSearchFieldParent documents */
  connect?: InputMaybe<Array<AddressSearchFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing AddressSearchFieldParent documents */
  create?: InputMaybe<Array<AddressSearchFieldParentCreateInput>>;
};

export type AddressSearchFieldParentCreateOneInlineInput = {
  /** Connect one existing AddressSearchFieldParent document */
  connect?: InputMaybe<AddressSearchFieldParentWhereUniqueInput>;
  /** Create and connect one AddressSearchFieldParent document */
  create?: InputMaybe<AddressSearchFieldParentCreateInput>;
};

export type AddressSearchFieldParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
};

export type AddressSearchFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing AddressSearchFieldParent documents */
  connect?: InputMaybe<Array<AddressSearchFieldParentConnectInput>>;
  /** Create and connect multiple AddressSearchFieldParent documents */
  create?: InputMaybe<Array<AddressSearchFieldParentCreateInput>>;
  /** Delete multiple AddressSearchFieldParent documents */
  delete?: InputMaybe<Array<AddressSearchFieldParentWhereUniqueInput>>;
  /** Disconnect multiple AddressSearchFieldParent documents */
  disconnect?: InputMaybe<Array<AddressSearchFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing AddressSearchFieldParent documents */
  set?: InputMaybe<Array<AddressSearchFieldParentWhereUniqueInput>>;
  /** Update multiple AddressSearchFieldParent documents */
  update?: InputMaybe<Array<AddressSearchFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple AddressSearchFieldParent documents */
  upsert?: InputMaybe<Array<AddressSearchFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type AddressSearchFieldParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type AddressSearchFieldParentUpdateOneInlineInput = {
  /** Connect existing AddressSearchFieldParent document */
  connect?: InputMaybe<AddressSearchFieldParentWhereUniqueInput>;
  /** Create and connect one AddressSearchFieldParent document */
  create?: InputMaybe<AddressSearchFieldParentCreateInput>;
  /** Delete currently connected AddressSearchFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected AddressSearchFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single AddressSearchFieldParent document */
  update?: InputMaybe<AddressSearchFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AddressSearchFieldParent document */
  upsert?: InputMaybe<AddressSearchFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type AddressSearchFieldParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type AddressSearchFieldParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type AddressSearchFieldParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
};

export type AddressSearchFieldParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type AddressSearchFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  locationType?: InputMaybe<LocationType>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AddressSearchFieldUpdateManyInlineInput = {
  /** Create and connect multiple AddressSearchField component instances */
  create?: InputMaybe<Array<AddressSearchFieldCreateWithPositionInput>>;
  /** Delete multiple AddressSearchField documents */
  delete?: InputMaybe<Array<AddressSearchFieldWhereUniqueInput>>;
  /** Update multiple AddressSearchField component instances */
  update?: InputMaybe<Array<AddressSearchFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple AddressSearchField component instances */
  upsert?: InputMaybe<Array<AddressSearchFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AddressSearchFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  locationType?: InputMaybe<LocationType>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AddressSearchFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AddressSearchFieldUpdateManyInput;
  /** Document search */
  where: AddressSearchFieldWhereInput;
};

export type AddressSearchFieldUpdateOneInlineInput = {
  /** Create and connect one AddressSearchField document */
  create?: InputMaybe<AddressSearchFieldCreateInput>;
  /** Delete currently connected AddressSearchField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single AddressSearchField document */
  update?: InputMaybe<AddressSearchFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AddressSearchField document */
  upsert?: InputMaybe<AddressSearchFieldUpsertWithNestedWhereUniqueInput>;
};

export type AddressSearchFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AddressSearchFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AddressSearchFieldWhereUniqueInput;
};

export type AddressSearchFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AddressSearchFieldUpdateInput;
  /** Unique document search */
  where: AddressSearchFieldWhereUniqueInput;
};

export type AddressSearchFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: AddressSearchFieldCreateInput;
  /** Update document if it exists */
  update: AddressSearchFieldUpdateInput;
};

export type AddressSearchFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AddressSearchFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AddressSearchFieldWhereUniqueInput;
};

export type AddressSearchFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AddressSearchFieldUpsertInput;
  /** Unique document search */
  where: AddressSearchFieldWhereUniqueInput;
};

/** Identifies documents */
export type AddressSearchFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AddressSearchFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AddressSearchFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AddressSearchFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  locationType?: InputMaybe<LocationType>;
  /** All values that are contained in given list. */
  locationType_in?: InputMaybe<Array<InputMaybe<LocationType>>>;
  /** Any other value that exists and is not equal to the given value. */
  locationType_not?: InputMaybe<LocationType>;
  /** All values that are not contained in given list. */
  locationType_not_in?: InputMaybe<Array<InputMaybe<LocationType>>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

/** References AddressSearchField record uniquely */
export type AddressSearchFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type AddressUpdateInput = {
  address1?: InputMaybe<Scalars['String']['input']>;
  address2?: InputMaybe<Scalars['String']['input']>;
  address3?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  zipCode?: InputMaybe<Scalars['String']['input']>;
};

export type AddressUpdateManyInlineInput = {
  /** Create and connect multiple Address component instances */
  create?: InputMaybe<Array<AddressCreateWithPositionInput>>;
  /** Delete multiple Address documents */
  delete?: InputMaybe<Array<AddressWhereUniqueInput>>;
  /** Update multiple Address component instances */
  update?: InputMaybe<Array<AddressUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Address component instances */
  upsert?: InputMaybe<Array<AddressUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AddressUpdateManyInput = {
  address1?: InputMaybe<Scalars['String']['input']>;
  address2?: InputMaybe<Scalars['String']['input']>;
  address3?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  zipCode?: InputMaybe<Scalars['String']['input']>;
};

export type AddressUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AddressUpdateManyInput;
  /** Document search */
  where: AddressWhereInput;
};

export type AddressUpdateOneInlineInput = {
  /** Create and connect one Address document */
  create?: InputMaybe<AddressCreateInput>;
  /** Delete currently connected Address document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Address document */
  update?: InputMaybe<AddressUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Address document */
  upsert?: InputMaybe<AddressUpsertWithNestedWhereUniqueInput>;
};

export type AddressUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AddressUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AddressWhereUniqueInput;
};

export type AddressUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AddressUpdateInput;
  /** Unique document search */
  where: AddressWhereUniqueInput;
};

export type AddressUpsertInput = {
  /** Create document if it didn't exist */
  create: AddressCreateInput;
  /** Update document if it exists */
  update: AddressUpdateInput;
};

export type AddressUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AddressUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AddressWhereUniqueInput;
};

export type AddressUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AddressUpsertInput;
  /** Unique document search */
  where: AddressWhereUniqueInput;
};

/** Identifies documents */
export type AddressWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AddressWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AddressWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AddressWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  address1?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  address1_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  address1_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  address1_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  address1_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  address1_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  address1_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  address1_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  address1_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  address1_starts_with?: InputMaybe<Scalars['String']['input']>;
  address2?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  address2_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  address2_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  address2_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  address2_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  address2_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  address2_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  address2_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  address2_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  address2_starts_with?: InputMaybe<Scalars['String']['input']>;
  address3?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  address3_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  address3_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  address3_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  address3_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  address3_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  address3_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  address3_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  address3_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  address3_starts_with?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  city_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  city_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  city_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  city_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  city_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  city_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  city_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  city_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  city_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  state?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  state_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  state_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  state_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  state_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  state_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  state_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  state_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  state_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  state_starts_with?: InputMaybe<Scalars['String']['input']>;
  zipCode?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  zipCode_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  zipCode_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  zipCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  zipCode_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  zipCode_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  zipCode_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  zipCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  zipCode_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  zipCode_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References Address record uniquely */
export type AddressWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Admonition = Entity & Node & {
  __typename?: 'Admonition';
  body: RichText;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Admonition>;
  /** List of Admonition versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
  type: AdmonitionType;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type AdmonitionCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type AdmonitionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type AdmonitionHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type AdmonitionPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type AdmonitionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type AdmonitionUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type AdmonitionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AdmonitionWhereUniqueInput;
};

/** A connection to a list of items. */
export type AdmonitionConnection = {
  __typename?: 'AdmonitionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AdmonitionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AdmonitionCreateInput = {
  body: Scalars['RichTextAST']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type: AdmonitionType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type AdmonitionCreateManyInlineInput = {
  /** Connect multiple existing Admonition documents */
  connect?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Create and connect multiple existing Admonition documents */
  create?: InputMaybe<Array<AdmonitionCreateInput>>;
};

export type AdmonitionCreateOneInlineInput = {
  /** Connect one existing Admonition document */
  connect?: InputMaybe<AdmonitionWhereUniqueInput>;
  /** Create and connect one Admonition document */
  create?: InputMaybe<AdmonitionCreateInput>;
};

/** An edge in a connection. */
export type AdmonitionEdge = {
  __typename?: 'AdmonitionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Admonition;
};

/** Identifies documents */
export type AdmonitionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_none?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_some?: InputMaybe<AdmonitionWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<AdmonitionType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  /** Any other value that exists and is not equal to the given value. */
  type_not?: InputMaybe<AdmonitionType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum AdmonitionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export enum AdmonitionType {
  Critical = 'Critical',
  Information = 'Information',
  Note = 'Note',
  Tip = 'Tip',
  Warning = 'Warning'
}

export type AdmonitionUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<AdmonitionType>;
};

export type AdmonitionUpdateManyInlineInput = {
  /** Connect multiple existing Admonition documents */
  connect?: InputMaybe<Array<AdmonitionConnectInput>>;
  /** Create and connect multiple Admonition documents */
  create?: InputMaybe<Array<AdmonitionCreateInput>>;
  /** Delete multiple Admonition documents */
  delete?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Disconnect multiple Admonition documents */
  disconnect?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Admonition documents */
  set?: InputMaybe<Array<AdmonitionWhereUniqueInput>>;
  /** Update multiple Admonition documents */
  update?: InputMaybe<Array<AdmonitionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Admonition documents */
  upsert?: InputMaybe<Array<AdmonitionUpsertWithNestedWhereUniqueInput>>;
};

export type AdmonitionUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<AdmonitionType>;
};

export type AdmonitionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AdmonitionUpdateManyInput;
  /** Document search */
  where: AdmonitionWhereInput;
};

export type AdmonitionUpdateOneInlineInput = {
  /** Connect existing Admonition document */
  connect?: InputMaybe<AdmonitionWhereUniqueInput>;
  /** Create and connect one Admonition document */
  create?: InputMaybe<AdmonitionCreateInput>;
  /** Delete currently connected Admonition document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Admonition document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Admonition document */
  update?: InputMaybe<AdmonitionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Admonition document */
  upsert?: InputMaybe<AdmonitionUpsertWithNestedWhereUniqueInput>;
};

export type AdmonitionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AdmonitionUpdateInput;
  /** Unique document search */
  where: AdmonitionWhereUniqueInput;
};

export type AdmonitionUpsertInput = {
  /** Create document if it didn't exist */
  create: AdmonitionCreateInput;
  /** Update document if it exists */
  update: AdmonitionUpdateInput;
};

export type AdmonitionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AdmonitionUpsertInput;
  /** Unique document search */
  where: AdmonitionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AdmonitionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type AdmonitionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdmonitionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_none?: InputMaybe<AdmonitionWhereStageInput>;
  documentInStages_some?: InputMaybe<AdmonitionWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<AdmonitionType>;
  /** All values that are contained in given list. */
  type_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  /** Any other value that exists and is not equal to the given value. */
  type_not?: InputMaybe<AdmonitionType>;
  /** All values that are not contained in given list. */
  type_not_in?: InputMaybe<Array<InputMaybe<AdmonitionType>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AdmonitionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AdmonitionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AdmonitionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AdmonitionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AdmonitionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Admonition record uniquely */
export type AdmonitionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Aggregate = {
  __typename?: 'Aggregate';
  count: Scalars['Int']['output'];
};

export type Alert = Entity & {
  __typename?: 'Alert';
  body: RichText;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  level: AlertLevel;
  name: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']['output']>;
};

export type AlertConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AlertWhereUniqueInput;
};

/** A connection to a list of items. */
export type AlertConnection = {
  __typename?: 'AlertConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AlertEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AlertCreateInput = {
  body: Scalars['RichTextAST']['input'];
  level: AlertLevel;
  name: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
};

export type AlertCreateManyInlineInput = {
  /** Create and connect multiple existing Alert documents */
  create?: InputMaybe<Array<AlertCreateInput>>;
};

export type AlertCreateOneInlineInput = {
  /** Create and connect one Alert document */
  create?: InputMaybe<AlertCreateInput>;
};

export type AlertCreateWithPositionInput = {
  /** Document to create */
  data: AlertCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AlertEdge = {
  __typename?: 'AlertEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Alert;
};

export enum AlertLevel {
  Error = 'error',
  Info = 'info',
  Success = 'success',
  Warning = 'warning'
}

/** Identifies documents */
export type AlertManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AlertWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  level?: InputMaybe<AlertLevel>;
  /** All values that are contained in given list. */
  level_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  /** Any other value that exists and is not equal to the given value. */
  level_not?: InputMaybe<AlertLevel>;
  /** All values that are not contained in given list. */
  level_not_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum AlertOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LevelAsc = 'level_ASC',
  LevelDesc = 'level_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type AlertParent = Configuration | FormButton;

export type AlertParentConnectInput = {
  Configuration?: InputMaybe<ConfigurationConnectInput>;
  FormButton?: InputMaybe<FormButtonConnectInput>;
};

export type AlertParentCreateInput = {
  Configuration?: InputMaybe<ConfigurationCreateInput>;
  FormButton?: InputMaybe<FormButtonCreateInput>;
};

export type AlertParentCreateManyInlineInput = {
  /** Connect multiple existing AlertParent documents */
  connect?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Create and connect multiple existing AlertParent documents */
  create?: InputMaybe<Array<AlertParentCreateInput>>;
};

export type AlertParentCreateOneInlineInput = {
  /** Connect one existing AlertParent document */
  connect?: InputMaybe<AlertParentWhereUniqueInput>;
  /** Create and connect one AlertParent document */
  create?: InputMaybe<AlertParentCreateInput>;
};

export type AlertParentUpdateInput = {
  Configuration?: InputMaybe<ConfigurationUpdateInput>;
  FormButton?: InputMaybe<FormButtonUpdateInput>;
};

export type AlertParentUpdateManyInlineInput = {
  /** Connect multiple existing AlertParent documents */
  connect?: InputMaybe<Array<AlertParentConnectInput>>;
  /** Create and connect multiple AlertParent documents */
  create?: InputMaybe<Array<AlertParentCreateInput>>;
  /** Delete multiple AlertParent documents */
  delete?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Disconnect multiple AlertParent documents */
  disconnect?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing AlertParent documents */
  set?: InputMaybe<Array<AlertParentWhereUniqueInput>>;
  /** Update multiple AlertParent documents */
  update?: InputMaybe<Array<AlertParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple AlertParent documents */
  upsert?: InputMaybe<Array<AlertParentUpsertWithNestedWhereUniqueInput>>;
};

export type AlertParentUpdateManyWithNestedWhereInput = {
  Configuration?: InputMaybe<ConfigurationUpdateManyWithNestedWhereInput>;
  FormButton?: InputMaybe<FormButtonUpdateManyWithNestedWhereInput>;
};

export type AlertParentUpdateOneInlineInput = {
  /** Connect existing AlertParent document */
  connect?: InputMaybe<AlertParentWhereUniqueInput>;
  /** Create and connect one AlertParent document */
  create?: InputMaybe<AlertParentCreateInput>;
  /** Delete currently connected AlertParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected AlertParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single AlertParent document */
  update?: InputMaybe<AlertParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AlertParent document */
  upsert?: InputMaybe<AlertParentUpsertWithNestedWhereUniqueInput>;
};

export type AlertParentUpdateWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueInput>;
};

export type AlertParentUpsertWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueInput>;
};

export type AlertParentWhereInput = {
  Configuration?: InputMaybe<ConfigurationWhereInput>;
  FormButton?: InputMaybe<FormButtonWhereInput>;
};

export type AlertParentWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonWhereUniqueInput>;
};

export type AlertUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  level?: InputMaybe<AlertLevel>;
  name?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type AlertUpdateManyInlineInput = {
  /** Create and connect multiple Alert component instances */
  create?: InputMaybe<Array<AlertCreateWithPositionInput>>;
  /** Delete multiple Alert documents */
  delete?: InputMaybe<Array<AlertWhereUniqueInput>>;
  /** Update multiple Alert component instances */
  update?: InputMaybe<Array<AlertUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Alert component instances */
  upsert?: InputMaybe<Array<AlertUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AlertUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  level?: InputMaybe<AlertLevel>;
  name?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type AlertUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AlertUpdateManyInput;
  /** Document search */
  where: AlertWhereInput;
};

export type AlertUpdateOneInlineInput = {
  /** Create and connect one Alert document */
  create?: InputMaybe<AlertCreateInput>;
  /** Delete currently connected Alert document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Alert document */
  update?: InputMaybe<AlertUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Alert document */
  upsert?: InputMaybe<AlertUpsertWithNestedWhereUniqueInput>;
};

export type AlertUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AlertUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AlertWhereUniqueInput;
};

export type AlertUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AlertUpdateInput;
  /** Unique document search */
  where: AlertWhereUniqueInput;
};

export type AlertUpsertInput = {
  /** Create document if it didn't exist */
  create: AlertCreateInput;
  /** Update document if it exists */
  update: AlertUpdateInput;
};

export type AlertUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AlertUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AlertWhereUniqueInput;
};

export type AlertUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AlertUpsertInput;
  /** Unique document search */
  where: AlertWhereUniqueInput;
};

/** Identifies documents */
export type AlertWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AlertWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AlertWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  level?: InputMaybe<AlertLevel>;
  /** All values that are contained in given list. */
  level_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  /** Any other value that exists and is not equal to the given value. */
  level_not?: InputMaybe<AlertLevel>;
  /** All values that are not contained in given list. */
  level_not_in?: InputMaybe<Array<InputMaybe<AlertLevel>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References Alert record uniquely */
export type AlertWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Asset system model */
export type Asset = Entity & Node & {
  __typename?: 'Asset';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  fileDocument: Array<Document>;
  /** The file name */
  fileName: Scalars['String']['output'];
  /** The file handle */
  handle: Scalars['String']['output'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']['output']>;
  /** List of Asset versions */
  history: Array<Version>;
  iconContactForm: Array<ContactForm>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  imagePageContent: Array<PageContent>;
  imageTestimonial: Array<Testimonial>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  mainVideoHomePage: Array<HomePage>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']['output']>;
  photoEmployee: Array<Employee>;
  photoOfficeLocation: Array<OfficeLocation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size?: Maybe<Scalars['Float']['output']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String']['output'];
  /** The file width */
  width?: Maybe<Scalars['Float']['output']>;
};


/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Asset system model */
export type AssetFileDocumentArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocumentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentWhereInput>;
};


/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AssetIconContactFormArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ContactFormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContactFormWhereInput>;
};


/** Asset system model */
export type AssetImagePageContentArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageContentWhereInput>;
};


/** Asset system model */
export type AssetImageTestimonialArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TestimonialWhereInput>;
};


/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  locales?: Array<Locale>;
};


/** Asset system model */
export type AssetMainVideoHomePageArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HomePageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HomePageWhereInput>;
};


/** Asset system model */
export type AssetPhotoEmployeeArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EmployeeWhereInput>;
};


/** Asset system model */
export type AssetPhotoOfficeLocationArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<OfficeLocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OfficeLocationWhereInput>;
};


/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetUrlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  fileDocument?: InputMaybe<DocumentCreateManyInlineInput>;
  fileName: Scalars['String']['input'];
  handle: Scalars['String']['input'];
  height?: InputMaybe<Scalars['Float']['input']>;
  iconCallToActionSettings?: InputMaybe<CallToActionSettingsCreateManyInlineInput>;
  iconContactForm?: InputMaybe<ContactFormCreateManyInlineInput>;
  iconFeature?: InputMaybe<FeatureCreateManyInlineInput>;
  imageHomePageBlock?: InputMaybe<HomePageBlockCreateManyInlineInput>;
  imagePageContent?: InputMaybe<PageContentCreateManyInlineInput>;
  imageTestimonial?: InputMaybe<TestimonialCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
  logoVendorLogo?: InputMaybe<VendorLogoCreateManyInlineInput>;
  mainVideoHomePage?: InputMaybe<HomePageCreateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  photoEmployee?: InputMaybe<EmployeeCreateManyInlineInput>;
  photoOfficeLocation?: InputMaybe<OfficeLocationCreateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  fileName: Scalars['String']['input'];
  handle: Scalars['String']['input'];
  height?: InputMaybe<Scalars['Float']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  size?: InputMaybe<Scalars['Float']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  fileDocument_every?: InputMaybe<DocumentWhereInput>;
  fileDocument_none?: InputMaybe<DocumentWhereInput>;
  fileDocument_some?: InputMaybe<DocumentWhereInput>;
  iconContactForm_every?: InputMaybe<ContactFormWhereInput>;
  iconContactForm_none?: InputMaybe<ContactFormWhereInput>;
  iconContactForm_some?: InputMaybe<ContactFormWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  imagePageContent_every?: InputMaybe<PageContentWhereInput>;
  imagePageContent_none?: InputMaybe<PageContentWhereInput>;
  imagePageContent_some?: InputMaybe<PageContentWhereInput>;
  imageTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  mainVideoHomePage_every?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_none?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_some?: InputMaybe<HomePageWhereInput>;
  photoEmployee_every?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_none?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_some?: InputMaybe<EmployeeWhereInput>;
  photoOfficeLocation_every?: InputMaybe<OfficeLocationWhereInput>;
  photoOfficeLocation_none?: InputMaybe<OfficeLocationWhereInput>;
  photoOfficeLocation_some?: InputMaybe<OfficeLocationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum AssetOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: InputMaybe<DocumentTransformationInput>;
  image?: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AssetUpdateInput = {
  fileDocument?: InputMaybe<DocumentUpdateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  handle?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
  iconCallToActionSettings?: InputMaybe<CallToActionSettingsUpdateManyInlineInput>;
  iconContactForm?: InputMaybe<ContactFormUpdateManyInlineInput>;
  iconFeature?: InputMaybe<FeatureUpdateManyInlineInput>;
  imageHomePageBlock?: InputMaybe<HomePageBlockUpdateManyInlineInput>;
  imagePageContent?: InputMaybe<PageContentUpdateManyInlineInput>;
  imageTestimonial?: InputMaybe<TestimonialUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
  logoVendorLogo?: InputMaybe<VendorLogoUpdateManyInlineInput>;
  mainVideoHomePage?: InputMaybe<HomePageUpdateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  photoEmployee?: InputMaybe<EmployeeUpdateManyInlineInput>;
  photoOfficeLocation?: InputMaybe<OfficeLocationUpdateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']['input']>;
  handle?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  size?: InputMaybe<Scalars['Float']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  fileName?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  size?: InputMaybe<Scalars['Float']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  size?: InputMaybe<Scalars['Float']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  fileDocument_every?: InputMaybe<DocumentWhereInput>;
  fileDocument_none?: InputMaybe<DocumentWhereInput>;
  fileDocument_some?: InputMaybe<DocumentWhereInput>;
  fileName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  fileName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']['input']>;
  handle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  height_not?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  iconContactForm_every?: InputMaybe<ContactFormWhereInput>;
  iconContactForm_none?: InputMaybe<ContactFormWhereInput>;
  iconContactForm_some?: InputMaybe<ContactFormWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  imagePageContent_every?: InputMaybe<PageContentWhereInput>;
  imagePageContent_none?: InputMaybe<PageContentWhereInput>;
  imagePageContent_some?: InputMaybe<PageContentWhereInput>;
  imageTestimonial_every?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_none?: InputMaybe<TestimonialWhereInput>;
  imageTestimonial_some?: InputMaybe<TestimonialWhereInput>;
  mainVideoHomePage_every?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_none?: InputMaybe<HomePageWhereInput>;
  mainVideoHomePage_some?: InputMaybe<HomePageWhereInput>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mimeType_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']['input']>;
  photoEmployee_every?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_none?: InputMaybe<EmployeeWhereInput>;
  photoEmployee_some?: InputMaybe<EmployeeWhereInput>;
  photoOfficeLocation_every?: InputMaybe<OfficeLocationWhereInput>;
  photoOfficeLocation_none?: InputMaybe<OfficeLocationWhereInput>;
  photoOfficeLocation_some?: InputMaybe<OfficeLocationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  size?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  size_not?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  width?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']['input']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']['input']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  width_not?: InputMaybe<Scalars['Float']['input']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long']['output'];
};

export type BlogPost = Entity & Node & {
  __typename?: 'BlogPost';
  authors: Array<Employee>;
  body: BlogPostBodyRichText;
  contentTags: Array<ContentTag>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Used as the <meta/> description for SEO purposes */
  description: Scalars['String']['output'];
  /** Get the document in other stages */
  documentInStages: Array<BlogPost>;
  /** List of BlogPost versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  overrideDate?: Maybe<Scalars['Date']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type BlogPostAuthorsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EmployeeWhereInput>;
};


export type BlogPostContentTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ContentTagOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentTagWhereInput>;
};


export type BlogPostCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogPostDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type BlogPostHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type BlogPostPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogPostScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type BlogPostUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type BlogPostBodyRichText = {
  __typename?: 'BlogPostBodyRichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  json: Scalars['RichTextAST']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST']['output'];
  references: Array<BlogPostBodyRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};


export type BlogPostBodyRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};

export type BlogPostBodyRichTextEmbeddedTypes = Admonition | Asset | ContentButton | Document | DocumentGroup;

export type BlogPostConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BlogPostWhereUniqueInput;
};

/** A connection to a list of items. */
export type BlogPostConnection = {
  __typename?: 'BlogPostConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BlogPostEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BlogPostCreateInput = {
  authors?: InputMaybe<EmployeeCreateManyInlineInput>;
  body: Scalars['RichTextAST']['input'];
  contentTags?: InputMaybe<ContentTagCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  overrideDate?: InputMaybe<Scalars['Date']['input']>;
  slug: Scalars['String']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type BlogPostCreateManyInlineInput = {
  /** Connect multiple existing BlogPost documents */
  connect?: InputMaybe<Array<BlogPostWhereUniqueInput>>;
  /** Create and connect multiple existing BlogPost documents */
  create?: InputMaybe<Array<BlogPostCreateInput>>;
};

export type BlogPostCreateOneInlineInput = {
  /** Connect one existing BlogPost document */
  connect?: InputMaybe<BlogPostWhereUniqueInput>;
  /** Create and connect one BlogPost document */
  create?: InputMaybe<BlogPostCreateInput>;
};

/** An edge in a connection. */
export type BlogPostEdge = {
  __typename?: 'BlogPostEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: BlogPost;
};

/** Identifies documents */
export type BlogPostManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogPostWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogPostWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogPostWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  authors_every?: InputMaybe<EmployeeWhereInput>;
  authors_none?: InputMaybe<EmployeeWhereInput>;
  authors_some?: InputMaybe<EmployeeWhereInput>;
  contentTags_every?: InputMaybe<ContentTagWhereInput>;
  contentTags_none?: InputMaybe<ContentTagWhereInput>;
  contentTags_some?: InputMaybe<ContentTagWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  documentInStages_every?: InputMaybe<BlogPostWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogPostWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogPostWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  overrideDate?: InputMaybe<Scalars['Date']['input']>;
  /** All values greater than the given value. */
  overrideDate_gt?: InputMaybe<Scalars['Date']['input']>;
  /** All values greater than or equal the given value. */
  overrideDate_gte?: InputMaybe<Scalars['Date']['input']>;
  /** All values that are contained in given list. */
  overrideDate_in?: InputMaybe<Array<InputMaybe<Scalars['Date']['input']>>>;
  /** All values less than the given value. */
  overrideDate_lt?: InputMaybe<Scalars['Date']['input']>;
  /** All values less than or equal the given value. */
  overrideDate_lte?: InputMaybe<Scalars['Date']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  overrideDate_not?: InputMaybe<Scalars['Date']['input']>;
  /** All values that are not contained in given list. */
  overrideDate_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']['input']>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum BlogPostOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OverrideDateAsc = 'overrideDate_ASC',
  OverrideDateDesc = 'overrideDate_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type BlogPostUpdateInput = {
  authors?: InputMaybe<EmployeeUpdateManyInlineInput>;
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  contentTags?: InputMaybe<ContentTagUpdateManyInlineInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  overrideDate?: InputMaybe<Scalars['Date']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type BlogPostUpdateManyInlineInput = {
  /** Connect multiple existing BlogPost documents */
  connect?: InputMaybe<Array<BlogPostConnectInput>>;
  /** Create and connect multiple BlogPost documents */
  create?: InputMaybe<Array<BlogPostCreateInput>>;
  /** Delete multiple BlogPost documents */
  delete?: InputMaybe<Array<BlogPostWhereUniqueInput>>;
  /** Disconnect multiple BlogPost documents */
  disconnect?: InputMaybe<Array<BlogPostWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing BlogPost documents */
  set?: InputMaybe<Array<BlogPostWhereUniqueInput>>;
  /** Update multiple BlogPost documents */
  update?: InputMaybe<Array<BlogPostUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple BlogPost documents */
  upsert?: InputMaybe<Array<BlogPostUpsertWithNestedWhereUniqueInput>>;
};

export type BlogPostUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  overrideDate?: InputMaybe<Scalars['Date']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type BlogPostUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BlogPostUpdateManyInput;
  /** Document search */
  where: BlogPostWhereInput;
};

export type BlogPostUpdateOneInlineInput = {
  /** Connect existing BlogPost document */
  connect?: InputMaybe<BlogPostWhereUniqueInput>;
  /** Create and connect one BlogPost document */
  create?: InputMaybe<BlogPostCreateInput>;
  /** Delete currently connected BlogPost document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected BlogPost document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single BlogPost document */
  update?: InputMaybe<BlogPostUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BlogPost document */
  upsert?: InputMaybe<BlogPostUpsertWithNestedWhereUniqueInput>;
};

export type BlogPostUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BlogPostUpdateInput;
  /** Unique document search */
  where: BlogPostWhereUniqueInput;
};

export type BlogPostUpsertInput = {
  /** Create document if it didn't exist */
  create: BlogPostCreateInput;
  /** Update document if it exists */
  update: BlogPostUpdateInput;
};

export type BlogPostUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BlogPostUpsertInput;
  /** Unique document search */
  where: BlogPostWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type BlogPostWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type BlogPostWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogPostWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogPostWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogPostWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  authors_every?: InputMaybe<EmployeeWhereInput>;
  authors_none?: InputMaybe<EmployeeWhereInput>;
  authors_some?: InputMaybe<EmployeeWhereInput>;
  contentTags_every?: InputMaybe<ContentTagWhereInput>;
  contentTags_none?: InputMaybe<ContentTagWhereInput>;
  contentTags_some?: InputMaybe<ContentTagWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  documentInStages_every?: InputMaybe<BlogPostWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogPostWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogPostWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  overrideDate?: InputMaybe<Scalars['Date']['input']>;
  /** All values greater than the given value. */
  overrideDate_gt?: InputMaybe<Scalars['Date']['input']>;
  /** All values greater than or equal the given value. */
  overrideDate_gte?: InputMaybe<Scalars['Date']['input']>;
  /** All values that are contained in given list. */
  overrideDate_in?: InputMaybe<Array<InputMaybe<Scalars['Date']['input']>>>;
  /** All values less than the given value. */
  overrideDate_lt?: InputMaybe<Scalars['Date']['input']>;
  /** All values less than or equal the given value. */
  overrideDate_lte?: InputMaybe<Scalars['Date']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  overrideDate_not?: InputMaybe<Scalars['Date']['input']>;
  /** All values that are not contained in given list. */
  overrideDate_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']['input']>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type BlogPostWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogPostWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogPostWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogPostWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<BlogPostWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References BlogPost record uniquely */
export type BlogPostWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type Button = Entity & {
  __typename?: 'Button';
  /** The unique identifier */
  id: Scalars['ID']['output'];
  link?: Maybe<Scalars['String']['output']>;
  /** System stage field */
  stage: Stage;
  text: Scalars['String']['output'];
  variant?: Maybe<ButtonVariant>;
};

export type ButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type ButtonConnection = {
  __typename?: 'ButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ButtonCreateInput = {
  link?: InputMaybe<Scalars['String']['input']>;
  text: Scalars['String']['input'];
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonCreateManyInlineInput = {
  /** Create and connect multiple existing Button documents */
  create?: InputMaybe<Array<ButtonCreateInput>>;
};

export type ButtonCreateOneInlineInput = {
  /** Create and connect one Button document */
  create?: InputMaybe<ButtonCreateInput>;
};

export type ButtonCreateWithPositionInput = {
  /** Document to create */
  data: ButtonCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ButtonEdge = {
  __typename?: 'ButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Button;
};

/** Identifies documents */
export type ButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  text_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** Any other value that exists and is not equal to the given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

export enum ButtonOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  VariantAsc = 'variant_ASC',
  VariantDesc = 'variant_DESC'
}

export type ButtonParent = Callout | ContactForm | Feature | HomePageBlock | PageContent;

export type ButtonParentConnectInput = {
  Callout?: InputMaybe<CalloutConnectInput>;
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Feature?: InputMaybe<FeatureConnectInput>;
  HomePageBlock?: InputMaybe<HomePageBlockConnectInput>;
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type ButtonParentCreateInput = {
  Callout?: InputMaybe<CalloutCreateInput>;
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Feature?: InputMaybe<FeatureCreateInput>;
  HomePageBlock?: InputMaybe<HomePageBlockCreateInput>;
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type ButtonParentCreateManyInlineInput = {
  /** Connect multiple existing ButtonParent documents */
  connect?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Create and connect multiple existing ButtonParent documents */
  create?: InputMaybe<Array<ButtonParentCreateInput>>;
};

export type ButtonParentCreateOneInlineInput = {
  /** Connect one existing ButtonParent document */
  connect?: InputMaybe<ButtonParentWhereUniqueInput>;
  /** Create and connect one ButtonParent document */
  create?: InputMaybe<ButtonParentCreateInput>;
};

export type ButtonParentUpdateInput = {
  Callout?: InputMaybe<CalloutUpdateInput>;
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Feature?: InputMaybe<FeatureUpdateInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpdateInput>;
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type ButtonParentUpdateManyInlineInput = {
  /** Connect multiple existing ButtonParent documents */
  connect?: InputMaybe<Array<ButtonParentConnectInput>>;
  /** Create and connect multiple ButtonParent documents */
  create?: InputMaybe<Array<ButtonParentCreateInput>>;
  /** Delete multiple ButtonParent documents */
  delete?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Disconnect multiple ButtonParent documents */
  disconnect?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ButtonParent documents */
  set?: InputMaybe<Array<ButtonParentWhereUniqueInput>>;
  /** Update multiple ButtonParent documents */
  update?: InputMaybe<Array<ButtonParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ButtonParent documents */
  upsert?: InputMaybe<Array<ButtonParentUpsertWithNestedWhereUniqueInput>>;
};

export type ButtonParentUpdateManyWithNestedWhereInput = {
  Callout?: InputMaybe<CalloutUpdateManyWithNestedWhereInput>;
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Feature?: InputMaybe<FeatureUpdateManyWithNestedWhereInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpdateManyWithNestedWhereInput>;
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type ButtonParentUpdateOneInlineInput = {
  /** Connect existing ButtonParent document */
  connect?: InputMaybe<ButtonParentWhereUniqueInput>;
  /** Create and connect one ButtonParent document */
  create?: InputMaybe<ButtonParentCreateInput>;
  /** Delete currently connected ButtonParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ButtonParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ButtonParent document */
  update?: InputMaybe<ButtonParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ButtonParent document */
  upsert?: InputMaybe<ButtonParentUpsertWithNestedWhereUniqueInput>;
};

export type ButtonParentUpdateWithNestedWhereUniqueInput = {
  Callout?: InputMaybe<CalloutUpdateWithNestedWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Feature?: InputMaybe<FeatureUpdateWithNestedWhereUniqueInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpdateWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type ButtonParentUpsertWithNestedWhereUniqueInput = {
  Callout?: InputMaybe<CalloutUpsertWithNestedWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Feature?: InputMaybe<FeatureUpsertWithNestedWhereUniqueInput>;
  HomePageBlock?: InputMaybe<HomePageBlockUpsertWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type ButtonParentWhereInput = {
  Callout?: InputMaybe<CalloutWhereInput>;
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Feature?: InputMaybe<FeatureWhereInput>;
  HomePageBlock?: InputMaybe<HomePageBlockWhereInput>;
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type ButtonParentWhereUniqueInput = {
  Callout?: InputMaybe<CalloutWhereUniqueInput>;
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Feature?: InputMaybe<FeatureWhereUniqueInput>;
  HomePageBlock?: InputMaybe<HomePageBlockWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type ButtonUpdateInput = {
  link?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonUpdateManyInlineInput = {
  /** Create and connect multiple Button component instances */
  create?: InputMaybe<Array<ButtonCreateWithPositionInput>>;
  /** Delete multiple Button documents */
  delete?: InputMaybe<Array<ButtonWhereUniqueInput>>;
  /** Update multiple Button component instances */
  update?: InputMaybe<Array<ButtonUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Button component instances */
  upsert?: InputMaybe<Array<ButtonUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ButtonUpdateManyInput = {
  link?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ButtonUpdateManyInput;
  /** Document search */
  where: ButtonWhereInput;
};

export type ButtonUpdateOneInlineInput = {
  /** Create and connect one Button document */
  create?: InputMaybe<ButtonCreateInput>;
  /** Delete currently connected Button document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Button document */
  update?: InputMaybe<ButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Button document */
  upsert?: InputMaybe<ButtonUpsertWithNestedWhereUniqueInput>;
};

export type ButtonUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ButtonUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ButtonUpdateInput;
  /** Unique document search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: ButtonCreateInput;
  /** Update document if it exists */
  update: ButtonUpdateInput;
};

export type ButtonUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ButtonUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ButtonWhereUniqueInput;
};

export type ButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ButtonUpsertInput;
  /** Unique document search */
  where: ButtonWhereUniqueInput;
};

export enum ButtonVariant {
  Ghost = 'ghost',
  HeroPrimary = 'heroPrimary',
  HeroSecondary = 'heroSecondary',
  Outline = 'outline',
  Solid = 'solid'
}

/** Identifies documents */
export type ButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  text_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** Any other value that exists and is not equal to the given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

/** References Button record uniquely */
export type ButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CallToAction = Entity & {
  __typename?: 'CallToAction';
  /** The unique identifier */
  id: Scalars['ID']['output'];
  shown: Scalars['Int']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
};

export type CallToActionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CallToActionWhereUniqueInput;
};

/** A connection to a list of items. */
export type CallToActionConnection = {
  __typename?: 'CallToActionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CallToActionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CallToActionCreateInput = {
  shown: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type CallToActionCreateManyInlineInput = {
  /** Create and connect multiple existing CallToAction documents */
  create?: InputMaybe<Array<CallToActionCreateInput>>;
};

export type CallToActionCreateOneInlineInput = {
  /** Create and connect one CallToAction document */
  create?: InputMaybe<CallToActionCreateInput>;
};

export type CallToActionCreateWithPositionInput = {
  /** Document to create */
  data: CallToActionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CallToActionEdge = {
  __typename?: 'CallToActionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CallToAction;
};

/** Identifies documents */
export type CallToActionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  shown?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  shown_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  shown_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  shown_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  shown_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  shown_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  shown_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  shown_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum CallToActionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ShownAsc = 'shown_ASC',
  ShownDesc = 'shown_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CallToActionParent = Configuration;

export type CallToActionParentConnectInput = {
  Configuration?: InputMaybe<ConfigurationConnectInput>;
};

export type CallToActionParentCreateInput = {
  Configuration?: InputMaybe<ConfigurationCreateInput>;
};

export type CallToActionParentCreateManyInlineInput = {
  /** Connect multiple existing CallToActionParent documents */
  connect?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Create and connect multiple existing CallToActionParent documents */
  create?: InputMaybe<Array<CallToActionParentCreateInput>>;
};

export type CallToActionParentCreateOneInlineInput = {
  /** Connect one existing CallToActionParent document */
  connect?: InputMaybe<CallToActionParentWhereUniqueInput>;
  /** Create and connect one CallToActionParent document */
  create?: InputMaybe<CallToActionParentCreateInput>;
};

export type CallToActionParentUpdateInput = {
  Configuration?: InputMaybe<ConfigurationUpdateInput>;
};

export type CallToActionParentUpdateManyInlineInput = {
  /** Connect multiple existing CallToActionParent documents */
  connect?: InputMaybe<Array<CallToActionParentConnectInput>>;
  /** Create and connect multiple CallToActionParent documents */
  create?: InputMaybe<Array<CallToActionParentCreateInput>>;
  /** Delete multiple CallToActionParent documents */
  delete?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Disconnect multiple CallToActionParent documents */
  disconnect?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CallToActionParent documents */
  set?: InputMaybe<Array<CallToActionParentWhereUniqueInput>>;
  /** Update multiple CallToActionParent documents */
  update?: InputMaybe<Array<CallToActionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CallToActionParent documents */
  upsert?: InputMaybe<Array<CallToActionParentUpsertWithNestedWhereUniqueInput>>;
};

export type CallToActionParentUpdateManyWithNestedWhereInput = {
  Configuration?: InputMaybe<ConfigurationUpdateManyWithNestedWhereInput>;
};

export type CallToActionParentUpdateOneInlineInput = {
  /** Connect existing CallToActionParent document */
  connect?: InputMaybe<CallToActionParentWhereUniqueInput>;
  /** Create and connect one CallToActionParent document */
  create?: InputMaybe<CallToActionParentCreateInput>;
  /** Delete currently connected CallToActionParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CallToActionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CallToActionParent document */
  update?: InputMaybe<CallToActionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToActionParent document */
  upsert?: InputMaybe<CallToActionParentUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionParentUpdateWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
};

export type CallToActionParentUpsertWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionParentWhereInput = {
  Configuration?: InputMaybe<ConfigurationWhereInput>;
};

export type CallToActionParentWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationWhereUniqueInput>;
};

export type CallToActionSettings = Entity & {
  __typename?: 'CallToActionSettings';
  body?: Maybe<RichText>;
  enable: Scalars['Boolean']['output'];
  icon?: Maybe<Asset>;
  iconColor?: Maybe<ThemeColor>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System stage field */
  stage: Stage;
};


export type CallToActionSettingsIconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CallToActionSettingsConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CallToActionSettingsWhereUniqueInput;
};

/** A connection to a list of items. */
export type CallToActionSettingsConnection = {
  __typename?: 'CallToActionSettingsConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CallToActionSettingsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CallToActionSettingsCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  enable: Scalars['Boolean']['input'];
  icon?: InputMaybe<AssetCreateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
};

export type CallToActionSettingsCreateManyInlineInput = {
  /** Create and connect multiple existing CallToActionSettings documents */
  create?: InputMaybe<Array<CallToActionSettingsCreateInput>>;
};

export type CallToActionSettingsCreateOneInlineInput = {
  /** Create and connect one CallToActionSettings document */
  create?: InputMaybe<CallToActionSettingsCreateInput>;
};

export type CallToActionSettingsCreateWithPositionInput = {
  /** Document to create */
  data: CallToActionSettingsCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CallToActionSettingsEdge = {
  __typename?: 'CallToActionSettingsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CallToActionSettings;
};

/** Identifies documents */
export type CallToActionSettingsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  enable_not?: InputMaybe<Scalars['Boolean']['input']>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
};

export enum CallToActionSettingsOrderByInput {
  EnableAsc = 'enable_ASC',
  EnableDesc = 'enable_DESC',
  IconColorAsc = 'iconColor_ASC',
  IconColorDesc = 'iconColor_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type CallToActionSettingsParent = DocsGroup | PageContent;

export type CallToActionSettingsParentConnectInput = {
  DocsGroup?: InputMaybe<DocsGroupConnectInput>;
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type CallToActionSettingsParentCreateInput = {
  DocsGroup?: InputMaybe<DocsGroupCreateInput>;
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type CallToActionSettingsParentCreateManyInlineInput = {
  /** Connect multiple existing CallToActionSettingsParent documents */
  connect?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Create and connect multiple existing CallToActionSettingsParent documents */
  create?: InputMaybe<Array<CallToActionSettingsParentCreateInput>>;
};

export type CallToActionSettingsParentCreateOneInlineInput = {
  /** Connect one existing CallToActionSettingsParent document */
  connect?: InputMaybe<CallToActionSettingsParentWhereUniqueInput>;
  /** Create and connect one CallToActionSettingsParent document */
  create?: InputMaybe<CallToActionSettingsParentCreateInput>;
};

export type CallToActionSettingsParentUpdateInput = {
  DocsGroup?: InputMaybe<DocsGroupUpdateInput>;
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type CallToActionSettingsParentUpdateManyInlineInput = {
  /** Connect multiple existing CallToActionSettingsParent documents */
  connect?: InputMaybe<Array<CallToActionSettingsParentConnectInput>>;
  /** Create and connect multiple CallToActionSettingsParent documents */
  create?: InputMaybe<Array<CallToActionSettingsParentCreateInput>>;
  /** Delete multiple CallToActionSettingsParent documents */
  delete?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Disconnect multiple CallToActionSettingsParent documents */
  disconnect?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CallToActionSettingsParent documents */
  set?: InputMaybe<Array<CallToActionSettingsParentWhereUniqueInput>>;
  /** Update multiple CallToActionSettingsParent documents */
  update?: InputMaybe<Array<CallToActionSettingsParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CallToActionSettingsParent documents */
  upsert?: InputMaybe<Array<CallToActionSettingsParentUpsertWithNestedWhereUniqueInput>>;
};

export type CallToActionSettingsParentUpdateManyWithNestedWhereInput = {
  DocsGroup?: InputMaybe<DocsGroupUpdateManyWithNestedWhereInput>;
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type CallToActionSettingsParentUpdateOneInlineInput = {
  /** Connect existing CallToActionSettingsParent document */
  connect?: InputMaybe<CallToActionSettingsParentWhereUniqueInput>;
  /** Create and connect one CallToActionSettingsParent document */
  create?: InputMaybe<CallToActionSettingsParentCreateInput>;
  /** Delete currently connected CallToActionSettingsParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CallToActionSettingsParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CallToActionSettingsParent document */
  update?: InputMaybe<CallToActionSettingsParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToActionSettingsParent document */
  upsert?: InputMaybe<CallToActionSettingsParentUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsParentUpdateWithNestedWhereUniqueInput = {
  DocsGroup?: InputMaybe<DocsGroupUpdateWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsParentUpsertWithNestedWhereUniqueInput = {
  DocsGroup?: InputMaybe<DocsGroupUpsertWithNestedWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsParentWhereInput = {
  DocsGroup?: InputMaybe<DocsGroupWhereInput>;
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type CallToActionSettingsParentWhereUniqueInput = {
  DocsGroup?: InputMaybe<DocsGroupWhereUniqueInput>;
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type CallToActionSettingsUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  icon?: InputMaybe<AssetUpdateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
};

export type CallToActionSettingsUpdateManyInlineInput = {
  /** Create and connect multiple CallToActionSettings component instances */
  create?: InputMaybe<Array<CallToActionSettingsCreateWithPositionInput>>;
  /** Delete multiple CallToActionSettings documents */
  delete?: InputMaybe<Array<CallToActionSettingsWhereUniqueInput>>;
  /** Update multiple CallToActionSettings component instances */
  update?: InputMaybe<Array<CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CallToActionSettings component instances */
  upsert?: InputMaybe<Array<CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CallToActionSettingsUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  iconColor?: InputMaybe<ThemeColor>;
};

export type CallToActionSettingsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CallToActionSettingsUpdateManyInput;
  /** Document search */
  where: CallToActionSettingsWhereInput;
};

export type CallToActionSettingsUpdateOneInlineInput = {
  /** Create and connect one CallToActionSettings document */
  create?: InputMaybe<CallToActionSettingsCreateInput>;
  /** Delete currently connected CallToActionSettings document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CallToActionSettings document */
  update?: InputMaybe<CallToActionSettingsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToActionSettings document */
  upsert?: InputMaybe<CallToActionSettingsUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CallToActionSettingsUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionSettingsWhereUniqueInput;
};

export type CallToActionSettingsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CallToActionSettingsUpdateInput;
  /** Unique document search */
  where: CallToActionSettingsWhereUniqueInput;
};

export type CallToActionSettingsUpsertInput = {
  /** Create document if it didn't exist */
  create: CallToActionSettingsCreateInput;
  /** Update document if it exists */
  update: CallToActionSettingsUpdateInput;
};

export type CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CallToActionSettingsUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionSettingsWhereUniqueInput;
};

export type CallToActionSettingsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CallToActionSettingsUpsertInput;
  /** Unique document search */
  where: CallToActionSettingsWhereUniqueInput;
};

/** Identifies documents */
export type CallToActionSettingsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionSettingsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  enable_not?: InputMaybe<Scalars['Boolean']['input']>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
};

/** References CallToActionSettings record uniquely */
export type CallToActionSettingsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CallToActionUpdateInput = {
  shown?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CallToActionUpdateManyInlineInput = {
  /** Create and connect multiple CallToAction component instances */
  create?: InputMaybe<Array<CallToActionCreateWithPositionInput>>;
  /** Delete multiple CallToAction documents */
  delete?: InputMaybe<Array<CallToActionWhereUniqueInput>>;
  /** Update multiple CallToAction component instances */
  update?: InputMaybe<Array<CallToActionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CallToAction component instances */
  upsert?: InputMaybe<Array<CallToActionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CallToActionUpdateManyInput = {
  shown?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CallToActionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CallToActionUpdateManyInput;
  /** Document search */
  where: CallToActionWhereInput;
};

export type CallToActionUpdateOneInlineInput = {
  /** Create and connect one CallToAction document */
  create?: InputMaybe<CallToActionCreateInput>;
  /** Delete currently connected CallToAction document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CallToAction document */
  update?: InputMaybe<CallToActionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CallToAction document */
  upsert?: InputMaybe<CallToActionUpsertWithNestedWhereUniqueInput>;
};

export type CallToActionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CallToActionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CallToActionUpdateInput;
  /** Unique document search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpsertInput = {
  /** Create document if it didn't exist */
  create: CallToActionCreateInput;
  /** Update document if it exists */
  update: CallToActionUpdateInput;
};

export type CallToActionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CallToActionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CallToActionWhereUniqueInput;
};

export type CallToActionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CallToActionUpsertInput;
  /** Unique document search */
  where: CallToActionWhereUniqueInput;
};

/** Identifies documents */
export type CallToActionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CallToActionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  shown?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  shown_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  shown_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  shown_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  shown_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  shown_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  shown_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  shown_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References CallToAction record uniquely */
export type CallToActionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Callout = Entity & {
  __typename?: 'Callout';
  body?: Maybe<RichText>;
  button?: Maybe<Button>;
  form?: Maybe<Form>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
};


export type CalloutButtonArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CalloutFormArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CalloutConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CalloutWhereUniqueInput;
};

/** A connection to a list of items. */
export type CalloutConnection = {
  __typename?: 'CalloutConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CalloutEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CalloutCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

export type CalloutCreateManyInlineInput = {
  /** Create and connect multiple existing Callout documents */
  create?: InputMaybe<Array<CalloutCreateInput>>;
};

export type CalloutCreateOneInlineInput = {
  /** Create and connect one Callout document */
  create?: InputMaybe<CalloutCreateInput>;
};

export type CalloutCreateWithPositionInput = {
  /** Document to create */
  data: CalloutCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CalloutEdge = {
  __typename?: 'CalloutEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Callout;
};

/** Identifies documents */
export type CalloutManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CalloutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum CalloutOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CalloutParent = Page;

export type CalloutParentConnectInput = {
  Page?: InputMaybe<PageConnectInput>;
};

export type CalloutParentCreateInput = {
  Page?: InputMaybe<PageCreateInput>;
};

export type CalloutParentCreateManyInlineInput = {
  /** Connect multiple existing CalloutParent documents */
  connect?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Create and connect multiple existing CalloutParent documents */
  create?: InputMaybe<Array<CalloutParentCreateInput>>;
};

export type CalloutParentCreateOneInlineInput = {
  /** Connect one existing CalloutParent document */
  connect?: InputMaybe<CalloutParentWhereUniqueInput>;
  /** Create and connect one CalloutParent document */
  create?: InputMaybe<CalloutParentCreateInput>;
};

export type CalloutParentUpdateInput = {
  Page?: InputMaybe<PageUpdateInput>;
};

export type CalloutParentUpdateManyInlineInput = {
  /** Connect multiple existing CalloutParent documents */
  connect?: InputMaybe<Array<CalloutParentConnectInput>>;
  /** Create and connect multiple CalloutParent documents */
  create?: InputMaybe<Array<CalloutParentCreateInput>>;
  /** Delete multiple CalloutParent documents */
  delete?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Disconnect multiple CalloutParent documents */
  disconnect?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CalloutParent documents */
  set?: InputMaybe<Array<CalloutParentWhereUniqueInput>>;
  /** Update multiple CalloutParent documents */
  update?: InputMaybe<Array<CalloutParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CalloutParent documents */
  upsert?: InputMaybe<Array<CalloutParentUpsertWithNestedWhereUniqueInput>>;
};

export type CalloutParentUpdateManyWithNestedWhereInput = {
  Page?: InputMaybe<PageUpdateManyWithNestedWhereInput>;
};

export type CalloutParentUpdateOneInlineInput = {
  /** Connect existing CalloutParent document */
  connect?: InputMaybe<CalloutParentWhereUniqueInput>;
  /** Create and connect one CalloutParent document */
  create?: InputMaybe<CalloutParentCreateInput>;
  /** Delete currently connected CalloutParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CalloutParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CalloutParent document */
  update?: InputMaybe<CalloutParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CalloutParent document */
  upsert?: InputMaybe<CalloutParentUpsertWithNestedWhereUniqueInput>;
};

export type CalloutParentUpdateWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
};

export type CalloutParentUpsertWithNestedWhereUniqueInput = {
  Page?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type CalloutParentWhereInput = {
  Page?: InputMaybe<PageWhereInput>;
};

export type CalloutParentWhereUniqueInput = {
  Page?: InputMaybe<PageWhereUniqueInput>;
};

export type CalloutUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  form?: InputMaybe<FormUpdateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CalloutUpdateManyInlineInput = {
  /** Create and connect multiple Callout component instances */
  create?: InputMaybe<Array<CalloutCreateWithPositionInput>>;
  /** Delete multiple Callout documents */
  delete?: InputMaybe<Array<CalloutWhereUniqueInput>>;
  /** Update multiple Callout component instances */
  update?: InputMaybe<Array<CalloutUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Callout component instances */
  upsert?: InputMaybe<Array<CalloutUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CalloutUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type CalloutUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CalloutUpdateManyInput;
  /** Document search */
  where: CalloutWhereInput;
};

export type CalloutUpdateOneInlineInput = {
  /** Create and connect one Callout document */
  create?: InputMaybe<CalloutCreateInput>;
  /** Delete currently connected Callout document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Callout document */
  update?: InputMaybe<CalloutUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Callout document */
  upsert?: InputMaybe<CalloutUpsertWithNestedWhereUniqueInput>;
};

export type CalloutUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CalloutUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CalloutWhereUniqueInput;
};

export type CalloutUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CalloutUpdateInput;
  /** Unique document search */
  where: CalloutWhereUniqueInput;
};

export type CalloutUpsertInput = {
  /** Create document if it didn't exist */
  create: CalloutCreateInput;
  /** Update document if it exists */
  update: CalloutUpdateInput;
};

export type CalloutUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CalloutUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CalloutWhereUniqueInput;
};

export type CalloutUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CalloutUpsertInput;
  /** Unique document search */
  where: CalloutWhereUniqueInput;
};

/** Identifies documents */
export type CalloutWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CalloutWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CalloutWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  form?: InputMaybe<FormWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References Callout record uniquely */
export type CalloutWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CheckboxField = Entity & {
  __typename?: 'CheckboxField';
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  multiple: Scalars['Boolean']['output'];
  options: Array<Scalars['String']['output']>;
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
};

export type CheckboxFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CheckboxFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type CheckboxFieldConnection = {
  __typename?: 'CheckboxFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CheckboxFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CheckboxFieldCreateInput = {
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  multiple: Scalars['Boolean']['input'];
  options: Array<Scalars['String']['input']>;
  required: Scalars['Boolean']['input'];
};

export type CheckboxFieldCreateManyInlineInput = {
  /** Create and connect multiple existing CheckboxField documents */
  create?: InputMaybe<Array<CheckboxFieldCreateInput>>;
};

export type CheckboxFieldCreateOneInlineInput = {
  /** Create and connect one CheckboxField document */
  create?: InputMaybe<CheckboxFieldCreateInput>;
};

export type CheckboxFieldCreateWithPositionInput = {
  /** Document to create */
  data: CheckboxFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CheckboxFieldEdge = {
  __typename?: 'CheckboxFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CheckboxField;
};

/** Identifies documents */
export type CheckboxFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum CheckboxFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  MultipleAsc = 'multiple_ASC',
  MultipleDesc = 'multiple_DESC',
  OptionsAsc = 'options_ASC',
  OptionsDesc = 'options_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type CheckboxFieldParent = ContactForm | Form;

export type CheckboxFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type CheckboxFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type CheckboxFieldParentCreateManyInlineInput = {
  /** Connect multiple existing CheckboxFieldParent documents */
  connect?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing CheckboxFieldParent documents */
  create?: InputMaybe<Array<CheckboxFieldParentCreateInput>>;
};

export type CheckboxFieldParentCreateOneInlineInput = {
  /** Connect one existing CheckboxFieldParent document */
  connect?: InputMaybe<CheckboxFieldParentWhereUniqueInput>;
  /** Create and connect one CheckboxFieldParent document */
  create?: InputMaybe<CheckboxFieldParentCreateInput>;
};

export type CheckboxFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type CheckboxFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing CheckboxFieldParent documents */
  connect?: InputMaybe<Array<CheckboxFieldParentConnectInput>>;
  /** Create and connect multiple CheckboxFieldParent documents */
  create?: InputMaybe<Array<CheckboxFieldParentCreateInput>>;
  /** Delete multiple CheckboxFieldParent documents */
  delete?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Disconnect multiple CheckboxFieldParent documents */
  disconnect?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CheckboxFieldParent documents */
  set?: InputMaybe<Array<CheckboxFieldParentWhereUniqueInput>>;
  /** Update multiple CheckboxFieldParent documents */
  update?: InputMaybe<Array<CheckboxFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CheckboxFieldParent documents */
  upsert?: InputMaybe<Array<CheckboxFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type CheckboxFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type CheckboxFieldParentUpdateOneInlineInput = {
  /** Connect existing CheckboxFieldParent document */
  connect?: InputMaybe<CheckboxFieldParentWhereUniqueInput>;
  /** Create and connect one CheckboxFieldParent document */
  create?: InputMaybe<CheckboxFieldParentCreateInput>;
  /** Delete currently connected CheckboxFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CheckboxFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CheckboxFieldParent document */
  update?: InputMaybe<CheckboxFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CheckboxFieldParent document */
  upsert?: InputMaybe<CheckboxFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type CheckboxFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type CheckboxFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type CheckboxFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type CheckboxFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type CheckboxFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CheckboxFieldUpdateManyInlineInput = {
  /** Create and connect multiple CheckboxField component instances */
  create?: InputMaybe<Array<CheckboxFieldCreateWithPositionInput>>;
  /** Delete multiple CheckboxField documents */
  delete?: InputMaybe<Array<CheckboxFieldWhereUniqueInput>>;
  /** Update multiple CheckboxField component instances */
  update?: InputMaybe<Array<CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CheckboxField component instances */
  upsert?: InputMaybe<Array<CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CheckboxFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CheckboxFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CheckboxFieldUpdateManyInput;
  /** Document search */
  where: CheckboxFieldWhereInput;
};

export type CheckboxFieldUpdateOneInlineInput = {
  /** Create and connect one CheckboxField document */
  create?: InputMaybe<CheckboxFieldCreateInput>;
  /** Delete currently connected CheckboxField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CheckboxField document */
  update?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CheckboxField document */
  upsert?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueInput>;
};

export type CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CheckboxFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CheckboxFieldWhereUniqueInput;
};

export type CheckboxFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CheckboxFieldUpdateInput;
  /** Unique document search */
  where: CheckboxFieldWhereUniqueInput;
};

export type CheckboxFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: CheckboxFieldCreateInput;
  /** Update document if it exists */
  update: CheckboxFieldUpdateInput;
};

export type CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CheckboxFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CheckboxFieldWhereUniqueInput;
};

export type CheckboxFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CheckboxFieldUpsertInput;
  /** Unique document search */
  where: CheckboxFieldWhereUniqueInput;
};

/** Identifies documents */
export type CheckboxFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CheckboxFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

/** References CheckboxField record uniquely */
export type CheckboxFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type CloudLocation = Entity & Node & {
  __typename?: 'CloudLocation';
  active: Scalars['Boolean']['output'];
  coordinates: Location;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: Scalars['String']['output'];
  /** Get the document in other stages */
  documentInStages: Array<CloudLocation>;
  /** List of CloudLocation versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  identifier: Scalars['String']['output'];
  name: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  testUrl: Scalars['String']['output'];
  timeout: Scalars['Int']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type CloudLocationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CloudLocationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type CloudLocationHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type CloudLocationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CloudLocationScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CloudLocationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CloudLocationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CloudLocationWhereUniqueInput;
};

/** A connection to a list of items. */
export type CloudLocationConnection = {
  __typename?: 'CloudLocationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CloudLocationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CloudLocationCreateInput = {
  active: Scalars['Boolean']['input'];
  coordinates: LocationInput;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  identifier: Scalars['String']['input'];
  name: Scalars['String']['input'];
  testUrl: Scalars['String']['input'];
  timeout: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CloudLocationCreateManyInlineInput = {
  /** Connect multiple existing CloudLocation documents */
  connect?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Create and connect multiple existing CloudLocation documents */
  create?: InputMaybe<Array<CloudLocationCreateInput>>;
};

export type CloudLocationCreateOneInlineInput = {
  /** Connect one existing CloudLocation document */
  connect?: InputMaybe<CloudLocationWhereUniqueInput>;
  /** Create and connect one CloudLocation document */
  create?: InputMaybe<CloudLocationCreateInput>;
};

/** An edge in a connection. */
export type CloudLocationEdge = {
  __typename?: 'CloudLocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CloudLocation;
};

/** Identifies documents */
export type CloudLocationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  active_not?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  documentInStages_every?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_none?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_some?: InputMaybe<CloudLocationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  identifier?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  identifier_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  identifier_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  identifier_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  identifier_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  identifier_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  identifier_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  identifier_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  identifier_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  identifier_starts_with?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  testUrl?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  testUrl_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  testUrl_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  testUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testUrl_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  testUrl_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  testUrl_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  testUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  testUrl_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  testUrl_starts_with?: InputMaybe<Scalars['String']['input']>;
  timeout?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  timeout_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  timeout_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  timeout_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  timeout_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  timeout_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  timeout_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  timeout_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CloudLocationOrderByInput {
  ActiveAsc = 'active_ASC',
  ActiveDesc = 'active_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IdentifierAsc = 'identifier_ASC',
  IdentifierDesc = 'identifier_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TestUrlAsc = 'testUrl_ASC',
  TestUrlDesc = 'testUrl_DESC',
  TimeoutAsc = 'timeout_ASC',
  TimeoutDesc = 'timeout_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CloudLocationUpdateInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  coordinates?: InputMaybe<LocationInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  identifier?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  testUrl?: InputMaybe<Scalars['String']['input']>;
  timeout?: InputMaybe<Scalars['Int']['input']>;
};

export type CloudLocationUpdateManyInlineInput = {
  /** Connect multiple existing CloudLocation documents */
  connect?: InputMaybe<Array<CloudLocationConnectInput>>;
  /** Create and connect multiple CloudLocation documents */
  create?: InputMaybe<Array<CloudLocationCreateInput>>;
  /** Delete multiple CloudLocation documents */
  delete?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Disconnect multiple CloudLocation documents */
  disconnect?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CloudLocation documents */
  set?: InputMaybe<Array<CloudLocationWhereUniqueInput>>;
  /** Update multiple CloudLocation documents */
  update?: InputMaybe<Array<CloudLocationUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CloudLocation documents */
  upsert?: InputMaybe<Array<CloudLocationUpsertWithNestedWhereUniqueInput>>;
};

export type CloudLocationUpdateManyInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  coordinates?: InputMaybe<LocationInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  identifier?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  testUrl?: InputMaybe<Scalars['String']['input']>;
  timeout?: InputMaybe<Scalars['Int']['input']>;
};

export type CloudLocationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CloudLocationUpdateManyInput;
  /** Document search */
  where: CloudLocationWhereInput;
};

export type CloudLocationUpdateOneInlineInput = {
  /** Connect existing CloudLocation document */
  connect?: InputMaybe<CloudLocationWhereUniqueInput>;
  /** Create and connect one CloudLocation document */
  create?: InputMaybe<CloudLocationCreateInput>;
  /** Delete currently connected CloudLocation document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CloudLocation document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CloudLocation document */
  update?: InputMaybe<CloudLocationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CloudLocation document */
  upsert?: InputMaybe<CloudLocationUpsertWithNestedWhereUniqueInput>;
};

export type CloudLocationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CloudLocationUpdateInput;
  /** Unique document search */
  where: CloudLocationWhereUniqueInput;
};

export type CloudLocationUpsertInput = {
  /** Create document if it didn't exist */
  create: CloudLocationCreateInput;
  /** Update document if it exists */
  update: CloudLocationUpdateInput;
};

export type CloudLocationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CloudLocationUpsertInput;
  /** Unique document search */
  where: CloudLocationWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CloudLocationWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type CloudLocationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CloudLocationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  active_not?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  documentInStages_every?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_none?: InputMaybe<CloudLocationWhereStageInput>;
  documentInStages_some?: InputMaybe<CloudLocationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  identifier?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  identifier_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  identifier_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  identifier_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  identifier_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  identifier_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  identifier_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  identifier_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  identifier_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  identifier_starts_with?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  testUrl?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  testUrl_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  testUrl_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  testUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  testUrl_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  testUrl_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  testUrl_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  testUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  testUrl_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  testUrl_starts_with?: InputMaybe<Scalars['String']['input']>;
  timeout?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  timeout_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  timeout_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  timeout_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  timeout_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  timeout_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  timeout_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  timeout_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CloudLocationWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CloudLocationWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CloudLocationWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CloudLocationWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CloudLocationWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References CloudLocation record uniquely */
export type CloudLocationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color';
  css: Scalars['String']['output'];
  hex: Scalars['Hex']['output'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']['input']>;
  rgba?: InputMaybe<RgbaInput>;
};

export type Configuration = Entity & Node & {
  __typename?: 'Configuration';
  callToAction: CallToAction;
  contactForms: Array<ContactForm>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: Scalars['String']['output'];
  docsGroups: Array<DocsGroup>;
  /** Get the document in other stages */
  documentInStages: Array<Configuration>;
  employees: Array<Employee>;
  errorMessage: Alert;
  footerGroups: Array<FooterGroup>;
  headerGroups: Array<HeaderGroup>;
  /** List of Configuration versions */
  history: Array<Version>;
  hqAddress: Scalars['String']['output'];
  hqCoordinates: Location;
  hqMapInfo: RichText;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  openMapsText: Scalars['String']['output'];
  organizationName: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slogan: Scalars['String']['output'];
  socialLinks: Array<SocialLink>;
  /** System stage field */
  stage: Stage;
  statusUrl: Scalars['String']['output'];
  subscribe?: Maybe<Form>;
  testimonials: Array<Testimonial>;
  theme?: Maybe<Theme>;
  title: Scalars['String']['output'];
  titleOverrides: Array<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ConfigurationCallToActionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationContactFormsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ContactFormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContactFormWhereInput>;
};


export type ConfigurationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationDocsGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type ConfigurationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ConfigurationEmployeesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EmployeeWhereInput>;
};


export type ConfigurationErrorMessageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationFooterGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FooterGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FooterGroupWhereInput>;
};


export type ConfigurationHeaderGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HeaderGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HeaderGroupWhereInput>;
};


export type ConfigurationHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ConfigurationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ConfigurationSocialLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SocialLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SocialLinkWhereInput>;
};


export type ConfigurationSubscribeArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationTestimonialsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type ConfigurationThemeArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigurationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ConfigurationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ConfigurationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ConfigurationConnection = {
  __typename?: 'ConfigurationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ConfigurationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ConfigurationCreateInput = {
  callToAction: CallToActionCreateOneInlineInput;
  contactForms?: InputMaybe<ContactFormCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  docsGroups?: InputMaybe<DocsGroupCreateManyInlineInput>;
  employees?: InputMaybe<EmployeeCreateManyInlineInput>;
  errorMessage: AlertCreateOneInlineInput;
  footerGroups?: InputMaybe<FooterGroupCreateManyInlineInput>;
  headerGroups?: InputMaybe<HeaderGroupCreateManyInlineInput>;
  hqAddress: Scalars['String']['input'];
  hqCoordinates: LocationInput;
  hqMapInfo: Scalars['RichTextAST']['input'];
  openMapsText: Scalars['String']['input'];
  organizationName: Scalars['String']['input'];
  slogan: Scalars['String']['input'];
  socialLinks?: InputMaybe<SocialLinkCreateManyInlineInput>;
  statusUrl: Scalars['String']['input'];
  subscribe?: InputMaybe<FormCreateOneInlineInput>;
  testimonials?: InputMaybe<TestimonialCreateManyInlineInput>;
  theme?: InputMaybe<ThemeCreateOneInlineInput>;
  title: Scalars['String']['input'];
  titleOverrides: Array<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ConfigurationCreateManyInlineInput = {
  /** Connect multiple existing Configuration documents */
  connect?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Create and connect multiple existing Configuration documents */
  create?: InputMaybe<Array<ConfigurationCreateInput>>;
};

export type ConfigurationCreateOneInlineInput = {
  /** Connect one existing Configuration document */
  connect?: InputMaybe<ConfigurationWhereUniqueInput>;
  /** Create and connect one Configuration document */
  create?: InputMaybe<ConfigurationCreateInput>;
};

/** An edge in a connection. */
export type ConfigurationEdge = {
  __typename?: 'ConfigurationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Configuration;
};

/** Identifies documents */
export type ConfigurationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  callToAction?: InputMaybe<CallToActionWhereInput>;
  contactForms_every?: InputMaybe<ContactFormWhereInput>;
  contactForms_none?: InputMaybe<ContactFormWhereInput>;
  contactForms_some?: InputMaybe<ContactFormWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  docsGroups_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigurationWhereStageInput>;
  employees_every?: InputMaybe<EmployeeWhereInput>;
  employees_none?: InputMaybe<EmployeeWhereInput>;
  employees_some?: InputMaybe<EmployeeWhereInput>;
  errorMessage?: InputMaybe<AlertWhereInput>;
  footerGroups_every?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_none?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_some?: InputMaybe<FooterGroupWhereInput>;
  headerGroups_every?: InputMaybe<HeaderGroupWhereInput>;
  headerGroups_none?: InputMaybe<HeaderGroupWhereInput>;
  headerGroups_some?: InputMaybe<HeaderGroupWhereInput>;
  hqAddress?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  hqAddress_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  hqAddress_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  hqAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  hqAddress_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  hqAddress_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  hqAddress_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  hqAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  hqAddress_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  hqAddress_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  openMapsText?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  openMapsText_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  openMapsText_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  openMapsText_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  openMapsText_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  openMapsText_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  openMapsText_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  openMapsText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  openMapsText_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  openMapsText_starts_with?: InputMaybe<Scalars['String']['input']>;
  organizationName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  organizationName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  organizationName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  organizationName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  organizationName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  organizationName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  organizationName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  organizationName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  organizationName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  organizationName_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slogan?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slogan_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slogan_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slogan_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slogan_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slogan_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slogan_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slogan_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slogan_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slogan_starts_with?: InputMaybe<Scalars['String']['input']>;
  socialLinks_every?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_none?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_some?: InputMaybe<SocialLinkWhereInput>;
  statusUrl?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  statusUrl_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  statusUrl_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  statusUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  statusUrl_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  statusUrl_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  statusUrl_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  statusUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  statusUrl_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  statusUrl_starts_with?: InputMaybe<Scalars['String']['input']>;
  subscribe?: InputMaybe<FormWhereInput>;
  testimonials_every?: InputMaybe<TestimonialWhereInput>;
  testimonials_none?: InputMaybe<TestimonialWhereInput>;
  testimonials_some?: InputMaybe<TestimonialWhereInput>;
  theme?: InputMaybe<ThemeWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  titleOverrides?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  titleOverrides_contains_all?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  titleOverrides_contains_none?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  titleOverrides_contains_some?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  titleOverrides_not?: InputMaybe<Array<Scalars['String']['input']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ConfigurationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  HqAddressAsc = 'hqAddress_ASC',
  HqAddressDesc = 'hqAddress_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OpenMapsTextAsc = 'openMapsText_ASC',
  OpenMapsTextDesc = 'openMapsText_DESC',
  OrganizationNameAsc = 'organizationName_ASC',
  OrganizationNameDesc = 'organizationName_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SloganAsc = 'slogan_ASC',
  SloganDesc = 'slogan_DESC',
  StatusUrlAsc = 'statusUrl_ASC',
  StatusUrlDesc = 'statusUrl_DESC',
  TitleOverridesAsc = 'titleOverrides_ASC',
  TitleOverridesDesc = 'titleOverrides_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ConfigurationUpdateInput = {
  callToAction?: InputMaybe<CallToActionUpdateOneInlineInput>;
  contactForms?: InputMaybe<ContactFormUpdateManyInlineInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  docsGroups?: InputMaybe<DocsGroupUpdateManyInlineInput>;
  employees?: InputMaybe<EmployeeUpdateManyInlineInput>;
  errorMessage?: InputMaybe<AlertUpdateOneInlineInput>;
  footerGroups?: InputMaybe<FooterGroupUpdateManyInlineInput>;
  headerGroups?: InputMaybe<HeaderGroupUpdateManyInlineInput>;
  hqAddress?: InputMaybe<Scalars['String']['input']>;
  hqCoordinates?: InputMaybe<LocationInput>;
  hqMapInfo?: InputMaybe<Scalars['RichTextAST']['input']>;
  openMapsText?: InputMaybe<Scalars['String']['input']>;
  organizationName?: InputMaybe<Scalars['String']['input']>;
  slogan?: InputMaybe<Scalars['String']['input']>;
  socialLinks?: InputMaybe<SocialLinkUpdateManyInlineInput>;
  statusUrl?: InputMaybe<Scalars['String']['input']>;
  subscribe?: InputMaybe<FormUpdateOneInlineInput>;
  testimonials?: InputMaybe<TestimonialUpdateManyInlineInput>;
  theme?: InputMaybe<ThemeUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  titleOverrides?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ConfigurationUpdateManyInlineInput = {
  /** Connect multiple existing Configuration documents */
  connect?: InputMaybe<Array<ConfigurationConnectInput>>;
  /** Create and connect multiple Configuration documents */
  create?: InputMaybe<Array<ConfigurationCreateInput>>;
  /** Delete multiple Configuration documents */
  delete?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Disconnect multiple Configuration documents */
  disconnect?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Configuration documents */
  set?: InputMaybe<Array<ConfigurationWhereUniqueInput>>;
  /** Update multiple Configuration documents */
  update?: InputMaybe<Array<ConfigurationUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Configuration documents */
  upsert?: InputMaybe<Array<ConfigurationUpsertWithNestedWhereUniqueInput>>;
};

export type ConfigurationUpdateManyInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  hqAddress?: InputMaybe<Scalars['String']['input']>;
  hqCoordinates?: InputMaybe<LocationInput>;
  hqMapInfo?: InputMaybe<Scalars['RichTextAST']['input']>;
  openMapsText?: InputMaybe<Scalars['String']['input']>;
  organizationName?: InputMaybe<Scalars['String']['input']>;
  slogan?: InputMaybe<Scalars['String']['input']>;
  statusUrl?: InputMaybe<Scalars['String']['input']>;
  titleOverrides?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ConfigurationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ConfigurationUpdateManyInput;
  /** Document search */
  where: ConfigurationWhereInput;
};

export type ConfigurationUpdateOneInlineInput = {
  /** Connect existing Configuration document */
  connect?: InputMaybe<ConfigurationWhereUniqueInput>;
  /** Create and connect one Configuration document */
  create?: InputMaybe<ConfigurationCreateInput>;
  /** Delete currently connected Configuration document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Configuration document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Configuration document */
  update?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Configuration document */
  upsert?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
};

export type ConfigurationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ConfigurationUpdateInput;
  /** Unique document search */
  where: ConfigurationWhereUniqueInput;
};

export type ConfigurationUpsertInput = {
  /** Create document if it didn't exist */
  create: ConfigurationCreateInput;
  /** Update document if it exists */
  update: ConfigurationUpdateInput;
};

export type ConfigurationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ConfigurationUpsertInput;
  /** Unique document search */
  where: ConfigurationWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ConfigurationWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ConfigurationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigurationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  callToAction?: InputMaybe<CallToActionWhereInput>;
  contactForms_every?: InputMaybe<ContactFormWhereInput>;
  contactForms_none?: InputMaybe<ContactFormWhereInput>;
  contactForms_some?: InputMaybe<ContactFormWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  docsGroups_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroups_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigurationWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigurationWhereStageInput>;
  employees_every?: InputMaybe<EmployeeWhereInput>;
  employees_none?: InputMaybe<EmployeeWhereInput>;
  employees_some?: InputMaybe<EmployeeWhereInput>;
  errorMessage?: InputMaybe<AlertWhereInput>;
  footerGroups_every?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_none?: InputMaybe<FooterGroupWhereInput>;
  footerGroups_some?: InputMaybe<FooterGroupWhereInput>;
  headerGroups_every?: InputMaybe<HeaderGroupWhereInput>;
  headerGroups_none?: InputMaybe<HeaderGroupWhereInput>;
  headerGroups_some?: InputMaybe<HeaderGroupWhereInput>;
  hqAddress?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  hqAddress_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  hqAddress_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  hqAddress_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  hqAddress_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  hqAddress_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  hqAddress_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  hqAddress_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  hqAddress_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  hqAddress_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  openMapsText?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  openMapsText_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  openMapsText_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  openMapsText_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  openMapsText_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  openMapsText_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  openMapsText_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  openMapsText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  openMapsText_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  openMapsText_starts_with?: InputMaybe<Scalars['String']['input']>;
  organizationName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  organizationName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  organizationName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  organizationName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  organizationName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  organizationName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  organizationName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  organizationName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  organizationName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  organizationName_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slogan?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slogan_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slogan_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slogan_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slogan_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slogan_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slogan_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slogan_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slogan_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slogan_starts_with?: InputMaybe<Scalars['String']['input']>;
  socialLinks_every?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_none?: InputMaybe<SocialLinkWhereInput>;
  socialLinks_some?: InputMaybe<SocialLinkWhereInput>;
  statusUrl?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  statusUrl_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  statusUrl_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  statusUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  statusUrl_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  statusUrl_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  statusUrl_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  statusUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  statusUrl_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  statusUrl_starts_with?: InputMaybe<Scalars['String']['input']>;
  subscribe?: InputMaybe<FormWhereInput>;
  testimonials_every?: InputMaybe<TestimonialWhereInput>;
  testimonials_none?: InputMaybe<TestimonialWhereInput>;
  testimonials_some?: InputMaybe<TestimonialWhereInput>;
  theme?: InputMaybe<ThemeWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  titleOverrides?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  titleOverrides_contains_all?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  titleOverrides_contains_none?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  titleOverrides_contains_some?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  titleOverrides_not?: InputMaybe<Array<Scalars['String']['input']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ConfigurationWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigurationWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigurationWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigurationWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ConfigurationWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Configuration record uniquely */
export type ConfigurationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']['input']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']['input']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']['input']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ContactForm = Entity & Node & {
  __typename?: 'ContactForm';
  body: RichText;
  button: Button;
  color: ThemeColor;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ContactForm>;
  fields: Array<ContactFormfieldsUnion>;
  /** List of ContactForm versions */
  history: Array<Version>;
  icon: Asset;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ContactFormButtonArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ContactFormFieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type ContactFormHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ContactFormIconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContactFormScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ContactFormUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ContactFormConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContactFormWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContactFormConnection = {
  __typename?: 'ContactFormConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContactFormEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContactFormCreateInput = {
  body: Scalars['RichTextAST']['input'];
  button: ButtonCreateOneInlineInput;
  cl946yxav4qo701tcbhuw0z3j?: InputMaybe<ConfigurationCreateManyInlineInput>;
  color: ThemeColor;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  fields?: InputMaybe<ContactFormfieldsUnionCreateManyInlineInput>;
  icon: AssetCreateOneInlineInput;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ContactFormCreateManyInlineInput = {
  /** Connect multiple existing ContactForm documents */
  connect?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Create and connect multiple existing ContactForm documents */
  create?: InputMaybe<Array<ContactFormCreateInput>>;
};

export type ContactFormCreateOneInlineInput = {
  /** Connect one existing ContactForm document */
  connect?: InputMaybe<ContactFormWhereUniqueInput>;
  /** Create and connect one ContactForm document */
  create?: InputMaybe<ContactFormCreateInput>;
};

/** An edge in a connection. */
export type ContactFormEdge = {
  __typename?: 'ContactFormEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ContactForm;
};

/** Identifies documents */
export type ContactFormManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  color?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  color_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  color_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  color_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_none?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_some?: InputMaybe<ContactFormWhereStageInput>;
  /** All values in which the union is empty. */
  fields_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  fields_some?: InputMaybe<ContactFormfieldsUnionWhereInput>;
  icon?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ContactFormOrderByInput {
  ColorAsc = 'color_ASC',
  ColorDesc = 'color_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ContactFormUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  cl946yxav4qo701tcbhuw0z3j?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  color?: InputMaybe<ThemeColor>;
  fields?: InputMaybe<ContactFormfieldsUnionUpdateManyInlineInput>;
  icon?: InputMaybe<AssetUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ContactFormUpdateManyInlineInput = {
  /** Connect multiple existing ContactForm documents */
  connect?: InputMaybe<Array<ContactFormConnectInput>>;
  /** Create and connect multiple ContactForm documents */
  create?: InputMaybe<Array<ContactFormCreateInput>>;
  /** Delete multiple ContactForm documents */
  delete?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Disconnect multiple ContactForm documents */
  disconnect?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ContactForm documents */
  set?: InputMaybe<Array<ContactFormWhereUniqueInput>>;
  /** Update multiple ContactForm documents */
  update?: InputMaybe<Array<ContactFormUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ContactForm documents */
  upsert?: InputMaybe<Array<ContactFormUpsertWithNestedWhereUniqueInput>>;
};

export type ContactFormUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  color?: InputMaybe<ThemeColor>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ContactFormUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContactFormUpdateManyInput;
  /** Document search */
  where: ContactFormWhereInput;
};

export type ContactFormUpdateOneInlineInput = {
  /** Connect existing ContactForm document */
  connect?: InputMaybe<ContactFormWhereUniqueInput>;
  /** Create and connect one ContactForm document */
  create?: InputMaybe<ContactFormCreateInput>;
  /** Delete currently connected ContactForm document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ContactForm document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ContactForm document */
  update?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContactForm document */
  upsert?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContactFormUpdateInput;
  /** Unique document search */
  where: ContactFormWhereUniqueInput;
};

export type ContactFormUpsertInput = {
  /** Create document if it didn't exist */
  create: ContactFormCreateInput;
  /** Update document if it exists */
  update: ContactFormUpdateInput;
};

export type ContactFormUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContactFormUpsertInput;
  /** Unique document search */
  where: ContactFormWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ContactFormWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ContactFormWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  color?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  color_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  color_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  color_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_none?: InputMaybe<ContactFormWhereStageInput>;
  documentInStages_some?: InputMaybe<ContactFormWhereStageInput>;
  /** All values in which the union is empty. */
  fields_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  fields_some?: InputMaybe<ContactFormfieldsUnionWhereInput>;
  icon?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ContactFormWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContactFormWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContactFormWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContactFormWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ContactFormWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ContactForm record uniquely */
export type ContactFormWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ContactFormfieldsUnion = CheckboxField | FormButton | SelectField | TextAreaField | TextInputField;

export type ContactFormfieldsUnionConnectInput = {
  CheckboxField?: InputMaybe<CheckboxFieldConnectInput>;
  FormButton?: InputMaybe<FormButtonConnectInput>;
  SelectField?: InputMaybe<SelectFieldConnectInput>;
  TextAreaField?: InputMaybe<TextAreaFieldConnectInput>;
  TextInputField?: InputMaybe<TextInputFieldConnectInput>;
};

export type ContactFormfieldsUnionCreateInput = {
  CheckboxField?: InputMaybe<CheckboxFieldCreateInput>;
  FormButton?: InputMaybe<FormButtonCreateInput>;
  SelectField?: InputMaybe<SelectFieldCreateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateInput>;
};

export type ContactFormfieldsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing ContactFormfieldsUnion documents */
  create?: InputMaybe<Array<ContactFormfieldsUnionCreateInput>>;
};

export type ContactFormfieldsUnionCreateOneInlineInput = {
  /** Create and connect one ContactFormfieldsUnion document */
  create?: InputMaybe<ContactFormfieldsUnionCreateInput>;
};

export type ContactFormfieldsUnionCreateWithPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldCreateWithPositionInput>;
  FormButton?: InputMaybe<FormButtonCreateWithPositionInput>;
  SelectField?: InputMaybe<SelectFieldCreateWithPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateWithPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateWithPositionInput>;
};

export type ContactFormfieldsUnionUpdateInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateInput>;
  FormButton?: InputMaybe<FormButtonUpdateInput>;
  SelectField?: InputMaybe<SelectFieldUpdateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateInput>;
};

export type ContactFormfieldsUnionUpdateManyInlineInput = {
  /** Create and connect multiple ContactFormfieldsUnion component instances */
  create?: InputMaybe<Array<ContactFormfieldsUnionCreateWithPositionInput>>;
  /** Delete multiple ContactFormfieldsUnion documents */
  delete?: InputMaybe<Array<ContactFormfieldsUnionWhereUniqueInput>>;
  /** Update multiple ContactFormfieldsUnion component instances */
  update?: InputMaybe<Array<ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ContactFormfieldsUnion component instances */
  upsert?: InputMaybe<Array<ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ContactFormfieldsUnionUpdateManyWithNestedWhereInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateManyWithNestedWhereInput>;
  FormButton?: InputMaybe<FormButtonUpdateManyWithNestedWhereInput>;
  SelectField?: InputMaybe<SelectFieldUpdateManyWithNestedWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateManyWithNestedWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateManyWithNestedWhereInput>;
};

export type ContactFormfieldsUnionUpdateOneInlineInput = {
  /** Create and connect one ContactFormfieldsUnion document */
  create?: InputMaybe<ContactFormfieldsUnionCreateInput>;
  /** Delete currently connected ContactFormfieldsUnion document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ContactFormfieldsUnion document */
  update?: InputMaybe<ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContactFormfieldsUnion document */
  upsert?: InputMaybe<ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  FormButton?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueInput>;
};

export type ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  FormButton?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueInput>;
};

export type ContactFormfieldsUnionWhereInput = {
  CheckboxField?: InputMaybe<CheckboxFieldWhereInput>;
  FormButton?: InputMaybe<FormButtonWhereInput>;
  SelectField?: InputMaybe<SelectFieldWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereInput>;
};

export type ContactFormfieldsUnionWhereUniqueInput = {
  CheckboxField?: InputMaybe<CheckboxFieldWhereUniqueInput>;
  FormButton?: InputMaybe<FormButtonWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereUniqueInput>;
};

export type ContentButton = Entity & Node & {
  __typename?: 'ContentButton';
  colorScheme?: Maybe<ThemeColor>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ContentButton>;
  /** List of ContentButton versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  link: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** Only applies for external links */
  showIcon: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
  text: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  variant?: Maybe<ButtonVariant>;
};


export type ContentButtonCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContentButtonDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ContentButtonHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ContentButtonPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContentButtonScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ContentButtonUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ContentButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContentButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContentButtonConnection = {
  __typename?: 'ContentButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContentButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContentButtonCreateInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  link: Scalars['String']['input'];
  showIcon: Scalars['Boolean']['input'];
  text: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ContentButtonCreateManyInlineInput = {
  /** Connect multiple existing ContentButton documents */
  connect?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Create and connect multiple existing ContentButton documents */
  create?: InputMaybe<Array<ContentButtonCreateInput>>;
};

export type ContentButtonCreateOneInlineInput = {
  /** Connect one existing ContentButton document */
  connect?: InputMaybe<ContentButtonWhereUniqueInput>;
  /** Create and connect one ContentButton document */
  create?: InputMaybe<ContentButtonCreateInput>;
};

/** An edge in a connection. */
export type ContentButtonEdge = {
  __typename?: 'ContentButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ContentButton;
};

/** Identifies documents */
export type ContentButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_none?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_some?: InputMaybe<ContentButtonWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  text_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** Any other value that exists and is not equal to the given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

export enum ContentButtonOrderByInput {
  ColorSchemeAsc = 'colorScheme_ASC',
  ColorSchemeDesc = 'colorScheme_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShowIconAsc = 'showIcon_ASC',
  ShowIconDesc = 'showIcon_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VariantAsc = 'variant_ASC',
  VariantDesc = 'variant_DESC'
}

export type ContentButtonUpdateInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  link?: InputMaybe<Scalars['String']['input']>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ContentButtonUpdateManyInlineInput = {
  /** Connect multiple existing ContentButton documents */
  connect?: InputMaybe<Array<ContentButtonConnectInput>>;
  /** Create and connect multiple ContentButton documents */
  create?: InputMaybe<Array<ContentButtonCreateInput>>;
  /** Delete multiple ContentButton documents */
  delete?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Disconnect multiple ContentButton documents */
  disconnect?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ContentButton documents */
  set?: InputMaybe<Array<ContentButtonWhereUniqueInput>>;
  /** Update multiple ContentButton documents */
  update?: InputMaybe<Array<ContentButtonUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ContentButton documents */
  upsert?: InputMaybe<Array<ContentButtonUpsertWithNestedWhereUniqueInput>>;
};

export type ContentButtonUpdateManyInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  link?: InputMaybe<Scalars['String']['input']>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type ContentButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContentButtonUpdateManyInput;
  /** Document search */
  where: ContentButtonWhereInput;
};

export type ContentButtonUpdateOneInlineInput = {
  /** Connect existing ContentButton document */
  connect?: InputMaybe<ContentButtonWhereUniqueInput>;
  /** Create and connect one ContentButton document */
  create?: InputMaybe<ContentButtonCreateInput>;
  /** Delete currently connected ContentButton document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ContentButton document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ContentButton document */
  update?: InputMaybe<ContentButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContentButton document */
  upsert?: InputMaybe<ContentButtonUpsertWithNestedWhereUniqueInput>;
};

export type ContentButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContentButtonUpdateInput;
  /** Unique document search */
  where: ContentButtonWhereUniqueInput;
};

export type ContentButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: ContentButtonCreateInput;
  /** Update document if it exists */
  update: ContentButtonUpdateInput;
};

export type ContentButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContentButtonUpsertInput;
  /** Unique document search */
  where: ContentButtonWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ContentButtonWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ContentButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_none?: InputMaybe<ContentButtonWhereStageInput>;
  documentInStages_some?: InputMaybe<ContentButtonWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  text_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** Any other value that exists and is not equal to the given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ContentButtonWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentButtonWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentButtonWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentButtonWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ContentButtonWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ContentButton record uniquely */
export type ContentButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ContentTag = Entity & Node & {
  __typename?: 'ContentTag';
  blogPosts: Array<BlogPost>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ContentTag>;
  documents: Array<Document>;
  /** List of ContentTag versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  tag: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ContentTagBlogPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BlogPostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogPostWhereInput>;
};


export type ContentTagCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContentTagDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ContentTagDocumentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocumentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentWhereInput>;
};


export type ContentTagHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ContentTagPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ContentTagScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ContentTagUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ContentTagConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ContentTagWhereUniqueInput;
};

/** A connection to a list of items. */
export type ContentTagConnection = {
  __typename?: 'ContentTagConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ContentTagEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ContentTagCreateInput = {
  blogPosts?: InputMaybe<BlogPostCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  documents?: InputMaybe<DocumentCreateManyInlineInput>;
  tag: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ContentTagCreateManyInlineInput = {
  /** Connect multiple existing ContentTag documents */
  connect?: InputMaybe<Array<ContentTagWhereUniqueInput>>;
  /** Create and connect multiple existing ContentTag documents */
  create?: InputMaybe<Array<ContentTagCreateInput>>;
};

export type ContentTagCreateOneInlineInput = {
  /** Connect one existing ContentTag document */
  connect?: InputMaybe<ContentTagWhereUniqueInput>;
  /** Create and connect one ContentTag document */
  create?: InputMaybe<ContentTagCreateInput>;
};

/** An edge in a connection. */
export type ContentTagEdge = {
  __typename?: 'ContentTagEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ContentTag;
};

/** Identifies documents */
export type ContentTagManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  blogPosts_every?: InputMaybe<BlogPostWhereInput>;
  blogPosts_none?: InputMaybe<BlogPostWhereInput>;
  blogPosts_some?: InputMaybe<BlogPostWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContentTagWhereStageInput>;
  documentInStages_none?: InputMaybe<ContentTagWhereStageInput>;
  documentInStages_some?: InputMaybe<ContentTagWhereStageInput>;
  documents_every?: InputMaybe<DocumentWhereInput>;
  documents_none?: InputMaybe<DocumentWhereInput>;
  documents_some?: InputMaybe<DocumentWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  tag?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  tag_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  tag_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  tag_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tag_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  tag_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  tag_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  tag_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  tag_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  tag_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ContentTagOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TagAsc = 'tag_ASC',
  TagDesc = 'tag_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ContentTagUpdateInput = {
  blogPosts?: InputMaybe<BlogPostUpdateManyInlineInput>;
  documents?: InputMaybe<DocumentUpdateManyInlineInput>;
  tag?: InputMaybe<Scalars['String']['input']>;
};

export type ContentTagUpdateManyInlineInput = {
  /** Connect multiple existing ContentTag documents */
  connect?: InputMaybe<Array<ContentTagConnectInput>>;
  /** Create and connect multiple ContentTag documents */
  create?: InputMaybe<Array<ContentTagCreateInput>>;
  /** Delete multiple ContentTag documents */
  delete?: InputMaybe<Array<ContentTagWhereUniqueInput>>;
  /** Disconnect multiple ContentTag documents */
  disconnect?: InputMaybe<Array<ContentTagWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ContentTag documents */
  set?: InputMaybe<Array<ContentTagWhereUniqueInput>>;
  /** Update multiple ContentTag documents */
  update?: InputMaybe<Array<ContentTagUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ContentTag documents */
  upsert?: InputMaybe<Array<ContentTagUpsertWithNestedWhereUniqueInput>>;
};

export type ContentTagUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type ContentTagUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ContentTagUpdateManyInput;
  /** Document search */
  where: ContentTagWhereInput;
};

export type ContentTagUpdateOneInlineInput = {
  /** Connect existing ContentTag document */
  connect?: InputMaybe<ContentTagWhereUniqueInput>;
  /** Create and connect one ContentTag document */
  create?: InputMaybe<ContentTagCreateInput>;
  /** Delete currently connected ContentTag document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ContentTag document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ContentTag document */
  update?: InputMaybe<ContentTagUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ContentTag document */
  upsert?: InputMaybe<ContentTagUpsertWithNestedWhereUniqueInput>;
};

export type ContentTagUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ContentTagUpdateInput;
  /** Unique document search */
  where: ContentTagWhereUniqueInput;
};

export type ContentTagUpsertInput = {
  /** Create document if it didn't exist */
  create: ContentTagCreateInput;
  /** Update document if it exists */
  update: ContentTagUpdateInput;
};

export type ContentTagUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ContentTagUpsertInput;
  /** Unique document search */
  where: ContentTagWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ContentTagWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ContentTagWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentTagWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  blogPosts_every?: InputMaybe<BlogPostWhereInput>;
  blogPosts_none?: InputMaybe<BlogPostWhereInput>;
  blogPosts_some?: InputMaybe<BlogPostWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ContentTagWhereStageInput>;
  documentInStages_none?: InputMaybe<ContentTagWhereStageInput>;
  documentInStages_some?: InputMaybe<ContentTagWhereStageInput>;
  documents_every?: InputMaybe<DocumentWhereInput>;
  documents_none?: InputMaybe<DocumentWhereInput>;
  documents_some?: InputMaybe<DocumentWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  tag?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  tag_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  tag_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  tag_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tag_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  tag_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  tag_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  tag_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  tag_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  tag_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ContentTagWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ContentTagWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ContentTagWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ContentTagWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ContentTagWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ContentTag record uniquely */
export type ContentTagWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  tag?: InputMaybe<Scalars['String']['input']>;
};

export type CurrencyField = Entity & {
  __typename?: 'CurrencyField';
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
  unitSymbol: Scalars['String']['output'];
};

export type CurrencyFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CurrencyFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type CurrencyFieldConnection = {
  __typename?: 'CurrencyFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CurrencyFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CurrencyFieldCreateInput = {
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  required: Scalars['Boolean']['input'];
  unitSymbol: Scalars['String']['input'];
};

export type CurrencyFieldCreateManyInlineInput = {
  /** Create and connect multiple existing CurrencyField documents */
  create?: InputMaybe<Array<CurrencyFieldCreateInput>>;
};

export type CurrencyFieldCreateOneInlineInput = {
  /** Create and connect one CurrencyField document */
  create?: InputMaybe<CurrencyFieldCreateInput>;
};

export type CurrencyFieldCreateWithPositionInput = {
  /** Document to create */
  data: CurrencyFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CurrencyFieldEdge = {
  __typename?: 'CurrencyFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: CurrencyField;
};

/** Identifies documents */
export type CurrencyFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CurrencyFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CurrencyFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CurrencyFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
  unitSymbol?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  unitSymbol_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  unitSymbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  unitSymbol_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  unitSymbol_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  unitSymbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  unitSymbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  unitSymbol_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  unitSymbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  unitSymbol_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum CurrencyFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC',
  UnitSymbolAsc = 'unitSymbol_ASC',
  UnitSymbolDesc = 'unitSymbol_DESC'
}

export type CurrencyFieldParent = Form;

export type CurrencyFieldParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
};

export type CurrencyFieldParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
};

export type CurrencyFieldParentCreateManyInlineInput = {
  /** Connect multiple existing CurrencyFieldParent documents */
  connect?: InputMaybe<Array<CurrencyFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing CurrencyFieldParent documents */
  create?: InputMaybe<Array<CurrencyFieldParentCreateInput>>;
};

export type CurrencyFieldParentCreateOneInlineInput = {
  /** Connect one existing CurrencyFieldParent document */
  connect?: InputMaybe<CurrencyFieldParentWhereUniqueInput>;
  /** Create and connect one CurrencyFieldParent document */
  create?: InputMaybe<CurrencyFieldParentCreateInput>;
};

export type CurrencyFieldParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
};

export type CurrencyFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing CurrencyFieldParent documents */
  connect?: InputMaybe<Array<CurrencyFieldParentConnectInput>>;
  /** Create and connect multiple CurrencyFieldParent documents */
  create?: InputMaybe<Array<CurrencyFieldParentCreateInput>>;
  /** Delete multiple CurrencyFieldParent documents */
  delete?: InputMaybe<Array<CurrencyFieldParentWhereUniqueInput>>;
  /** Disconnect multiple CurrencyFieldParent documents */
  disconnect?: InputMaybe<Array<CurrencyFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CurrencyFieldParent documents */
  set?: InputMaybe<Array<CurrencyFieldParentWhereUniqueInput>>;
  /** Update multiple CurrencyFieldParent documents */
  update?: InputMaybe<Array<CurrencyFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CurrencyFieldParent documents */
  upsert?: InputMaybe<Array<CurrencyFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type CurrencyFieldParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type CurrencyFieldParentUpdateOneInlineInput = {
  /** Connect existing CurrencyFieldParent document */
  connect?: InputMaybe<CurrencyFieldParentWhereUniqueInput>;
  /** Create and connect one CurrencyFieldParent document */
  create?: InputMaybe<CurrencyFieldParentCreateInput>;
  /** Delete currently connected CurrencyFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected CurrencyFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CurrencyFieldParent document */
  update?: InputMaybe<CurrencyFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CurrencyFieldParent document */
  upsert?: InputMaybe<CurrencyFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type CurrencyFieldParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type CurrencyFieldParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type CurrencyFieldParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
};

export type CurrencyFieldParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type CurrencyFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  unitSymbol?: InputMaybe<Scalars['String']['input']>;
};

export type CurrencyFieldUpdateManyInlineInput = {
  /** Create and connect multiple CurrencyField component instances */
  create?: InputMaybe<Array<CurrencyFieldCreateWithPositionInput>>;
  /** Delete multiple CurrencyField documents */
  delete?: InputMaybe<Array<CurrencyFieldWhereUniqueInput>>;
  /** Update multiple CurrencyField component instances */
  update?: InputMaybe<Array<CurrencyFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CurrencyField component instances */
  upsert?: InputMaybe<Array<CurrencyFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CurrencyFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  unitSymbol?: InputMaybe<Scalars['String']['input']>;
};

export type CurrencyFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CurrencyFieldUpdateManyInput;
  /** Document search */
  where: CurrencyFieldWhereInput;
};

export type CurrencyFieldUpdateOneInlineInput = {
  /** Create and connect one CurrencyField document */
  create?: InputMaybe<CurrencyFieldCreateInput>;
  /** Delete currently connected CurrencyField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single CurrencyField document */
  update?: InputMaybe<CurrencyFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CurrencyField document */
  upsert?: InputMaybe<CurrencyFieldUpsertWithNestedWhereUniqueInput>;
};

export type CurrencyFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CurrencyFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CurrencyFieldWhereUniqueInput;
};

export type CurrencyFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CurrencyFieldUpdateInput;
  /** Unique document search */
  where: CurrencyFieldWhereUniqueInput;
};

export type CurrencyFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: CurrencyFieldCreateInput;
  /** Update document if it exists */
  update: CurrencyFieldUpdateInput;
};

export type CurrencyFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CurrencyFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CurrencyFieldWhereUniqueInput;
};

export type CurrencyFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CurrencyFieldUpsertInput;
  /** Unique document search */
  where: CurrencyFieldWhereUniqueInput;
};

/** Identifies documents */
export type CurrencyFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CurrencyFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CurrencyFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CurrencyFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
  unitSymbol?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  unitSymbol_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  unitSymbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  unitSymbol_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  unitSymbol_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  unitSymbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  unitSymbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  unitSymbol_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  unitSymbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  unitSymbol_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References CurrencyField record uniquely */
export type CurrencyFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type DateField = Entity & {
  __typename?: 'DateField';
  /** Allow selection of dates in the future */
  allowFuture: Scalars['Boolean']['output'];
  /** Allow selection of dates in the past */
  allowPast: Scalars['Boolean']['output'];
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  /** Date should be a range of dates with a beginning and end. If false, date will be a single date. */
  range: Scalars['Boolean']['output'];
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
};

export type DateFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DateFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type DateFieldConnection = {
  __typename?: 'DateFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DateFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DateFieldCreateInput = {
  allowFuture: Scalars['Boolean']['input'];
  allowPast: Scalars['Boolean']['input'];
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  range: Scalars['Boolean']['input'];
  required: Scalars['Boolean']['input'];
};

export type DateFieldCreateManyInlineInput = {
  /** Create and connect multiple existing DateField documents */
  create?: InputMaybe<Array<DateFieldCreateInput>>;
};

export type DateFieldCreateOneInlineInput = {
  /** Create and connect one DateField document */
  create?: InputMaybe<DateFieldCreateInput>;
};

export type DateFieldCreateWithPositionInput = {
  /** Document to create */
  data: DateFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type DateFieldEdge = {
  __typename?: 'DateFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: DateField;
};

/** Identifies documents */
export type DateFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DateFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DateFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DateFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  allowFuture?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  allowFuture_not?: InputMaybe<Scalars['Boolean']['input']>;
  allowPast?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  allowPast_not?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  range?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  range_not?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum DateFieldOrderByInput {
  AllowFutureAsc = 'allowFuture_ASC',
  AllowFutureDesc = 'allowFuture_DESC',
  AllowPastAsc = 'allowPast_ASC',
  AllowPastDesc = 'allowPast_DESC',
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  RangeAsc = 'range_ASC',
  RangeDesc = 'range_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type DateFieldParent = Form;

export type DateFieldParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
};

export type DateFieldParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
};

export type DateFieldParentCreateManyInlineInput = {
  /** Connect multiple existing DateFieldParent documents */
  connect?: InputMaybe<Array<DateFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing DateFieldParent documents */
  create?: InputMaybe<Array<DateFieldParentCreateInput>>;
};

export type DateFieldParentCreateOneInlineInput = {
  /** Connect one existing DateFieldParent document */
  connect?: InputMaybe<DateFieldParentWhereUniqueInput>;
  /** Create and connect one DateFieldParent document */
  create?: InputMaybe<DateFieldParentCreateInput>;
};

export type DateFieldParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
};

export type DateFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing DateFieldParent documents */
  connect?: InputMaybe<Array<DateFieldParentConnectInput>>;
  /** Create and connect multiple DateFieldParent documents */
  create?: InputMaybe<Array<DateFieldParentCreateInput>>;
  /** Delete multiple DateFieldParent documents */
  delete?: InputMaybe<Array<DateFieldParentWhereUniqueInput>>;
  /** Disconnect multiple DateFieldParent documents */
  disconnect?: InputMaybe<Array<DateFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing DateFieldParent documents */
  set?: InputMaybe<Array<DateFieldParentWhereUniqueInput>>;
  /** Update multiple DateFieldParent documents */
  update?: InputMaybe<Array<DateFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple DateFieldParent documents */
  upsert?: InputMaybe<Array<DateFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type DateFieldParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type DateFieldParentUpdateOneInlineInput = {
  /** Connect existing DateFieldParent document */
  connect?: InputMaybe<DateFieldParentWhereUniqueInput>;
  /** Create and connect one DateFieldParent document */
  create?: InputMaybe<DateFieldParentCreateInput>;
  /** Delete currently connected DateFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected DateFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single DateFieldParent document */
  update?: InputMaybe<DateFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DateFieldParent document */
  upsert?: InputMaybe<DateFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type DateFieldParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type DateFieldParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type DateFieldParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
};

export type DateFieldParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type DateFieldUpdateInput = {
  allowFuture?: InputMaybe<Scalars['Boolean']['input']>;
  allowPast?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  range?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DateFieldUpdateManyInlineInput = {
  /** Create and connect multiple DateField component instances */
  create?: InputMaybe<Array<DateFieldCreateWithPositionInput>>;
  /** Delete multiple DateField documents */
  delete?: InputMaybe<Array<DateFieldWhereUniqueInput>>;
  /** Update multiple DateField component instances */
  update?: InputMaybe<Array<DateFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple DateField component instances */
  upsert?: InputMaybe<Array<DateFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type DateFieldUpdateManyInput = {
  allowFuture?: InputMaybe<Scalars['Boolean']['input']>;
  allowPast?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  range?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DateFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DateFieldUpdateManyInput;
  /** Document search */
  where: DateFieldWhereInput;
};

export type DateFieldUpdateOneInlineInput = {
  /** Create and connect one DateField document */
  create?: InputMaybe<DateFieldCreateInput>;
  /** Delete currently connected DateField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single DateField document */
  update?: InputMaybe<DateFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DateField document */
  upsert?: InputMaybe<DateFieldUpsertWithNestedWhereUniqueInput>;
};

export type DateFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<DateFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: DateFieldWhereUniqueInput;
};

export type DateFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DateFieldUpdateInput;
  /** Unique document search */
  where: DateFieldWhereUniqueInput;
};

export type DateFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: DateFieldCreateInput;
  /** Update document if it exists */
  update: DateFieldUpdateInput;
};

export type DateFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<DateFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: DateFieldWhereUniqueInput;
};

export type DateFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DateFieldUpsertInput;
  /** Unique document search */
  where: DateFieldWhereUniqueInput;
};

/** Identifies documents */
export type DateFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DateFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DateFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DateFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  allowFuture?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  allowFuture_not?: InputMaybe<Scalars['Boolean']['input']>;
  allowPast?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  allowPast_not?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  range?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  range_not?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

/** References DateField record uniquely */
export type DateFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type DocsGroup = Entity & Node & {
  __typename?: 'DocsGroup';
  callToAction: CallToActionSettings;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  docsPages: Array<DocsPage>;
  /** Get the document in other stages */
  documentInStages: Array<DocsGroup>;
  footerGroup?: Maybe<FooterGroup>;
  footerTitle?: Maybe<Scalars['String']['output']>;
  /** List of DocsGroup versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']['output']>;
  summary: DocsGroupSummaryRichText;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type DocsGroupCallToActionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupDocsPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsPageWhereInput>;
};


export type DocsGroupDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type DocsGroupFooterGroupArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type DocsGroupPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsGroupScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type DocsGroupUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DocsGroupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DocsGroupWhereUniqueInput;
};

/** A connection to a list of items. */
export type DocsGroupConnection = {
  __typename?: 'DocsGroupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DocsGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DocsGroupCreateInput = {
  callToAction: CallToActionSettingsCreateOneInlineInput;
  cl946xxpt4pfx01t2h0bs645e?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  docsPages?: InputMaybe<DocsPageCreateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupCreateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  slug: Scalars['String']['input'];
  subtitle?: InputMaybe<Scalars['String']['input']>;
  summary: Scalars['RichTextAST']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocsGroupCreateManyInlineInput = {
  /** Connect multiple existing DocsGroup documents */
  connect?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Create and connect multiple existing DocsGroup documents */
  create?: InputMaybe<Array<DocsGroupCreateInput>>;
};

export type DocsGroupCreateOneInlineInput = {
  /** Connect one existing DocsGroup document */
  connect?: InputMaybe<DocsGroupWhereUniqueInput>;
  /** Create and connect one DocsGroup document */
  create?: InputMaybe<DocsGroupCreateInput>;
};

/** An edge in a connection. */
export type DocsGroupEdge = {
  __typename?: 'DocsGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: DocsGroup;
};

/** Identifies documents */
export type DocsGroupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsPages_every?: InputMaybe<DocsPageWhereInput>;
  docsPages_none?: InputMaybe<DocsPageWhereInput>;
  docsPages_some?: InputMaybe<DocsPageWhereInput>;
  documentInStages_every?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsGroupWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum DocsGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterTitleAsc = 'footerTitle_ASC',
  FooterTitleDesc = 'footerTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type DocsGroupSummaryRichText = {
  __typename?: 'DocsGroupSummaryRichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  json: Scalars['RichTextAST']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST']['output'];
  references: Array<DocsGroupSummaryRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};


export type DocsGroupSummaryRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};

export type DocsGroupSummaryRichTextEmbeddedTypes = Admonition | Asset | ContentButton;

export type DocsGroupUpdateInput = {
  callToAction?: InputMaybe<CallToActionSettingsUpdateOneInlineInput>;
  cl946xxpt4pfx01t2h0bs645e?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  docsPages?: InputMaybe<DocsPageUpdateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupUpdateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  summary?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type DocsGroupUpdateManyInlineInput = {
  /** Connect multiple existing DocsGroup documents */
  connect?: InputMaybe<Array<DocsGroupConnectInput>>;
  /** Create and connect multiple DocsGroup documents */
  create?: InputMaybe<Array<DocsGroupCreateInput>>;
  /** Delete multiple DocsGroup documents */
  delete?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Disconnect multiple DocsGroup documents */
  disconnect?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing DocsGroup documents */
  set?: InputMaybe<Array<DocsGroupWhereUniqueInput>>;
  /** Update multiple DocsGroup documents */
  update?: InputMaybe<Array<DocsGroupUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple DocsGroup documents */
  upsert?: InputMaybe<Array<DocsGroupUpsertWithNestedWhereUniqueInput>>;
};

export type DocsGroupUpdateManyInput = {
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  summary?: InputMaybe<Scalars['RichTextAST']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type DocsGroupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DocsGroupUpdateManyInput;
  /** Document search */
  where: DocsGroupWhereInput;
};

export type DocsGroupUpdateOneInlineInput = {
  /** Connect existing DocsGroup document */
  connect?: InputMaybe<DocsGroupWhereUniqueInput>;
  /** Create and connect one DocsGroup document */
  create?: InputMaybe<DocsGroupCreateInput>;
  /** Delete currently connected DocsGroup document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected DocsGroup document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single DocsGroup document */
  update?: InputMaybe<DocsGroupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DocsGroup document */
  upsert?: InputMaybe<DocsGroupUpsertWithNestedWhereUniqueInput>;
};

export type DocsGroupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DocsGroupUpdateInput;
  /** Unique document search */
  where: DocsGroupWhereUniqueInput;
};

export type DocsGroupUpsertInput = {
  /** Create document if it didn't exist */
  create: DocsGroupCreateInput;
  /** Update document if it exists */
  update: DocsGroupUpdateInput;
};

export type DocsGroupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DocsGroupUpsertInput;
  /** Unique document search */
  where: DocsGroupWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type DocsGroupWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type DocsGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsPages_every?: InputMaybe<DocsPageWhereInput>;
  docsPages_none?: InputMaybe<DocsPageWhereInput>;
  docsPages_some?: InputMaybe<DocsPageWhereInput>;
  documentInStages_every?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsGroupWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type DocsGroupWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsGroupWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsGroupWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsGroupWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<DocsGroupWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References DocsGroup record uniquely */
export type DocsGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type DocsPage = Entity & Node & {
  __typename?: 'DocsPage';
  body: DocsPageBodyRichText;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Used as the <meta/> description for SEO purposes */
  description: Scalars['String']['output'];
  docsGroup?: Maybe<DocsGroup>;
  /** Get the document in other stages */
  documentInStages: Array<DocsPage>;
  /** List of DocsPage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  showUpdatedDate: Scalars['Boolean']['output'];
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type DocsPageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsPageDocsGroupArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsPageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type DocsPageHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type DocsPagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocsPageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type DocsPageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DocsPageBodyRichText = {
  __typename?: 'DocsPageBodyRichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  json: Scalars['RichTextAST']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** @deprecated Please use the 'json' field */
  raw: Scalars['RichTextAST']['output'];
  references: Array<DocsPageBodyRichTextEmbeddedTypes>;
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};


export type DocsPageBodyRichTextReferencesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};

export type DocsPageBodyRichTextEmbeddedTypes = Admonition | Asset | ContentButton | Document | DocumentGroup;

export type DocsPageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DocsPageWhereUniqueInput;
};

/** A connection to a list of items. */
export type DocsPageConnection = {
  __typename?: 'DocsPageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DocsPageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DocsPageCreateInput = {
  body: Scalars['RichTextAST']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  docsGroup?: InputMaybe<DocsGroupCreateOneInlineInput>;
  showUpdatedDate: Scalars['Boolean']['input'];
  slug: Scalars['String']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocsPageCreateManyInlineInput = {
  /** Connect multiple existing DocsPage documents */
  connect?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Create and connect multiple existing DocsPage documents */
  create?: InputMaybe<Array<DocsPageCreateInput>>;
};

export type DocsPageCreateOneInlineInput = {
  /** Connect one existing DocsPage document */
  connect?: InputMaybe<DocsPageWhereUniqueInput>;
  /** Create and connect one DocsPage document */
  create?: InputMaybe<DocsPageCreateInput>;
};

/** An edge in a connection. */
export type DocsPageEdge = {
  __typename?: 'DocsPageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: DocsPage;
};

/** Identifies documents */
export type DocsPageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  docsGroup?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsPageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum DocsPageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShowUpdatedDateAsc = 'showUpdatedDate_ASC',
  ShowUpdatedDateDesc = 'showUpdatedDate_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type DocsPageUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  docsGroup?: InputMaybe<DocsGroupUpdateOneInlineInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type DocsPageUpdateManyInlineInput = {
  /** Connect multiple existing DocsPage documents */
  connect?: InputMaybe<Array<DocsPageConnectInput>>;
  /** Create and connect multiple DocsPage documents */
  create?: InputMaybe<Array<DocsPageCreateInput>>;
  /** Delete multiple DocsPage documents */
  delete?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Disconnect multiple DocsPage documents */
  disconnect?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing DocsPage documents */
  set?: InputMaybe<Array<DocsPageWhereUniqueInput>>;
  /** Update multiple DocsPage documents */
  update?: InputMaybe<Array<DocsPageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple DocsPage documents */
  upsert?: InputMaybe<Array<DocsPageUpsertWithNestedWhereUniqueInput>>;
};

export type DocsPageUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type DocsPageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DocsPageUpdateManyInput;
  /** Document search */
  where: DocsPageWhereInput;
};

export type DocsPageUpdateOneInlineInput = {
  /** Connect existing DocsPage document */
  connect?: InputMaybe<DocsPageWhereUniqueInput>;
  /** Create and connect one DocsPage document */
  create?: InputMaybe<DocsPageCreateInput>;
  /** Delete currently connected DocsPage document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected DocsPage document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single DocsPage document */
  update?: InputMaybe<DocsPageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DocsPage document */
  upsert?: InputMaybe<DocsPageUpsertWithNestedWhereUniqueInput>;
};

export type DocsPageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DocsPageUpdateInput;
  /** Unique document search */
  where: DocsPageWhereUniqueInput;
};

export type DocsPageUpsertInput = {
  /** Create document if it didn't exist */
  create: DocsPageCreateInput;
  /** Update document if it exists */
  update: DocsPageUpdateInput;
};

export type DocsPageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DocsPageUpsertInput;
  /** Unique document search */
  where: DocsPageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type DocsPageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type DocsPageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  docsGroup?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_none?: InputMaybe<DocsPageWhereStageInput>;
  documentInStages_some?: InputMaybe<DocsPageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type DocsPageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocsPageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocsPageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocsPageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<DocsPageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References DocsPage record uniquely */
export type DocsPageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type Document = Entity & Node & {
  __typename?: 'Document';
  contentTags: Array<ContentTag>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  documentGroups: Array<DocumentGroup>;
  /** Get the document in other stages */
  documentInStages: Array<Document>;
  file: Asset;
  /** List of Document versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type DocumentContentTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ContentTagOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentTagWhereInput>;
};


export type DocumentCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocumentDocumentGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocumentGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentGroupWhereInput>;
};


export type DocumentDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type DocumentFileArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocumentHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type DocumentPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocumentScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type DocumentUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DocumentConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DocumentWhereUniqueInput;
};

/** A connection to a list of items. */
export type DocumentConnection = {
  __typename?: 'DocumentConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DocumentEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DocumentCreateInput = {
  contentTags?: InputMaybe<ContentTagCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  documentGroups?: InputMaybe<DocumentGroupCreateManyInlineInput>;
  file: AssetCreateOneInlineInput;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocumentCreateManyInlineInput = {
  /** Connect multiple existing Document documents */
  connect?: InputMaybe<Array<DocumentWhereUniqueInput>>;
  /** Create and connect multiple existing Document documents */
  create?: InputMaybe<Array<DocumentCreateInput>>;
};

export type DocumentCreateOneInlineInput = {
  /** Connect one existing Document document */
  connect?: InputMaybe<DocumentWhereUniqueInput>;
  /** Create and connect one Document document */
  create?: InputMaybe<DocumentCreateInput>;
};

/** An edge in a connection. */
export type DocumentEdge = {
  __typename?: 'DocumentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Document;
};

export enum DocumentFileTypes {
  Doc = 'doc',
  Docx = 'docx',
  Html = 'html',
  Jpg = 'jpg',
  Odp = 'odp',
  Ods = 'ods',
  Odt = 'odt',
  Pdf = 'pdf',
  Png = 'png',
  Ppt = 'ppt',
  Pptx = 'pptx',
  Svg = 'svg',
  Txt = 'txt',
  Webp = 'webp',
  Xls = 'xls',
  Xlsx = 'xlsx'
}

export type DocumentGroup = Entity & Node & {
  __typename?: 'DocumentGroup';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<DocumentGroup>;
  documents: Array<Document>;
  /** List of DocumentGroup versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type DocumentGroupCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocumentGroupDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type DocumentGroupDocumentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocumentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentWhereInput>;
};


export type DocumentGroupHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type DocumentGroupPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type DocumentGroupScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type DocumentGroupUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DocumentGroupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DocumentGroupWhereUniqueInput;
};

/** A connection to a list of items. */
export type DocumentGroupConnection = {
  __typename?: 'DocumentGroupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DocumentGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DocumentGroupCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  documents?: InputMaybe<DocumentCreateManyInlineInput>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocumentGroupCreateManyInlineInput = {
  /** Connect multiple existing DocumentGroup documents */
  connect?: InputMaybe<Array<DocumentGroupWhereUniqueInput>>;
  /** Create and connect multiple existing DocumentGroup documents */
  create?: InputMaybe<Array<DocumentGroupCreateInput>>;
};

export type DocumentGroupCreateOneInlineInput = {
  /** Connect one existing DocumentGroup document */
  connect?: InputMaybe<DocumentGroupWhereUniqueInput>;
  /** Create and connect one DocumentGroup document */
  create?: InputMaybe<DocumentGroupCreateInput>;
};

/** An edge in a connection. */
export type DocumentGroupEdge = {
  __typename?: 'DocumentGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: DocumentGroup;
};

/** Identifies documents */
export type DocumentGroupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocumentGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocumentGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocumentGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<DocumentGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<DocumentGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<DocumentGroupWhereStageInput>;
  documents_every?: InputMaybe<DocumentWhereInput>;
  documents_none?: InputMaybe<DocumentWhereInput>;
  documents_some?: InputMaybe<DocumentWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum DocumentGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type DocumentGroupUpdateInput = {
  documents?: InputMaybe<DocumentUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentGroupUpdateManyInlineInput = {
  /** Connect multiple existing DocumentGroup documents */
  connect?: InputMaybe<Array<DocumentGroupConnectInput>>;
  /** Create and connect multiple DocumentGroup documents */
  create?: InputMaybe<Array<DocumentGroupCreateInput>>;
  /** Delete multiple DocumentGroup documents */
  delete?: InputMaybe<Array<DocumentGroupWhereUniqueInput>>;
  /** Disconnect multiple DocumentGroup documents */
  disconnect?: InputMaybe<Array<DocumentGroupWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing DocumentGroup documents */
  set?: InputMaybe<Array<DocumentGroupWhereUniqueInput>>;
  /** Update multiple DocumentGroup documents */
  update?: InputMaybe<Array<DocumentGroupUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple DocumentGroup documents */
  upsert?: InputMaybe<Array<DocumentGroupUpsertWithNestedWhereUniqueInput>>;
};

export type DocumentGroupUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentGroupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DocumentGroupUpdateManyInput;
  /** Document search */
  where: DocumentGroupWhereInput;
};

export type DocumentGroupUpdateOneInlineInput = {
  /** Connect existing DocumentGroup document */
  connect?: InputMaybe<DocumentGroupWhereUniqueInput>;
  /** Create and connect one DocumentGroup document */
  create?: InputMaybe<DocumentGroupCreateInput>;
  /** Delete currently connected DocumentGroup document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected DocumentGroup document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single DocumentGroup document */
  update?: InputMaybe<DocumentGroupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single DocumentGroup document */
  upsert?: InputMaybe<DocumentGroupUpsertWithNestedWhereUniqueInput>;
};

export type DocumentGroupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DocumentGroupUpdateInput;
  /** Unique document search */
  where: DocumentGroupWhereUniqueInput;
};

export type DocumentGroupUpsertInput = {
  /** Create document if it didn't exist */
  create: DocumentGroupCreateInput;
  /** Update document if it exists */
  update: DocumentGroupUpdateInput;
};

export type DocumentGroupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DocumentGroupUpsertInput;
  /** Unique document search */
  where: DocumentGroupWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type DocumentGroupWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type DocumentGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocumentGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocumentGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocumentGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<DocumentGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<DocumentGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<DocumentGroupWhereStageInput>;
  documents_every?: InputMaybe<DocumentWhereInput>;
  documents_none?: InputMaybe<DocumentWhereInput>;
  documents_some?: InputMaybe<DocumentWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type DocumentGroupWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocumentGroupWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocumentGroupWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocumentGroupWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<DocumentGroupWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References DocumentGroup record uniquely */
export type DocumentGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Identifies documents */
export type DocumentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocumentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocumentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocumentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  contentTags_every?: InputMaybe<ContentTagWhereInput>;
  contentTags_none?: InputMaybe<ContentTagWhereInput>;
  contentTags_some?: InputMaybe<ContentTagWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentGroups_every?: InputMaybe<DocumentGroupWhereInput>;
  documentGroups_none?: InputMaybe<DocumentGroupWhereInput>;
  documentGroups_some?: InputMaybe<DocumentGroupWhereInput>;
  documentInStages_every?: InputMaybe<DocumentWhereStageInput>;
  documentInStages_none?: InputMaybe<DocumentWhereStageInput>;
  documentInStages_some?: InputMaybe<DocumentWhereStageInput>;
  file?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum DocumentOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentUpdateInput = {
  contentTags?: InputMaybe<ContentTagUpdateManyInlineInput>;
  documentGroups?: InputMaybe<DocumentGroupUpdateManyInlineInput>;
  file?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentUpdateManyInlineInput = {
  /** Connect multiple existing Document documents */
  connect?: InputMaybe<Array<DocumentConnectInput>>;
  /** Create and connect multiple Document documents */
  create?: InputMaybe<Array<DocumentCreateInput>>;
  /** Delete multiple Document documents */
  delete?: InputMaybe<Array<DocumentWhereUniqueInput>>;
  /** Disconnect multiple Document documents */
  disconnect?: InputMaybe<Array<DocumentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Document documents */
  set?: InputMaybe<Array<DocumentWhereUniqueInput>>;
  /** Update multiple Document documents */
  update?: InputMaybe<Array<DocumentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Document documents */
  upsert?: InputMaybe<Array<DocumentUpsertWithNestedWhereUniqueInput>>;
};

export type DocumentUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DocumentUpdateManyInput;
  /** Document search */
  where: DocumentWhereInput;
};

export type DocumentUpdateOneInlineInput = {
  /** Connect existing Document document */
  connect?: InputMaybe<DocumentWhereUniqueInput>;
  /** Create and connect one Document document */
  create?: InputMaybe<DocumentCreateInput>;
  /** Delete currently connected Document document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Document document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Document document */
  update?: InputMaybe<DocumentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Document document */
  upsert?: InputMaybe<DocumentUpsertWithNestedWhereUniqueInput>;
};

export type DocumentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DocumentUpdateInput;
  /** Unique document search */
  where: DocumentWhereUniqueInput;
};

export type DocumentUpsertInput = {
  /** Create document if it didn't exist */
  create: DocumentCreateInput;
  /** Update document if it exists */
  update: DocumentUpdateInput;
};

export type DocumentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DocumentUpsertInput;
  /** Unique document search */
  where: DocumentWhereUniqueInput;
};

export type DocumentVersion = {
  __typename?: 'DocumentVersion';
  createdAt: Scalars['DateTime']['output'];
  data?: Maybe<Scalars['Json']['output']>;
  id: Scalars['ID']['output'];
  revision: Scalars['Int']['output'];
  stage: Stage;
};

/** This contains a set of filters that can be used to compare values internally */
export type DocumentWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type DocumentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocumentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocumentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocumentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  contentTags_every?: InputMaybe<ContentTagWhereInput>;
  contentTags_none?: InputMaybe<ContentTagWhereInput>;
  contentTags_some?: InputMaybe<ContentTagWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentGroups_every?: InputMaybe<DocumentGroupWhereInput>;
  documentGroups_none?: InputMaybe<DocumentGroupWhereInput>;
  documentGroups_some?: InputMaybe<DocumentGroupWhereInput>;
  documentInStages_every?: InputMaybe<DocumentWhereStageInput>;
  documentInStages_none?: InputMaybe<DocumentWhereStageInput>;
  documentInStages_some?: InputMaybe<DocumentWhereStageInput>;
  file?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type DocumentWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DocumentWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DocumentWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DocumentWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<DocumentWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Document record uniquely */
export type DocumentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type Employee = Entity & Node & {
  __typename?: 'Employee';
  bio: RichText;
  blogPosts: Array<BlogPost>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Employee>;
  /** List of Employee versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  location: Scalars['String']['output'];
  name: Scalars['String']['output'];
  photo: Asset;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type EmployeeBlogPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BlogPostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogPostWhereInput>;
};


export type EmployeeCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EmployeeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type EmployeeHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type EmployeePhotoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EmployeePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EmployeeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type EmployeeUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type EmployeeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: EmployeeWhereUniqueInput;
};

/** A connection to a list of items. */
export type EmployeeConnection = {
  __typename?: 'EmployeeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<EmployeeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EmployeeCreateInput = {
  bio: Scalars['RichTextAST']['input'];
  blogPosts?: InputMaybe<BlogPostCreateManyInlineInput>;
  cl946zxk64pqt01ur8rdqa3mp?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  location: Scalars['String']['input'];
  name: Scalars['String']['input'];
  photo: AssetCreateOneInlineInput;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EmployeeCreateManyInlineInput = {
  /** Connect multiple existing Employee documents */
  connect?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Create and connect multiple existing Employee documents */
  create?: InputMaybe<Array<EmployeeCreateInput>>;
};

export type EmployeeCreateOneInlineInput = {
  /** Connect one existing Employee document */
  connect?: InputMaybe<EmployeeWhereUniqueInput>;
  /** Create and connect one Employee document */
  create?: InputMaybe<EmployeeCreateInput>;
};

/** An edge in a connection. */
export type EmployeeEdge = {
  __typename?: 'EmployeeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Employee;
};

/** Identifies documents */
export type EmployeeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  blogPosts_every?: InputMaybe<BlogPostWhereInput>;
  blogPosts_none?: InputMaybe<BlogPostWhereInput>;
  blogPosts_some?: InputMaybe<BlogPostWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_none?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_some?: InputMaybe<EmployeeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  location_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  location_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  location_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  location_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  location_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  location_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  location_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  location_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  location_starts_with?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  photo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum EmployeeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LocationAsc = 'location_ASC',
  LocationDesc = 'location_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EmployeeUpdateInput = {
  bio?: InputMaybe<Scalars['RichTextAST']['input']>;
  blogPosts?: InputMaybe<BlogPostUpdateManyInlineInput>;
  cl946zxk64pqt01ur8rdqa3mp?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  location?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  photo?: InputMaybe<AssetUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EmployeeUpdateManyInlineInput = {
  /** Connect multiple existing Employee documents */
  connect?: InputMaybe<Array<EmployeeConnectInput>>;
  /** Create and connect multiple Employee documents */
  create?: InputMaybe<Array<EmployeeCreateInput>>;
  /** Delete multiple Employee documents */
  delete?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Disconnect multiple Employee documents */
  disconnect?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Employee documents */
  set?: InputMaybe<Array<EmployeeWhereUniqueInput>>;
  /** Update multiple Employee documents */
  update?: InputMaybe<Array<EmployeeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Employee documents */
  upsert?: InputMaybe<Array<EmployeeUpsertWithNestedWhereUniqueInput>>;
};

export type EmployeeUpdateManyInput = {
  bio?: InputMaybe<Scalars['RichTextAST']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type EmployeeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: EmployeeUpdateManyInput;
  /** Document search */
  where: EmployeeWhereInput;
};

export type EmployeeUpdateOneInlineInput = {
  /** Connect existing Employee document */
  connect?: InputMaybe<EmployeeWhereUniqueInput>;
  /** Create and connect one Employee document */
  create?: InputMaybe<EmployeeCreateInput>;
  /** Delete currently connected Employee document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Employee document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Employee document */
  update?: InputMaybe<EmployeeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Employee document */
  upsert?: InputMaybe<EmployeeUpsertWithNestedWhereUniqueInput>;
};

export type EmployeeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: EmployeeUpdateInput;
  /** Unique document search */
  where: EmployeeWhereUniqueInput;
};

export type EmployeeUpsertInput = {
  /** Create document if it didn't exist */
  create: EmployeeCreateInput;
  /** Update document if it exists */
  update: EmployeeUpdateInput;
};

export type EmployeeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: EmployeeUpsertInput;
  /** Unique document search */
  where: EmployeeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type EmployeeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type EmployeeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EmployeeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  blogPosts_every?: InputMaybe<BlogPostWhereInput>;
  blogPosts_none?: InputMaybe<BlogPostWhereInput>;
  blogPosts_some?: InputMaybe<BlogPostWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_none?: InputMaybe<EmployeeWhereStageInput>;
  documentInStages_some?: InputMaybe<EmployeeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  location_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  location_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  location_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  location_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  location_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  location_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  location_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  location_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  location_starts_with?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  photo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type EmployeeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EmployeeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EmployeeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EmployeeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<EmployeeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Employee record uniquely */
export type EmployeeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** An object with an ID */
export type Entity = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
  /** The Stage of an object */
  stage: Stage;
};

/** This enumeration holds all typenames that implement the Entity interface. Components and models implement the Entity interface. */
export enum EntityTypeName {
  Address = 'Address',
  AddressSearchField = 'AddressSearchField',
  Admonition = 'Admonition',
  Alert = 'Alert',
  /** Asset system model */
  Asset = 'Asset',
  BlogPost = 'BlogPost',
  Button = 'Button',
  CallToAction = 'CallToAction',
  CallToActionSettings = 'CallToActionSettings',
  Callout = 'Callout',
  CheckboxField = 'CheckboxField',
  CloudLocation = 'CloudLocation',
  Configuration = 'Configuration',
  ContactForm = 'ContactForm',
  ContentButton = 'ContentButton',
  ContentTag = 'ContentTag',
  CurrencyField = 'CurrencyField',
  DateField = 'DateField',
  DocsGroup = 'DocsGroup',
  DocsPage = 'DocsPage',
  Document = 'Document',
  DocumentGroup = 'DocumentGroup',
  Employee = 'Employee',
  ExternalLink = 'ExternalLink',
  Feature = 'Feature',
  FooterGroup = 'FooterGroup',
  Form = 'Form',
  FormButton = 'FormButton',
  FormGroup = 'FormGroup',
  HeaderGroup = 'HeaderGroup',
  HomePage = 'HomePage',
  HomePageBlock = 'HomePageBlock',
  OfficeLocation = 'OfficeLocation',
  Page = 'Page',
  PageContent = 'PageContent',
  RemoteSelectField = 'RemoteSelectField',
  /** Scheduled Operation system model */
  ScheduledOperation = 'ScheduledOperation',
  /** Scheduled Release system model */
  ScheduledRelease = 'ScheduledRelease',
  SelectField = 'SelectField',
  SocialLink = 'SocialLink',
  Testimonial = 'Testimonial',
  TextAreaField = 'TextAreaField',
  TextInputField = 'TextInputField',
  Theme = 'Theme',
  ThemeColors = 'ThemeColors',
  ThemeFonts = 'ThemeFonts',
  /** User system model */
  User = 'User',
  VendorLogo = 'VendorLogo'
}

/** Allows to specify input to query models and components directly */
export type EntityWhereInput = {
  /** The ID of an object */
  id: Scalars['ID']['input'];
  locale?: InputMaybe<Locale>;
  stage: Stage;
  /** The Type name of an object */
  typename: EntityTypeName;
};

export type ExternalLink = Entity & {
  __typename?: 'ExternalLink';
  href: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Show External Link Icon */
  showIcon: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
};

export type ExternalLinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ExternalLinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type ExternalLinkConnection = {
  __typename?: 'ExternalLinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ExternalLinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ExternalLinkCreateInput = {
  href: Scalars['String']['input'];
  showIcon: Scalars['Boolean']['input'];
  title: Scalars['String']['input'];
};

export type ExternalLinkCreateManyInlineInput = {
  /** Create and connect multiple existing ExternalLink documents */
  create?: InputMaybe<Array<ExternalLinkCreateInput>>;
};

export type ExternalLinkCreateOneInlineInput = {
  /** Create and connect one ExternalLink document */
  create?: InputMaybe<ExternalLinkCreateInput>;
};

export type ExternalLinkCreateWithPositionInput = {
  /** Document to create */
  data: ExternalLinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ExternalLinkEdge = {
  __typename?: 'ExternalLinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ExternalLink;
};

/** Identifies documents */
export type ExternalLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  href_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum ExternalLinkOrderByInput {
  HrefAsc = 'href_ASC',
  HrefDesc = 'href_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ShowIconAsc = 'showIcon_ASC',
  ShowIconDesc = 'showIcon_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type ExternalLinkParent = FooterGroup | HeaderGroup;

export type ExternalLinkParentConnectInput = {
  FooterGroup?: InputMaybe<FooterGroupConnectInput>;
  HeaderGroup?: InputMaybe<HeaderGroupConnectInput>;
};

export type ExternalLinkParentCreateInput = {
  FooterGroup?: InputMaybe<FooterGroupCreateInput>;
  HeaderGroup?: InputMaybe<HeaderGroupCreateInput>;
};

export type ExternalLinkParentCreateManyInlineInput = {
  /** Connect multiple existing ExternalLinkParent documents */
  connect?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Create and connect multiple existing ExternalLinkParent documents */
  create?: InputMaybe<Array<ExternalLinkParentCreateInput>>;
};

export type ExternalLinkParentCreateOneInlineInput = {
  /** Connect one existing ExternalLinkParent document */
  connect?: InputMaybe<ExternalLinkParentWhereUniqueInput>;
  /** Create and connect one ExternalLinkParent document */
  create?: InputMaybe<ExternalLinkParentCreateInput>;
};

export type ExternalLinkParentUpdateInput = {
  FooterGroup?: InputMaybe<FooterGroupUpdateInput>;
  HeaderGroup?: InputMaybe<HeaderGroupUpdateInput>;
};

export type ExternalLinkParentUpdateManyInlineInput = {
  /** Connect multiple existing ExternalLinkParent documents */
  connect?: InputMaybe<Array<ExternalLinkParentConnectInput>>;
  /** Create and connect multiple ExternalLinkParent documents */
  create?: InputMaybe<Array<ExternalLinkParentCreateInput>>;
  /** Delete multiple ExternalLinkParent documents */
  delete?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Disconnect multiple ExternalLinkParent documents */
  disconnect?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ExternalLinkParent documents */
  set?: InputMaybe<Array<ExternalLinkParentWhereUniqueInput>>;
  /** Update multiple ExternalLinkParent documents */
  update?: InputMaybe<Array<ExternalLinkParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ExternalLinkParent documents */
  upsert?: InputMaybe<Array<ExternalLinkParentUpsertWithNestedWhereUniqueInput>>;
};

export type ExternalLinkParentUpdateManyWithNestedWhereInput = {
  FooterGroup?: InputMaybe<FooterGroupUpdateManyWithNestedWhereInput>;
  HeaderGroup?: InputMaybe<HeaderGroupUpdateManyWithNestedWhereInput>;
};

export type ExternalLinkParentUpdateOneInlineInput = {
  /** Connect existing ExternalLinkParent document */
  connect?: InputMaybe<ExternalLinkParentWhereUniqueInput>;
  /** Create and connect one ExternalLinkParent document */
  create?: InputMaybe<ExternalLinkParentCreateInput>;
  /** Delete currently connected ExternalLinkParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ExternalLinkParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ExternalLinkParent document */
  update?: InputMaybe<ExternalLinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ExternalLinkParent document */
  upsert?: InputMaybe<ExternalLinkParentUpsertWithNestedWhereUniqueInput>;
};

export type ExternalLinkParentUpdateWithNestedWhereUniqueInput = {
  FooterGroup?: InputMaybe<FooterGroupUpdateWithNestedWhereUniqueInput>;
  HeaderGroup?: InputMaybe<HeaderGroupUpdateWithNestedWhereUniqueInput>;
};

export type ExternalLinkParentUpsertWithNestedWhereUniqueInput = {
  FooterGroup?: InputMaybe<FooterGroupUpsertWithNestedWhereUniqueInput>;
  HeaderGroup?: InputMaybe<HeaderGroupUpsertWithNestedWhereUniqueInput>;
};

export type ExternalLinkParentWhereInput = {
  FooterGroup?: InputMaybe<FooterGroupWhereInput>;
  HeaderGroup?: InputMaybe<HeaderGroupWhereInput>;
};

export type ExternalLinkParentWhereUniqueInput = {
  FooterGroup?: InputMaybe<FooterGroupWhereUniqueInput>;
  HeaderGroup?: InputMaybe<HeaderGroupWhereUniqueInput>;
};

export type ExternalLinkUpdateInput = {
  href?: InputMaybe<Scalars['String']['input']>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ExternalLinkUpdateManyInlineInput = {
  /** Create and connect multiple ExternalLink component instances */
  create?: InputMaybe<Array<ExternalLinkCreateWithPositionInput>>;
  /** Delete multiple ExternalLink documents */
  delete?: InputMaybe<Array<ExternalLinkWhereUniqueInput>>;
  /** Update multiple ExternalLink component instances */
  update?: InputMaybe<Array<ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ExternalLink component instances */
  upsert?: InputMaybe<Array<ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ExternalLinkUpdateManyInput = {
  href?: InputMaybe<Scalars['String']['input']>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ExternalLinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ExternalLinkUpdateManyInput;
  /** Document search */
  where: ExternalLinkWhereInput;
};

export type ExternalLinkUpdateOneInlineInput = {
  /** Create and connect one ExternalLink document */
  create?: InputMaybe<ExternalLinkCreateInput>;
  /** Delete currently connected ExternalLink document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ExternalLink document */
  update?: InputMaybe<ExternalLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ExternalLink document */
  upsert?: InputMaybe<ExternalLinkUpsertWithNestedWhereUniqueInput>;
};

export type ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ExternalLinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ExternalLinkWhereUniqueInput;
};

export type ExternalLinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ExternalLinkUpdateInput;
  /** Unique document search */
  where: ExternalLinkWhereUniqueInput;
};

export type ExternalLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: ExternalLinkCreateInput;
  /** Update document if it exists */
  update: ExternalLinkUpdateInput;
};

export type ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ExternalLinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ExternalLinkWhereUniqueInput;
};

export type ExternalLinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ExternalLinkUpsertInput;
  /** Unique document search */
  where: ExternalLinkWhereUniqueInput;
};

/** Identifies documents */
export type ExternalLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ExternalLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  href_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  showIcon?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showIcon_not?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References ExternalLink record uniquely */
export type ExternalLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Feature = Entity & {
  __typename?: 'Feature';
  body: RichText;
  button?: Maybe<Button>;
  icon?: Maybe<Asset>;
  iconColor?: Maybe<ThemeColor>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
};


export type FeatureButtonArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FeatureIconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type FeatureConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FeatureWhereUniqueInput;
};

/** A connection to a list of items. */
export type FeatureConnection = {
  __typename?: 'FeatureConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FeatureEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FeatureCreateInput = {
  body: Scalars['RichTextAST']['input'];
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  icon?: InputMaybe<AssetCreateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
  title: Scalars['String']['input'];
};

export type FeatureCreateManyInlineInput = {
  /** Create and connect multiple existing Feature documents */
  create?: InputMaybe<Array<FeatureCreateInput>>;
};

export type FeatureCreateOneInlineInput = {
  /** Create and connect one Feature document */
  create?: InputMaybe<FeatureCreateInput>;
};

export type FeatureCreateWithPositionInput = {
  /** Document to create */
  data: FeatureCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FeatureEdge = {
  __typename?: 'FeatureEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Feature;
};

/** Identifies documents */
export type FeatureManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FeatureWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum FeatureOrderByInput {
  IconColorAsc = 'iconColor_ASC',
  IconColorDesc = 'iconColor_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type FeatureParent = PageContent;

export type FeatureParentConnectInput = {
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type FeatureParentCreateInput = {
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type FeatureParentCreateManyInlineInput = {
  /** Connect multiple existing FeatureParent documents */
  connect?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Create and connect multiple existing FeatureParent documents */
  create?: InputMaybe<Array<FeatureParentCreateInput>>;
};

export type FeatureParentCreateOneInlineInput = {
  /** Connect one existing FeatureParent document */
  connect?: InputMaybe<FeatureParentWhereUniqueInput>;
  /** Create and connect one FeatureParent document */
  create?: InputMaybe<FeatureParentCreateInput>;
};

export type FeatureParentUpdateInput = {
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type FeatureParentUpdateManyInlineInput = {
  /** Connect multiple existing FeatureParent documents */
  connect?: InputMaybe<Array<FeatureParentConnectInput>>;
  /** Create and connect multiple FeatureParent documents */
  create?: InputMaybe<Array<FeatureParentCreateInput>>;
  /** Delete multiple FeatureParent documents */
  delete?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Disconnect multiple FeatureParent documents */
  disconnect?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FeatureParent documents */
  set?: InputMaybe<Array<FeatureParentWhereUniqueInput>>;
  /** Update multiple FeatureParent documents */
  update?: InputMaybe<Array<FeatureParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FeatureParent documents */
  upsert?: InputMaybe<Array<FeatureParentUpsertWithNestedWhereUniqueInput>>;
};

export type FeatureParentUpdateManyWithNestedWhereInput = {
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type FeatureParentUpdateOneInlineInput = {
  /** Connect existing FeatureParent document */
  connect?: InputMaybe<FeatureParentWhereUniqueInput>;
  /** Create and connect one FeatureParent document */
  create?: InputMaybe<FeatureParentCreateInput>;
  /** Delete currently connected FeatureParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected FeatureParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single FeatureParent document */
  update?: InputMaybe<FeatureParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FeatureParent document */
  upsert?: InputMaybe<FeatureParentUpsertWithNestedWhereUniqueInput>;
};

export type FeatureParentUpdateWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type FeatureParentUpsertWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type FeatureParentWhereInput = {
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type FeatureParentWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type FeatureUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  icon?: InputMaybe<AssetUpdateOneInlineInput>;
  iconColor?: InputMaybe<ThemeColor>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type FeatureUpdateManyInlineInput = {
  /** Create and connect multiple Feature component instances */
  create?: InputMaybe<Array<FeatureCreateWithPositionInput>>;
  /** Delete multiple Feature documents */
  delete?: InputMaybe<Array<FeatureWhereUniqueInput>>;
  /** Update multiple Feature component instances */
  update?: InputMaybe<Array<FeatureUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Feature component instances */
  upsert?: InputMaybe<Array<FeatureUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FeatureUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  iconColor?: InputMaybe<ThemeColor>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type FeatureUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FeatureUpdateManyInput;
  /** Document search */
  where: FeatureWhereInput;
};

export type FeatureUpdateOneInlineInput = {
  /** Create and connect one Feature document */
  create?: InputMaybe<FeatureCreateInput>;
  /** Delete currently connected Feature document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Feature document */
  update?: InputMaybe<FeatureUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Feature document */
  upsert?: InputMaybe<FeatureUpsertWithNestedWhereUniqueInput>;
};

export type FeatureUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FeatureUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FeatureWhereUniqueInput;
};

export type FeatureUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FeatureUpdateInput;
  /** Unique document search */
  where: FeatureWhereUniqueInput;
};

export type FeatureUpsertInput = {
  /** Create document if it didn't exist */
  create: FeatureCreateInput;
  /** Update document if it exists */
  update: FeatureUpdateInput;
};

export type FeatureUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FeatureUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FeatureWhereUniqueInput;
};

export type FeatureUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FeatureUpsertInput;
  /** Unique document search */
  where: FeatureWhereUniqueInput;
};

/** Identifies documents */
export type FeatureWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FeatureWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FeatureWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  icon?: InputMaybe<AssetWhereInput>;
  iconColor?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  iconColor_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  iconColor_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  iconColor_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References Feature record uniquely */
export type FeatureWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FooterGroup = Entity & Node & {
  __typename?: 'FooterGroup';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  docsGroup: Array<DocsGroup>;
  /** Get the document in other stages */
  documentInStages: Array<FooterGroup>;
  externalLinks: Array<ExternalLink>;
  /** List of FooterGroup versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  pageContents: Array<PageContent>;
  pages: Array<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  row: Scalars['Int']['output'];
  scheduledIn: Array<ScheduledOperation>;
  sortAlphabetically: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type FooterGroupCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterGroupDocsGroupArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type FooterGroupDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type FooterGroupExternalLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ExternalLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ExternalLinkWhereInput>;
};


export type FooterGroupHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type FooterGroupPageContentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageContentWhereInput>;
};


export type FooterGroupPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageWhereInput>;
};


export type FooterGroupPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterGroupScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FooterGroupUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type FooterGroupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FooterGroupWhereUniqueInput;
};

/** A connection to a list of items. */
export type FooterGroupConnection = {
  __typename?: 'FooterGroupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FooterGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FooterGroupCreateInput = {
  cl947tb614s4f01tc1n8o21jf?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  docsGroup?: InputMaybe<DocsGroupCreateManyInlineInput>;
  externalLinks?: InputMaybe<ExternalLinkCreateManyInlineInput>;
  pageContents?: InputMaybe<PageContentCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  row: Scalars['Int']['input'];
  sortAlphabetically: Scalars['Boolean']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FooterGroupCreateManyInlineInput = {
  /** Connect multiple existing FooterGroup documents */
  connect?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Create and connect multiple existing FooterGroup documents */
  create?: InputMaybe<Array<FooterGroupCreateInput>>;
};

export type FooterGroupCreateOneInlineInput = {
  /** Connect one existing FooterGroup document */
  connect?: InputMaybe<FooterGroupWhereUniqueInput>;
  /** Create and connect one FooterGroup document */
  create?: InputMaybe<FooterGroupCreateInput>;
};

/** An edge in a connection. */
export type FooterGroupEdge = {
  __typename?: 'FooterGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: FooterGroup;
};

/** Identifies documents */
export type FooterGroupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsGroup_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<FooterGroupWhereStageInput>;
  externalLinks_every?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_none?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_some?: InputMaybe<ExternalLinkWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  row?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  row_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  row_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  row_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  row_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  row_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  row_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  row_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  sortAlphabetically_not?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum FooterGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  RowAsc = 'row_ASC',
  RowDesc = 'row_DESC',
  SortAlphabeticallyAsc = 'sortAlphabetically_ASC',
  SortAlphabeticallyDesc = 'sortAlphabetically_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type FooterGroupUpdateInput = {
  cl947tb614s4f01tc1n8o21jf?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  docsGroup?: InputMaybe<DocsGroupUpdateManyInlineInput>;
  externalLinks?: InputMaybe<ExternalLinkUpdateManyInlineInput>;
  pageContents?: InputMaybe<PageContentUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  row?: InputMaybe<Scalars['Int']['input']>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type FooterGroupUpdateManyInlineInput = {
  /** Connect multiple existing FooterGroup documents */
  connect?: InputMaybe<Array<FooterGroupConnectInput>>;
  /** Create and connect multiple FooterGroup documents */
  create?: InputMaybe<Array<FooterGroupCreateInput>>;
  /** Delete multiple FooterGroup documents */
  delete?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Disconnect multiple FooterGroup documents */
  disconnect?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FooterGroup documents */
  set?: InputMaybe<Array<FooterGroupWhereUniqueInput>>;
  /** Update multiple FooterGroup documents */
  update?: InputMaybe<Array<FooterGroupUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FooterGroup documents */
  upsert?: InputMaybe<Array<FooterGroupUpsertWithNestedWhereUniqueInput>>;
};

export type FooterGroupUpdateManyInput = {
  row?: InputMaybe<Scalars['Int']['input']>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type FooterGroupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FooterGroupUpdateManyInput;
  /** Document search */
  where: FooterGroupWhereInput;
};

export type FooterGroupUpdateOneInlineInput = {
  /** Connect existing FooterGroup document */
  connect?: InputMaybe<FooterGroupWhereUniqueInput>;
  /** Create and connect one FooterGroup document */
  create?: InputMaybe<FooterGroupCreateInput>;
  /** Delete currently connected FooterGroup document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected FooterGroup document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single FooterGroup document */
  update?: InputMaybe<FooterGroupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FooterGroup document */
  upsert?: InputMaybe<FooterGroupUpsertWithNestedWhereUniqueInput>;
};

export type FooterGroupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FooterGroupUpdateInput;
  /** Unique document search */
  where: FooterGroupWhereUniqueInput;
};

export type FooterGroupUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterGroupCreateInput;
  /** Update document if it exists */
  update: FooterGroupUpdateInput;
};

export type FooterGroupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FooterGroupUpsertInput;
  /** Unique document search */
  where: FooterGroupWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FooterGroupWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type FooterGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  docsGroup_every?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_none?: InputMaybe<DocsGroupWhereInput>;
  docsGroup_some?: InputMaybe<DocsGroupWhereInput>;
  documentInStages_every?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<FooterGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<FooterGroupWhereStageInput>;
  externalLinks_every?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_none?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_some?: InputMaybe<ExternalLinkWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  row?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  row_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  row_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  row_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  row_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  row_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  row_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  row_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  sortAlphabetically_not?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FooterGroupWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterGroupWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterGroupWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterGroupWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FooterGroupWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References FooterGroup record uniquely */
export type FooterGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Form = Entity & Node & {
  __typename?: 'Form';
  button: FormButton;
  colorScheme: ThemeColor;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Form>;
  fields: Array<FormfieldsUnion>;
  /** List of Form versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  pageContents: Array<PageContent>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type FormButtonArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FormCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FormDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type FormFieldsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


export type FormHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type FormPageContentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageContentWhereInput>;
};


export type FormPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FormScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FormUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export enum FormAction {
  Cancel = 'cancel',
  Submit = 'submit'
}

export type FormButton = Entity & {
  __typename?: 'FormButton';
  action?: Maybe<FormAction>;
  alert?: Maybe<Alert>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** System stage field */
  stage: Stage;
  text: Scalars['String']['output'];
  variant?: Maybe<ButtonVariant>;
};


export type FormButtonAlertArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type FormButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormButtonConnection = {
  __typename?: 'FormButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormButtonCreateInput = {
  action?: InputMaybe<FormAction>;
  alert?: InputMaybe<AlertCreateOneInlineInput>;
  text: Scalars['String']['input'];
  variant?: InputMaybe<ButtonVariant>;
};

export type FormButtonCreateManyInlineInput = {
  /** Create and connect multiple existing FormButton documents */
  create?: InputMaybe<Array<FormButtonCreateInput>>;
};

export type FormButtonCreateOneInlineInput = {
  /** Create and connect one FormButton document */
  create?: InputMaybe<FormButtonCreateInput>;
};

export type FormButtonCreateWithPositionInput = {
  /** Document to create */
  data: FormButtonCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormButtonEdge = {
  __typename?: 'FormButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: FormButton;
};

/** Identifies documents */
export type FormButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  action?: InputMaybe<FormAction>;
  /** All values that are contained in given list. */
  action_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  /** Any other value that exists and is not equal to the given value. */
  action_not?: InputMaybe<FormAction>;
  /** All values that are not contained in given list. */
  action_not_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  alert?: InputMaybe<AlertWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  text_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** Any other value that exists and is not equal to the given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

export enum FormButtonOrderByInput {
  ActionAsc = 'action_ASC',
  ActionDesc = 'action_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  VariantAsc = 'variant_ASC',
  VariantDesc = 'variant_DESC'
}

export type FormButtonParent = ContactForm | Form;

export type FormButtonParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type FormButtonParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type FormButtonParentCreateManyInlineInput = {
  /** Connect multiple existing FormButtonParent documents */
  connect?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormButtonParent documents */
  create?: InputMaybe<Array<FormButtonParentCreateInput>>;
};

export type FormButtonParentCreateOneInlineInput = {
  /** Connect one existing FormButtonParent document */
  connect?: InputMaybe<FormButtonParentWhereUniqueInput>;
  /** Create and connect one FormButtonParent document */
  create?: InputMaybe<FormButtonParentCreateInput>;
};

export type FormButtonParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type FormButtonParentUpdateManyInlineInput = {
  /** Connect multiple existing FormButtonParent documents */
  connect?: InputMaybe<Array<FormButtonParentConnectInput>>;
  /** Create and connect multiple FormButtonParent documents */
  create?: InputMaybe<Array<FormButtonParentCreateInput>>;
  /** Delete multiple FormButtonParent documents */
  delete?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Disconnect multiple FormButtonParent documents */
  disconnect?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormButtonParent documents */
  set?: InputMaybe<Array<FormButtonParentWhereUniqueInput>>;
  /** Update multiple FormButtonParent documents */
  update?: InputMaybe<Array<FormButtonParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormButtonParent documents */
  upsert?: InputMaybe<Array<FormButtonParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormButtonParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type FormButtonParentUpdateOneInlineInput = {
  /** Connect existing FormButtonParent document */
  connect?: InputMaybe<FormButtonParentWhereUniqueInput>;
  /** Create and connect one FormButtonParent document */
  create?: InputMaybe<FormButtonParentCreateInput>;
  /** Delete currently connected FormButtonParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected FormButtonParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single FormButtonParent document */
  update?: InputMaybe<FormButtonParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormButtonParent document */
  upsert?: InputMaybe<FormButtonParentUpsertWithNestedWhereUniqueInput>;
};

export type FormButtonParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type FormButtonParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormButtonParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type FormButtonParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type FormButtonUpdateInput = {
  action?: InputMaybe<FormAction>;
  alert?: InputMaybe<AlertUpdateOneInlineInput>;
  text?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type FormButtonUpdateManyInlineInput = {
  /** Create and connect multiple FormButton component instances */
  create?: InputMaybe<Array<FormButtonCreateWithPositionInput>>;
  /** Delete multiple FormButton documents */
  delete?: InputMaybe<Array<FormButtonWhereUniqueInput>>;
  /** Update multiple FormButton component instances */
  update?: InputMaybe<Array<FormButtonUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormButton component instances */
  upsert?: InputMaybe<Array<FormButtonUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormButtonUpdateManyInput = {
  action?: InputMaybe<FormAction>;
  text?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
};

export type FormButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormButtonUpdateManyInput;
  /** Document search */
  where: FormButtonWhereInput;
};

export type FormButtonUpdateOneInlineInput = {
  /** Create and connect one FormButton document */
  create?: InputMaybe<FormButtonCreateInput>;
  /** Delete currently connected FormButton document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single FormButton document */
  update?: InputMaybe<FormButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormButton document */
  upsert?: InputMaybe<FormButtonUpsertWithNestedWhereUniqueInput>;
};

export type FormButtonUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormButtonUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormButtonWhereUniqueInput;
};

export type FormButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormButtonUpdateInput;
  /** Unique document search */
  where: FormButtonWhereUniqueInput;
};

export type FormButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: FormButtonCreateInput;
  /** Update document if it exists */
  update: FormButtonUpdateInput;
};

export type FormButtonUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormButtonUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormButtonWhereUniqueInput;
};

export type FormButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormButtonUpsertInput;
  /** Unique document search */
  where: FormButtonWhereUniqueInput;
};

/** Identifies documents */
export type FormButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  action?: InputMaybe<FormAction>;
  /** All values that are contained in given list. */
  action_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  /** Any other value that exists and is not equal to the given value. */
  action_not?: InputMaybe<FormAction>;
  /** All values that are not contained in given list. */
  action_not_in?: InputMaybe<Array<InputMaybe<FormAction>>>;
  alert?: InputMaybe<AlertWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  text_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  text_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  text_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  text_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  text_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  text_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  text_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  text_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  text_starts_with?: InputMaybe<Scalars['String']['input']>;
  variant?: InputMaybe<ButtonVariant>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
  /** Any other value that exists and is not equal to the given value. */
  variant_not?: InputMaybe<ButtonVariant>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<InputMaybe<ButtonVariant>>>;
};

/** References FormButton record uniquely */
export type FormButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FormConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormConnection = {
  __typename?: 'FormConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormCreateInput = {
  button: FormButtonCreateOneInlineInput;
  cl8zdv0ti0vqy01ur1gjnag6u?: InputMaybe<ConfigurationCreateManyInlineInput>;
  cla898hk70e1001um8ipj0mui?: InputMaybe<CalloutCreateManyInlineInput>;
  colorScheme: ThemeColor;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  fields?: InputMaybe<FormfieldsUnionCreateManyInlineInput>;
  name: Scalars['String']['input'];
  pageContents?: InputMaybe<PageContentCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FormCreateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Create and connect multiple existing Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
};

export type FormCreateOneInlineInput = {
  /** Connect one existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
};

/** An edge in a connection. */
export type FormEdge = {
  __typename?: 'FormEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Form;
};

export type FormGroup = Entity & {
  __typename?: 'FormGroup';
  groupId: Scalars['Int']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
};

export type FormGroupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FormGroupWhereUniqueInput;
};

/** A connection to a list of items. */
export type FormGroupConnection = {
  __typename?: 'FormGroupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FormGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FormGroupCreateInput = {
  groupId: Scalars['Int']['input'];
  name: Scalars['String']['input'];
};

export type FormGroupCreateManyInlineInput = {
  /** Create and connect multiple existing FormGroup documents */
  create?: InputMaybe<Array<FormGroupCreateInput>>;
};

export type FormGroupCreateOneInlineInput = {
  /** Create and connect one FormGroup document */
  create?: InputMaybe<FormGroupCreateInput>;
};

export type FormGroupCreateWithPositionInput = {
  /** Document to create */
  data: FormGroupCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type FormGroupEdge = {
  __typename?: 'FormGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: FormGroup;
};

/** Identifies documents */
export type FormGroupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  groupId?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  groupId_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  groupId_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  groupId_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  groupId_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  groupId_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  groupId_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  groupId_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum FormGroupOrderByInput {
  GroupIdAsc = 'groupId_ASC',
  GroupIdDesc = 'groupId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC'
}

export type FormGroupParent = Form;

export type FormGroupParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
};

export type FormGroupParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
};

export type FormGroupParentCreateManyInlineInput = {
  /** Connect multiple existing FormGroupParent documents */
  connect?: InputMaybe<Array<FormGroupParentWhereUniqueInput>>;
  /** Create and connect multiple existing FormGroupParent documents */
  create?: InputMaybe<Array<FormGroupParentCreateInput>>;
};

export type FormGroupParentCreateOneInlineInput = {
  /** Connect one existing FormGroupParent document */
  connect?: InputMaybe<FormGroupParentWhereUniqueInput>;
  /** Create and connect one FormGroupParent document */
  create?: InputMaybe<FormGroupParentCreateInput>;
};

export type FormGroupParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
};

export type FormGroupParentUpdateManyInlineInput = {
  /** Connect multiple existing FormGroupParent documents */
  connect?: InputMaybe<Array<FormGroupParentConnectInput>>;
  /** Create and connect multiple FormGroupParent documents */
  create?: InputMaybe<Array<FormGroupParentCreateInput>>;
  /** Delete multiple FormGroupParent documents */
  delete?: InputMaybe<Array<FormGroupParentWhereUniqueInput>>;
  /** Disconnect multiple FormGroupParent documents */
  disconnect?: InputMaybe<Array<FormGroupParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FormGroupParent documents */
  set?: InputMaybe<Array<FormGroupParentWhereUniqueInput>>;
  /** Update multiple FormGroupParent documents */
  update?: InputMaybe<Array<FormGroupParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FormGroupParent documents */
  upsert?: InputMaybe<Array<FormGroupParentUpsertWithNestedWhereUniqueInput>>;
};

export type FormGroupParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type FormGroupParentUpdateOneInlineInput = {
  /** Connect existing FormGroupParent document */
  connect?: InputMaybe<FormGroupParentWhereUniqueInput>;
  /** Create and connect one FormGroupParent document */
  create?: InputMaybe<FormGroupParentCreateInput>;
  /** Delete currently connected FormGroupParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected FormGroupParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single FormGroupParent document */
  update?: InputMaybe<FormGroupParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormGroupParent document */
  upsert?: InputMaybe<FormGroupParentUpsertWithNestedWhereUniqueInput>;
};

export type FormGroupParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type FormGroupParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormGroupParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
};

export type FormGroupParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type FormGroupUpdateInput = {
  groupId?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type FormGroupUpdateManyInlineInput = {
  /** Create and connect multiple FormGroup component instances */
  create?: InputMaybe<Array<FormGroupCreateWithPositionInput>>;
  /** Delete multiple FormGroup documents */
  delete?: InputMaybe<Array<FormGroupWhereUniqueInput>>;
  /** Update multiple FormGroup component instances */
  update?: InputMaybe<Array<FormGroupUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormGroup component instances */
  upsert?: InputMaybe<Array<FormGroupUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormGroupUpdateManyInput = {
  groupId?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type FormGroupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormGroupUpdateManyInput;
  /** Document search */
  where: FormGroupWhereInput;
};

export type FormGroupUpdateOneInlineInput = {
  /** Create and connect one FormGroup document */
  create?: InputMaybe<FormGroupCreateInput>;
  /** Delete currently connected FormGroup document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single FormGroup document */
  update?: InputMaybe<FormGroupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormGroup document */
  upsert?: InputMaybe<FormGroupUpsertWithNestedWhereUniqueInput>;
};

export type FormGroupUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<FormGroupUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormGroupWhereUniqueInput;
};

export type FormGroupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormGroupUpdateInput;
  /** Unique document search */
  where: FormGroupWhereUniqueInput;
};

export type FormGroupUpsertInput = {
  /** Create document if it didn't exist */
  create: FormGroupCreateInput;
  /** Update document if it exists */
  update: FormGroupUpdateInput;
};

export type FormGroupUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<FormGroupUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: FormGroupWhereUniqueInput;
};

export type FormGroupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormGroupUpsertInput;
  /** Unique document search */
  where: FormGroupWhereUniqueInput;
};

/** Identifies documents */
export type FormGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  groupId?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  groupId_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  groupId_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  groupId_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  groupId_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  groupId_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  groupId_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  groupId_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References FormGroup record uniquely */
export type FormGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Identifies documents */
export type FormManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<FormButtonWhereInput>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  /** All values in which the union is empty. */
  fields_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  fields_some?: InputMaybe<FormfieldsUnionWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum FormOrderByInput {
  ColorSchemeAsc = 'colorScheme_ASC',
  ColorSchemeDesc = 'colorScheme_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type FormUpdateInput = {
  button?: InputMaybe<FormButtonUpdateOneInlineInput>;
  cl8zdv0ti0vqy01ur1gjnag6u?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  cla898hk70e1001um8ipj0mui?: InputMaybe<CalloutUpdateManyInlineInput>;
  colorScheme?: InputMaybe<ThemeColor>;
  fields?: InputMaybe<FormfieldsUnionUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  pageContents?: InputMaybe<PageContentUpdateManyInlineInput>;
};

export type FormUpdateManyInlineInput = {
  /** Connect multiple existing Form documents */
  connect?: InputMaybe<Array<FormConnectInput>>;
  /** Create and connect multiple Form documents */
  create?: InputMaybe<Array<FormCreateInput>>;
  /** Delete multiple Form documents */
  delete?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Disconnect multiple Form documents */
  disconnect?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Form documents */
  set?: InputMaybe<Array<FormWhereUniqueInput>>;
  /** Update multiple Form documents */
  update?: InputMaybe<Array<FormUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Form documents */
  upsert?: InputMaybe<Array<FormUpsertWithNestedWhereUniqueInput>>;
};

export type FormUpdateManyInput = {
  colorScheme?: InputMaybe<ThemeColor>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type FormUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FormUpdateManyInput;
  /** Document search */
  where: FormWhereInput;
};

export type FormUpdateOneInlineInput = {
  /** Connect existing Form document */
  connect?: InputMaybe<FormWhereUniqueInput>;
  /** Create and connect one Form document */
  create?: InputMaybe<FormCreateInput>;
  /** Delete currently connected Form document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Form document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Form document */
  update?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Form document */
  upsert?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type FormUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FormUpdateInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

export type FormUpsertInput = {
  /** Create document if it didn't exist */
  create: FormCreateInput;
  /** Update document if it exists */
  update: FormUpdateInput;
};

export type FormUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FormUpsertInput;
  /** Unique document search */
  where: FormWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FormWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type FormWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<FormButtonWhereInput>;
  colorScheme?: InputMaybe<ThemeColor>;
  /** All values that are contained in given list. */
  colorScheme_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  /** Any other value that exists and is not equal to the given value. */
  colorScheme_not?: InputMaybe<ThemeColor>;
  /** All values that are not contained in given list. */
  colorScheme_not_in?: InputMaybe<Array<InputMaybe<ThemeColor>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FormWhereStageInput>;
  documentInStages_none?: InputMaybe<FormWhereStageInput>;
  documentInStages_some?: InputMaybe<FormWhereStageInput>;
  /** All values in which the union is empty. */
  fields_empty?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  fields_some?: InputMaybe<FormfieldsUnionWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  pageContents_every?: InputMaybe<PageContentWhereInput>;
  pageContents_none?: InputMaybe<PageContentWhereInput>;
  pageContents_some?: InputMaybe<PageContentWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FormWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FormWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FormWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FormWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Form record uniquely */
export type FormWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type FormfieldsUnion = AddressSearchField | CheckboxField | CurrencyField | DateField | FormGroup | RemoteSelectField | SelectField | TextAreaField | TextInputField;

export type FormfieldsUnionConnectInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldConnectInput>;
  CheckboxField?: InputMaybe<CheckboxFieldConnectInput>;
  CurrencyField?: InputMaybe<CurrencyFieldConnectInput>;
  DateField?: InputMaybe<DateFieldConnectInput>;
  FormGroup?: InputMaybe<FormGroupConnectInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldConnectInput>;
  SelectField?: InputMaybe<SelectFieldConnectInput>;
  TextAreaField?: InputMaybe<TextAreaFieldConnectInput>;
  TextInputField?: InputMaybe<TextInputFieldConnectInput>;
};

export type FormfieldsUnionCreateInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldCreateInput>;
  CheckboxField?: InputMaybe<CheckboxFieldCreateInput>;
  CurrencyField?: InputMaybe<CurrencyFieldCreateInput>;
  DateField?: InputMaybe<DateFieldCreateInput>;
  FormGroup?: InputMaybe<FormGroupCreateInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldCreateInput>;
  SelectField?: InputMaybe<SelectFieldCreateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateInput>;
};

export type FormfieldsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing FormfieldsUnion documents */
  create?: InputMaybe<Array<FormfieldsUnionCreateInput>>;
};

export type FormfieldsUnionCreateOneInlineInput = {
  /** Create and connect one FormfieldsUnion document */
  create?: InputMaybe<FormfieldsUnionCreateInput>;
};

export type FormfieldsUnionCreateWithPositionInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldCreateWithPositionInput>;
  CheckboxField?: InputMaybe<CheckboxFieldCreateWithPositionInput>;
  CurrencyField?: InputMaybe<CurrencyFieldCreateWithPositionInput>;
  DateField?: InputMaybe<DateFieldCreateWithPositionInput>;
  FormGroup?: InputMaybe<FormGroupCreateWithPositionInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldCreateWithPositionInput>;
  SelectField?: InputMaybe<SelectFieldCreateWithPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldCreateWithPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldCreateWithPositionInput>;
};

export type FormfieldsUnionUpdateInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldUpdateInput>;
  CheckboxField?: InputMaybe<CheckboxFieldUpdateInput>;
  CurrencyField?: InputMaybe<CurrencyFieldUpdateInput>;
  DateField?: InputMaybe<DateFieldUpdateInput>;
  FormGroup?: InputMaybe<FormGroupUpdateInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldUpdateInput>;
  SelectField?: InputMaybe<SelectFieldUpdateInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateInput>;
};

export type FormfieldsUnionUpdateManyInlineInput = {
  /** Create and connect multiple FormfieldsUnion component instances */
  create?: InputMaybe<Array<FormfieldsUnionCreateWithPositionInput>>;
  /** Delete multiple FormfieldsUnion documents */
  delete?: InputMaybe<Array<FormfieldsUnionWhereUniqueInput>>;
  /** Update multiple FormfieldsUnion component instances */
  update?: InputMaybe<Array<FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FormfieldsUnion component instances */
  upsert?: InputMaybe<Array<FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FormfieldsUnionUpdateManyWithNestedWhereInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldUpdateManyWithNestedWhereInput>;
  CheckboxField?: InputMaybe<CheckboxFieldUpdateManyWithNestedWhereInput>;
  CurrencyField?: InputMaybe<CurrencyFieldUpdateManyWithNestedWhereInput>;
  DateField?: InputMaybe<DateFieldUpdateManyWithNestedWhereInput>;
  FormGroup?: InputMaybe<FormGroupUpdateManyWithNestedWhereInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldUpdateManyWithNestedWhereInput>;
  SelectField?: InputMaybe<SelectFieldUpdateManyWithNestedWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateManyWithNestedWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateManyWithNestedWhereInput>;
};

export type FormfieldsUnionUpdateOneInlineInput = {
  /** Create and connect one FormfieldsUnion document */
  create?: InputMaybe<FormfieldsUnionCreateInput>;
  /** Delete currently connected FormfieldsUnion document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single FormfieldsUnion document */
  update?: InputMaybe<FormfieldsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FormfieldsUnion document */
  upsert?: InputMaybe<FormfieldsUnionUpsertWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  CurrencyField?: InputMaybe<CurrencyFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  DateField?: InputMaybe<DateFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  FormGroup?: InputMaybe<FormGroupUpdateWithNestedWhereUniqueAndPositionInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type FormfieldsUnionUpdateWithNestedWhereUniqueInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldUpdateWithNestedWhereUniqueInput>;
  CheckboxField?: InputMaybe<CheckboxFieldUpdateWithNestedWhereUniqueInput>;
  CurrencyField?: InputMaybe<CurrencyFieldUpdateWithNestedWhereUniqueInput>;
  DateField?: InputMaybe<DateFieldUpdateWithNestedWhereUniqueInput>;
  FormGroup?: InputMaybe<FormGroupUpdateWithNestedWhereUniqueInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldUpdateWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  CurrencyField?: InputMaybe<CurrencyFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  DateField?: InputMaybe<DateFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  FormGroup?: InputMaybe<FormGroupUpsertWithNestedWhereUniqueAndPositionInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type FormfieldsUnionUpsertWithNestedWhereUniqueInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldUpsertWithNestedWhereUniqueInput>;
  CheckboxField?: InputMaybe<CheckboxFieldUpsertWithNestedWhereUniqueInput>;
  CurrencyField?: InputMaybe<CurrencyFieldUpsertWithNestedWhereUniqueInput>;
  DateField?: InputMaybe<DateFieldUpsertWithNestedWhereUniqueInput>;
  FormGroup?: InputMaybe<FormGroupUpsertWithNestedWhereUniqueInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldUpsertWithNestedWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueInput>;
};

export type FormfieldsUnionWhereInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldWhereInput>;
  CheckboxField?: InputMaybe<CheckboxFieldWhereInput>;
  CurrencyField?: InputMaybe<CurrencyFieldWhereInput>;
  DateField?: InputMaybe<DateFieldWhereInput>;
  FormGroup?: InputMaybe<FormGroupWhereInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldWhereInput>;
  SelectField?: InputMaybe<SelectFieldWhereInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereInput>;
};

export type FormfieldsUnionWhereUniqueInput = {
  AddressSearchField?: InputMaybe<AddressSearchFieldWhereUniqueInput>;
  CheckboxField?: InputMaybe<CheckboxFieldWhereUniqueInput>;
  CurrencyField?: InputMaybe<CurrencyFieldWhereUniqueInput>;
  DateField?: InputMaybe<DateFieldWhereUniqueInput>;
  FormGroup?: InputMaybe<FormGroupWhereUniqueInput>;
  RemoteSelectField?: InputMaybe<RemoteSelectFieldWhereUniqueInput>;
  SelectField?: InputMaybe<SelectFieldWhereUniqueInput>;
  TextAreaField?: InputMaybe<TextAreaFieldWhereUniqueInput>;
  TextInputField?: InputMaybe<TextInputFieldWhereUniqueInput>;
};

export type HeaderGroup = Entity & Node & {
  __typename?: 'HeaderGroup';
  /** Number of grid columns for the header menu */
  columns: Scalars['Int']['output'];
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<HeaderGroup>;
  externalLinks: Array<ExternalLink>;
  /** List of HeaderGroup versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** If link is specified, the header will be a link to a specific page instead of a menu */
  link?: Maybe<Scalars['String']['output']>;
  pages: Array<Page>;
  /** Only show links to direct pages instead of generating links to the page's content */
  pagesOnly: Scalars['Boolean']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sortAlphabetically: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type HeaderGroupCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HeaderGroupDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type HeaderGroupExternalLinksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ExternalLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ExternalLinkWhereInput>;
};


export type HeaderGroupHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type HeaderGroupPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageWhereInput>;
};


export type HeaderGroupPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HeaderGroupScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type HeaderGroupUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type HeaderGroupConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HeaderGroupWhereUniqueInput;
};

/** A connection to a list of items. */
export type HeaderGroupConnection = {
  __typename?: 'HeaderGroupConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HeaderGroupEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HeaderGroupCreateInput = {
  clm50ga1l2zr001uk13iz8xa6?: InputMaybe<ConfigurationCreateManyInlineInput>;
  columns: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  externalLinks?: InputMaybe<ExternalLinkCreateManyInlineInput>;
  link?: InputMaybe<Scalars['String']['input']>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  pagesOnly: Scalars['Boolean']['input'];
  sortAlphabetically: Scalars['Boolean']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HeaderGroupCreateManyInlineInput = {
  /** Connect multiple existing HeaderGroup documents */
  connect?: InputMaybe<Array<HeaderGroupWhereUniqueInput>>;
  /** Create and connect multiple existing HeaderGroup documents */
  create?: InputMaybe<Array<HeaderGroupCreateInput>>;
};

export type HeaderGroupCreateOneInlineInput = {
  /** Connect one existing HeaderGroup document */
  connect?: InputMaybe<HeaderGroupWhereUniqueInput>;
  /** Create and connect one HeaderGroup document */
  create?: InputMaybe<HeaderGroupCreateInput>;
};

/** An edge in a connection. */
export type HeaderGroupEdge = {
  __typename?: 'HeaderGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: HeaderGroup;
};

/** Identifies documents */
export type HeaderGroupManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeaderGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeaderGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeaderGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  columns?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  columns_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  columns_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  columns_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  columns_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  columns_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  columns_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  columns_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HeaderGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<HeaderGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<HeaderGroupWhereStageInput>;
  externalLinks_every?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_none?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_some?: InputMaybe<ExternalLinkWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']['input']>;
  pagesOnly?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  pagesOnly_not?: InputMaybe<Scalars['Boolean']['input']>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  sortAlphabetically_not?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum HeaderGroupOrderByInput {
  ColumnsAsc = 'columns_ASC',
  ColumnsDesc = 'columns_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  PagesOnlyAsc = 'pagesOnly_ASC',
  PagesOnlyDesc = 'pagesOnly_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SortAlphabeticallyAsc = 'sortAlphabetically_ASC',
  SortAlphabeticallyDesc = 'sortAlphabetically_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type HeaderGroupUpdateInput = {
  clm50ga1l2zr001uk13iz8xa6?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  columns?: InputMaybe<Scalars['Int']['input']>;
  externalLinks?: InputMaybe<ExternalLinkUpdateManyInlineInput>;
  link?: InputMaybe<Scalars['String']['input']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  pagesOnly?: InputMaybe<Scalars['Boolean']['input']>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type HeaderGroupUpdateManyInlineInput = {
  /** Connect multiple existing HeaderGroup documents */
  connect?: InputMaybe<Array<HeaderGroupConnectInput>>;
  /** Create and connect multiple HeaderGroup documents */
  create?: InputMaybe<Array<HeaderGroupCreateInput>>;
  /** Delete multiple HeaderGroup documents */
  delete?: InputMaybe<Array<HeaderGroupWhereUniqueInput>>;
  /** Disconnect multiple HeaderGroup documents */
  disconnect?: InputMaybe<Array<HeaderGroupWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing HeaderGroup documents */
  set?: InputMaybe<Array<HeaderGroupWhereUniqueInput>>;
  /** Update multiple HeaderGroup documents */
  update?: InputMaybe<Array<HeaderGroupUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple HeaderGroup documents */
  upsert?: InputMaybe<Array<HeaderGroupUpsertWithNestedWhereUniqueInput>>;
};

export type HeaderGroupUpdateManyInput = {
  columns?: InputMaybe<Scalars['Int']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  pagesOnly?: InputMaybe<Scalars['Boolean']['input']>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type HeaderGroupUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HeaderGroupUpdateManyInput;
  /** Document search */
  where: HeaderGroupWhereInput;
};

export type HeaderGroupUpdateOneInlineInput = {
  /** Connect existing HeaderGroup document */
  connect?: InputMaybe<HeaderGroupWhereUniqueInput>;
  /** Create and connect one HeaderGroup document */
  create?: InputMaybe<HeaderGroupCreateInput>;
  /** Delete currently connected HeaderGroup document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected HeaderGroup document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single HeaderGroup document */
  update?: InputMaybe<HeaderGroupUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HeaderGroup document */
  upsert?: InputMaybe<HeaderGroupUpsertWithNestedWhereUniqueInput>;
};

export type HeaderGroupUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HeaderGroupUpdateInput;
  /** Unique document search */
  where: HeaderGroupWhereUniqueInput;
};

export type HeaderGroupUpsertInput = {
  /** Create document if it didn't exist */
  create: HeaderGroupCreateInput;
  /** Update document if it exists */
  update: HeaderGroupUpdateInput;
};

export type HeaderGroupUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HeaderGroupUpsertInput;
  /** Unique document search */
  where: HeaderGroupWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type HeaderGroupWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type HeaderGroupWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeaderGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeaderGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeaderGroupWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  columns?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  columns_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  columns_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  columns_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  columns_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  columns_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  columns_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  columns_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HeaderGroupWhereStageInput>;
  documentInStages_none?: InputMaybe<HeaderGroupWhereStageInput>;
  documentInStages_some?: InputMaybe<HeaderGroupWhereStageInput>;
  externalLinks_every?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_none?: InputMaybe<ExternalLinkWhereInput>;
  externalLinks_some?: InputMaybe<ExternalLinkWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  link_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  link_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  link_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  link_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  link_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  link_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  link_starts_with?: InputMaybe<Scalars['String']['input']>;
  pagesOnly?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  pagesOnly_not?: InputMaybe<Scalars['Boolean']['input']>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sortAlphabetically?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  sortAlphabetically_not?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type HeaderGroupWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeaderGroupWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeaderGroupWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeaderGroupWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<HeaderGroupWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References HeaderGroup record uniquely */
export type HeaderGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type HomePage = Entity & Node & {
  __typename?: 'HomePage';
  blocks: Array<HomePageBlock>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<HomePage>;
  /** List of HomePage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  mainVideo: Asset;
  name: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type HomePageBlocksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HomePageBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HomePageBlockWhereInput>;
};


export type HomePageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type HomePageHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type HomePageMainVideoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type HomePageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type HomePageBlock = Entity & {
  __typename?: 'HomePageBlock';
  body: RichText;
  button?: Maybe<Button>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  image: Asset;
  /** System stage field */
  stage: Stage;
  subtitle: Scalars['String']['output'];
  title: Scalars['String']['output'];
};


export type HomePageBlockButtonArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HomePageBlockImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type HomePageBlockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HomePageBlockWhereUniqueInput;
};

/** A connection to a list of items. */
export type HomePageBlockConnection = {
  __typename?: 'HomePageBlockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HomePageBlockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HomePageBlockCreateInput = {
  body: Scalars['RichTextAST']['input'];
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  image: AssetCreateOneInlineInput;
  subtitle: Scalars['String']['input'];
  title: Scalars['String']['input'];
};

export type HomePageBlockCreateManyInlineInput = {
  /** Create and connect multiple existing HomePageBlock documents */
  create?: InputMaybe<Array<HomePageBlockCreateInput>>;
};

export type HomePageBlockCreateOneInlineInput = {
  /** Create and connect one HomePageBlock document */
  create?: InputMaybe<HomePageBlockCreateInput>;
};

export type HomePageBlockCreateWithPositionInput = {
  /** Document to create */
  data: HomePageBlockCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type HomePageBlockEdge = {
  __typename?: 'HomePageBlockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: HomePageBlock;
};

/** Identifies documents */
export type HomePageBlockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum HomePageBlockOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type HomePageBlockParent = HomePage;

export type HomePageBlockParentConnectInput = {
  HomePage?: InputMaybe<HomePageConnectInput>;
};

export type HomePageBlockParentCreateInput = {
  HomePage?: InputMaybe<HomePageCreateInput>;
};

export type HomePageBlockParentCreateManyInlineInput = {
  /** Connect multiple existing HomePageBlockParent documents */
  connect?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Create and connect multiple existing HomePageBlockParent documents */
  create?: InputMaybe<Array<HomePageBlockParentCreateInput>>;
};

export type HomePageBlockParentCreateOneInlineInput = {
  /** Connect one existing HomePageBlockParent document */
  connect?: InputMaybe<HomePageBlockParentWhereUniqueInput>;
  /** Create and connect one HomePageBlockParent document */
  create?: InputMaybe<HomePageBlockParentCreateInput>;
};

export type HomePageBlockParentUpdateInput = {
  HomePage?: InputMaybe<HomePageUpdateInput>;
};

export type HomePageBlockParentUpdateManyInlineInput = {
  /** Connect multiple existing HomePageBlockParent documents */
  connect?: InputMaybe<Array<HomePageBlockParentConnectInput>>;
  /** Create and connect multiple HomePageBlockParent documents */
  create?: InputMaybe<Array<HomePageBlockParentCreateInput>>;
  /** Delete multiple HomePageBlockParent documents */
  delete?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Disconnect multiple HomePageBlockParent documents */
  disconnect?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing HomePageBlockParent documents */
  set?: InputMaybe<Array<HomePageBlockParentWhereUniqueInput>>;
  /** Update multiple HomePageBlockParent documents */
  update?: InputMaybe<Array<HomePageBlockParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple HomePageBlockParent documents */
  upsert?: InputMaybe<Array<HomePageBlockParentUpsertWithNestedWhereUniqueInput>>;
};

export type HomePageBlockParentUpdateManyWithNestedWhereInput = {
  HomePage?: InputMaybe<HomePageUpdateManyWithNestedWhereInput>;
};

export type HomePageBlockParentUpdateOneInlineInput = {
  /** Connect existing HomePageBlockParent document */
  connect?: InputMaybe<HomePageBlockParentWhereUniqueInput>;
  /** Create and connect one HomePageBlockParent document */
  create?: InputMaybe<HomePageBlockParentCreateInput>;
  /** Delete currently connected HomePageBlockParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected HomePageBlockParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single HomePageBlockParent document */
  update?: InputMaybe<HomePageBlockParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HomePageBlockParent document */
  upsert?: InputMaybe<HomePageBlockParentUpsertWithNestedWhereUniqueInput>;
};

export type HomePageBlockParentUpdateWithNestedWhereUniqueInput = {
  HomePage?: InputMaybe<HomePageUpdateWithNestedWhereUniqueInput>;
};

export type HomePageBlockParentUpsertWithNestedWhereUniqueInput = {
  HomePage?: InputMaybe<HomePageUpsertWithNestedWhereUniqueInput>;
};

export type HomePageBlockParentWhereInput = {
  HomePage?: InputMaybe<HomePageWhereInput>;
};

export type HomePageBlockParentWhereUniqueInput = {
  HomePage?: InputMaybe<HomePageWhereUniqueInput>;
};

export type HomePageBlockUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageBlockUpdateManyInlineInput = {
  /** Create and connect multiple HomePageBlock component instances */
  create?: InputMaybe<Array<HomePageBlockCreateWithPositionInput>>;
  /** Delete multiple HomePageBlock documents */
  delete?: InputMaybe<Array<HomePageBlockWhereUniqueInput>>;
  /** Update multiple HomePageBlock component instances */
  update?: InputMaybe<Array<HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple HomePageBlock component instances */
  upsert?: InputMaybe<Array<HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type HomePageBlockUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageBlockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HomePageBlockUpdateManyInput;
  /** Document search */
  where: HomePageBlockWhereInput;
};

export type HomePageBlockUpdateOneInlineInput = {
  /** Create and connect one HomePageBlock document */
  create?: InputMaybe<HomePageBlockCreateInput>;
  /** Delete currently connected HomePageBlock document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single HomePageBlock document */
  update?: InputMaybe<HomePageBlockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HomePageBlock document */
  upsert?: InputMaybe<HomePageBlockUpsertWithNestedWhereUniqueInput>;
};

export type HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<HomePageBlockUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HomePageBlockWhereUniqueInput;
};

export type HomePageBlockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HomePageBlockUpdateInput;
  /** Unique document search */
  where: HomePageBlockWhereUniqueInput;
};

export type HomePageBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: HomePageBlockCreateInput;
  /** Update document if it exists */
  update: HomePageBlockUpdateInput;
};

export type HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<HomePageBlockUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: HomePageBlockWhereUniqueInput;
};

export type HomePageBlockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HomePageBlockUpsertInput;
  /** Unique document search */
  where: HomePageBlockWhereUniqueInput;
};

/** Identifies documents */
export type HomePageBlockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References HomePageBlock record uniquely */
export type HomePageBlockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type HomePageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HomePageWhereUniqueInput;
};

/** A connection to a list of items. */
export type HomePageConnection = {
  __typename?: 'HomePageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HomePageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HomePageCreateInput = {
  blocks?: InputMaybe<HomePageBlockCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  mainVideo: AssetCreateOneInlineInput;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HomePageCreateManyInlineInput = {
  /** Connect multiple existing HomePage documents */
  connect?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Create and connect multiple existing HomePage documents */
  create?: InputMaybe<Array<HomePageCreateInput>>;
};

export type HomePageCreateOneInlineInput = {
  /** Connect one existing HomePage document */
  connect?: InputMaybe<HomePageWhereUniqueInput>;
  /** Create and connect one HomePage document */
  create?: InputMaybe<HomePageCreateInput>;
};

/** An edge in a connection. */
export type HomePageEdge = {
  __typename?: 'HomePageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: HomePage;
};

/** Identifies documents */
export type HomePageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  blocks_every?: InputMaybe<HomePageBlockWhereInput>;
  blocks_none?: InputMaybe<HomePageBlockWhereInput>;
  blocks_some?: InputMaybe<HomePageBlockWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_none?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_some?: InputMaybe<HomePageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  mainVideo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum HomePageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type HomePageUpdateInput = {
  blocks?: InputMaybe<HomePageBlockUpdateManyInlineInput>;
  mainVideo?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageUpdateManyInlineInput = {
  /** Connect multiple existing HomePage documents */
  connect?: InputMaybe<Array<HomePageConnectInput>>;
  /** Create and connect multiple HomePage documents */
  create?: InputMaybe<Array<HomePageCreateInput>>;
  /** Delete multiple HomePage documents */
  delete?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Disconnect multiple HomePage documents */
  disconnect?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing HomePage documents */
  set?: InputMaybe<Array<HomePageWhereUniqueInput>>;
  /** Update multiple HomePage documents */
  update?: InputMaybe<Array<HomePageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple HomePage documents */
  upsert?: InputMaybe<Array<HomePageUpsertWithNestedWhereUniqueInput>>;
};

export type HomePageUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HomePageUpdateManyInput;
  /** Document search */
  where: HomePageWhereInput;
};

export type HomePageUpdateOneInlineInput = {
  /** Connect existing HomePage document */
  connect?: InputMaybe<HomePageWhereUniqueInput>;
  /** Create and connect one HomePage document */
  create?: InputMaybe<HomePageCreateInput>;
  /** Delete currently connected HomePage document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected HomePage document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single HomePage document */
  update?: InputMaybe<HomePageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HomePage document */
  upsert?: InputMaybe<HomePageUpsertWithNestedWhereUniqueInput>;
};

export type HomePageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HomePageUpdateInput;
  /** Unique document search */
  where: HomePageWhereUniqueInput;
};

export type HomePageUpsertInput = {
  /** Create document if it didn't exist */
  create: HomePageCreateInput;
  /** Update document if it exists */
  update: HomePageUpdateInput;
};

export type HomePageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HomePageUpsertInput;
  /** Unique document search */
  where: HomePageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type HomePageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type HomePageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  blocks_every?: InputMaybe<HomePageBlockWhereInput>;
  blocks_none?: InputMaybe<HomePageBlockWhereInput>;
  blocks_some?: InputMaybe<HomePageBlockWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_none?: InputMaybe<HomePageWhereStageInput>;
  documentInStages_some?: InputMaybe<HomePageWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  mainVideo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type HomePageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HomePageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HomePageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HomePageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<HomePageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References HomePage record uniquely */
export type HomePageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']['input']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']['input']>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

/** Locale system enumeration */
export enum Locale {
  /** System locale */
  En = 'en'
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location';
  distance: Scalars['Float']['output'];
  latitude: Scalars['Float']['output'];
  longitude: Scalars['Float']['output'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float']['input'];
  longitude: Scalars['Float']['input'];
};

export enum LocationType {
  Address = 'address',
  City = 'city'
}

export type Mutation = {
  __typename?: 'Mutation';
  /** Create one admonition */
  createAdmonition?: Maybe<Admonition>;
  /**
   * Create one asset
   * @deprecated Asset mutations will be overhauled soon
   */
  createAsset?: Maybe<Asset>;
  /** Create one blogPost */
  createBlogPost?: Maybe<BlogPost>;
  /** Create one cloudLocation */
  createCloudLocation?: Maybe<CloudLocation>;
  /** Create one configuration */
  createConfiguration?: Maybe<Configuration>;
  /** Create one contactForm */
  createContactForm?: Maybe<ContactForm>;
  /** Create one contentButton */
  createContentButton?: Maybe<ContentButton>;
  /** Create one contentTag */
  createContentTag?: Maybe<ContentTag>;
  /** Create one docsGroup */
  createDocsGroup?: Maybe<DocsGroup>;
  /** Create one docsPage */
  createDocsPage?: Maybe<DocsPage>;
  /** Create one document */
  createDocument?: Maybe<Document>;
  /** Create one documentGroup */
  createDocumentGroup?: Maybe<DocumentGroup>;
  /** Create one employee */
  createEmployee?: Maybe<Employee>;
  /** Create one footerGroup */
  createFooterGroup?: Maybe<FooterGroup>;
  /** Create one form */
  createForm?: Maybe<Form>;
  /** Create one headerGroup */
  createHeaderGroup?: Maybe<HeaderGroup>;
  /** Create one homePage */
  createHomePage?: Maybe<HomePage>;
  /** Create one officeLocation */
  createOfficeLocation?: Maybe<OfficeLocation>;
  /** Create one page */
  createPage?: Maybe<Page>;
  /** Create one pageContent */
  createPageContent?: Maybe<PageContent>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<ScheduledRelease>;
  /** Create one testimonial */
  createTestimonial?: Maybe<Testimonial>;
  /** Create one theme */
  createTheme?: Maybe<Theme>;
  /** Delete one admonition from _all_ existing stages. Returns deleted document. */
  deleteAdmonition?: Maybe<Admonition>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Asset>;
  /** Delete one blogPost from _all_ existing stages. Returns deleted document. */
  deleteBlogPost?: Maybe<BlogPost>;
  /** Delete one cloudLocation from _all_ existing stages. Returns deleted document. */
  deleteCloudLocation?: Maybe<CloudLocation>;
  /** Delete one configuration from _all_ existing stages. Returns deleted document. */
  deleteConfiguration?: Maybe<Configuration>;
  /** Delete one contactForm from _all_ existing stages. Returns deleted document. */
  deleteContactForm?: Maybe<ContactForm>;
  /** Delete one contentButton from _all_ existing stages. Returns deleted document. */
  deleteContentButton?: Maybe<ContentButton>;
  /** Delete one contentTag from _all_ existing stages. Returns deleted document. */
  deleteContentTag?: Maybe<ContentTag>;
  /** Delete one docsGroup from _all_ existing stages. Returns deleted document. */
  deleteDocsGroup?: Maybe<DocsGroup>;
  /** Delete one docsPage from _all_ existing stages. Returns deleted document. */
  deleteDocsPage?: Maybe<DocsPage>;
  /** Delete one document from _all_ existing stages. Returns deleted document. */
  deleteDocument?: Maybe<Document>;
  /** Delete one documentGroup from _all_ existing stages. Returns deleted document. */
  deleteDocumentGroup?: Maybe<DocumentGroup>;
  /** Delete one employee from _all_ existing stages. Returns deleted document. */
  deleteEmployee?: Maybe<Employee>;
  /** Delete one footerGroup from _all_ existing stages. Returns deleted document. */
  deleteFooterGroup?: Maybe<FooterGroup>;
  /** Delete one form from _all_ existing stages. Returns deleted document. */
  deleteForm?: Maybe<Form>;
  /** Delete one headerGroup from _all_ existing stages. Returns deleted document. */
  deleteHeaderGroup?: Maybe<HeaderGroup>;
  /** Delete one homePage from _all_ existing stages. Returns deleted document. */
  deleteHomePage?: Maybe<HomePage>;
  /**
   * Delete many Admonition documents
   * @deprecated Please use the new paginated many mutation (deleteManyAdmonitionsConnection)
   */
  deleteManyAdmonitions: BatchPayload;
  /** Delete many Admonition documents, return deleted documents */
  deleteManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many BlogPost documents
   * @deprecated Please use the new paginated many mutation (deleteManyBlogPostsConnection)
   */
  deleteManyBlogPosts: BatchPayload;
  /** Delete many BlogPost documents, return deleted documents */
  deleteManyBlogPostsConnection: BlogPostConnection;
  /**
   * Delete many CloudLocation documents
   * @deprecated Please use the new paginated many mutation (deleteManyCloudLocationsConnection)
   */
  deleteManyCloudLocations: BatchPayload;
  /** Delete many CloudLocation documents, return deleted documents */
  deleteManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Delete many Configuration documents
   * @deprecated Please use the new paginated many mutation (deleteManyConfigurationsConnection)
   */
  deleteManyConfigurations: BatchPayload;
  /** Delete many Configuration documents, return deleted documents */
  deleteManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Delete many ContactForm documents
   * @deprecated Please use the new paginated many mutation (deleteManyContactFormsConnection)
   */
  deleteManyContactForms: BatchPayload;
  /** Delete many ContactForm documents, return deleted documents */
  deleteManyContactFormsConnection: ContactFormConnection;
  /**
   * Delete many ContentButton documents
   * @deprecated Please use the new paginated many mutation (deleteManyContentButtonsConnection)
   */
  deleteManyContentButtons: BatchPayload;
  /** Delete many ContentButton documents, return deleted documents */
  deleteManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Delete many ContentTag documents
   * @deprecated Please use the new paginated many mutation (deleteManyContentTagsConnection)
   */
  deleteManyContentTags: BatchPayload;
  /** Delete many ContentTag documents, return deleted documents */
  deleteManyContentTagsConnection: ContentTagConnection;
  /**
   * Delete many DocsGroup documents
   * @deprecated Please use the new paginated many mutation (deleteManyDocsGroupsConnection)
   */
  deleteManyDocsGroups: BatchPayload;
  /** Delete many DocsGroup documents, return deleted documents */
  deleteManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Delete many DocsPage documents
   * @deprecated Please use the new paginated many mutation (deleteManyDocsPagesConnection)
   */
  deleteManyDocsPages: BatchPayload;
  /** Delete many DocsPage documents, return deleted documents */
  deleteManyDocsPagesConnection: DocsPageConnection;
  /**
   * Delete many DocumentGroup documents
   * @deprecated Please use the new paginated many mutation (deleteManyDocumentGroupsConnection)
   */
  deleteManyDocumentGroups: BatchPayload;
  /** Delete many DocumentGroup documents, return deleted documents */
  deleteManyDocumentGroupsConnection: DocumentGroupConnection;
  /**
   * Delete many Document documents
   * @deprecated Please use the new paginated many mutation (deleteManyDocumentsConnection)
   */
  deleteManyDocuments: BatchPayload;
  /** Delete many Document documents, return deleted documents */
  deleteManyDocumentsConnection: DocumentConnection;
  /**
   * Delete many Employee documents
   * @deprecated Please use the new paginated many mutation (deleteManyEmployeesConnection)
   */
  deleteManyEmployees: BatchPayload;
  /** Delete many Employee documents, return deleted documents */
  deleteManyEmployeesConnection: EmployeeConnection;
  /**
   * Delete many FooterGroup documents
   * @deprecated Please use the new paginated many mutation (deleteManyFooterGroupsConnection)
   */
  deleteManyFooterGroups: BatchPayload;
  /** Delete many FooterGroup documents, return deleted documents */
  deleteManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Delete many Form documents
   * @deprecated Please use the new paginated many mutation (deleteManyFormsConnection)
   */
  deleteManyForms: BatchPayload;
  /** Delete many Form documents, return deleted documents */
  deleteManyFormsConnection: FormConnection;
  /**
   * Delete many HeaderGroup documents
   * @deprecated Please use the new paginated many mutation (deleteManyHeaderGroupsConnection)
   */
  deleteManyHeaderGroups: BatchPayload;
  /** Delete many HeaderGroup documents, return deleted documents */
  deleteManyHeaderGroupsConnection: HeaderGroupConnection;
  /**
   * Delete many HomePage documents
   * @deprecated Please use the new paginated many mutation (deleteManyHomePagesConnection)
   */
  deleteManyHomePages: BatchPayload;
  /** Delete many HomePage documents, return deleted documents */
  deleteManyHomePagesConnection: HomePageConnection;
  /**
   * Delete many OfficeLocation documents
   * @deprecated Please use the new paginated many mutation (deleteManyOfficeLocationsConnection)
   */
  deleteManyOfficeLocations: BatchPayload;
  /** Delete many OfficeLocation documents, return deleted documents */
  deleteManyOfficeLocationsConnection: OfficeLocationConnection;
  /**
   * Delete many PageContent documents
   * @deprecated Please use the new paginated many mutation (deleteManyPageContentsConnection)
   */
  deleteManyPageContents: BatchPayload;
  /** Delete many PageContent documents, return deleted documents */
  deleteManyPageContentsConnection: PageContentConnection;
  /**
   * Delete many Page documents
   * @deprecated Please use the new paginated many mutation (deleteManyPagesConnection)
   */
  deleteManyPages: BatchPayload;
  /** Delete many Page documents, return deleted documents */
  deleteManyPagesConnection: PageConnection;
  /**
   * Delete many Testimonial documents
   * @deprecated Please use the new paginated many mutation (deleteManyTestimonialsConnection)
   */
  deleteManyTestimonials: BatchPayload;
  /** Delete many Testimonial documents, return deleted documents */
  deleteManyTestimonialsConnection: TestimonialConnection;
  /**
   * Delete many Theme documents
   * @deprecated Please use the new paginated many mutation (deleteManyThemesConnection)
   */
  deleteManyThemes: BatchPayload;
  /** Delete many Theme documents, return deleted documents */
  deleteManyThemesConnection: ThemeConnection;
  /** Delete one officeLocation from _all_ existing stages. Returns deleted document. */
  deleteOfficeLocation?: Maybe<OfficeLocation>;
  /** Delete one page from _all_ existing stages. Returns deleted document. */
  deletePage?: Maybe<Page>;
  /** Delete one pageContent from _all_ existing stages. Returns deleted document. */
  deletePageContent?: Maybe<PageContent>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<ScheduledRelease>;
  /** Delete one testimonial from _all_ existing stages. Returns deleted document. */
  deleteTestimonial?: Maybe<Testimonial>;
  /** Delete one theme from _all_ existing stages. Returns deleted document. */
  deleteTheme?: Maybe<Theme>;
  /** Publish one admonition */
  publishAdmonition?: Maybe<Admonition>;
  /** Publish one asset */
  publishAsset?: Maybe<Asset>;
  /** Publish one blogPost */
  publishBlogPost?: Maybe<BlogPost>;
  /** Publish one cloudLocation */
  publishCloudLocation?: Maybe<CloudLocation>;
  /** Publish one configuration */
  publishConfiguration?: Maybe<Configuration>;
  /** Publish one contactForm */
  publishContactForm?: Maybe<ContactForm>;
  /** Publish one contentButton */
  publishContentButton?: Maybe<ContentButton>;
  /** Publish one contentTag */
  publishContentTag?: Maybe<ContentTag>;
  /** Publish one docsGroup */
  publishDocsGroup?: Maybe<DocsGroup>;
  /** Publish one docsPage */
  publishDocsPage?: Maybe<DocsPage>;
  /** Publish one document */
  publishDocument?: Maybe<Document>;
  /** Publish one documentGroup */
  publishDocumentGroup?: Maybe<DocumentGroup>;
  /** Publish one employee */
  publishEmployee?: Maybe<Employee>;
  /** Publish one footerGroup */
  publishFooterGroup?: Maybe<FooterGroup>;
  /** Publish one form */
  publishForm?: Maybe<Form>;
  /** Publish one headerGroup */
  publishHeaderGroup?: Maybe<HeaderGroup>;
  /** Publish one homePage */
  publishHomePage?: Maybe<HomePage>;
  /**
   * Publish many Admonition documents
   * @deprecated Please use the new paginated many mutation (publishManyAdmonitionsConnection)
   */
  publishManyAdmonitions: BatchPayload;
  /** Publish many Admonition documents */
  publishManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many BlogPost documents
   * @deprecated Please use the new paginated many mutation (publishManyBlogPostsConnection)
   */
  publishManyBlogPosts: BatchPayload;
  /** Publish many BlogPost documents */
  publishManyBlogPostsConnection: BlogPostConnection;
  /**
   * Publish many CloudLocation documents
   * @deprecated Please use the new paginated many mutation (publishManyCloudLocationsConnection)
   */
  publishManyCloudLocations: BatchPayload;
  /** Publish many CloudLocation documents */
  publishManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Publish many Configuration documents
   * @deprecated Please use the new paginated many mutation (publishManyConfigurationsConnection)
   */
  publishManyConfigurations: BatchPayload;
  /** Publish many Configuration documents */
  publishManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Publish many ContactForm documents
   * @deprecated Please use the new paginated many mutation (publishManyContactFormsConnection)
   */
  publishManyContactForms: BatchPayload;
  /** Publish many ContactForm documents */
  publishManyContactFormsConnection: ContactFormConnection;
  /**
   * Publish many ContentButton documents
   * @deprecated Please use the new paginated many mutation (publishManyContentButtonsConnection)
   */
  publishManyContentButtons: BatchPayload;
  /** Publish many ContentButton documents */
  publishManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Publish many ContentTag documents
   * @deprecated Please use the new paginated many mutation (publishManyContentTagsConnection)
   */
  publishManyContentTags: BatchPayload;
  /** Publish many ContentTag documents */
  publishManyContentTagsConnection: ContentTagConnection;
  /**
   * Publish many DocsGroup documents
   * @deprecated Please use the new paginated many mutation (publishManyDocsGroupsConnection)
   */
  publishManyDocsGroups: BatchPayload;
  /** Publish many DocsGroup documents */
  publishManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Publish many DocsPage documents
   * @deprecated Please use the new paginated many mutation (publishManyDocsPagesConnection)
   */
  publishManyDocsPages: BatchPayload;
  /** Publish many DocsPage documents */
  publishManyDocsPagesConnection: DocsPageConnection;
  /**
   * Publish many DocumentGroup documents
   * @deprecated Please use the new paginated many mutation (publishManyDocumentGroupsConnection)
   */
  publishManyDocumentGroups: BatchPayload;
  /** Publish many DocumentGroup documents */
  publishManyDocumentGroupsConnection: DocumentGroupConnection;
  /**
   * Publish many Document documents
   * @deprecated Please use the new paginated many mutation (publishManyDocumentsConnection)
   */
  publishManyDocuments: BatchPayload;
  /** Publish many Document documents */
  publishManyDocumentsConnection: DocumentConnection;
  /**
   * Publish many Employee documents
   * @deprecated Please use the new paginated many mutation (publishManyEmployeesConnection)
   */
  publishManyEmployees: BatchPayload;
  /** Publish many Employee documents */
  publishManyEmployeesConnection: EmployeeConnection;
  /**
   * Publish many FooterGroup documents
   * @deprecated Please use the new paginated many mutation (publishManyFooterGroupsConnection)
   */
  publishManyFooterGroups: BatchPayload;
  /** Publish many FooterGroup documents */
  publishManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Publish many Form documents
   * @deprecated Please use the new paginated many mutation (publishManyFormsConnection)
   */
  publishManyForms: BatchPayload;
  /** Publish many Form documents */
  publishManyFormsConnection: FormConnection;
  /**
   * Publish many HeaderGroup documents
   * @deprecated Please use the new paginated many mutation (publishManyHeaderGroupsConnection)
   */
  publishManyHeaderGroups: BatchPayload;
  /** Publish many HeaderGroup documents */
  publishManyHeaderGroupsConnection: HeaderGroupConnection;
  /**
   * Publish many HomePage documents
   * @deprecated Please use the new paginated many mutation (publishManyHomePagesConnection)
   */
  publishManyHomePages: BatchPayload;
  /** Publish many HomePage documents */
  publishManyHomePagesConnection: HomePageConnection;
  /**
   * Publish many OfficeLocation documents
   * @deprecated Please use the new paginated many mutation (publishManyOfficeLocationsConnection)
   */
  publishManyOfficeLocations: BatchPayload;
  /** Publish many OfficeLocation documents */
  publishManyOfficeLocationsConnection: OfficeLocationConnection;
  /**
   * Publish many PageContent documents
   * @deprecated Please use the new paginated many mutation (publishManyPageContentsConnection)
   */
  publishManyPageContents: BatchPayload;
  /** Publish many PageContent documents */
  publishManyPageContentsConnection: PageContentConnection;
  /**
   * Publish many Page documents
   * @deprecated Please use the new paginated many mutation (publishManyPagesConnection)
   */
  publishManyPages: BatchPayload;
  /** Publish many Page documents */
  publishManyPagesConnection: PageConnection;
  /**
   * Publish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (publishManyTestimonialsConnection)
   */
  publishManyTestimonials: BatchPayload;
  /** Publish many Testimonial documents */
  publishManyTestimonialsConnection: TestimonialConnection;
  /**
   * Publish many Theme documents
   * @deprecated Please use the new paginated many mutation (publishManyThemesConnection)
   */
  publishManyThemes: BatchPayload;
  /** Publish many Theme documents */
  publishManyThemesConnection: ThemeConnection;
  /** Publish one officeLocation */
  publishOfficeLocation?: Maybe<OfficeLocation>;
  /** Publish one page */
  publishPage?: Maybe<Page>;
  /** Publish one pageContent */
  publishPageContent?: Maybe<PageContent>;
  /** Publish one testimonial */
  publishTestimonial?: Maybe<Testimonial>;
  /** Publish one theme */
  publishTheme?: Maybe<Theme>;
  /** Schedule to publish one admonition */
  schedulePublishAdmonition?: Maybe<Admonition>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Asset>;
  /** Schedule to publish one blogPost */
  schedulePublishBlogPost?: Maybe<BlogPost>;
  /** Schedule to publish one cloudLocation */
  schedulePublishCloudLocation?: Maybe<CloudLocation>;
  /** Schedule to publish one configuration */
  schedulePublishConfiguration?: Maybe<Configuration>;
  /** Schedule to publish one contactForm */
  schedulePublishContactForm?: Maybe<ContactForm>;
  /** Schedule to publish one contentButton */
  schedulePublishContentButton?: Maybe<ContentButton>;
  /** Schedule to publish one contentTag */
  schedulePublishContentTag?: Maybe<ContentTag>;
  /** Schedule to publish one docsGroup */
  schedulePublishDocsGroup?: Maybe<DocsGroup>;
  /** Schedule to publish one docsPage */
  schedulePublishDocsPage?: Maybe<DocsPage>;
  /** Schedule to publish one document */
  schedulePublishDocument?: Maybe<Document>;
  /** Schedule to publish one documentGroup */
  schedulePublishDocumentGroup?: Maybe<DocumentGroup>;
  /** Schedule to publish one employee */
  schedulePublishEmployee?: Maybe<Employee>;
  /** Schedule to publish one footerGroup */
  schedulePublishFooterGroup?: Maybe<FooterGroup>;
  /** Schedule to publish one form */
  schedulePublishForm?: Maybe<Form>;
  /** Schedule to publish one headerGroup */
  schedulePublishHeaderGroup?: Maybe<HeaderGroup>;
  /** Schedule to publish one homePage */
  schedulePublishHomePage?: Maybe<HomePage>;
  /** Schedule to publish one officeLocation */
  schedulePublishOfficeLocation?: Maybe<OfficeLocation>;
  /** Schedule to publish one page */
  schedulePublishPage?: Maybe<Page>;
  /** Schedule to publish one pageContent */
  schedulePublishPageContent?: Maybe<PageContent>;
  /** Schedule to publish one testimonial */
  schedulePublishTestimonial?: Maybe<Testimonial>;
  /** Schedule to publish one theme */
  schedulePublishTheme?: Maybe<Theme>;
  /** Unpublish one admonition from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAdmonition?: Maybe<Admonition>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Asset>;
  /** Unpublish one blogPost from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBlogPost?: Maybe<BlogPost>;
  /** Unpublish one cloudLocation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCloudLocation?: Maybe<CloudLocation>;
  /** Unpublish one configuration from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishConfiguration?: Maybe<Configuration>;
  /** Unpublish one contactForm from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishContactForm?: Maybe<ContactForm>;
  /** Unpublish one contentButton from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishContentButton?: Maybe<ContentButton>;
  /** Unpublish one contentTag from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishContentTag?: Maybe<ContentTag>;
  /** Unpublish one docsGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishDocsGroup?: Maybe<DocsGroup>;
  /** Unpublish one docsPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishDocsPage?: Maybe<DocsPage>;
  /** Unpublish one document from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishDocument?: Maybe<Document>;
  /** Unpublish one documentGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishDocumentGroup?: Maybe<DocumentGroup>;
  /** Unpublish one employee from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishEmployee?: Maybe<Employee>;
  /** Unpublish one footerGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishFooterGroup?: Maybe<FooterGroup>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishForm?: Maybe<Form>;
  /** Unpublish one headerGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishHeaderGroup?: Maybe<HeaderGroup>;
  /** Unpublish one homePage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishHomePage?: Maybe<HomePage>;
  /** Unpublish one officeLocation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishOfficeLocation?: Maybe<OfficeLocation>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPage?: Maybe<Page>;
  /** Unpublish one pageContent from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPageContent?: Maybe<PageContent>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one theme from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishTheme?: Maybe<Theme>;
  /** Unpublish one admonition from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAdmonition?: Maybe<Admonition>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Asset>;
  /** Unpublish one blogPost from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBlogPost?: Maybe<BlogPost>;
  /** Unpublish one cloudLocation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCloudLocation?: Maybe<CloudLocation>;
  /** Unpublish one configuration from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishConfiguration?: Maybe<Configuration>;
  /** Unpublish one contactForm from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishContactForm?: Maybe<ContactForm>;
  /** Unpublish one contentButton from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishContentButton?: Maybe<ContentButton>;
  /** Unpublish one contentTag from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishContentTag?: Maybe<ContentTag>;
  /** Unpublish one docsGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishDocsGroup?: Maybe<DocsGroup>;
  /** Unpublish one docsPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishDocsPage?: Maybe<DocsPage>;
  /** Unpublish one document from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishDocument?: Maybe<Document>;
  /** Unpublish one documentGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishDocumentGroup?: Maybe<DocumentGroup>;
  /** Unpublish one employee from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishEmployee?: Maybe<Employee>;
  /** Unpublish one footerGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishFooterGroup?: Maybe<FooterGroup>;
  /** Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishForm?: Maybe<Form>;
  /** Unpublish one headerGroup from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishHeaderGroup?: Maybe<HeaderGroup>;
  /** Unpublish one homePage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishHomePage?: Maybe<HomePage>;
  /**
   * Unpublish many Admonition documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAdmonitionsConnection)
   */
  unpublishManyAdmonitions: BatchPayload;
  /** Find many Admonition documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many BlogPost documents
   * @deprecated Please use the new paginated many mutation (unpublishManyBlogPostsConnection)
   */
  unpublishManyBlogPosts: BatchPayload;
  /** Find many BlogPost documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyBlogPostsConnection: BlogPostConnection;
  /**
   * Unpublish many CloudLocation documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCloudLocationsConnection)
   */
  unpublishManyCloudLocations: BatchPayload;
  /** Find many CloudLocation documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Unpublish many Configuration documents
   * @deprecated Please use the new paginated many mutation (unpublishManyConfigurationsConnection)
   */
  unpublishManyConfigurations: BatchPayload;
  /** Find many Configuration documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Unpublish many ContactForm documents
   * @deprecated Please use the new paginated many mutation (unpublishManyContactFormsConnection)
   */
  unpublishManyContactForms: BatchPayload;
  /** Find many ContactForm documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyContactFormsConnection: ContactFormConnection;
  /**
   * Unpublish many ContentButton documents
   * @deprecated Please use the new paginated many mutation (unpublishManyContentButtonsConnection)
   */
  unpublishManyContentButtons: BatchPayload;
  /** Find many ContentButton documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Unpublish many ContentTag documents
   * @deprecated Please use the new paginated many mutation (unpublishManyContentTagsConnection)
   */
  unpublishManyContentTags: BatchPayload;
  /** Find many ContentTag documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyContentTagsConnection: ContentTagConnection;
  /**
   * Unpublish many DocsGroup documents
   * @deprecated Please use the new paginated many mutation (unpublishManyDocsGroupsConnection)
   */
  unpublishManyDocsGroups: BatchPayload;
  /** Find many DocsGroup documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Unpublish many DocsPage documents
   * @deprecated Please use the new paginated many mutation (unpublishManyDocsPagesConnection)
   */
  unpublishManyDocsPages: BatchPayload;
  /** Find many DocsPage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyDocsPagesConnection: DocsPageConnection;
  /**
   * Unpublish many DocumentGroup documents
   * @deprecated Please use the new paginated many mutation (unpublishManyDocumentGroupsConnection)
   */
  unpublishManyDocumentGroups: BatchPayload;
  /** Find many DocumentGroup documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyDocumentGroupsConnection: DocumentGroupConnection;
  /**
   * Unpublish many Document documents
   * @deprecated Please use the new paginated many mutation (unpublishManyDocumentsConnection)
   */
  unpublishManyDocuments: BatchPayload;
  /** Find many Document documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyDocumentsConnection: DocumentConnection;
  /**
   * Unpublish many Employee documents
   * @deprecated Please use the new paginated many mutation (unpublishManyEmployeesConnection)
   */
  unpublishManyEmployees: BatchPayload;
  /** Find many Employee documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyEmployeesConnection: EmployeeConnection;
  /**
   * Unpublish many FooterGroup documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFooterGroupsConnection)
   */
  unpublishManyFooterGroups: BatchPayload;
  /** Find many FooterGroup documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Unpublish many Form documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFormsConnection)
   */
  unpublishManyForms: BatchPayload;
  /** Find many Form documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFormsConnection: FormConnection;
  /**
   * Unpublish many HeaderGroup documents
   * @deprecated Please use the new paginated many mutation (unpublishManyHeaderGroupsConnection)
   */
  unpublishManyHeaderGroups: BatchPayload;
  /** Find many HeaderGroup documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyHeaderGroupsConnection: HeaderGroupConnection;
  /**
   * Unpublish many HomePage documents
   * @deprecated Please use the new paginated many mutation (unpublishManyHomePagesConnection)
   */
  unpublishManyHomePages: BatchPayload;
  /** Find many HomePage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyHomePagesConnection: HomePageConnection;
  /**
   * Unpublish many OfficeLocation documents
   * @deprecated Please use the new paginated many mutation (unpublishManyOfficeLocationsConnection)
   */
  unpublishManyOfficeLocations: BatchPayload;
  /** Find many OfficeLocation documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyOfficeLocationsConnection: OfficeLocationConnection;
  /**
   * Unpublish many PageContent documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPageContentsConnection)
   */
  unpublishManyPageContents: BatchPayload;
  /** Find many PageContent documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPageContentsConnection: PageContentConnection;
  /**
   * Unpublish many Page documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPagesConnection)
   */
  unpublishManyPages: BatchPayload;
  /** Find many Page documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPagesConnection: PageConnection;
  /**
   * Unpublish many Testimonial documents
   * @deprecated Please use the new paginated many mutation (unpublishManyTestimonialsConnection)
   */
  unpublishManyTestimonials: BatchPayload;
  /** Find many Testimonial documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyTestimonialsConnection: TestimonialConnection;
  /**
   * Unpublish many Theme documents
   * @deprecated Please use the new paginated many mutation (unpublishManyThemesConnection)
   */
  unpublishManyThemes: BatchPayload;
  /** Find many Theme documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyThemesConnection: ThemeConnection;
  /** Unpublish one officeLocation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishOfficeLocation?: Maybe<OfficeLocation>;
  /** Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPage?: Maybe<Page>;
  /** Unpublish one pageContent from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPageContent?: Maybe<PageContent>;
  /** Unpublish one testimonial from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishTestimonial?: Maybe<Testimonial>;
  /** Unpublish one theme from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishTheme?: Maybe<Theme>;
  /** Update one admonition */
  updateAdmonition?: Maybe<Admonition>;
  /** Update one asset */
  updateAsset?: Maybe<Asset>;
  /** Update one blogPost */
  updateBlogPost?: Maybe<BlogPost>;
  /** Update one cloudLocation */
  updateCloudLocation?: Maybe<CloudLocation>;
  /** Update one configuration */
  updateConfiguration?: Maybe<Configuration>;
  /** Update one contactForm */
  updateContactForm?: Maybe<ContactForm>;
  /** Update one contentButton */
  updateContentButton?: Maybe<ContentButton>;
  /** Update one contentTag */
  updateContentTag?: Maybe<ContentTag>;
  /** Update one docsGroup */
  updateDocsGroup?: Maybe<DocsGroup>;
  /** Update one docsPage */
  updateDocsPage?: Maybe<DocsPage>;
  /** Update one document */
  updateDocument?: Maybe<Document>;
  /** Update one documentGroup */
  updateDocumentGroup?: Maybe<DocumentGroup>;
  /** Update one employee */
  updateEmployee?: Maybe<Employee>;
  /** Update one footerGroup */
  updateFooterGroup?: Maybe<FooterGroup>;
  /** Update one form */
  updateForm?: Maybe<Form>;
  /** Update one headerGroup */
  updateHeaderGroup?: Maybe<HeaderGroup>;
  /** Update one homePage */
  updateHomePage?: Maybe<HomePage>;
  /**
   * Update many admonitions
   * @deprecated Please use the new paginated many mutation (updateManyAdmonitionsConnection)
   */
  updateManyAdmonitions: BatchPayload;
  /** Update many Admonition documents */
  updateManyAdmonitionsConnection: AdmonitionConnection;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many blogPosts
   * @deprecated Please use the new paginated many mutation (updateManyBlogPostsConnection)
   */
  updateManyBlogPosts: BatchPayload;
  /** Update many BlogPost documents */
  updateManyBlogPostsConnection: BlogPostConnection;
  /**
   * Update many cloudLocations
   * @deprecated Please use the new paginated many mutation (updateManyCloudLocationsConnection)
   */
  updateManyCloudLocations: BatchPayload;
  /** Update many CloudLocation documents */
  updateManyCloudLocationsConnection: CloudLocationConnection;
  /**
   * Update many configurations
   * @deprecated Please use the new paginated many mutation (updateManyConfigurationsConnection)
   */
  updateManyConfigurations: BatchPayload;
  /** Update many Configuration documents */
  updateManyConfigurationsConnection: ConfigurationConnection;
  /**
   * Update many contactForms
   * @deprecated Please use the new paginated many mutation (updateManyContactFormsConnection)
   */
  updateManyContactForms: BatchPayload;
  /** Update many ContactForm documents */
  updateManyContactFormsConnection: ContactFormConnection;
  /**
   * Update many contentButtons
   * @deprecated Please use the new paginated many mutation (updateManyContentButtonsConnection)
   */
  updateManyContentButtons: BatchPayload;
  /** Update many ContentButton documents */
  updateManyContentButtonsConnection: ContentButtonConnection;
  /**
   * Update many contentTags
   * @deprecated Please use the new paginated many mutation (updateManyContentTagsConnection)
   */
  updateManyContentTags: BatchPayload;
  /** Update many ContentTag documents */
  updateManyContentTagsConnection: ContentTagConnection;
  /**
   * Update many docsGroups
   * @deprecated Please use the new paginated many mutation (updateManyDocsGroupsConnection)
   */
  updateManyDocsGroups: BatchPayload;
  /** Update many DocsGroup documents */
  updateManyDocsGroupsConnection: DocsGroupConnection;
  /**
   * Update many docsPages
   * @deprecated Please use the new paginated many mutation (updateManyDocsPagesConnection)
   */
  updateManyDocsPages: BatchPayload;
  /** Update many DocsPage documents */
  updateManyDocsPagesConnection: DocsPageConnection;
  /**
   * Update many documentGroups
   * @deprecated Please use the new paginated many mutation (updateManyDocumentGroupsConnection)
   */
  updateManyDocumentGroups: BatchPayload;
  /** Update many DocumentGroup documents */
  updateManyDocumentGroupsConnection: DocumentGroupConnection;
  /**
   * Update many documents
   * @deprecated Please use the new paginated many mutation (updateManyDocumentsConnection)
   */
  updateManyDocuments: BatchPayload;
  /** Update many Document documents */
  updateManyDocumentsConnection: DocumentConnection;
  /**
   * Update many employees
   * @deprecated Please use the new paginated many mutation (updateManyEmployeesConnection)
   */
  updateManyEmployees: BatchPayload;
  /** Update many Employee documents */
  updateManyEmployeesConnection: EmployeeConnection;
  /**
   * Update many footerGroups
   * @deprecated Please use the new paginated many mutation (updateManyFooterGroupsConnection)
   */
  updateManyFooterGroups: BatchPayload;
  /** Update many FooterGroup documents */
  updateManyFooterGroupsConnection: FooterGroupConnection;
  /**
   * Update many forms
   * @deprecated Please use the new paginated many mutation (updateManyFormsConnection)
   */
  updateManyForms: BatchPayload;
  /** Update many Form documents */
  updateManyFormsConnection: FormConnection;
  /**
   * Update many headerGroups
   * @deprecated Please use the new paginated many mutation (updateManyHeaderGroupsConnection)
   */
  updateManyHeaderGroups: BatchPayload;
  /** Update many HeaderGroup documents */
  updateManyHeaderGroupsConnection: HeaderGroupConnection;
  /**
   * Update many homePages
   * @deprecated Please use the new paginated many mutation (updateManyHomePagesConnection)
   */
  updateManyHomePages: BatchPayload;
  /** Update many HomePage documents */
  updateManyHomePagesConnection: HomePageConnection;
  /**
   * Update many officeLocations
   * @deprecated Please use the new paginated many mutation (updateManyOfficeLocationsConnection)
   */
  updateManyOfficeLocations: BatchPayload;
  /** Update many OfficeLocation documents */
  updateManyOfficeLocationsConnection: OfficeLocationConnection;
  /**
   * Update many pageContents
   * @deprecated Please use the new paginated many mutation (updateManyPageContentsConnection)
   */
  updateManyPageContents: BatchPayload;
  /** Update many PageContent documents */
  updateManyPageContentsConnection: PageContentConnection;
  /**
   * Update many pages
   * @deprecated Please use the new paginated many mutation (updateManyPagesConnection)
   */
  updateManyPages: BatchPayload;
  /** Update many Page documents */
  updateManyPagesConnection: PageConnection;
  /**
   * Update many testimonials
   * @deprecated Please use the new paginated many mutation (updateManyTestimonialsConnection)
   */
  updateManyTestimonials: BatchPayload;
  /** Update many Testimonial documents */
  updateManyTestimonialsConnection: TestimonialConnection;
  /**
   * Update many themes
   * @deprecated Please use the new paginated many mutation (updateManyThemesConnection)
   */
  updateManyThemes: BatchPayload;
  /** Update many Theme documents */
  updateManyThemesConnection: ThemeConnection;
  /** Update one officeLocation */
  updateOfficeLocation?: Maybe<OfficeLocation>;
  /** Update one page */
  updatePage?: Maybe<Page>;
  /** Update one pageContent */
  updatePageContent?: Maybe<PageContent>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<ScheduledRelease>;
  /** Update one testimonial */
  updateTestimonial?: Maybe<Testimonial>;
  /** Update one theme */
  updateTheme?: Maybe<Theme>;
  /** Upsert one admonition */
  upsertAdmonition?: Maybe<Admonition>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Asset>;
  /** Upsert one blogPost */
  upsertBlogPost?: Maybe<BlogPost>;
  /** Upsert one cloudLocation */
  upsertCloudLocation?: Maybe<CloudLocation>;
  /** Upsert one configuration */
  upsertConfiguration?: Maybe<Configuration>;
  /** Upsert one contactForm */
  upsertContactForm?: Maybe<ContactForm>;
  /** Upsert one contentButton */
  upsertContentButton?: Maybe<ContentButton>;
  /** Upsert one contentTag */
  upsertContentTag?: Maybe<ContentTag>;
  /** Upsert one docsGroup */
  upsertDocsGroup?: Maybe<DocsGroup>;
  /** Upsert one docsPage */
  upsertDocsPage?: Maybe<DocsPage>;
  /** Upsert one document */
  upsertDocument?: Maybe<Document>;
  /** Upsert one documentGroup */
  upsertDocumentGroup?: Maybe<DocumentGroup>;
  /** Upsert one employee */
  upsertEmployee?: Maybe<Employee>;
  /** Upsert one footerGroup */
  upsertFooterGroup?: Maybe<FooterGroup>;
  /** Upsert one form */
  upsertForm?: Maybe<Form>;
  /** Upsert one headerGroup */
  upsertHeaderGroup?: Maybe<HeaderGroup>;
  /** Upsert one homePage */
  upsertHomePage?: Maybe<HomePage>;
  /** Upsert one officeLocation */
  upsertOfficeLocation?: Maybe<OfficeLocation>;
  /** Upsert one page */
  upsertPage?: Maybe<Page>;
  /** Upsert one pageContent */
  upsertPageContent?: Maybe<PageContent>;
  /** Upsert one testimonial */
  upsertTestimonial?: Maybe<Testimonial>;
  /** Upsert one theme */
  upsertTheme?: Maybe<Theme>;
};


export type MutationCreateAdmonitionArgs = {
  data: AdmonitionCreateInput;
};


export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};


export type MutationCreateBlogPostArgs = {
  data: BlogPostCreateInput;
};


export type MutationCreateCloudLocationArgs = {
  data: CloudLocationCreateInput;
};


export type MutationCreateConfigurationArgs = {
  data: ConfigurationCreateInput;
};


export type MutationCreateContactFormArgs = {
  data: ContactFormCreateInput;
};


export type MutationCreateContentButtonArgs = {
  data: ContentButtonCreateInput;
};


export type MutationCreateContentTagArgs = {
  data: ContentTagCreateInput;
};


export type MutationCreateDocsGroupArgs = {
  data: DocsGroupCreateInput;
};


export type MutationCreateDocsPageArgs = {
  data: DocsPageCreateInput;
};


export type MutationCreateDocumentArgs = {
  data: DocumentCreateInput;
};


export type MutationCreateDocumentGroupArgs = {
  data: DocumentGroupCreateInput;
};


export type MutationCreateEmployeeArgs = {
  data: EmployeeCreateInput;
};


export type MutationCreateFooterGroupArgs = {
  data: FooterGroupCreateInput;
};


export type MutationCreateFormArgs = {
  data: FormCreateInput;
};


export type MutationCreateHeaderGroupArgs = {
  data: HeaderGroupCreateInput;
};


export type MutationCreateHomePageArgs = {
  data: HomePageCreateInput;
};


export type MutationCreateOfficeLocationArgs = {
  data: OfficeLocationCreateInput;
};


export type MutationCreatePageArgs = {
  data: PageCreateInput;
};


export type MutationCreatePageContentArgs = {
  data: PageContentCreateInput;
};


export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};


export type MutationCreateTestimonialArgs = {
  data: TestimonialCreateInput;
};


export type MutationCreateThemeArgs = {
  data: ThemeCreateInput;
};


export type MutationDeleteAdmonitionArgs = {
  where: AdmonitionWhereUniqueInput;
};


export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};


export type MutationDeleteBlogPostArgs = {
  where: BlogPostWhereUniqueInput;
};


export type MutationDeleteCloudLocationArgs = {
  where: CloudLocationWhereUniqueInput;
};


export type MutationDeleteConfigurationArgs = {
  where: ConfigurationWhereUniqueInput;
};


export type MutationDeleteContactFormArgs = {
  where: ContactFormWhereUniqueInput;
};


export type MutationDeleteContentButtonArgs = {
  where: ContentButtonWhereUniqueInput;
};


export type MutationDeleteContentTagArgs = {
  where: ContentTagWhereUniqueInput;
};


export type MutationDeleteDocsGroupArgs = {
  where: DocsGroupWhereUniqueInput;
};


export type MutationDeleteDocsPageArgs = {
  where: DocsPageWhereUniqueInput;
};


export type MutationDeleteDocumentArgs = {
  where: DocumentWhereUniqueInput;
};


export type MutationDeleteDocumentGroupArgs = {
  where: DocumentGroupWhereUniqueInput;
};


export type MutationDeleteEmployeeArgs = {
  where: EmployeeWhereUniqueInput;
};


export type MutationDeleteFooterGroupArgs = {
  where: FooterGroupWhereUniqueInput;
};


export type MutationDeleteFormArgs = {
  where: FormWhereUniqueInput;
};


export type MutationDeleteHeaderGroupArgs = {
  where: HeaderGroupWhereUniqueInput;
};


export type MutationDeleteHomePageArgs = {
  where: HomePageWhereUniqueInput;
};


export type MutationDeleteManyAdmonitionsArgs = {
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationDeleteManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyBlogPostsArgs = {
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationDeleteManyBlogPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationDeleteManyCloudLocationsArgs = {
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationDeleteManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationDeleteManyConfigurationsArgs = {
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationDeleteManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationDeleteManyContactFormsArgs = {
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationDeleteManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationDeleteManyContentButtonsArgs = {
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationDeleteManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationDeleteManyContentTagsArgs = {
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationDeleteManyContentTagsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationDeleteManyDocsGroupsArgs = {
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationDeleteManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationDeleteManyDocsPagesArgs = {
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationDeleteManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationDeleteManyDocumentGroupsArgs = {
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationDeleteManyDocumentGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationDeleteManyDocumentsArgs = {
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationDeleteManyDocumentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationDeleteManyEmployeesArgs = {
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationDeleteManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationDeleteManyFooterGroupsArgs = {
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationDeleteManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationDeleteManyFormsArgs = {
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationDeleteManyHeaderGroupsArgs = {
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationDeleteManyHeaderGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationDeleteManyHomePagesArgs = {
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationDeleteManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationDeleteManyOfficeLocationsArgs = {
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationDeleteManyOfficeLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationDeleteManyPageContentsArgs = {
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationDeleteManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationDeleteManyPagesArgs = {
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationDeleteManyTestimonialsArgs = {
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationDeleteManyThemesArgs = {
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationDeleteManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationDeleteOfficeLocationArgs = {
  where: OfficeLocationWhereUniqueInput;
};


export type MutationDeletePageArgs = {
  where: PageWhereUniqueInput;
};


export type MutationDeletePageContentArgs = {
  where: PageContentWhereUniqueInput;
};


export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};


export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationDeleteTestimonialArgs = {
  where: TestimonialWhereUniqueInput;
};


export type MutationDeleteThemeArgs = {
  where: ThemeWhereUniqueInput;
};


export type MutationPublishAdmonitionArgs = {
  to?: Array<Stage>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishBlogPostArgs = {
  to?: Array<Stage>;
  where: BlogPostWhereUniqueInput;
};


export type MutationPublishCloudLocationArgs = {
  to?: Array<Stage>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationPublishConfigurationArgs = {
  to?: Array<Stage>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationPublishContactFormArgs = {
  to?: Array<Stage>;
  where: ContactFormWhereUniqueInput;
};


export type MutationPublishContentButtonArgs = {
  to?: Array<Stage>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationPublishContentTagArgs = {
  to?: Array<Stage>;
  where: ContentTagWhereUniqueInput;
};


export type MutationPublishDocsGroupArgs = {
  to?: Array<Stage>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationPublishDocsPageArgs = {
  to?: Array<Stage>;
  where: DocsPageWhereUniqueInput;
};


export type MutationPublishDocumentArgs = {
  to?: Array<Stage>;
  where: DocumentWhereUniqueInput;
};


export type MutationPublishDocumentGroupArgs = {
  to?: Array<Stage>;
  where: DocumentGroupWhereUniqueInput;
};


export type MutationPublishEmployeeArgs = {
  to?: Array<Stage>;
  where: EmployeeWhereUniqueInput;
};


export type MutationPublishFooterGroupArgs = {
  to?: Array<Stage>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationPublishFormArgs = {
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationPublishHeaderGroupArgs = {
  to?: Array<Stage>;
  where: HeaderGroupWhereUniqueInput;
};


export type MutationPublishHomePageArgs = {
  to?: Array<Stage>;
  where: HomePageWhereUniqueInput;
};


export type MutationPublishManyAdmonitionsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationPublishManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationPublishManyBlogPostsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationPublishManyBlogPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationPublishManyCloudLocationsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationPublishManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationPublishManyConfigurationsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationPublishManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationPublishManyContactFormsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationPublishManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationPublishManyContentButtonsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationPublishManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationPublishManyContentTagsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationPublishManyContentTagsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationPublishManyDocsGroupsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationPublishManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationPublishManyDocsPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationPublishManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationPublishManyDocumentGroupsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationPublishManyDocumentGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationPublishManyDocumentsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationPublishManyDocumentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationPublishManyEmployeesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationPublishManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationPublishManyFooterGroupsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationPublishManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationPublishManyFormsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationPublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationPublishManyHeaderGroupsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationPublishManyHeaderGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationPublishManyHomePagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationPublishManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationPublishManyOfficeLocationsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationPublishManyOfficeLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationPublishManyPageContentsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationPublishManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationPublishManyPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationPublishManyTestimonialsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationPublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationPublishManyThemesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationPublishManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  to?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationPublishOfficeLocationArgs = {
  to?: Array<Stage>;
  where: OfficeLocationWhereUniqueInput;
};


export type MutationPublishPageArgs = {
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationPublishPageContentArgs = {
  to?: Array<Stage>;
  where: PageContentWhereUniqueInput;
};


export type MutationPublishTestimonialArgs = {
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationPublishThemeArgs = {
  to?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationSchedulePublishAdmonitionArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationSchedulePublishBlogPostArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: BlogPostWhereUniqueInput;
};


export type MutationSchedulePublishCloudLocationArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationSchedulePublishConfigurationArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationSchedulePublishContactFormArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ContactFormWhereUniqueInput;
};


export type MutationSchedulePublishContentButtonArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationSchedulePublishContentTagArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ContentTagWhereUniqueInput;
};


export type MutationSchedulePublishDocsGroupArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationSchedulePublishDocsPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: DocsPageWhereUniqueInput;
};


export type MutationSchedulePublishDocumentArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: DocumentWhereUniqueInput;
};


export type MutationSchedulePublishDocumentGroupArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: DocumentGroupWhereUniqueInput;
};


export type MutationSchedulePublishEmployeeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: EmployeeWhereUniqueInput;
};


export type MutationSchedulePublishFooterGroupArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationSchedulePublishFormArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationSchedulePublishHeaderGroupArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: HeaderGroupWhereUniqueInput;
};


export type MutationSchedulePublishHomePageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: HomePageWhereUniqueInput;
};


export type MutationSchedulePublishOfficeLocationArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: OfficeLocationWhereUniqueInput;
};


export type MutationSchedulePublishPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationSchedulePublishPageContentArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: PageContentWhereUniqueInput;
};


export type MutationSchedulePublishTestimonialArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationSchedulePublishThemeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  to?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationScheduleUnpublishAdmonitionArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: AssetWhereUniqueInput;
};


export type MutationScheduleUnpublishBlogPostArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: BlogPostWhereUniqueInput;
};


export type MutationScheduleUnpublishCloudLocationArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationScheduleUnpublishConfigurationArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationScheduleUnpublishContactFormArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ContactFormWhereUniqueInput;
};


export type MutationScheduleUnpublishContentButtonArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationScheduleUnpublishContentTagArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ContentTagWhereUniqueInput;
};


export type MutationScheduleUnpublishDocsGroupArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationScheduleUnpublishDocsPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: DocsPageWhereUniqueInput;
};


export type MutationScheduleUnpublishDocumentArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: DocumentWhereUniqueInput;
};


export type MutationScheduleUnpublishDocumentGroupArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: DocumentGroupWhereUniqueInput;
};


export type MutationScheduleUnpublishEmployeeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: EmployeeWhereUniqueInput;
};


export type MutationScheduleUnpublishFooterGroupArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationScheduleUnpublishFormArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: FormWhereUniqueInput;
};


export type MutationScheduleUnpublishHeaderGroupArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: HeaderGroupWhereUniqueInput;
};


export type MutationScheduleUnpublishHomePageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: HomePageWhereUniqueInput;
};


export type MutationScheduleUnpublishOfficeLocationArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: OfficeLocationWhereUniqueInput;
};


export type MutationScheduleUnpublishPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: PageWhereUniqueInput;
};


export type MutationScheduleUnpublishPageContentArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: PageContentWhereUniqueInput;
};


export type MutationScheduleUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: TestimonialWhereUniqueInput;
};


export type MutationScheduleUnpublishThemeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  releaseId?: InputMaybe<Scalars['String']['input']>;
  where: ThemeWhereUniqueInput;
};


export type MutationUnpublishAdmonitionArgs = {
  from?: Array<Stage>;
  where: AdmonitionWhereUniqueInput;
};


export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where: AssetWhereUniqueInput;
};


export type MutationUnpublishBlogPostArgs = {
  from?: Array<Stage>;
  where: BlogPostWhereUniqueInput;
};


export type MutationUnpublishCloudLocationArgs = {
  from?: Array<Stage>;
  where: CloudLocationWhereUniqueInput;
};


export type MutationUnpublishConfigurationArgs = {
  from?: Array<Stage>;
  where: ConfigurationWhereUniqueInput;
};


export type MutationUnpublishContactFormArgs = {
  from?: Array<Stage>;
  where: ContactFormWhereUniqueInput;
};


export type MutationUnpublishContentButtonArgs = {
  from?: Array<Stage>;
  where: ContentButtonWhereUniqueInput;
};


export type MutationUnpublishContentTagArgs = {
  from?: Array<Stage>;
  where: ContentTagWhereUniqueInput;
};


export type MutationUnpublishDocsGroupArgs = {
  from?: Array<Stage>;
  where: DocsGroupWhereUniqueInput;
};


export type MutationUnpublishDocsPageArgs = {
  from?: Array<Stage>;
  where: DocsPageWhereUniqueInput;
};


export type MutationUnpublishDocumentArgs = {
  from?: Array<Stage>;
  where: DocumentWhereUniqueInput;
};


export type MutationUnpublishDocumentGroupArgs = {
  from?: Array<Stage>;
  where: DocumentGroupWhereUniqueInput;
};


export type MutationUnpublishEmployeeArgs = {
  from?: Array<Stage>;
  where: EmployeeWhereUniqueInput;
};


export type MutationUnpublishFooterGroupArgs = {
  from?: Array<Stage>;
  where: FooterGroupWhereUniqueInput;
};


export type MutationUnpublishFormArgs = {
  from?: Array<Stage>;
  where: FormWhereUniqueInput;
};


export type MutationUnpublishHeaderGroupArgs = {
  from?: Array<Stage>;
  where: HeaderGroupWhereUniqueInput;
};


export type MutationUnpublishHomePageArgs = {
  from?: Array<Stage>;
  where: HomePageWhereUniqueInput;
};


export type MutationUnpublishManyAdmonitionsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUnpublishManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyBlogPostsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationUnpublishManyBlogPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationUnpublishManyCloudLocationsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUnpublishManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUnpublishManyConfigurationsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUnpublishManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUnpublishManyContactFormsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUnpublishManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUnpublishManyContentButtonsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUnpublishManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUnpublishManyContentTagsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationUnpublishManyContentTagsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationUnpublishManyDocsGroupsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUnpublishManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUnpublishManyDocsPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUnpublishManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUnpublishManyDocumentGroupsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationUnpublishManyDocumentGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationUnpublishManyDocumentsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationUnpublishManyDocumentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationUnpublishManyEmployeesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUnpublishManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUnpublishManyFooterGroupsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUnpublishManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUnpublishManyFormsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUnpublishManyHeaderGroupsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationUnpublishManyHeaderGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationUnpublishManyHomePagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUnpublishManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUnpublishManyOfficeLocationsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationUnpublishManyOfficeLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationUnpublishManyPageContentsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUnpublishManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUnpublishManyPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUnpublishManyThemesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUnpublishManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUnpublishOfficeLocationArgs = {
  from?: Array<Stage>;
  where: OfficeLocationWhereUniqueInput;
};


export type MutationUnpublishPageArgs = {
  from?: Array<Stage>;
  where: PageWhereUniqueInput;
};


export type MutationUnpublishPageContentArgs = {
  from?: Array<Stage>;
  where: PageContentWhereUniqueInput;
};


export type MutationUnpublishTestimonialArgs = {
  from?: Array<Stage>;
  where: TestimonialWhereUniqueInput;
};


export type MutationUnpublishThemeArgs = {
  from?: Array<Stage>;
  where: ThemeWhereUniqueInput;
};


export type MutationUpdateAdmonitionArgs = {
  data: AdmonitionUpdateInput;
  where: AdmonitionWhereUniqueInput;
};


export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpdateBlogPostArgs = {
  data: BlogPostUpdateInput;
  where: BlogPostWhereUniqueInput;
};


export type MutationUpdateCloudLocationArgs = {
  data: CloudLocationUpdateInput;
  where: CloudLocationWhereUniqueInput;
};


export type MutationUpdateConfigurationArgs = {
  data: ConfigurationUpdateInput;
  where: ConfigurationWhereUniqueInput;
};


export type MutationUpdateContactFormArgs = {
  data: ContactFormUpdateInput;
  where: ContactFormWhereUniqueInput;
};


export type MutationUpdateContentButtonArgs = {
  data: ContentButtonUpdateInput;
  where: ContentButtonWhereUniqueInput;
};


export type MutationUpdateContentTagArgs = {
  data: ContentTagUpdateInput;
  where: ContentTagWhereUniqueInput;
};


export type MutationUpdateDocsGroupArgs = {
  data: DocsGroupUpdateInput;
  where: DocsGroupWhereUniqueInput;
};


export type MutationUpdateDocsPageArgs = {
  data: DocsPageUpdateInput;
  where: DocsPageWhereUniqueInput;
};


export type MutationUpdateDocumentArgs = {
  data: DocumentUpdateInput;
  where: DocumentWhereUniqueInput;
};


export type MutationUpdateDocumentGroupArgs = {
  data: DocumentGroupUpdateInput;
  where: DocumentGroupWhereUniqueInput;
};


export type MutationUpdateEmployeeArgs = {
  data: EmployeeUpdateInput;
  where: EmployeeWhereUniqueInput;
};


export type MutationUpdateFooterGroupArgs = {
  data: FooterGroupUpdateInput;
  where: FooterGroupWhereUniqueInput;
};


export type MutationUpdateFormArgs = {
  data: FormUpdateInput;
  where: FormWhereUniqueInput;
};


export type MutationUpdateHeaderGroupArgs = {
  data: HeaderGroupUpdateInput;
  where: HeaderGroupWhereUniqueInput;
};


export type MutationUpdateHomePageArgs = {
  data: HomePageUpdateInput;
  where: HomePageWhereUniqueInput;
};


export type MutationUpdateManyAdmonitionsArgs = {
  data: AdmonitionUpdateManyInput;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUpdateManyAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: AdmonitionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AdmonitionManyWhereInput>;
};


export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyBlogPostsArgs = {
  data: BlogPostUpdateManyInput;
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationUpdateManyBlogPostsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: BlogPostUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogPostManyWhereInput>;
};


export type MutationUpdateManyCloudLocationsArgs = {
  data: CloudLocationUpdateManyInput;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUpdateManyCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: CloudLocationUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CloudLocationManyWhereInput>;
};


export type MutationUpdateManyConfigurationsArgs = {
  data: ConfigurationUpdateManyInput;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUpdateManyConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ConfigurationUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ConfigurationManyWhereInput>;
};


export type MutationUpdateManyContactFormsArgs = {
  data: ContactFormUpdateManyInput;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUpdateManyContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ContactFormUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContactFormManyWhereInput>;
};


export type MutationUpdateManyContentButtonsArgs = {
  data: ContentButtonUpdateManyInput;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUpdateManyContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ContentButtonUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentButtonManyWhereInput>;
};


export type MutationUpdateManyContentTagsArgs = {
  data: ContentTagUpdateManyInput;
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationUpdateManyContentTagsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ContentTagUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ContentTagManyWhereInput>;
};


export type MutationUpdateManyDocsGroupsArgs = {
  data: DocsGroupUpdateManyInput;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUpdateManyDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: DocsGroupUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsGroupManyWhereInput>;
};


export type MutationUpdateManyDocsPagesArgs = {
  data: DocsPageUpdateManyInput;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUpdateManyDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: DocsPageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsPageManyWhereInput>;
};


export type MutationUpdateManyDocumentGroupsArgs = {
  data: DocumentGroupUpdateManyInput;
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationUpdateManyDocumentGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: DocumentGroupUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentGroupManyWhereInput>;
};


export type MutationUpdateManyDocumentsArgs = {
  data: DocumentUpdateManyInput;
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationUpdateManyDocumentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: DocumentUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentManyWhereInput>;
};


export type MutationUpdateManyEmployeesArgs = {
  data: EmployeeUpdateManyInput;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUpdateManyEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: EmployeeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EmployeeManyWhereInput>;
};


export type MutationUpdateManyFooterGroupsArgs = {
  data: FooterGroupUpdateManyInput;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUpdateManyFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: FooterGroupUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FooterGroupManyWhereInput>;
};


export type MutationUpdateManyFormsArgs = {
  data: FormUpdateManyInput;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyFormsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: FormUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FormManyWhereInput>;
};


export type MutationUpdateManyHeaderGroupsArgs = {
  data: HeaderGroupUpdateManyInput;
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationUpdateManyHeaderGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: HeaderGroupUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HeaderGroupManyWhereInput>;
};


export type MutationUpdateManyHomePagesArgs = {
  data: HomePageUpdateManyInput;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUpdateManyHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: HomePageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HomePageManyWhereInput>;
};


export type MutationUpdateManyOfficeLocationsArgs = {
  data: OfficeLocationUpdateManyInput;
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationUpdateManyOfficeLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: OfficeLocationUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OfficeLocationManyWhereInput>;
};


export type MutationUpdateManyPageContentsArgs = {
  data: PageContentUpdateManyInput;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUpdateManyPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: PageContentUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageContentManyWhereInput>;
};


export type MutationUpdateManyPagesArgs = {
  data: PageUpdateManyInput;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: PageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageManyWhereInput>;
};


export type MutationUpdateManyTestimonialsArgs = {
  data: TestimonialUpdateManyInput;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateManyTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: TestimonialUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TestimonialManyWhereInput>;
};


export type MutationUpdateManyThemesArgs = {
  data: ThemeUpdateManyInput;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUpdateManyThemesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']['input']>;
  before?: InputMaybe<Scalars['ID']['input']>;
  data: ThemeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThemeManyWhereInput>;
};


export type MutationUpdateOfficeLocationArgs = {
  data: OfficeLocationUpdateInput;
  where: OfficeLocationWhereUniqueInput;
};


export type MutationUpdatePageArgs = {
  data: PageUpdateInput;
  where: PageWhereUniqueInput;
};


export type MutationUpdatePageContentArgs = {
  data: PageContentUpdateInput;
  where: PageContentWhereUniqueInput;
};


export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationUpdateTestimonialArgs = {
  data: TestimonialUpdateInput;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpdateThemeArgs = {
  data: ThemeUpdateInput;
  where: ThemeWhereUniqueInput;
};


export type MutationUpsertAdmonitionArgs = {
  upsert: AdmonitionUpsertInput;
  where: AdmonitionWhereUniqueInput;
};


export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpsertBlogPostArgs = {
  upsert: BlogPostUpsertInput;
  where: BlogPostWhereUniqueInput;
};


export type MutationUpsertCloudLocationArgs = {
  upsert: CloudLocationUpsertInput;
  where: CloudLocationWhereUniqueInput;
};


export type MutationUpsertConfigurationArgs = {
  upsert: ConfigurationUpsertInput;
  where: ConfigurationWhereUniqueInput;
};


export type MutationUpsertContactFormArgs = {
  upsert: ContactFormUpsertInput;
  where: ContactFormWhereUniqueInput;
};


export type MutationUpsertContentButtonArgs = {
  upsert: ContentButtonUpsertInput;
  where: ContentButtonWhereUniqueInput;
};


export type MutationUpsertContentTagArgs = {
  upsert: ContentTagUpsertInput;
  where: ContentTagWhereUniqueInput;
};


export type MutationUpsertDocsGroupArgs = {
  upsert: DocsGroupUpsertInput;
  where: DocsGroupWhereUniqueInput;
};


export type MutationUpsertDocsPageArgs = {
  upsert: DocsPageUpsertInput;
  where: DocsPageWhereUniqueInput;
};


export type MutationUpsertDocumentArgs = {
  upsert: DocumentUpsertInput;
  where: DocumentWhereUniqueInput;
};


export type MutationUpsertDocumentGroupArgs = {
  upsert: DocumentGroupUpsertInput;
  where: DocumentGroupWhereUniqueInput;
};


export type MutationUpsertEmployeeArgs = {
  upsert: EmployeeUpsertInput;
  where: EmployeeWhereUniqueInput;
};


export type MutationUpsertFooterGroupArgs = {
  upsert: FooterGroupUpsertInput;
  where: FooterGroupWhereUniqueInput;
};


export type MutationUpsertFormArgs = {
  upsert: FormUpsertInput;
  where: FormWhereUniqueInput;
};


export type MutationUpsertHeaderGroupArgs = {
  upsert: HeaderGroupUpsertInput;
  where: HeaderGroupWhereUniqueInput;
};


export type MutationUpsertHomePageArgs = {
  upsert: HomePageUpsertInput;
  where: HomePageWhereUniqueInput;
};


export type MutationUpsertOfficeLocationArgs = {
  upsert: OfficeLocationUpsertInput;
  where: OfficeLocationWhereUniqueInput;
};


export type MutationUpsertPageArgs = {
  upsert: PageUpsertInput;
  where: PageWhereUniqueInput;
};


export type MutationUpsertPageContentArgs = {
  upsert: PageContentUpsertInput;
  where: PageContentWhereUniqueInput;
};


export type MutationUpsertTestimonialArgs = {
  upsert: TestimonialUpsertInput;
  where: TestimonialWhereUniqueInput;
};


export type MutationUpsertThemeArgs = {
  upsert: ThemeUpsertInput;
  where: ThemeWhereUniqueInput;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
  /** The Stage of an object */
  stage: Stage;
};

export type OfficeLocation = Entity & Node & {
  __typename?: 'OfficeLocation';
  address: Address;
  /** Time office closes in 24 hour format in the local timezone */
  closeTime: Scalars['Int']['output'];
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<OfficeLocation>;
  /** List of OfficeLocation versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  location: Location;
  name: Scalars['String']['output'];
  /** Time office opens in 24 hour format in the local timezone */
  openTime: Scalars['Int']['output'];
  photo: Asset;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type OfficeLocationAddressArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type OfficeLocationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type OfficeLocationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type OfficeLocationHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type OfficeLocationPhotoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type OfficeLocationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type OfficeLocationScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type OfficeLocationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type OfficeLocationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: OfficeLocationWhereUniqueInput;
};

/** A connection to a list of items. */
export type OfficeLocationConnection = {
  __typename?: 'OfficeLocationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<OfficeLocationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type OfficeLocationCreateInput = {
  address: AddressCreateOneInlineInput;
  closeTime: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  location: LocationInput;
  name: Scalars['String']['input'];
  openTime: Scalars['Int']['input'];
  photo: AssetCreateOneInlineInput;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type OfficeLocationCreateManyInlineInput = {
  /** Connect multiple existing OfficeLocation documents */
  connect?: InputMaybe<Array<OfficeLocationWhereUniqueInput>>;
  /** Create and connect multiple existing OfficeLocation documents */
  create?: InputMaybe<Array<OfficeLocationCreateInput>>;
};

export type OfficeLocationCreateOneInlineInput = {
  /** Connect one existing OfficeLocation document */
  connect?: InputMaybe<OfficeLocationWhereUniqueInput>;
  /** Create and connect one OfficeLocation document */
  create?: InputMaybe<OfficeLocationCreateInput>;
};

/** An edge in a connection. */
export type OfficeLocationEdge = {
  __typename?: 'OfficeLocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: OfficeLocation;
};

/** Identifies documents */
export type OfficeLocationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfficeLocationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfficeLocationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfficeLocationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<AddressWhereInput>;
  closeTime?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  closeTime_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  closeTime_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  closeTime_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  closeTime_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  closeTime_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  closeTime_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  closeTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<OfficeLocationWhereStageInput>;
  documentInStages_none?: InputMaybe<OfficeLocationWhereStageInput>;
  documentInStages_some?: InputMaybe<OfficeLocationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  openTime?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  openTime_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  openTime_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  openTime_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  openTime_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  openTime_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  openTime_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  openTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  photo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum OfficeLocationOrderByInput {
  CloseTimeAsc = 'closeTime_ASC',
  CloseTimeDesc = 'closeTime_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OpenTimeAsc = 'openTime_ASC',
  OpenTimeDesc = 'openTime_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type OfficeLocationUpdateInput = {
  address?: InputMaybe<AddressUpdateOneInlineInput>;
  closeTime?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<LocationInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  openTime?: InputMaybe<Scalars['Int']['input']>;
  photo?: InputMaybe<AssetUpdateOneInlineInput>;
};

export type OfficeLocationUpdateManyInlineInput = {
  /** Connect multiple existing OfficeLocation documents */
  connect?: InputMaybe<Array<OfficeLocationConnectInput>>;
  /** Create and connect multiple OfficeLocation documents */
  create?: InputMaybe<Array<OfficeLocationCreateInput>>;
  /** Delete multiple OfficeLocation documents */
  delete?: InputMaybe<Array<OfficeLocationWhereUniqueInput>>;
  /** Disconnect multiple OfficeLocation documents */
  disconnect?: InputMaybe<Array<OfficeLocationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing OfficeLocation documents */
  set?: InputMaybe<Array<OfficeLocationWhereUniqueInput>>;
  /** Update multiple OfficeLocation documents */
  update?: InputMaybe<Array<OfficeLocationUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple OfficeLocation documents */
  upsert?: InputMaybe<Array<OfficeLocationUpsertWithNestedWhereUniqueInput>>;
};

export type OfficeLocationUpdateManyInput = {
  closeTime?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<LocationInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  openTime?: InputMaybe<Scalars['Int']['input']>;
};

export type OfficeLocationUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: OfficeLocationUpdateManyInput;
  /** Document search */
  where: OfficeLocationWhereInput;
};

export type OfficeLocationUpdateOneInlineInput = {
  /** Connect existing OfficeLocation document */
  connect?: InputMaybe<OfficeLocationWhereUniqueInput>;
  /** Create and connect one OfficeLocation document */
  create?: InputMaybe<OfficeLocationCreateInput>;
  /** Delete currently connected OfficeLocation document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected OfficeLocation document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single OfficeLocation document */
  update?: InputMaybe<OfficeLocationUpdateWithNestedWhereUniqueInput>;
  /** Upsert single OfficeLocation document */
  upsert?: InputMaybe<OfficeLocationUpsertWithNestedWhereUniqueInput>;
};

export type OfficeLocationUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: OfficeLocationUpdateInput;
  /** Unique document search */
  where: OfficeLocationWhereUniqueInput;
};

export type OfficeLocationUpsertInput = {
  /** Create document if it didn't exist */
  create: OfficeLocationCreateInput;
  /** Update document if it exists */
  update: OfficeLocationUpdateInput;
};

export type OfficeLocationUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: OfficeLocationUpsertInput;
  /** Unique document search */
  where: OfficeLocationWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type OfficeLocationWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type OfficeLocationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfficeLocationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfficeLocationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfficeLocationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<AddressWhereInput>;
  closeTime?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  closeTime_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  closeTime_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  closeTime_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  closeTime_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  closeTime_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  closeTime_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  closeTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<OfficeLocationWhereStageInput>;
  documentInStages_none?: InputMaybe<OfficeLocationWhereStageInput>;
  documentInStages_some?: InputMaybe<OfficeLocationWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  openTime?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  openTime_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  openTime_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  openTime_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  openTime_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  openTime_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  openTime_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  openTime_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  photo?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type OfficeLocationWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfficeLocationWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfficeLocationWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfficeLocationWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<OfficeLocationWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References OfficeLocation record uniquely */
export type OfficeLocationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Page = Entity & Node & {
  __typename?: 'Page';
  body?: Maybe<RichText>;
  callout?: Maybe<Callout>;
  contents: Array<PageContent>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Page>;
  footerGroup?: Maybe<FooterGroup>;
  footerTitle?: Maybe<Scalars['String']['output']>;
  headerGroup?: Maybe<HeaderGroup>;
  /** List of Page versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PageCalloutArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageContentWhereInput>;
};


export type PageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type PageFooterGroupArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageHeaderGroupArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type PagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type PageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageConnection = {
  __typename?: 'PageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageContent = Entity & Node & {
  __typename?: 'PageContent';
  body?: Maybe<RichText>;
  button?: Maybe<Button>;
  callToAction: CallToActionSettings;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<PageContent>;
  features: Array<Feature>;
  footerGroup?: Maybe<FooterGroup>;
  footerTitle?: Maybe<Scalars['String']['output']>;
  form?: Maybe<Form>;
  hideFromHeader: Scalars['Boolean']['output'];
  /** List of PageContent versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  image?: Maybe<Asset>;
  page?: Maybe<Page>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  showUpdatedDate: Scalars['Boolean']['output'];
  slug: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  vendorLogo?: Maybe<VendorLogo>;
};


export type PageContentButtonArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentCallToActionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type PageContentFeaturesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FeatureOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FeatureWhereInput>;
};


export type PageContentFooterGroupArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentFormArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type PageContentImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentPageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageContentUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageContentVendorLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type PageContentConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageContentWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageContentConnection = {
  __typename?: 'PageContentConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageContentEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageContentCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  button?: InputMaybe<ButtonCreateOneInlineInput>;
  callToAction: CallToActionSettingsCreateOneInlineInput;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  features?: InputMaybe<FeatureCreateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupCreateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  form?: InputMaybe<FormCreateOneInlineInput>;
  hideFromHeader: Scalars['Boolean']['input'];
  image?: InputMaybe<AssetCreateOneInlineInput>;
  page?: InputMaybe<PageCreateOneInlineInput>;
  showUpdatedDate: Scalars['Boolean']['input'];
  slug: Scalars['String']['input'];
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  vendorLogo?: InputMaybe<VendorLogoCreateOneInlineInput>;
};

export type PageContentCreateManyInlineInput = {
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Create and connect multiple existing PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
};

export type PageContentCreateOneInlineInput = {
  /** Connect one existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
};

/** An edge in a connection. */
export type PageContentEdge = {
  __typename?: 'PageContentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: PageContent;
};

/** Identifies documents */
export type PageContentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_none?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_some?: InputMaybe<PageContentWhereStageInput>;
  features_every?: InputMaybe<FeatureWhereInput>;
  features_none?: InputMaybe<FeatureWhereInput>;
  features_some?: InputMaybe<FeatureWhereInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  form?: InputMaybe<FormWhereInput>;
  hideFromHeader?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hideFromHeader_not?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  vendorLogo?: InputMaybe<VendorLogoWhereInput>;
};

export enum PageContentOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterTitleAsc = 'footerTitle_ASC',
  FooterTitleDesc = 'footerTitle_DESC',
  HideFromHeaderAsc = 'hideFromHeader_ASC',
  HideFromHeaderDesc = 'hideFromHeader_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShowUpdatedDateAsc = 'showUpdatedDate_ASC',
  ShowUpdatedDateDesc = 'showUpdatedDate_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageContentUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  button?: InputMaybe<ButtonUpdateOneInlineInput>;
  callToAction?: InputMaybe<CallToActionSettingsUpdateOneInlineInput>;
  features?: InputMaybe<FeatureUpdateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupUpdateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  form?: InputMaybe<FormUpdateOneInlineInput>;
  hideFromHeader?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  page?: InputMaybe<PageUpdateOneInlineInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  vendorLogo?: InputMaybe<VendorLogoUpdateOneInlineInput>;
};

export type PageContentUpdateManyInlineInput = {
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentConnectInput>>;
  /** Create and connect multiple PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
  /** Delete multiple PageContent documents */
  delete?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Disconnect multiple PageContent documents */
  disconnect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageContent documents */
  set?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Update multiple PageContent documents */
  update?: InputMaybe<Array<PageContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageContent documents */
  upsert?: InputMaybe<Array<PageContentUpsertWithNestedWhereUniqueInput>>;
};

export type PageContentUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  hideFromHeader?: InputMaybe<Scalars['Boolean']['input']>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PageContentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageContentUpdateManyInput;
  /** Document search */
  where: PageContentWhereInput;
};

export type PageContentUpdateOneInlineInput = {
  /** Connect existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
  /** Delete currently connected PageContent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected PageContent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single PageContent document */
  update?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageContent document */
  upsert?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type PageContentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageContentUpdateInput;
  /** Unique document search */
  where: PageContentWhereUniqueInput;
};

export type PageContentUpsertInput = {
  /** Create document if it didn't exist */
  create: PageContentCreateInput;
  /** Update document if it exists */
  update: PageContentUpdateInput;
};

export type PageContentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageContentUpsertInput;
  /** Unique document search */
  where: PageContentWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageContentWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type PageContentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<ButtonWhereInput>;
  callToAction?: InputMaybe<CallToActionSettingsWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_none?: InputMaybe<PageContentWhereStageInput>;
  documentInStages_some?: InputMaybe<PageContentWhereStageInput>;
  features_every?: InputMaybe<FeatureWhereInput>;
  features_none?: InputMaybe<FeatureWhereInput>;
  features_some?: InputMaybe<FeatureWhereInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  form?: InputMaybe<FormWhereInput>;
  hideFromHeader?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hideFromHeader_not?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  page?: InputMaybe<PageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showUpdatedDate?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  showUpdatedDate_not?: InputMaybe<Scalars['Boolean']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  vendorLogo?: InputMaybe<VendorLogoWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageContentWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageContentWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageContentWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageContentWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageContentWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References PageContent record uniquely */
export type PageContentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type PageCreateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  callout?: InputMaybe<CalloutCreateOneInlineInput>;
  contents?: InputMaybe<PageContentCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  footerGroup?: InputMaybe<FooterGroupCreateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  headerGroup?: InputMaybe<HeaderGroupCreateOneInlineInput>;
  slug: Scalars['String']['input'];
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PageCreateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Create and connect multiple existing Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
};

export type PageCreateOneInlineInput = {
  /** Connect one existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
};

/** An edge in a connection. */
export type PageEdge = {
  __typename?: 'PageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Page;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']['output']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

/** Identifies documents */
export type PageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  callout?: InputMaybe<CalloutWhereInput>;
  contents_every?: InputMaybe<PageContentWhereInput>;
  contents_none?: InputMaybe<PageContentWhereInput>;
  contents_some?: InputMaybe<PageContentWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  headerGroup?: InputMaybe<HeaderGroupWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FooterTitleAsc = 'footerTitle_ASC',
  FooterTitleDesc = 'footerTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  callout?: InputMaybe<CalloutUpdateOneInlineInput>;
  contents?: InputMaybe<PageContentUpdateManyInlineInput>;
  footerGroup?: InputMaybe<FooterGroupUpdateOneInlineInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  headerGroup?: InputMaybe<HeaderGroupUpdateOneInlineInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PageUpdateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageConnectInput>>;
  /** Create and connect multiple Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Delete multiple Page documents */
  delete?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Disconnect multiple Page documents */
  disconnect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Page documents */
  set?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Update multiple Page documents */
  update?: InputMaybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Page documents */
  upsert?: InputMaybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
};

export type PageUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageUpdateManyInput;
  /** Document search */
  where: PageWhereInput;
};

export type PageUpdateOneInlineInput = {
  /** Connect existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Delete currently connected Page document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Page document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Page document */
  update?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Page document */
  upsert?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
};

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageUpdateInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput;
  /** Update document if it exists */
  update: PageUpdateInput;
};

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageUpsertInput;
  /** Unique document search */
  where: PageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type PageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  callout?: InputMaybe<CalloutWhereInput>;
  contents_every?: InputMaybe<PageContentWhereInput>;
  contents_none?: InputMaybe<PageContentWhereInput>;
  contents_some?: InputMaybe<PageContentWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageWhereStageInput>;
  documentInStages_none?: InputMaybe<PageWhereStageInput>;
  documentInStages_some?: InputMaybe<PageWhereStageInput>;
  footerGroup?: InputMaybe<FooterGroupWhereInput>;
  footerTitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  footerTitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  footerTitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  footerTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  footerTitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  footerTitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  footerTitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  footerTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  footerTitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  footerTitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  headerGroup?: InputMaybe<HeaderGroupWhereInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  __typename?: 'Query';
  /** Retrieve a single admonition */
  admonition?: Maybe<Admonition>;
  /** Retrieve document version */
  admonitionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple admonitions */
  admonitions: Array<Admonition>;
  /** Retrieve multiple admonitions using the Relay connection interface */
  admonitionsConnection: AdmonitionConnection;
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve a single blogPost */
  blogPost?: Maybe<BlogPost>;
  /** Retrieve document version */
  blogPostVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple blogPosts */
  blogPosts: Array<BlogPost>;
  /** Retrieve multiple blogPosts using the Relay connection interface */
  blogPostsConnection: BlogPostConnection;
  /** Retrieve a single cloudLocation */
  cloudLocation?: Maybe<CloudLocation>;
  /** Retrieve document version */
  cloudLocationVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple cloudLocations */
  cloudLocations: Array<CloudLocation>;
  /** Retrieve multiple cloudLocations using the Relay connection interface */
  cloudLocationsConnection: CloudLocationConnection;
  /** Retrieve a single configuration */
  configuration?: Maybe<Configuration>;
  /** Retrieve document version */
  configurationVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple configurations */
  configurations: Array<Configuration>;
  /** Retrieve multiple configurations using the Relay connection interface */
  configurationsConnection: ConfigurationConnection;
  /** Retrieve a single contactForm */
  contactForm?: Maybe<ContactForm>;
  /** Retrieve document version */
  contactFormVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple contactForms */
  contactForms: Array<ContactForm>;
  /** Retrieve multiple contactForms using the Relay connection interface */
  contactFormsConnection: ContactFormConnection;
  /** Retrieve a single contentButton */
  contentButton?: Maybe<ContentButton>;
  /** Retrieve document version */
  contentButtonVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple contentButtons */
  contentButtons: Array<ContentButton>;
  /** Retrieve multiple contentButtons using the Relay connection interface */
  contentButtonsConnection: ContentButtonConnection;
  /** Retrieve a single contentTag */
  contentTag?: Maybe<ContentTag>;
  /** Retrieve document version */
  contentTagVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple contentTags */
  contentTags: Array<ContentTag>;
  /** Retrieve multiple contentTags using the Relay connection interface */
  contentTagsConnection: ContentTagConnection;
  /** Retrieve a single docsGroup */
  docsGroup?: Maybe<DocsGroup>;
  /** Retrieve document version */
  docsGroupVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple docsGroups */
  docsGroups: Array<DocsGroup>;
  /** Retrieve multiple docsGroups using the Relay connection interface */
  docsGroupsConnection: DocsGroupConnection;
  /** Retrieve a single docsPage */
  docsPage?: Maybe<DocsPage>;
  /** Retrieve document version */
  docsPageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple docsPages */
  docsPages: Array<DocsPage>;
  /** Retrieve multiple docsPages using the Relay connection interface */
  docsPagesConnection: DocsPageConnection;
  /** Retrieve a single document */
  document?: Maybe<Document>;
  /** Retrieve a single documentGroup */
  documentGroup?: Maybe<DocumentGroup>;
  /** Retrieve document version */
  documentGroupVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple documentGroups */
  documentGroups: Array<DocumentGroup>;
  /** Retrieve multiple documentGroups using the Relay connection interface */
  documentGroupsConnection: DocumentGroupConnection;
  /** Retrieve document version */
  documentVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple documents */
  documents: Array<Document>;
  /** Retrieve multiple documents using the Relay connection interface */
  documentsConnection: DocumentConnection;
  /** Retrieve a single employee */
  employee?: Maybe<Employee>;
  /** Retrieve document version */
  employeeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple employees */
  employees: Array<Employee>;
  /** Retrieve multiple employees using the Relay connection interface */
  employeesConnection: EmployeeConnection;
  /** Fetches an object given its ID */
  entities?: Maybe<Array<Entity>>;
  /** Retrieve a single footerGroup */
  footerGroup?: Maybe<FooterGroup>;
  /** Retrieve document version */
  footerGroupVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple footerGroups */
  footerGroups: Array<FooterGroup>;
  /** Retrieve multiple footerGroups using the Relay connection interface */
  footerGroupsConnection: FooterGroupConnection;
  /** Retrieve a single form */
  form?: Maybe<Form>;
  /** Retrieve document version */
  formVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple forms */
  forms: Array<Form>;
  /** Retrieve multiple forms using the Relay connection interface */
  formsConnection: FormConnection;
  /** Retrieve a single headerGroup */
  headerGroup?: Maybe<HeaderGroup>;
  /** Retrieve document version */
  headerGroupVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple headerGroups */
  headerGroups: Array<HeaderGroup>;
  /** Retrieve multiple headerGroups using the Relay connection interface */
  headerGroupsConnection: HeaderGroupConnection;
  /** Retrieve a single homePage */
  homePage?: Maybe<HomePage>;
  /** Retrieve document version */
  homePageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple homePages */
  homePages: Array<HomePage>;
  /** Retrieve multiple homePages using the Relay connection interface */
  homePagesConnection: HomePageConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve a single officeLocation */
  officeLocation?: Maybe<OfficeLocation>;
  /** Retrieve document version */
  officeLocationVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple officeLocations */
  officeLocations: Array<OfficeLocation>;
  /** Retrieve multiple officeLocations using the Relay connection interface */
  officeLocationsConnection: OfficeLocationConnection;
  /** Retrieve a single page */
  page?: Maybe<Page>;
  /** Retrieve a single pageContent */
  pageContent?: Maybe<PageContent>;
  /** Retrieve document version */
  pageContentVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pageContents */
  pageContents: Array<PageContent>;
  /** Retrieve multiple pageContents using the Relay connection interface */
  pageContentsConnection: PageContentConnection;
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve a single testimonial */
  testimonial?: Maybe<Testimonial>;
  /** Retrieve document version */
  testimonialVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple testimonials */
  testimonials: Array<Testimonial>;
  /** Retrieve multiple testimonials using the Relay connection interface */
  testimonialsConnection: TestimonialConnection;
  /** Retrieve a single theme */
  theme?: Maybe<Theme>;
  /** Retrieve document version */
  themeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple themes */
  themes: Array<Theme>;
  /** Retrieve multiple themes using the Relay connection interface */
  themesConnection: ThemeConnection;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
};


export type QueryAdmonitionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AdmonitionWhereUniqueInput;
};


export type QueryAdmonitionVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAdmonitionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AdmonitionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<AdmonitionWhereInput>;
};


export type QueryAdmonitionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AdmonitionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<AdmonitionWhereInput>;
};


export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};


export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryBlogPostArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: BlogPostWhereUniqueInput;
};


export type QueryBlogPostVersionArgs = {
  where: VersionWhereInput;
};


export type QueryBlogPostsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogPostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<BlogPostWhereInput>;
};


export type QueryBlogPostsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogPostOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<BlogPostWhereInput>;
};


export type QueryCloudLocationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CloudLocationWhereUniqueInput;
};


export type QueryCloudLocationVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCloudLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CloudLocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CloudLocationWhereInput>;
};


export type QueryCloudLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CloudLocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<CloudLocationWhereInput>;
};


export type QueryConfigurationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ConfigurationWhereUniqueInput;
};


export type QueryConfigurationVersionArgs = {
  where: VersionWhereInput;
};


export type QueryConfigurationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigurationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ConfigurationWhereInput>;
};


export type QueryConfigurationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigurationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ConfigurationWhereInput>;
};


export type QueryContactFormArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ContactFormWhereUniqueInput;
};


export type QueryContactFormVersionArgs = {
  where: VersionWhereInput;
};


export type QueryContactFormsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContactFormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ContactFormWhereInput>;
};


export type QueryContactFormsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContactFormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ContactFormWhereInput>;
};


export type QueryContentButtonArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ContentButtonWhereUniqueInput;
};


export type QueryContentButtonVersionArgs = {
  where: VersionWhereInput;
};


export type QueryContentButtonsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContentButtonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ContentButtonWhereInput>;
};


export type QueryContentButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContentButtonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ContentButtonWhereInput>;
};


export type QueryContentTagArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ContentTagWhereUniqueInput;
};


export type QueryContentTagVersionArgs = {
  where: VersionWhereInput;
};


export type QueryContentTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContentTagOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ContentTagWhereInput>;
};


export type QueryContentTagsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ContentTagOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ContentTagWhereInput>;
};


export type QueryDocsGroupArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: DocsGroupWhereUniqueInput;
};


export type QueryDocsGroupVersionArgs = {
  where: VersionWhereInput;
};


export type QueryDocsGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type QueryDocsGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocsGroupWhereInput>;
};


export type QueryDocsPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: DocsPageWhereUniqueInput;
};


export type QueryDocsPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryDocsPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocsPageWhereInput>;
};


export type QueryDocsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocsPageWhereInput>;
};


export type QueryDocumentArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: DocumentWhereUniqueInput;
};


export type QueryDocumentGroupArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: DocumentGroupWhereUniqueInput;
};


export type QueryDocumentGroupVersionArgs = {
  where: VersionWhereInput;
};


export type QueryDocumentGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocumentGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocumentGroupWhereInput>;
};


export type QueryDocumentGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocumentGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocumentGroupWhereInput>;
};


export type QueryDocumentVersionArgs = {
  where: VersionWhereInput;
};


export type QueryDocumentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocumentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocumentWhereInput>;
};


export type QueryDocumentsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DocumentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<DocumentWhereInput>;
};


export type QueryEmployeeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: EmployeeWhereUniqueInput;
};


export type QueryEmployeeVersionArgs = {
  where: VersionWhereInput;
};


export type QueryEmployeesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<EmployeeWhereInput>;
};


export type QueryEmployeesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EmployeeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<EmployeeWhereInput>;
};


export type QueryEntitiesArgs = {
  locales?: InputMaybe<Array<Locale>>;
  where: Array<EntityWhereInput>;
};


export type QueryFooterGroupArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FooterGroupWhereUniqueInput;
};


export type QueryFooterGroupVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFooterGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FooterGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<FooterGroupWhereInput>;
};


export type QueryFooterGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FooterGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<FooterGroupWhereInput>;
};


export type QueryFormArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FormWhereUniqueInput;
};


export type QueryFormVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFormsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryFormsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FormOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<FormWhereInput>;
};


export type QueryHeaderGroupArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: HeaderGroupWhereUniqueInput;
};


export type QueryHeaderGroupVersionArgs = {
  where: VersionWhereInput;
};


export type QueryHeaderGroupsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HeaderGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<HeaderGroupWhereInput>;
};


export type QueryHeaderGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HeaderGroupOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<HeaderGroupWhereInput>;
};


export type QueryHomePageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: HomePageWhereUniqueInput;
};


export type QueryHomePageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryHomePagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HomePageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<HomePageWhereInput>;
};


export type QueryHomePagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HomePageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<HomePageWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
  locales?: Array<Locale>;
  stage?: Stage;
};


export type QueryOfficeLocationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: OfficeLocationWhereUniqueInput;
};


export type QueryOfficeLocationVersionArgs = {
  where: VersionWhereInput;
};


export type QueryOfficeLocationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<OfficeLocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<OfficeLocationWhereInput>;
};


export type QueryOfficeLocationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<OfficeLocationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<OfficeLocationWhereInput>;
};


export type QueryPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageWhereUniqueInput;
};


export type QueryPageContentArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageContentWhereUniqueInput;
};


export type QueryPageContentVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPageContentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PageContentWhereInput>;
};


export type QueryPageContentsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PageContentWhereInput>;
};


export type QueryPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPagesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<PageWhereInput>;
};


export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};


export type QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};


export type QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryTestimonialArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: TestimonialWhereUniqueInput;
};


export type QueryTestimonialVersionArgs = {
  where: VersionWhereInput;
};


export type QueryTestimonialsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryTestimonialsConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<TestimonialOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<TestimonialWhereInput>;
};


export type QueryThemeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ThemeWhereUniqueInput;
};


export type QueryThemeVersionArgs = {
  where: VersionWhereInput;
};


export type QueryThemesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ThemeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ThemeWhereInput>;
};


export type QueryThemesConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ThemeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<ThemeWhereInput>;
};


export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA';
  a: Scalars['RGBATransparency']['output'];
  b: Scalars['RGBAHue']['output'];
  g: Scalars['RGBAHue']['output'];
  r: Scalars['RGBAHue']['output'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency']['input'];
  b: Scalars['RGBAHue']['input'];
  g: Scalars['RGBAHue']['input'];
  r: Scalars['RGBAHue']['input'];
};

export type RemoteSelectField = Entity & {
  __typename?: 'RemoteSelectField';
  dataPath: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  multiple: Scalars['Boolean']['output'];
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
};

export type RemoteSelectFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: RemoteSelectFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type RemoteSelectFieldConnection = {
  __typename?: 'RemoteSelectFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<RemoteSelectFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type RemoteSelectFieldCreateInput = {
  dataPath: Scalars['String']['input'];
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  multiple: Scalars['Boolean']['input'];
  required: Scalars['Boolean']['input'];
};

export type RemoteSelectFieldCreateManyInlineInput = {
  /** Create and connect multiple existing RemoteSelectField documents */
  create?: InputMaybe<Array<RemoteSelectFieldCreateInput>>;
};

export type RemoteSelectFieldCreateOneInlineInput = {
  /** Create and connect one RemoteSelectField document */
  create?: InputMaybe<RemoteSelectFieldCreateInput>;
};

export type RemoteSelectFieldCreateWithPositionInput = {
  /** Document to create */
  data: RemoteSelectFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type RemoteSelectFieldEdge = {
  __typename?: 'RemoteSelectFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: RemoteSelectField;
};

/** Identifies documents */
export type RemoteSelectFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RemoteSelectFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RemoteSelectFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RemoteSelectFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  dataPath?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  dataPath_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  dataPath_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  dataPath_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  dataPath_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  dataPath_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  dataPath_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  dataPath_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  dataPath_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  dataPath_starts_with?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum RemoteSelectFieldOrderByInput {
  DataPathAsc = 'dataPath_ASC',
  DataPathDesc = 'dataPath_DESC',
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  MultipleAsc = 'multiple_ASC',
  MultipleDesc = 'multiple_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type RemoteSelectFieldParent = Form;

export type RemoteSelectFieldParentConnectInput = {
  Form?: InputMaybe<FormConnectInput>;
};

export type RemoteSelectFieldParentCreateInput = {
  Form?: InputMaybe<FormCreateInput>;
};

export type RemoteSelectFieldParentCreateManyInlineInput = {
  /** Connect multiple existing RemoteSelectFieldParent documents */
  connect?: InputMaybe<Array<RemoteSelectFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing RemoteSelectFieldParent documents */
  create?: InputMaybe<Array<RemoteSelectFieldParentCreateInput>>;
};

export type RemoteSelectFieldParentCreateOneInlineInput = {
  /** Connect one existing RemoteSelectFieldParent document */
  connect?: InputMaybe<RemoteSelectFieldParentWhereUniqueInput>;
  /** Create and connect one RemoteSelectFieldParent document */
  create?: InputMaybe<RemoteSelectFieldParentCreateInput>;
};

export type RemoteSelectFieldParentUpdateInput = {
  Form?: InputMaybe<FormUpdateInput>;
};

export type RemoteSelectFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing RemoteSelectFieldParent documents */
  connect?: InputMaybe<Array<RemoteSelectFieldParentConnectInput>>;
  /** Create and connect multiple RemoteSelectFieldParent documents */
  create?: InputMaybe<Array<RemoteSelectFieldParentCreateInput>>;
  /** Delete multiple RemoteSelectFieldParent documents */
  delete?: InputMaybe<Array<RemoteSelectFieldParentWhereUniqueInput>>;
  /** Disconnect multiple RemoteSelectFieldParent documents */
  disconnect?: InputMaybe<Array<RemoteSelectFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing RemoteSelectFieldParent documents */
  set?: InputMaybe<Array<RemoteSelectFieldParentWhereUniqueInput>>;
  /** Update multiple RemoteSelectFieldParent documents */
  update?: InputMaybe<Array<RemoteSelectFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RemoteSelectFieldParent documents */
  upsert?: InputMaybe<Array<RemoteSelectFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type RemoteSelectFieldParentUpdateManyWithNestedWhereInput = {
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type RemoteSelectFieldParentUpdateOneInlineInput = {
  /** Connect existing RemoteSelectFieldParent document */
  connect?: InputMaybe<RemoteSelectFieldParentWhereUniqueInput>;
  /** Create and connect one RemoteSelectFieldParent document */
  create?: InputMaybe<RemoteSelectFieldParentCreateInput>;
  /** Delete currently connected RemoteSelectFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected RemoteSelectFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single RemoteSelectFieldParent document */
  update?: InputMaybe<RemoteSelectFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RemoteSelectFieldParent document */
  upsert?: InputMaybe<RemoteSelectFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type RemoteSelectFieldParentUpdateWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type RemoteSelectFieldParentUpsertWithNestedWhereUniqueInput = {
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type RemoteSelectFieldParentWhereInput = {
  Form?: InputMaybe<FormWhereInput>;
};

export type RemoteSelectFieldParentWhereUniqueInput = {
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type RemoteSelectFieldUpdateInput = {
  dataPath?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RemoteSelectFieldUpdateManyInlineInput = {
  /** Create and connect multiple RemoteSelectField component instances */
  create?: InputMaybe<Array<RemoteSelectFieldCreateWithPositionInput>>;
  /** Delete multiple RemoteSelectField documents */
  delete?: InputMaybe<Array<RemoteSelectFieldWhereUniqueInput>>;
  /** Update multiple RemoteSelectField component instances */
  update?: InputMaybe<Array<RemoteSelectFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple RemoteSelectField component instances */
  upsert?: InputMaybe<Array<RemoteSelectFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type RemoteSelectFieldUpdateManyInput = {
  dataPath?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RemoteSelectFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RemoteSelectFieldUpdateManyInput;
  /** Document search */
  where: RemoteSelectFieldWhereInput;
};

export type RemoteSelectFieldUpdateOneInlineInput = {
  /** Create and connect one RemoteSelectField document */
  create?: InputMaybe<RemoteSelectFieldCreateInput>;
  /** Delete currently connected RemoteSelectField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single RemoteSelectField document */
  update?: InputMaybe<RemoteSelectFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RemoteSelectField document */
  upsert?: InputMaybe<RemoteSelectFieldUpsertWithNestedWhereUniqueInput>;
};

export type RemoteSelectFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<RemoteSelectFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: RemoteSelectFieldWhereUniqueInput;
};

export type RemoteSelectFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RemoteSelectFieldUpdateInput;
  /** Unique document search */
  where: RemoteSelectFieldWhereUniqueInput;
};

export type RemoteSelectFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: RemoteSelectFieldCreateInput;
  /** Update document if it exists */
  update: RemoteSelectFieldUpdateInput;
};

export type RemoteSelectFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<RemoteSelectFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: RemoteSelectFieldWhereUniqueInput;
};

export type RemoteSelectFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RemoteSelectFieldUpsertInput;
  /** Unique document search */
  where: RemoteSelectFieldWhereUniqueInput;
};

/** Identifies documents */
export type RemoteSelectFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RemoteSelectFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RemoteSelectFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RemoteSelectFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  dataPath?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  dataPath_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  dataPath_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  dataPath_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  dataPath_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  dataPath_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  dataPath_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  dataPath_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  dataPath_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  dataPath_starts_with?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

/** References RemoteSelectField record uniquely */
export type RemoteSelectFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText';
  /** Returns HTMl representation */
  html: Scalars['String']['output'];
  /** Returns Markdown representation */
  markdown: Scalars['String']['output'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST']['output'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String']['output'];
};

/** Scheduled Operation system model */
export type ScheduledOperation = Entity & Node & {
  __typename?: 'ScheduledOperation';
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Operation description */
  description?: Maybe<Scalars['String']['output']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']['output']>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json']['output'];
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
};


/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Admonition | Asset | BlogPost | CloudLocation | Configuration | ContactForm | ContentButton | ContentTag | DocsGroup | DocsPage | Document | DocumentGroup | Employee | FooterGroup | Form | HeaderGroup | HomePage | OfficeLocation | Page | PageContent | Testimonial | Theme;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  __typename?: 'ScheduledOperationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  __typename?: 'ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']['input']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']['input']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']['input']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']['input']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Entity & Node & {
  __typename?: 'ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Release description */
  description?: Maybe<Scalars['String']['output']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']['output']>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean']['output'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean']['output'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']['output']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']['output']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  __typename?: 'ScheduledReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  __typename?: 'ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  isImplicit?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']['input']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']['input']>;
  errorMessage?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  isImplicit?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']['input']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SelectField = Entity & {
  __typename?: 'SelectField';
  /** Allow users to create their own option */
  creatable: Scalars['Boolean']['output'];
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  multiple: Scalars['Boolean']['output'];
  options: Array<Scalars['String']['output']>;
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
};

export type SelectFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SelectFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type SelectFieldConnection = {
  __typename?: 'SelectFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SelectFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SelectFieldCreateInput = {
  creatable: Scalars['Boolean']['input'];
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  multiple: Scalars['Boolean']['input'];
  options: Array<Scalars['String']['input']>;
  required: Scalars['Boolean']['input'];
};

export type SelectFieldCreateManyInlineInput = {
  /** Create and connect multiple existing SelectField documents */
  create?: InputMaybe<Array<SelectFieldCreateInput>>;
};

export type SelectFieldCreateOneInlineInput = {
  /** Create and connect one SelectField document */
  create?: InputMaybe<SelectFieldCreateInput>;
};

export type SelectFieldCreateWithPositionInput = {
  /** Document to create */
  data: SelectFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type SelectFieldEdge = {
  __typename?: 'SelectFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: SelectField;
};

/** Identifies documents */
export type SelectFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  creatable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  creatable_not?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum SelectFieldOrderByInput {
  CreatableAsc = 'creatable_ASC',
  CreatableDesc = 'creatable_DESC',
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  MultipleAsc = 'multiple_ASC',
  MultipleDesc = 'multiple_DESC',
  OptionsAsc = 'options_ASC',
  OptionsDesc = 'options_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type SelectFieldParent = ContactForm | Form;

export type SelectFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type SelectFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type SelectFieldParentCreateManyInlineInput = {
  /** Connect multiple existing SelectFieldParent documents */
  connect?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing SelectFieldParent documents */
  create?: InputMaybe<Array<SelectFieldParentCreateInput>>;
};

export type SelectFieldParentCreateOneInlineInput = {
  /** Connect one existing SelectFieldParent document */
  connect?: InputMaybe<SelectFieldParentWhereUniqueInput>;
  /** Create and connect one SelectFieldParent document */
  create?: InputMaybe<SelectFieldParentCreateInput>;
};

export type SelectFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type SelectFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing SelectFieldParent documents */
  connect?: InputMaybe<Array<SelectFieldParentConnectInput>>;
  /** Create and connect multiple SelectFieldParent documents */
  create?: InputMaybe<Array<SelectFieldParentCreateInput>>;
  /** Delete multiple SelectFieldParent documents */
  delete?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Disconnect multiple SelectFieldParent documents */
  disconnect?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SelectFieldParent documents */
  set?: InputMaybe<Array<SelectFieldParentWhereUniqueInput>>;
  /** Update multiple SelectFieldParent documents */
  update?: InputMaybe<Array<SelectFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SelectFieldParent documents */
  upsert?: InputMaybe<Array<SelectFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type SelectFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type SelectFieldParentUpdateOneInlineInput = {
  /** Connect existing SelectFieldParent document */
  connect?: InputMaybe<SelectFieldParentWhereUniqueInput>;
  /** Create and connect one SelectFieldParent document */
  create?: InputMaybe<SelectFieldParentCreateInput>;
  /** Delete currently connected SelectFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected SelectFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single SelectFieldParent document */
  update?: InputMaybe<SelectFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SelectFieldParent document */
  upsert?: InputMaybe<SelectFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type SelectFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type SelectFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type SelectFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type SelectFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type SelectFieldUpdateInput = {
  creatable?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SelectFieldUpdateManyInlineInput = {
  /** Create and connect multiple SelectField component instances */
  create?: InputMaybe<Array<SelectFieldCreateWithPositionInput>>;
  /** Delete multiple SelectField documents */
  delete?: InputMaybe<Array<SelectFieldWhereUniqueInput>>;
  /** Update multiple SelectField component instances */
  update?: InputMaybe<Array<SelectFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SelectField component instances */
  upsert?: InputMaybe<Array<SelectFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SelectFieldUpdateManyInput = {
  creatable?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SelectFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SelectFieldUpdateManyInput;
  /** Document search */
  where: SelectFieldWhereInput;
};

export type SelectFieldUpdateOneInlineInput = {
  /** Create and connect one SelectField document */
  create?: InputMaybe<SelectFieldCreateInput>;
  /** Delete currently connected SelectField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single SelectField document */
  update?: InputMaybe<SelectFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SelectField document */
  upsert?: InputMaybe<SelectFieldUpsertWithNestedWhereUniqueInput>;
};

export type SelectFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<SelectFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SelectFieldWhereUniqueInput;
};

export type SelectFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SelectFieldUpdateInput;
  /** Unique document search */
  where: SelectFieldWhereUniqueInput;
};

export type SelectFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: SelectFieldCreateInput;
  /** Update document if it exists */
  update: SelectFieldUpdateInput;
};

export type SelectFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<SelectFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SelectFieldWhereUniqueInput;
};

export type SelectFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SelectFieldUpsertInput;
  /** Unique document search */
  where: SelectFieldWhereUniqueInput;
};

/** Identifies documents */
export type SelectFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SelectFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  creatable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  creatable_not?: InputMaybe<Scalars['Boolean']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  multiple?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  multiple_not?: InputMaybe<Scalars['Boolean']['input']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  options?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  options_contains_all?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  options_contains_none?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  options_contains_some?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  options_not?: InputMaybe<Array<Scalars['String']['input']>>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

/** References SelectField record uniquely */
export type SelectFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type SocialLink = Entity & {
  __typename?: 'SocialLink';
  href: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
};

export type SocialLinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SocialLinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type SocialLinkConnection = {
  __typename?: 'SocialLinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SocialLinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SocialLinkCreateInput = {
  href: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type SocialLinkCreateManyInlineInput = {
  /** Create and connect multiple existing SocialLink documents */
  create?: InputMaybe<Array<SocialLinkCreateInput>>;
};

export type SocialLinkCreateOneInlineInput = {
  /** Create and connect one SocialLink document */
  create?: InputMaybe<SocialLinkCreateInput>;
};

export type SocialLinkCreateWithPositionInput = {
  /** Document to create */
  data: SocialLinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type SocialLinkEdge = {
  __typename?: 'SocialLinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: SocialLink;
};

/** Identifies documents */
export type SocialLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  href_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum SocialLinkOrderByInput {
  HrefAsc = 'href_ASC',
  HrefDesc = 'href_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC'
}

export type SocialLinkParent = Configuration;

export type SocialLinkParentConnectInput = {
  Configuration?: InputMaybe<ConfigurationConnectInput>;
};

export type SocialLinkParentCreateInput = {
  Configuration?: InputMaybe<ConfigurationCreateInput>;
};

export type SocialLinkParentCreateManyInlineInput = {
  /** Connect multiple existing SocialLinkParent documents */
  connect?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Create and connect multiple existing SocialLinkParent documents */
  create?: InputMaybe<Array<SocialLinkParentCreateInput>>;
};

export type SocialLinkParentCreateOneInlineInput = {
  /** Connect one existing SocialLinkParent document */
  connect?: InputMaybe<SocialLinkParentWhereUniqueInput>;
  /** Create and connect one SocialLinkParent document */
  create?: InputMaybe<SocialLinkParentCreateInput>;
};

export type SocialLinkParentUpdateInput = {
  Configuration?: InputMaybe<ConfigurationUpdateInput>;
};

export type SocialLinkParentUpdateManyInlineInput = {
  /** Connect multiple existing SocialLinkParent documents */
  connect?: InputMaybe<Array<SocialLinkParentConnectInput>>;
  /** Create and connect multiple SocialLinkParent documents */
  create?: InputMaybe<Array<SocialLinkParentCreateInput>>;
  /** Delete multiple SocialLinkParent documents */
  delete?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Disconnect multiple SocialLinkParent documents */
  disconnect?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SocialLinkParent documents */
  set?: InputMaybe<Array<SocialLinkParentWhereUniqueInput>>;
  /** Update multiple SocialLinkParent documents */
  update?: InputMaybe<Array<SocialLinkParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SocialLinkParent documents */
  upsert?: InputMaybe<Array<SocialLinkParentUpsertWithNestedWhereUniqueInput>>;
};

export type SocialLinkParentUpdateManyWithNestedWhereInput = {
  Configuration?: InputMaybe<ConfigurationUpdateManyWithNestedWhereInput>;
};

export type SocialLinkParentUpdateOneInlineInput = {
  /** Connect existing SocialLinkParent document */
  connect?: InputMaybe<SocialLinkParentWhereUniqueInput>;
  /** Create and connect one SocialLinkParent document */
  create?: InputMaybe<SocialLinkParentCreateInput>;
  /** Delete currently connected SocialLinkParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected SocialLinkParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single SocialLinkParent document */
  update?: InputMaybe<SocialLinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SocialLinkParent document */
  upsert?: InputMaybe<SocialLinkParentUpsertWithNestedWhereUniqueInput>;
};

export type SocialLinkParentUpdateWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpdateWithNestedWhereUniqueInput>;
};

export type SocialLinkParentUpsertWithNestedWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationUpsertWithNestedWhereUniqueInput>;
};

export type SocialLinkParentWhereInput = {
  Configuration?: InputMaybe<ConfigurationWhereInput>;
};

export type SocialLinkParentWhereUniqueInput = {
  Configuration?: InputMaybe<ConfigurationWhereUniqueInput>;
};

export type SocialLinkUpdateInput = {
  href?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type SocialLinkUpdateManyInlineInput = {
  /** Create and connect multiple SocialLink component instances */
  create?: InputMaybe<Array<SocialLinkCreateWithPositionInput>>;
  /** Delete multiple SocialLink documents */
  delete?: InputMaybe<Array<SocialLinkWhereUniqueInput>>;
  /** Update multiple SocialLink component instances */
  update?: InputMaybe<Array<SocialLinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SocialLink component instances */
  upsert?: InputMaybe<Array<SocialLinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SocialLinkUpdateManyInput = {
  href?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type SocialLinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SocialLinkUpdateManyInput;
  /** Document search */
  where: SocialLinkWhereInput;
};

export type SocialLinkUpdateOneInlineInput = {
  /** Create and connect one SocialLink document */
  create?: InputMaybe<SocialLinkCreateInput>;
  /** Delete currently connected SocialLink document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single SocialLink document */
  update?: InputMaybe<SocialLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SocialLink document */
  upsert?: InputMaybe<SocialLinkUpsertWithNestedWhereUniqueInput>;
};

export type SocialLinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<SocialLinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SocialLinkWhereUniqueInput;
};

export type SocialLinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SocialLinkUpdateInput;
  /** Unique document search */
  where: SocialLinkWhereUniqueInput;
};

export type SocialLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: SocialLinkCreateInput;
  /** Update document if it exists */
  update: SocialLinkUpdateInput;
};

export type SocialLinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<SocialLinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SocialLinkWhereUniqueInput;
};

export type SocialLinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SocialLinkUpsertInput;
  /** Unique document search */
  where: SocialLinkWhereUniqueInput;
};

/** Identifies documents */
export type SocialLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  href_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  href_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  href_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  href_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  href_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  href_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  href_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  href_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  href_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References SocialLink record uniquely */
export type SocialLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export enum SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

export type Testimonial = Entity & Node & {
  __typename?: 'Testimonial';
  body: RichText;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Testimonial>;
  /** List of Testimonial versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  image: Asset;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subtitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type TestimonialCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type TestimonialHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type TestimonialImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type TestimonialScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type TestimonialUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type TestimonialConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TestimonialWhereUniqueInput;
};

/** A connection to a list of items. */
export type TestimonialConnection = {
  __typename?: 'TestimonialConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TestimonialEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TestimonialCreateInput = {
  body: Scalars['RichTextAST']['input'];
  cl9470mbl4qrk01tcheod9xk7?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  image: AssetCreateOneInlineInput;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type TestimonialCreateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Create and connect multiple existing Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
};

export type TestimonialCreateOneInlineInput = {
  /** Connect one existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
};

/** An edge in a connection. */
export type TestimonialEdge = {
  __typename?: 'TestimonialEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Testimonial;
};

/** Identifies documents */
export type TestimonialManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum TestimonialOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type TestimonialUpdateInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  cl9470mbl4qrk01tcheod9xk7?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type TestimonialUpdateManyInlineInput = {
  /** Connect multiple existing Testimonial documents */
  connect?: InputMaybe<Array<TestimonialConnectInput>>;
  /** Create and connect multiple Testimonial documents */
  create?: InputMaybe<Array<TestimonialCreateInput>>;
  /** Delete multiple Testimonial documents */
  delete?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Disconnect multiple Testimonial documents */
  disconnect?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Testimonial documents */
  set?: InputMaybe<Array<TestimonialWhereUniqueInput>>;
  /** Update multiple Testimonial documents */
  update?: InputMaybe<Array<TestimonialUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Testimonial documents */
  upsert?: InputMaybe<Array<TestimonialUpsertWithNestedWhereUniqueInput>>;
};

export type TestimonialUpdateManyInput = {
  body?: InputMaybe<Scalars['RichTextAST']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type TestimonialUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TestimonialUpdateManyInput;
  /** Document search */
  where: TestimonialWhereInput;
};

export type TestimonialUpdateOneInlineInput = {
  /** Connect existing Testimonial document */
  connect?: InputMaybe<TestimonialWhereUniqueInput>;
  /** Create and connect one Testimonial document */
  create?: InputMaybe<TestimonialCreateInput>;
  /** Delete currently connected Testimonial document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Testimonial document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Testimonial document */
  update?: InputMaybe<TestimonialUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Testimonial document */
  upsert?: InputMaybe<TestimonialUpsertWithNestedWhereUniqueInput>;
};

export type TestimonialUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TestimonialUpdateInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

export type TestimonialUpsertInput = {
  /** Create document if it didn't exist */
  create: TestimonialCreateInput;
  /** Update document if it exists */
  update: TestimonialUpdateInput;
};

export type TestimonialUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TestimonialUpsertInput;
  /** Unique document search */
  where: TestimonialWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type TestimonialWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type TestimonialWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_none?: InputMaybe<TestimonialWhereStageInput>;
  documentInStages_some?: InputMaybe<TestimonialWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  image?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  subtitle_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  subtitle_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  subtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtitle_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  subtitle_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  subtitle_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  subtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  subtitle_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  subtitle_starts_with?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type TestimonialWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TestimonialWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<TestimonialWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Testimonial record uniquely */
export type TestimonialWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type TextAreaField = Entity & {
  __typename?: 'TextAreaField';
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
};

export type TextAreaFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TextAreaFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type TextAreaFieldConnection = {
  __typename?: 'TextAreaFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TextAreaFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TextAreaFieldCreateInput = {
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  required: Scalars['Boolean']['input'];
};

export type TextAreaFieldCreateManyInlineInput = {
  /** Create and connect multiple existing TextAreaField documents */
  create?: InputMaybe<Array<TextAreaFieldCreateInput>>;
};

export type TextAreaFieldCreateOneInlineInput = {
  /** Create and connect one TextAreaField document */
  create?: InputMaybe<TextAreaFieldCreateInput>;
};

export type TextAreaFieldCreateWithPositionInput = {
  /** Document to create */
  data: TextAreaFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TextAreaFieldEdge = {
  __typename?: 'TextAreaFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: TextAreaField;
};

/** Identifies documents */
export type TextAreaFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum TextAreaFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC'
}

export type TextAreaFieldParent = ContactForm | Form;

export type TextAreaFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type TextAreaFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type TextAreaFieldParentCreateManyInlineInput = {
  /** Connect multiple existing TextAreaFieldParent documents */
  connect?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing TextAreaFieldParent documents */
  create?: InputMaybe<Array<TextAreaFieldParentCreateInput>>;
};

export type TextAreaFieldParentCreateOneInlineInput = {
  /** Connect one existing TextAreaFieldParent document */
  connect?: InputMaybe<TextAreaFieldParentWhereUniqueInput>;
  /** Create and connect one TextAreaFieldParent document */
  create?: InputMaybe<TextAreaFieldParentCreateInput>;
};

export type TextAreaFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type TextAreaFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing TextAreaFieldParent documents */
  connect?: InputMaybe<Array<TextAreaFieldParentConnectInput>>;
  /** Create and connect multiple TextAreaFieldParent documents */
  create?: InputMaybe<Array<TextAreaFieldParentCreateInput>>;
  /** Delete multiple TextAreaFieldParent documents */
  delete?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Disconnect multiple TextAreaFieldParent documents */
  disconnect?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing TextAreaFieldParent documents */
  set?: InputMaybe<Array<TextAreaFieldParentWhereUniqueInput>>;
  /** Update multiple TextAreaFieldParent documents */
  update?: InputMaybe<Array<TextAreaFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple TextAreaFieldParent documents */
  upsert?: InputMaybe<Array<TextAreaFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type TextAreaFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type TextAreaFieldParentUpdateOneInlineInput = {
  /** Connect existing TextAreaFieldParent document */
  connect?: InputMaybe<TextAreaFieldParentWhereUniqueInput>;
  /** Create and connect one TextAreaFieldParent document */
  create?: InputMaybe<TextAreaFieldParentCreateInput>;
  /** Delete currently connected TextAreaFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected TextAreaFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single TextAreaFieldParent document */
  update?: InputMaybe<TextAreaFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextAreaFieldParent document */
  upsert?: InputMaybe<TextAreaFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type TextAreaFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type TextAreaFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type TextAreaFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type TextAreaFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type TextAreaFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TextAreaFieldUpdateManyInlineInput = {
  /** Create and connect multiple TextAreaField component instances */
  create?: InputMaybe<Array<TextAreaFieldCreateWithPositionInput>>;
  /** Delete multiple TextAreaField documents */
  delete?: InputMaybe<Array<TextAreaFieldWhereUniqueInput>>;
  /** Update multiple TextAreaField component instances */
  update?: InputMaybe<Array<TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TextAreaField component instances */
  upsert?: InputMaybe<Array<TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TextAreaFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TextAreaFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TextAreaFieldUpdateManyInput;
  /** Document search */
  where: TextAreaFieldWhereInput;
};

export type TextAreaFieldUpdateOneInlineInput = {
  /** Create and connect one TextAreaField document */
  create?: InputMaybe<TextAreaFieldCreateInput>;
  /** Delete currently connected TextAreaField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single TextAreaField document */
  update?: InputMaybe<TextAreaFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextAreaField document */
  upsert?: InputMaybe<TextAreaFieldUpsertWithNestedWhereUniqueInput>;
};

export type TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TextAreaFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextAreaFieldWhereUniqueInput;
};

export type TextAreaFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TextAreaFieldUpdateInput;
  /** Unique document search */
  where: TextAreaFieldWhereUniqueInput;
};

export type TextAreaFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: TextAreaFieldCreateInput;
  /** Update document if it exists */
  update: TextAreaFieldUpdateInput;
};

export type TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TextAreaFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextAreaFieldWhereUniqueInput;
};

export type TextAreaFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TextAreaFieldUpsertInput;
  /** Unique document search */
  where: TextAreaFieldWhereUniqueInput;
};

/** Identifies documents */
export type TextAreaFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextAreaFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
};

/** References TextAreaField record uniquely */
export type TextAreaFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type TextInputField = Entity & {
  __typename?: 'TextInputField';
  displayName: Scalars['String']['output'];
  fieldGroup: Scalars['Int']['output'];
  formId: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  label?: Maybe<Scalars['String']['output']>;
  required: Scalars['Boolean']['output'];
  /** System stage field */
  stage: Stage;
  validationType?: Maybe<TextInputValidationType>;
};

export type TextInputFieldConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: TextInputFieldWhereUniqueInput;
};

/** A connection to a list of items. */
export type TextInputFieldConnection = {
  __typename?: 'TextInputFieldConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<TextInputFieldEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type TextInputFieldCreateInput = {
  displayName: Scalars['String']['input'];
  fieldGroup: Scalars['Int']['input'];
  formId: Scalars['String']['input'];
  label?: InputMaybe<Scalars['String']['input']>;
  required: Scalars['Boolean']['input'];
  validationType?: InputMaybe<TextInputValidationType>;
};

export type TextInputFieldCreateManyInlineInput = {
  /** Create and connect multiple existing TextInputField documents */
  create?: InputMaybe<Array<TextInputFieldCreateInput>>;
};

export type TextInputFieldCreateOneInlineInput = {
  /** Create and connect one TextInputField document */
  create?: InputMaybe<TextInputFieldCreateInput>;
};

export type TextInputFieldCreateWithPositionInput = {
  /** Document to create */
  data: TextInputFieldCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type TextInputFieldEdge = {
  __typename?: 'TextInputFieldEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: TextInputField;
};

/** Identifies documents */
export type TextInputFieldManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
  validationType?: InputMaybe<TextInputValidationType>;
  /** All values that are contained in given list. */
  validationType_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
  /** Any other value that exists and is not equal to the given value. */
  validationType_not?: InputMaybe<TextInputValidationType>;
  /** All values that are not contained in given list. */
  validationType_not_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
};

export enum TextInputFieldOrderByInput {
  DisplayNameAsc = 'displayName_ASC',
  DisplayNameDesc = 'displayName_DESC',
  FieldGroupAsc = 'fieldGroup_ASC',
  FieldGroupDesc = 'fieldGroup_DESC',
  FormIdAsc = 'formId_ASC',
  FormIdDesc = 'formId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC',
  ValidationTypeAsc = 'validationType_ASC',
  ValidationTypeDesc = 'validationType_DESC'
}

export type TextInputFieldParent = ContactForm | Form;

export type TextInputFieldParentConnectInput = {
  ContactForm?: InputMaybe<ContactFormConnectInput>;
  Form?: InputMaybe<FormConnectInput>;
};

export type TextInputFieldParentCreateInput = {
  ContactForm?: InputMaybe<ContactFormCreateInput>;
  Form?: InputMaybe<FormCreateInput>;
};

export type TextInputFieldParentCreateManyInlineInput = {
  /** Connect multiple existing TextInputFieldParent documents */
  connect?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Create and connect multiple existing TextInputFieldParent documents */
  create?: InputMaybe<Array<TextInputFieldParentCreateInput>>;
};

export type TextInputFieldParentCreateOneInlineInput = {
  /** Connect one existing TextInputFieldParent document */
  connect?: InputMaybe<TextInputFieldParentWhereUniqueInput>;
  /** Create and connect one TextInputFieldParent document */
  create?: InputMaybe<TextInputFieldParentCreateInput>;
};

export type TextInputFieldParentUpdateInput = {
  ContactForm?: InputMaybe<ContactFormUpdateInput>;
  Form?: InputMaybe<FormUpdateInput>;
};

export type TextInputFieldParentUpdateManyInlineInput = {
  /** Connect multiple existing TextInputFieldParent documents */
  connect?: InputMaybe<Array<TextInputFieldParentConnectInput>>;
  /** Create and connect multiple TextInputFieldParent documents */
  create?: InputMaybe<Array<TextInputFieldParentCreateInput>>;
  /** Delete multiple TextInputFieldParent documents */
  delete?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Disconnect multiple TextInputFieldParent documents */
  disconnect?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing TextInputFieldParent documents */
  set?: InputMaybe<Array<TextInputFieldParentWhereUniqueInput>>;
  /** Update multiple TextInputFieldParent documents */
  update?: InputMaybe<Array<TextInputFieldParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple TextInputFieldParent documents */
  upsert?: InputMaybe<Array<TextInputFieldParentUpsertWithNestedWhereUniqueInput>>;
};

export type TextInputFieldParentUpdateManyWithNestedWhereInput = {
  ContactForm?: InputMaybe<ContactFormUpdateManyWithNestedWhereInput>;
  Form?: InputMaybe<FormUpdateManyWithNestedWhereInput>;
};

export type TextInputFieldParentUpdateOneInlineInput = {
  /** Connect existing TextInputFieldParent document */
  connect?: InputMaybe<TextInputFieldParentWhereUniqueInput>;
  /** Create and connect one TextInputFieldParent document */
  create?: InputMaybe<TextInputFieldParentCreateInput>;
  /** Delete currently connected TextInputFieldParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected TextInputFieldParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single TextInputFieldParent document */
  update?: InputMaybe<TextInputFieldParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextInputFieldParent document */
  upsert?: InputMaybe<TextInputFieldParentUpsertWithNestedWhereUniqueInput>;
};

export type TextInputFieldParentUpdateWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpdateWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpdateWithNestedWhereUniqueInput>;
};

export type TextInputFieldParentUpsertWithNestedWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormUpsertWithNestedWhereUniqueInput>;
  Form?: InputMaybe<FormUpsertWithNestedWhereUniqueInput>;
};

export type TextInputFieldParentWhereInput = {
  ContactForm?: InputMaybe<ContactFormWhereInput>;
  Form?: InputMaybe<FormWhereInput>;
};

export type TextInputFieldParentWhereUniqueInput = {
  ContactForm?: InputMaybe<ContactFormWhereUniqueInput>;
  Form?: InputMaybe<FormWhereUniqueInput>;
};

export type TextInputFieldUpdateInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  validationType?: InputMaybe<TextInputValidationType>;
};

export type TextInputFieldUpdateManyInlineInput = {
  /** Create and connect multiple TextInputField component instances */
  create?: InputMaybe<Array<TextInputFieldCreateWithPositionInput>>;
  /** Delete multiple TextInputField documents */
  delete?: InputMaybe<Array<TextInputFieldWhereUniqueInput>>;
  /** Update multiple TextInputField component instances */
  update?: InputMaybe<Array<TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple TextInputField component instances */
  upsert?: InputMaybe<Array<TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type TextInputFieldUpdateManyInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  formId?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  validationType?: InputMaybe<TextInputValidationType>;
};

export type TextInputFieldUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: TextInputFieldUpdateManyInput;
  /** Document search */
  where: TextInputFieldWhereInput;
};

export type TextInputFieldUpdateOneInlineInput = {
  /** Create and connect one TextInputField document */
  create?: InputMaybe<TextInputFieldCreateInput>;
  /** Delete currently connected TextInputField document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single TextInputField document */
  update?: InputMaybe<TextInputFieldUpdateWithNestedWhereUniqueInput>;
  /** Upsert single TextInputField document */
  upsert?: InputMaybe<TextInputFieldUpsertWithNestedWhereUniqueInput>;
};

export type TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<TextInputFieldUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextInputFieldWhereUniqueInput;
};

export type TextInputFieldUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: TextInputFieldUpdateInput;
  /** Unique document search */
  where: TextInputFieldWhereUniqueInput;
};

export type TextInputFieldUpsertInput = {
  /** Create document if it didn't exist */
  create: TextInputFieldCreateInput;
  /** Update document if it exists */
  update: TextInputFieldUpdateInput;
};

export type TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<TextInputFieldUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: TextInputFieldWhereUniqueInput;
};

export type TextInputFieldUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: TextInputFieldUpsertInput;
  /** Unique document search */
  where: TextInputFieldWhereUniqueInput;
};

/** Identifies documents */
export type TextInputFieldWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<TextInputFieldWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  displayName_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  displayName_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  displayName_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  displayName_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  displayName_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  displayName_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  displayName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  displayName_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  displayName_starts_with?: InputMaybe<Scalars['String']['input']>;
  fieldGroup?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  fieldGroup_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  fieldGroup_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  fieldGroup_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  fieldGroup_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  fieldGroup_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  fieldGroup_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  fieldGroup_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  formId?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  formId_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  formId_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  formId_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  formId_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  formId_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  formId_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  formId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  formId_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  formId_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  label_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  label_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  label_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  label_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  label_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  label_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  label_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  label_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  label_starts_with?: InputMaybe<Scalars['String']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  required_not?: InputMaybe<Scalars['Boolean']['input']>;
  validationType?: InputMaybe<TextInputValidationType>;
  /** All values that are contained in given list. */
  validationType_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
  /** Any other value that exists and is not equal to the given value. */
  validationType_not?: InputMaybe<TextInputValidationType>;
  /** All values that are not contained in given list. */
  validationType_not_in?: InputMaybe<Array<InputMaybe<TextInputValidationType>>>;
};

/** References TextInputField record uniquely */
export type TextInputFieldWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export enum TextInputValidationType {
  Email = 'email',
  Phone = 'phone'
}

export type Theme = Entity & Node & {
  __typename?: 'Theme';
  colors: ThemeColors;
  configurations: Array<Configuration>;
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Theme>;
  /** List of Theme versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ThemeColorsArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeConfigurationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigurationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ConfigurationWhereInput>;
};


export type ThemeCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};


export type ThemeHistoryArgs = {
  limit?: Scalars['Int']['input'];
  skip?: Scalars['Int']['input'];
  stageOverride?: InputMaybe<Stage>;
};


export type ThemePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ThemeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ThemeUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export enum ThemeColor {
  Black = 'black',
  Blue = 'blue',
  Cyan = 'cyan',
  Gray = 'gray',
  Green = 'green',
  Orange = 'orange',
  Pink = 'pink',
  Primary = 'primary',
  Purple = 'purple',
  Red = 'red',
  Secondary = 'secondary',
  Teal = 'teal',
  Tertiary = 'tertiary',
  White = 'white',
  Yellow = 'yellow'
}

export type ThemeColors = Entity & {
  __typename?: 'ThemeColors';
  black: Color;
  blue: Color;
  cyan: Color;
  dark: Color;
  gray: Color;
  green: Color;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  light: Color;
  orange: Color;
  pink: Color;
  primary: Color;
  purple: Color;
  red: Color;
  secondary: Color;
  /** System stage field */
  stage: Stage;
  teal: Color;
  tertiary: Color;
  white: Color;
  yellow: Color;
};

export type ThemeColorsConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ThemeColorsWhereUniqueInput;
};

/** A connection to a list of items. */
export type ThemeColorsConnection = {
  __typename?: 'ThemeColorsConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ThemeColorsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ThemeColorsCreateInput = {
  black: ColorInput;
  blue: ColorInput;
  cyan: ColorInput;
  dark: ColorInput;
  gray: ColorInput;
  green: ColorInput;
  light: ColorInput;
  orange: ColorInput;
  pink: ColorInput;
  primary: ColorInput;
  purple: ColorInput;
  red: ColorInput;
  secondary: ColorInput;
  teal: ColorInput;
  tertiary: ColorInput;
  white: ColorInput;
  yellow: ColorInput;
};

export type ThemeColorsCreateManyInlineInput = {
  /** Create and connect multiple existing ThemeColors documents */
  create?: InputMaybe<Array<ThemeColorsCreateInput>>;
};

export type ThemeColorsCreateOneInlineInput = {
  /** Create and connect one ThemeColors document */
  create?: InputMaybe<ThemeColorsCreateInput>;
};

export type ThemeColorsCreateWithPositionInput = {
  /** Document to create */
  data: ThemeColorsCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ThemeColorsEdge = {
  __typename?: 'ThemeColorsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ThemeColors;
};

/** Identifies documents */
export type ThemeColorsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
};

export enum ThemeColorsOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ThemeColorsParent = Theme;

export type ThemeColorsParentConnectInput = {
  Theme?: InputMaybe<ThemeConnectInput>;
};

export type ThemeColorsParentCreateInput = {
  Theme?: InputMaybe<ThemeCreateInput>;
};

export type ThemeColorsParentCreateManyInlineInput = {
  /** Connect multiple existing ThemeColorsParent documents */
  connect?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Create and connect multiple existing ThemeColorsParent documents */
  create?: InputMaybe<Array<ThemeColorsParentCreateInput>>;
};

export type ThemeColorsParentCreateOneInlineInput = {
  /** Connect one existing ThemeColorsParent document */
  connect?: InputMaybe<ThemeColorsParentWhereUniqueInput>;
  /** Create and connect one ThemeColorsParent document */
  create?: InputMaybe<ThemeColorsParentCreateInput>;
};

export type ThemeColorsParentUpdateInput = {
  Theme?: InputMaybe<ThemeUpdateInput>;
};

export type ThemeColorsParentUpdateManyInlineInput = {
  /** Connect multiple existing ThemeColorsParent documents */
  connect?: InputMaybe<Array<ThemeColorsParentConnectInput>>;
  /** Create and connect multiple ThemeColorsParent documents */
  create?: InputMaybe<Array<ThemeColorsParentCreateInput>>;
  /** Delete multiple ThemeColorsParent documents */
  delete?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Disconnect multiple ThemeColorsParent documents */
  disconnect?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ThemeColorsParent documents */
  set?: InputMaybe<Array<ThemeColorsParentWhereUniqueInput>>;
  /** Update multiple ThemeColorsParent documents */
  update?: InputMaybe<Array<ThemeColorsParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ThemeColorsParent documents */
  upsert?: InputMaybe<Array<ThemeColorsParentUpsertWithNestedWhereUniqueInput>>;
};

export type ThemeColorsParentUpdateManyWithNestedWhereInput = {
  Theme?: InputMaybe<ThemeUpdateManyWithNestedWhereInput>;
};

export type ThemeColorsParentUpdateOneInlineInput = {
  /** Connect existing ThemeColorsParent document */
  connect?: InputMaybe<ThemeColorsParentWhereUniqueInput>;
  /** Create and connect one ThemeColorsParent document */
  create?: InputMaybe<ThemeColorsParentCreateInput>;
  /** Delete currently connected ThemeColorsParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected ThemeColorsParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ThemeColorsParent document */
  update?: InputMaybe<ThemeColorsParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ThemeColorsParent document */
  upsert?: InputMaybe<ThemeColorsParentUpsertWithNestedWhereUniqueInput>;
};

export type ThemeColorsParentUpdateWithNestedWhereUniqueInput = {
  Theme?: InputMaybe<ThemeUpdateWithNestedWhereUniqueInput>;
};

export type ThemeColorsParentUpsertWithNestedWhereUniqueInput = {
  Theme?: InputMaybe<ThemeUpsertWithNestedWhereUniqueInput>;
};

export type ThemeColorsParentWhereInput = {
  Theme?: InputMaybe<ThemeWhereInput>;
};

export type ThemeColorsParentWhereUniqueInput = {
  Theme?: InputMaybe<ThemeWhereUniqueInput>;
};

export type ThemeColorsUpdateInput = {
  black?: InputMaybe<ColorInput>;
  blue?: InputMaybe<ColorInput>;
  cyan?: InputMaybe<ColorInput>;
  dark?: InputMaybe<ColorInput>;
  gray?: InputMaybe<ColorInput>;
  green?: InputMaybe<ColorInput>;
  light?: InputMaybe<ColorInput>;
  orange?: InputMaybe<ColorInput>;
  pink?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  purple?: InputMaybe<ColorInput>;
  red?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  teal?: InputMaybe<ColorInput>;
  tertiary?: InputMaybe<ColorInput>;
  white?: InputMaybe<ColorInput>;
  yellow?: InputMaybe<ColorInput>;
};

export type ThemeColorsUpdateManyInlineInput = {
  /** Create and connect multiple ThemeColors component instances */
  create?: InputMaybe<Array<ThemeColorsCreateWithPositionInput>>;
  /** Delete multiple ThemeColors documents */
  delete?: InputMaybe<Array<ThemeColorsWhereUniqueInput>>;
  /** Update multiple ThemeColors component instances */
  update?: InputMaybe<Array<ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ThemeColors component instances */
  upsert?: InputMaybe<Array<ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ThemeColorsUpdateManyInput = {
  black?: InputMaybe<ColorInput>;
  blue?: InputMaybe<ColorInput>;
  cyan?: InputMaybe<ColorInput>;
  dark?: InputMaybe<ColorInput>;
  gray?: InputMaybe<ColorInput>;
  green?: InputMaybe<ColorInput>;
  light?: InputMaybe<ColorInput>;
  orange?: InputMaybe<ColorInput>;
  pink?: InputMaybe<ColorInput>;
  primary?: InputMaybe<ColorInput>;
  purple?: InputMaybe<ColorInput>;
  red?: InputMaybe<ColorInput>;
  secondary?: InputMaybe<ColorInput>;
  teal?: InputMaybe<ColorInput>;
  tertiary?: InputMaybe<ColorInput>;
  white?: InputMaybe<ColorInput>;
  yellow?: InputMaybe<ColorInput>;
};

export type ThemeColorsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ThemeColorsUpdateManyInput;
  /** Document search */
  where: ThemeColorsWhereInput;
};

export type ThemeColorsUpdateOneInlineInput = {
  /** Create and connect one ThemeColors document */
  create?: InputMaybe<ThemeColorsCreateInput>;
  /** Delete currently connected ThemeColors document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single ThemeColors document */
  update?: InputMaybe<ThemeColorsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ThemeColors document */
  upsert?: InputMaybe<ThemeColorsUpsertWithNestedWhereUniqueInput>;
};

export type ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ThemeColorsUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeColorsWhereUniqueInput;
};

export type ThemeColorsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ThemeColorsUpdateInput;
  /** Unique document search */
  where: ThemeColorsWhereUniqueInput;
};

export type ThemeColorsUpsertInput = {
  /** Create document if it didn't exist */
  create: ThemeColorsCreateInput;
  /** Update document if it exists */
  update: ThemeColorsUpdateInput;
};

export type ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ThemeColorsUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeColorsWhereUniqueInput;
};

export type ThemeColorsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ThemeColorsUpsertInput;
  /** Unique document search */
  where: ThemeColorsWhereUniqueInput;
};

/** Identifies documents */
export type ThemeColorsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeColorsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
};

/** References ThemeColors record uniquely */
export type ThemeColorsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type ThemeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ThemeWhereUniqueInput;
};

/** A connection to a list of items. */
export type ThemeConnection = {
  __typename?: 'ThemeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ThemeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ThemeCreateInput = {
  colors: ThemeColorsCreateOneInlineInput;
  configurations?: InputMaybe<ConfigurationCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type ThemeCreateManyInlineInput = {
  /** Connect multiple existing Theme documents */
  connect?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Create and connect multiple existing Theme documents */
  create?: InputMaybe<Array<ThemeCreateInput>>;
};

export type ThemeCreateOneInlineInput = {
  /** Connect one existing Theme document */
  connect?: InputMaybe<ThemeWhereUniqueInput>;
  /** Create and connect one Theme document */
  create?: InputMaybe<ThemeCreateInput>;
};

/** An edge in a connection. */
export type ThemeEdge = {
  __typename?: 'ThemeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Theme;
};

export type ThemeFonts = Entity & {
  __typename?: 'ThemeFonts';
  black: Scalars['Int']['output'];
  body: Scalars['String']['output'];
  bold: Scalars['Int']['output'];
  extrabold: Scalars['Int']['output'];
  hairline: Scalars['Int']['output'];
  headings: Scalars['String']['output'];
  /** The unique identifier */
  id: Scalars['ID']['output'];
  light: Scalars['Int']['output'];
  medium: Scalars['Int']['output'];
  monospace: Scalars['String']['output'];
  normal: Scalars['Int']['output'];
  semibold: Scalars['Int']['output'];
  /** System stage field */
  stage: Stage;
  thin: Scalars['Int']['output'];
};

/** A connection to a list of items. */
export type ThemeFontsConnection = {
  __typename?: 'ThemeFontsConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ThemeFontsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ThemeFontsCreateInput = {
  black: Scalars['Int']['input'];
  body: Scalars['String']['input'];
  bold: Scalars['Int']['input'];
  extrabold: Scalars['Int']['input'];
  hairline: Scalars['Int']['input'];
  headings: Scalars['String']['input'];
  light: Scalars['Int']['input'];
  medium: Scalars['Int']['input'];
  monospace: Scalars['String']['input'];
  normal: Scalars['Int']['input'];
  semibold: Scalars['Int']['input'];
  thin: Scalars['Int']['input'];
};

export type ThemeFontsCreateWithPositionInput = {
  /** Document to create */
  data: ThemeFontsCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ThemeFontsEdge = {
  __typename?: 'ThemeFontsEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: ThemeFonts;
};

/** Identifies documents */
export type ThemeFontsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  black?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  black_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  black_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  black_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  black_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  black_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  black_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  black_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  body?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  body_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  body_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  body_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  body_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  body_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  body_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  body_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  body_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  body_starts_with?: InputMaybe<Scalars['String']['input']>;
  bold?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  bold_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  bold_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  bold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  bold_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  bold_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  bold_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  bold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  extrabold?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  extrabold_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  extrabold_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  extrabold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  extrabold_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  extrabold_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  extrabold_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  extrabold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  hairline?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  hairline_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  hairline_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  hairline_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  hairline_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  hairline_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hairline_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  hairline_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  headings?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  headings_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  headings_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  headings_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headings_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  headings_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  headings_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  headings_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  headings_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  headings_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  light?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  light_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  light_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  light_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  light_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  light_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  light_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  light_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  medium?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  medium_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  medium_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  medium_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  medium_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  medium_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  medium_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  medium_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  monospace?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  monospace_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  monospace_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  monospace_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  monospace_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  monospace_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  monospace_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  monospace_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  monospace_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  monospace_starts_with?: InputMaybe<Scalars['String']['input']>;
  normal?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  normal_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  normal_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  normal_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  normal_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  normal_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  normal_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  normal_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  semibold?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  semibold_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  semibold_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  semibold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  semibold_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  semibold_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  semibold_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  semibold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  thin?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  thin_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  thin_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  thin_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  thin_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  thin_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  thin_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  thin_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
};

export enum ThemeFontsOrderByInput {
  BlackAsc = 'black_ASC',
  BlackDesc = 'black_DESC',
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  BoldAsc = 'bold_ASC',
  BoldDesc = 'bold_DESC',
  ExtraboldAsc = 'extrabold_ASC',
  ExtraboldDesc = 'extrabold_DESC',
  HairlineAsc = 'hairline_ASC',
  HairlineDesc = 'hairline_DESC',
  HeadingsAsc = 'headings_ASC',
  HeadingsDesc = 'headings_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LightAsc = 'light_ASC',
  LightDesc = 'light_DESC',
  MediumAsc = 'medium_ASC',
  MediumDesc = 'medium_DESC',
  MonospaceAsc = 'monospace_ASC',
  MonospaceDesc = 'monospace_DESC',
  NormalAsc = 'normal_ASC',
  NormalDesc = 'normal_DESC',
  SemiboldAsc = 'semibold_ASC',
  SemiboldDesc = 'semibold_DESC',
  ThinAsc = 'thin_ASC',
  ThinDesc = 'thin_DESC'
}

export type ThemeFontsUpdateInput = {
  black?: InputMaybe<Scalars['Int']['input']>;
  body?: InputMaybe<Scalars['String']['input']>;
  bold?: InputMaybe<Scalars['Int']['input']>;
  extrabold?: InputMaybe<Scalars['Int']['input']>;
  hairline?: InputMaybe<Scalars['Int']['input']>;
  headings?: InputMaybe<Scalars['String']['input']>;
  light?: InputMaybe<Scalars['Int']['input']>;
  medium?: InputMaybe<Scalars['Int']['input']>;
  monospace?: InputMaybe<Scalars['String']['input']>;
  normal?: InputMaybe<Scalars['Int']['input']>;
  semibold?: InputMaybe<Scalars['Int']['input']>;
  thin?: InputMaybe<Scalars['Int']['input']>;
};

export type ThemeFontsUpdateManyInput = {
  black?: InputMaybe<Scalars['Int']['input']>;
  body?: InputMaybe<Scalars['String']['input']>;
  bold?: InputMaybe<Scalars['Int']['input']>;
  extrabold?: InputMaybe<Scalars['Int']['input']>;
  hairline?: InputMaybe<Scalars['Int']['input']>;
  headings?: InputMaybe<Scalars['String']['input']>;
  light?: InputMaybe<Scalars['Int']['input']>;
  medium?: InputMaybe<Scalars['Int']['input']>;
  monospace?: InputMaybe<Scalars['String']['input']>;
  normal?: InputMaybe<Scalars['Int']['input']>;
  semibold?: InputMaybe<Scalars['Int']['input']>;
  thin?: InputMaybe<Scalars['Int']['input']>;
};

export type ThemeFontsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ThemeFontsUpdateManyInput;
  /** Document search */
  where: ThemeFontsWhereInput;
};

export type ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ThemeFontsUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeFontsWhereUniqueInput;
};

export type ThemeFontsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ThemeFontsUpdateInput;
  /** Unique document search */
  where: ThemeFontsWhereUniqueInput;
};

export type ThemeFontsUpsertInput = {
  /** Create document if it didn't exist */
  create: ThemeFontsCreateInput;
  /** Update document if it exists */
  update: ThemeFontsUpdateInput;
};

export type ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ThemeFontsUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ThemeFontsWhereUniqueInput;
};

export type ThemeFontsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ThemeFontsUpsertInput;
  /** Unique document search */
  where: ThemeFontsWhereUniqueInput;
};

/** Identifies documents */
export type ThemeFontsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeFontsWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  black?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  black_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  black_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  black_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  black_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  black_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  black_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  black_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  body?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  body_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  body_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  body_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  body_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  body_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  body_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  body_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  body_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  body_starts_with?: InputMaybe<Scalars['String']['input']>;
  bold?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  bold_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  bold_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  bold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  bold_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  bold_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  bold_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  bold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  extrabold?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  extrabold_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  extrabold_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  extrabold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  extrabold_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  extrabold_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  extrabold_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  extrabold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  hairline?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  hairline_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  hairline_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  hairline_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  hairline_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  hairline_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  hairline_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  hairline_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  headings?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  headings_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  headings_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  headings_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headings_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  headings_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  headings_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  headings_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  headings_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  headings_starts_with?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  light?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  light_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  light_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  light_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  light_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  light_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  light_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  light_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  medium?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  medium_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  medium_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  medium_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  medium_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  medium_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  medium_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  medium_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  monospace?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  monospace_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  monospace_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  monospace_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  monospace_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  monospace_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  monospace_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  monospace_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  monospace_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  monospace_starts_with?: InputMaybe<Scalars['String']['input']>;
  normal?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  normal_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  normal_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  normal_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  normal_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  normal_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  normal_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  normal_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  semibold?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  semibold_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  semibold_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  semibold_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  semibold_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  semibold_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  semibold_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  semibold_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  thin?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than the given value. */
  thin_gt?: InputMaybe<Scalars['Int']['input']>;
  /** All values greater than or equal the given value. */
  thin_gte?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are contained in given list. */
  thin_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** All values less than the given value. */
  thin_lt?: InputMaybe<Scalars['Int']['input']>;
  /** All values less than or equal the given value. */
  thin_lte?: InputMaybe<Scalars['Int']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  thin_not?: InputMaybe<Scalars['Int']['input']>;
  /** All values that are not contained in given list. */
  thin_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
};

/** References ThemeFonts record uniquely */
export type ThemeFontsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

/** Identifies documents */
export type ThemeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  colors?: InputMaybe<ThemeColorsWhereInput>;
  configurations_every?: InputMaybe<ConfigurationWhereInput>;
  configurations_none?: InputMaybe<ConfigurationWhereInput>;
  configurations_some?: InputMaybe<ConfigurationWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_none?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_some?: InputMaybe<ThemeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ThemeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ThemeUpdateInput = {
  colors?: InputMaybe<ThemeColorsUpdateOneInlineInput>;
  configurations?: InputMaybe<ConfigurationUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type ThemeUpdateManyInlineInput = {
  /** Connect multiple existing Theme documents */
  connect?: InputMaybe<Array<ThemeConnectInput>>;
  /** Create and connect multiple Theme documents */
  create?: InputMaybe<Array<ThemeCreateInput>>;
  /** Delete multiple Theme documents */
  delete?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Disconnect multiple Theme documents */
  disconnect?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Theme documents */
  set?: InputMaybe<Array<ThemeWhereUniqueInput>>;
  /** Update multiple Theme documents */
  update?: InputMaybe<Array<ThemeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Theme documents */
  upsert?: InputMaybe<Array<ThemeUpsertWithNestedWhereUniqueInput>>;
};

export type ThemeUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']['input']>;
};

export type ThemeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ThemeUpdateManyInput;
  /** Document search */
  where: ThemeWhereInput;
};

export type ThemeUpdateOneInlineInput = {
  /** Connect existing Theme document */
  connect?: InputMaybe<ThemeWhereUniqueInput>;
  /** Create and connect one Theme document */
  create?: InputMaybe<ThemeCreateInput>;
  /** Delete currently connected Theme document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected Theme document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single Theme document */
  update?: InputMaybe<ThemeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Theme document */
  upsert?: InputMaybe<ThemeUpsertWithNestedWhereUniqueInput>;
};

export type ThemeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ThemeUpdateInput;
  /** Unique document search */
  where: ThemeWhereUniqueInput;
};

export type ThemeUpsertInput = {
  /** Create document if it didn't exist */
  create: ThemeCreateInput;
  /** Update document if it exists */
  update: ThemeUpdateInput;
};

export type ThemeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ThemeUpsertInput;
  /** Unique document search */
  where: ThemeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ThemeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type ThemeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  colors?: InputMaybe<ThemeColorsWhereInput>;
  configurations_every?: InputMaybe<ConfigurationWhereInput>;
  configurations_none?: InputMaybe<ConfigurationWhereInput>;
  configurations_some?: InputMaybe<ConfigurationWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_none?: InputMaybe<ThemeWhereStageInput>;
  documentInStages_some?: InputMaybe<ThemeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ThemeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ThemeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ThemeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Theme record uniquely */
export type ThemeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Entity & Node & {
  __typename?: 'User';
  /** The time the document was created */
  createdAt: Scalars['DateTime']['output'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean']['output'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String']['output'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']['output']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']['output']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']['output'];
};


/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']['input'];
  inheritLocale?: Scalars['Boolean']['input'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  picture?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']['input']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  picture?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']['input']>;
  publishedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']['input']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']['input']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']['input']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type VendorLogo = Entity & {
  __typename?: 'VendorLogo';
  /** Logo color in dark mode (black background) */
  darkColor: Color;
  /** The unique identifier */
  id: Scalars['ID']['output'];
  /** Logo color in light mode (white background) */
  lightColor: Color;
  logo: Asset;
  name: Scalars['String']['output'];
  postText?: Maybe<Scalars['String']['output']>;
  pretext: Scalars['String']['output'];
  /** System stage field */
  stage: Stage;
};


export type VendorLogoLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']['input']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type VendorLogoConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: VendorLogoWhereUniqueInput;
};

/** A connection to a list of items. */
export type VendorLogoConnection = {
  __typename?: 'VendorLogoConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<VendorLogoEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type VendorLogoCreateInput = {
  darkColor: ColorInput;
  lightColor: ColorInput;
  logo: AssetCreateOneInlineInput;
  name: Scalars['String']['input'];
  postText?: InputMaybe<Scalars['String']['input']>;
  pretext: Scalars['String']['input'];
};

export type VendorLogoCreateManyInlineInput = {
  /** Create and connect multiple existing VendorLogo documents */
  create?: InputMaybe<Array<VendorLogoCreateInput>>;
};

export type VendorLogoCreateOneInlineInput = {
  /** Create and connect one VendorLogo document */
  create?: InputMaybe<VendorLogoCreateInput>;
};

export type VendorLogoCreateWithPositionInput = {
  /** Document to create */
  data: VendorLogoCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type VendorLogoEdge = {
  __typename?: 'VendorLogoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: VendorLogo;
};

/** Identifies documents */
export type VendorLogoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  logo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  postText?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  postText_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  postText_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  postText_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  postText_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  postText_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  postText_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  postText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  postText_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  postText_starts_with?: InputMaybe<Scalars['String']['input']>;
  pretext?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  pretext_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  pretext_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  pretext_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pretext_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  pretext_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  pretext_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  pretext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  pretext_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  pretext_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export enum VendorLogoOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PostTextAsc = 'postText_ASC',
  PostTextDesc = 'postText_DESC',
  PretextAsc = 'pretext_ASC',
  PretextDesc = 'pretext_DESC'
}

export type VendorLogoParent = PageContent;

export type VendorLogoParentConnectInput = {
  PageContent?: InputMaybe<PageContentConnectInput>;
};

export type VendorLogoParentCreateInput = {
  PageContent?: InputMaybe<PageContentCreateInput>;
};

export type VendorLogoParentCreateManyInlineInput = {
  /** Connect multiple existing VendorLogoParent documents */
  connect?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Create and connect multiple existing VendorLogoParent documents */
  create?: InputMaybe<Array<VendorLogoParentCreateInput>>;
};

export type VendorLogoParentCreateOneInlineInput = {
  /** Connect one existing VendorLogoParent document */
  connect?: InputMaybe<VendorLogoParentWhereUniqueInput>;
  /** Create and connect one VendorLogoParent document */
  create?: InputMaybe<VendorLogoParentCreateInput>;
};

export type VendorLogoParentUpdateInput = {
  PageContent?: InputMaybe<PageContentUpdateInput>;
};

export type VendorLogoParentUpdateManyInlineInput = {
  /** Connect multiple existing VendorLogoParent documents */
  connect?: InputMaybe<Array<VendorLogoParentConnectInput>>;
  /** Create and connect multiple VendorLogoParent documents */
  create?: InputMaybe<Array<VendorLogoParentCreateInput>>;
  /** Delete multiple VendorLogoParent documents */
  delete?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Disconnect multiple VendorLogoParent documents */
  disconnect?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing VendorLogoParent documents */
  set?: InputMaybe<Array<VendorLogoParentWhereUniqueInput>>;
  /** Update multiple VendorLogoParent documents */
  update?: InputMaybe<Array<VendorLogoParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple VendorLogoParent documents */
  upsert?: InputMaybe<Array<VendorLogoParentUpsertWithNestedWhereUniqueInput>>;
};

export type VendorLogoParentUpdateManyWithNestedWhereInput = {
  PageContent?: InputMaybe<PageContentUpdateManyWithNestedWhereInput>;
};

export type VendorLogoParentUpdateOneInlineInput = {
  /** Connect existing VendorLogoParent document */
  connect?: InputMaybe<VendorLogoParentWhereUniqueInput>;
  /** Create and connect one VendorLogoParent document */
  create?: InputMaybe<VendorLogoParentCreateInput>;
  /** Delete currently connected VendorLogoParent document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Disconnect currently connected VendorLogoParent document */
  disconnect?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single VendorLogoParent document */
  update?: InputMaybe<VendorLogoParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single VendorLogoParent document */
  upsert?: InputMaybe<VendorLogoParentUpsertWithNestedWhereUniqueInput>;
};

export type VendorLogoParentUpdateWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
};

export type VendorLogoParentUpsertWithNestedWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
};

export type VendorLogoParentWhereInput = {
  PageContent?: InputMaybe<PageContentWhereInput>;
};

export type VendorLogoParentWhereUniqueInput = {
  PageContent?: InputMaybe<PageContentWhereUniqueInput>;
};

export type VendorLogoUpdateInput = {
  darkColor?: InputMaybe<ColorInput>;
  lightColor?: InputMaybe<ColorInput>;
  logo?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  postText?: InputMaybe<Scalars['String']['input']>;
  pretext?: InputMaybe<Scalars['String']['input']>;
};

export type VendorLogoUpdateManyInlineInput = {
  /** Create and connect multiple VendorLogo component instances */
  create?: InputMaybe<Array<VendorLogoCreateWithPositionInput>>;
  /** Delete multiple VendorLogo documents */
  delete?: InputMaybe<Array<VendorLogoWhereUniqueInput>>;
  /** Update multiple VendorLogo component instances */
  update?: InputMaybe<Array<VendorLogoUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple VendorLogo component instances */
  upsert?: InputMaybe<Array<VendorLogoUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type VendorLogoUpdateManyInput = {
  darkColor?: InputMaybe<ColorInput>;
  lightColor?: InputMaybe<ColorInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  postText?: InputMaybe<Scalars['String']['input']>;
  pretext?: InputMaybe<Scalars['String']['input']>;
};

export type VendorLogoUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: VendorLogoUpdateManyInput;
  /** Document search */
  where: VendorLogoWhereInput;
};

export type VendorLogoUpdateOneInlineInput = {
  /** Create and connect one VendorLogo document */
  create?: InputMaybe<VendorLogoCreateInput>;
  /** Delete currently connected VendorLogo document */
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  /** Update single VendorLogo document */
  update?: InputMaybe<VendorLogoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single VendorLogo document */
  upsert?: InputMaybe<VendorLogoUpsertWithNestedWhereUniqueInput>;
};

export type VendorLogoUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<VendorLogoUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: VendorLogoWhereUniqueInput;
};

export type VendorLogoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: VendorLogoUpdateInput;
  /** Unique document search */
  where: VendorLogoWhereUniqueInput;
};

export type VendorLogoUpsertInput = {
  /** Create document if it didn't exist */
  create: VendorLogoCreateInput;
  /** Update document if it exists */
  update: VendorLogoUpdateInput;
};

export type VendorLogoUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<VendorLogoUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: VendorLogoWhereUniqueInput;
};

export type VendorLogoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: VendorLogoUpsertInput;
  /** Unique document search */
  where: VendorLogoWhereUniqueInput;
};

/** Identifies documents */
export type VendorLogoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<VendorLogoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']['input']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']['input']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']['input']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']['input']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']['input']>;
  logo?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  postText?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  postText_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  postText_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  postText_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  postText_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  postText_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  postText_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  postText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  postText_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  postText_starts_with?: InputMaybe<Scalars['String']['input']>;
  pretext?: InputMaybe<Scalars['String']['input']>;
  /** All values containing the given string. */
  pretext_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values ending with the given string. */
  pretext_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are contained in given list. */
  pretext_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Any other value that exists and is not equal to the given value. */
  pretext_not?: InputMaybe<Scalars['String']['input']>;
  /** All values not containing the given string. */
  pretext_not_contains?: InputMaybe<Scalars['String']['input']>;
  /** All values not ending with the given string */
  pretext_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  /** All values that are not contained in given list. */
  pretext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** All values not starting with the given string. */
  pretext_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  /** All values starting with the given string. */
  pretext_starts_with?: InputMaybe<Scalars['String']['input']>;
};

/** References VendorLogo record uniquely */
export type VendorLogoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']['input']>;
};

export type Version = {
  __typename?: 'Version';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['ID']['output'];
  revision: Scalars['Int']['output'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID']['input'];
  revision: Scalars['Int']['input'];
  stage: Stage;
};

export enum _FilterKind {
  And = 'AND',
  Not = 'NOT',
  Or = 'OR',
  Contains = 'contains',
  ContainsAll = 'contains_all',
  ContainsNone = 'contains_none',
  ContainsSome = 'contains_some',
  EndsWith = 'ends_with',
  Eq = 'eq',
  EqNot = 'eq_not',
  Gt = 'gt',
  Gte = 'gte',
  In = 'in',
  JsonPathExists = 'json_path_exists',
  JsonValueRecursive = 'json_value_recursive',
  Lt = 'lt',
  Lte = 'lte',
  NotContains = 'not_contains',
  NotEndsWith = 'not_ends_with',
  NotIn = 'not_in',
  NotStartsWith = 'not_starts_with',
  RelationalEvery = 'relational_every',
  RelationalNone = 'relational_none',
  RelationalSingle = 'relational_single',
  RelationalSome = 'relational_some',
  Search = 'search',
  StartsWith = 'starts_with',
  UnionEmpty = 'union_empty',
  UnionEvery = 'union_every',
  UnionNone = 'union_none',
  UnionSingle = 'union_single',
  UnionSome = 'union_some'
}

export enum _MutationInputFieldKind {
  Enum = 'enum',
  Relation = 'relation',
  RichText = 'richText',
  RichTextWithEmbeds = 'richTextWithEmbeds',
  Scalar = 'scalar',
  Union = 'union',
  Virtual = 'virtual'
}

export enum _MutationKind {
  Create = 'create',
  Delete = 'delete',
  DeleteMany = 'deleteMany',
  Publish = 'publish',
  PublishMany = 'publishMany',
  SchedulePublish = 'schedulePublish',
  ScheduleUnpublish = 'scheduleUnpublish',
  Unpublish = 'unpublish',
  UnpublishMany = 'unpublishMany',
  Update = 'update',
  UpdateMany = 'updateMany',
  Upsert = 'upsert'
}

export enum _OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export enum _RelationInputCardinality {
  Many = 'many',
  One = 'one'
}

export enum _RelationInputKind {
  Create = 'create',
  Update = 'update'
}

export enum _RelationKind {
  Regular = 'regular',
  Union = 'union'
}

export enum _SystemDateTimeFieldVariation {
  Base = 'base',
  Combined = 'combined',
  Localization = 'localization'
}

export type ActionsQueryVariables = Exact<{ [key: string]: never; }>;


export type ActionsQuery = { __typename?: 'Query', pageContents: Array<{ __typename?: 'PageContent', title: string, subtitle?: string | null, callToAction: { __typename?: 'CallToActionSettings', iconColor?: ThemeColor | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, icon?: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } | null }, body?: { __typename?: 'RichText', raw: RichTextContent } | null, page?: { __typename?: 'Page', slug: string, title: string, body?: { __typename?: 'RichText', raw: RichTextContent } | null } | null }> };

export type BlogPostStaticPathsQueryVariables = Exact<{ [key: string]: never; }>;


export type BlogPostStaticPathsQuery = { __typename?: 'Query', blogPosts: Array<{ __typename?: 'BlogPost', slug: string }> };

export type BlogPostTagsQueryVariables = Exact<{ [key: string]: never; }>;


export type BlogPostTagsQuery = { __typename?: 'Query', blogPosts: Array<{ __typename?: 'BlogPost', contentTags: Array<{ __typename?: 'ContentTag', tag: string }> }> };

export type BlogPostQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Stage>;
}>;


export type BlogPostQuery = { __typename?: 'Query', blogPost?: { __typename?: 'BlogPost', publishedAt?: string | null, description: string, slug: string, title: string, overrideDate?: string | null, contentTags: Array<{ __typename?: 'ContentTag', tag: string }>, authors: Array<{ __typename?: 'Employee', name: string, title: string, photo: { __typename?: 'Asset', mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } }>, body: { __typename?: 'BlogPostBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null } | { __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string } } | { __typename?: 'DocumentGroup', id: string, name: string, documents: Array<{ __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string } }> }> } } | null };

export type BlogPostsByTagsQueryVariables = Exact<{
  tag: Scalars['String']['input'];
  stage?: InputMaybe<Stage>;
}>;


export type BlogPostsByTagsQuery = { __typename?: 'Query', blogPosts: Array<{ __typename?: 'BlogPost', description: string, id: string, publishedAt?: string | null, slug: string, title: string, overrideDate?: string | null, contentTags: Array<{ __typename?: 'ContentTag', tag: string }>, authors: Array<{ __typename?: 'Employee', name: string, title: string, photo: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } }>, body: { __typename?: 'BlogPostBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null } | { __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string } } | { __typename?: 'DocumentGroup', id: string, name: string, documents: Array<{ __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string } }> }> } }> };

export type BlogPostsQueryVariables = Exact<{
  stage?: InputMaybe<Stage>;
}>;


export type BlogPostsQuery = { __typename?: 'Query', blogPosts: Array<{ __typename?: 'BlogPost', description: string, id: string, publishedAt?: string | null, slug: string, title: string, overrideDate?: string | null, contentTags: Array<{ __typename?: 'ContentTag', tag: string }>, authors: Array<{ __typename?: 'Employee', name: string, title: string, photo: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } }>, body: { __typename?: 'BlogPostBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null } | { __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string } } | { __typename?: 'DocumentGroup', id: string, name: string, documents: Array<{ __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string } }> }> } }> };

export type CloudLocationsQueryVariables = Exact<{ [key: string]: never; }>;


export type CloudLocationsQuery = { __typename?: 'Query', cloudLocations: Array<{ __typename?: 'CloudLocation', active: boolean, description: string, identifier: string, name: string, testUrl: string, timeout: number, coordinates: { __typename?: 'Location', latitude: number, longitude: number } }> };

export type ConfigQueryVariables = Exact<{
  title?: InputMaybe<Scalars['String']['input']>;
}>;


export type ConfigQuery = { __typename?: 'Query', values?: { __typename?: 'Configuration', description: string, organizationName: string, slogan: string, title: string, titleOverrides: Array<string>, statusUrl: string, createdAt: string, socialLinks: Array<{ __typename?: 'SocialLink', id: string, name: string, href: string }>, errorMessage: { __typename?: 'Alert', id: string, name: string, level: AlertLevel, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } }, callToAction: { __typename?: 'CallToAction', shown: number, title: string }, testimonials: Array<{ __typename?: 'Testimonial', subtitle?: string | null, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, image: { __typename?: 'Asset', fileName: string, handle: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } }>, subscribe?: { __typename?: 'Form', id: string, colorScheme: ThemeColor, button: { __typename?: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', level: AlertLevel, name: string, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } } | null }, fields: Array<{ __typename?: 'AddressSearchField' } | { __typename: 'CheckboxField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename?: 'CurrencyField' } | { __typename?: 'DateField' } | { __typename?: 'FormGroup' } | { __typename?: 'RemoteSelectField' } | { __typename: 'SelectField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'TextAreaField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number } | { __typename: 'TextInputField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number }> } | null } | null };

export type ContactFormsQueryVariables = Exact<{
  config?: InputMaybe<Scalars['String']['input']>;
}>;


export type ContactFormsQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', contactForms: Array<{ __typename?: 'ContactForm', color: ThemeColor, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, button: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null }, fields: Array<{ __typename: 'CheckboxField', displayName: string, fieldGroup: number, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean } | { __typename: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', name: string, title?: string | null, level: AlertLevel, body: { __typename?: 'RichText', raw: RichTextContent } } | null } | { __typename: 'SelectField', displayName: string, fieldGroup: number, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean } | { __typename: 'TextAreaField', displayName: string, fieldGroup: number, formId: string, label?: string | null, required: boolean } | { __typename: 'TextInputField', displayName: string, fieldGroup: number, formId: string, label?: string | null, required: boolean, validationType?: TextInputValidationType | null }>, icon: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } }> } | null };

export type DocsGroupStaticPathsQueryVariables = Exact<{ [key: string]: never; }>;


export type DocsGroupStaticPathsQuery = { __typename?: 'Query', docsGroups: Array<{ __typename?: 'DocsGroup', slug: string }> };

export type DocsGroupQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Stage>;
}>;


export type DocsGroupQuery = { __typename?: 'Query', docsGroup?: { __typename?: 'DocsGroup', slug: string, subtitle?: string | null, title: string, callToAction: { __typename?: 'CallToActionSettings', enable: boolean, iconColor?: ThemeColor | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, icon?: { __typename?: 'Asset', mimeType?: string | null, height?: number | null, size?: number | null, url: string, width?: number | null, fileName: string } | null }, docsPages: Array<{ __typename?: 'DocsPage', updatedAt: string, title: string, slug: string, showUpdatedDate: boolean, description: string, body: { __typename?: 'DocsPageBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null } | { __typename?: 'Document' } | { __typename?: 'DocumentGroup' }> } }>, summary: { __typename?: 'DocsGroupSummaryRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null }> } } | null };

export type DocsGroupsQueryVariables = Exact<{
  stage?: InputMaybe<Stage>;
}>;


export type DocsGroupsQuery = { __typename?: 'Query', docsGroups: Array<{ __typename?: 'DocsGroup', slug: string, subtitle?: string | null, title: string, callToAction: { __typename?: 'CallToActionSettings', enable: boolean, iconColor?: ThemeColor | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, icon?: { __typename?: 'Asset', mimeType?: string | null, height?: number | null, size?: number | null, url: string, width?: number | null, fileName: string } | null }, docsPages: Array<{ __typename?: 'DocsPage', updatedAt: string, title: string, slug: string, showUpdatedDate: boolean, description: string, body: { __typename?: 'DocsPageBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null } | { __typename?: 'Document' } | { __typename?: 'DocumentGroup' }> }, docsGroup?: { __typename?: 'DocsGroup', slug: string } | null }>, summary: { __typename?: 'DocsGroupSummaryRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null }> } }> };

export type DocsPageStaticPathsQueryVariables = Exact<{
  group?: InputMaybe<Scalars['String']['input']>;
}>;


export type DocsPageStaticPathsQuery = { __typename?: 'Query', docsPages: Array<{ __typename?: 'DocsPage', slug: string }> };

export type DocsPageQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Stage>;
}>;


export type DocsPageQuery = { __typename?: 'Query', docsPage?: { __typename?: 'DocsPage', description: string, slug: string, showUpdatedDate: boolean, title: string, updatedAt: string, body: { __typename?: 'DocsPageBodyRichText', raw: RichTextContent, references: Array<{ __typename?: 'Admonition', id: string, title?: string | null, type: AdmonitionType, body: { __typename?: 'RichText', raw: RichTextContent } } | { __typename?: 'Asset', id: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null, fileName: string } | { __typename?: 'ContentButton', id: string, colorScheme?: ThemeColor | null, link: string, showIcon: boolean, text: string, variant?: ButtonVariant | null } | { __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string } } | { __typename?: 'DocumentGroup', id: string, name: string, documents: Array<{ __typename?: 'Document', id: string, name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string }, contentTags: Array<{ __typename?: 'ContentTag', id: string, tag: string }> }> }> }, docsGroup?: { __typename?: 'DocsGroup', slug: string } | null } | null };

export type DocumentGroupsQueryVariables = Exact<{
  stage?: InputMaybe<Stage>;
}>;


export type DocumentGroupsQuery = { __typename?: 'Query', documentGroups: Array<{ __typename?: 'DocumentGroup', documents: Array<{ __typename?: 'Document', name: string, file: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string }, contentTags: Array<{ __typename?: 'ContentTag', id: string, tag: string }> }> }> };

export type DocumentTagsQueryVariables = Exact<{ [key: string]: never; }>;


export type DocumentTagsQuery = { __typename?: 'Query', documents: Array<{ __typename?: 'Document', contentTags: Array<{ __typename?: 'ContentTag', tag: string }> }> };

export type EmployeesQueryVariables = Exact<{
  config?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Stage>;
}>;


export type EmployeesQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', employees: Array<{ __typename?: 'Employee', name: string, location: string, title: string, bio: { __typename?: 'RichText', raw: RichTextContent }, photo: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } }> } | null };

export type FooterGroupsQueryVariables = Exact<{
  title?: InputMaybe<Scalars['String']['input']>;
}>;


export type FooterGroupsQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', footerGroups: Array<{ __typename?: 'FooterGroup', title: string, row: number, sortAlphabetically: boolean, pages: Array<{ __typename?: 'Page', slug: string, title: string, footerTitle?: string | null }>, pageContents: Array<{ __typename?: 'PageContent', slug: string, title: string, footerTitle?: string | null, page?: { __typename?: 'Page', slug: string } | null }>, docsGroup: Array<{ __typename?: 'DocsGroup', slug: string, footerTitle?: string | null, title: string }>, externalLinks: Array<{ __typename?: 'ExternalLink', href: string, showIcon: boolean, title: string }> }> } | null };

export type HeaderGroupsQueryVariables = Exact<{
  title?: InputMaybe<Scalars['String']['input']>;
}>;


export type HeaderGroupsQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', headerGroups: Array<{ __typename?: 'HeaderGroup', columns: number, link?: string | null, pagesOnly: boolean, title: string, sortAlphabetically: boolean, pages: Array<{ __typename?: 'Page', footerTitle?: string | null, slug: string, title: string, subtitle?: string | null, contents: Array<{ __typename?: 'PageContent', title: string, subtitle?: string | null, slug: string, footerTitle?: string | null, hideFromHeader: boolean, callToAction: { __typename?: 'CallToActionSettings', enable: boolean, icon?: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, url: string, width?: number | null } | null } }> }>, externalLinks: Array<{ __typename?: 'ExternalLink', showIcon: boolean, title: string, href: string }> }> } | null };

export type HomePageQueryVariables = Exact<{
  name?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Stage>;
}>;


export type HomePageQuery = { __typename?: 'Query', homePage?: { __typename?: 'HomePage', blocks: Array<{ __typename?: 'HomePageBlock', subtitle: string, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, button?: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null } | null, image: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null, handle: string } }>, mainVideo: { __typename?: 'Asset', fileName: string, handle: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } } | null };

export type OfficeLocationsQueryVariables = Exact<{ [key: string]: never; }>;


export type OfficeLocationsQuery = { __typename?: 'Query', officeLocations: Array<{ __typename?: 'OfficeLocation', closeTime: number, name: string, openTime: number, photo: { __typename?: 'Asset', fileName: string, height?: number | null, width?: number | null, url: string, mimeType?: string | null, size?: number | null }, location: { __typename?: 'Location', latitude: number, longitude: number }, address: { __typename?: 'Address', address1: string, address2?: string | null, address3?: string | null, city: string, state: string, zipCode: string } }> };

export type StaticPathsExactQueryVariables = Exact<{ [key: string]: never; }>;


export type StaticPathsExactQuery = { __typename?: 'Query', pages: Array<{ __typename?: 'Page', slug: string }> };

export type StaticPathsQueryVariables = Exact<{
  startsWith?: InputMaybe<Scalars['String']['input']>;
}>;


export type StaticPathsQuery = { __typename?: 'Query', pages: Array<{ __typename?: 'Page', slug: string }> };

export type PageQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Stage>;
}>;


export type PageQuery = { __typename?: 'Query', page?: { __typename?: 'Page', slug: string, title: string, subtitle?: string | null, footerTitle?: string | null, body?: { __typename?: 'RichText', raw: RichTextContent } | null, callout?: { __typename?: 'Callout', subtitle?: string | null, title: string, body?: { __typename?: 'RichText', raw: RichTextContent } | null, button?: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null } | null, form?: { __typename?: 'Form', name: string, colorScheme: ThemeColor, button: { __typename: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', level: AlertLevel, name: string, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } } | null }, fields: Array<{ __typename: 'AddressSearchField', displayName: string, formId: string, label?: string | null, required: boolean, locationType: LocationType, fieldGroup: number } | { __typename: 'CheckboxField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'CurrencyField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number, unitSymbol: string } | { __typename: 'DateField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number, range: boolean, allowFuture: boolean, allowPast: boolean } | { __typename: 'FormGroup', name: string, groupId: number } | { __typename: 'RemoteSelectField', displayName: string, formId: string, label?: string | null, multiple: boolean, dataPath: string, required: boolean, fieldGroup: number } | { __typename: 'SelectField', displayName: string, formId: string, label?: string | null, multiple: boolean, creatable: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'TextAreaField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number } | { __typename: 'TextInputField', displayName: string, formId: string, label?: string | null, required: boolean, validationType?: TextInputValidationType | null, fieldGroup: number }> } | null } | null, contents: Array<{ __typename?: 'PageContent', slug: string, showUpdatedDate: boolean, subtitle?: string | null, title: string, updatedAt: string, body?: { __typename?: 'RichText', raw: RichTextContent } | null, button?: { __typename?: 'Button', text: string, link?: string | null, variant?: ButtonVariant | null } | null, features: Array<{ __typename?: 'Feature', iconColor?: ThemeColor | null, title: string, body: { __typename?: 'RichText', raw: RichTextContent }, button?: { __typename?: 'Button', link?: string | null, text: string, variant?: ButtonVariant | null } | null, icon?: { __typename?: 'Asset', fileName: string, height?: number | null, mimeType?: string | null, size?: number | null, url: string, width?: number | null } | null }>, form?: { __typename?: 'Form', name: string, colorScheme: ThemeColor, button: { __typename: 'FormButton', id: string, action?: FormAction | null, text: string, variant?: ButtonVariant | null, alert?: { __typename?: 'Alert', level: AlertLevel, name: string, title?: string | null, body: { __typename?: 'RichText', raw: RichTextContent } } | null }, fields: Array<{ __typename: 'AddressSearchField', displayName: string, formId: string, locationType: LocationType, label?: string | null, required: boolean, fieldGroup: number } | { __typename: 'CheckboxField', displayName: string, formId: string, label?: string | null, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'CurrencyField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number, unitSymbol: string } | { __typename: 'DateField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number, range: boolean, allowFuture: boolean, allowPast: boolean } | { __typename: 'FormGroup', name: string, groupId: number } | { __typename: 'RemoteSelectField', displayName: string, formId: string, label?: string | null, multiple: boolean, dataPath: string, required: boolean, fieldGroup: number } | { __typename: 'SelectField', displayName: string, formId: string, label?: string | null, creatable: boolean, multiple: boolean, options: Array<string>, required: boolean, fieldGroup: number } | { __typename: 'TextAreaField', displayName: string, formId: string, label?: string | null, required: boolean, fieldGroup: number } | { __typename: 'TextInputField', displayName: string, formId: string, label?: string | null, required: boolean, validationType?: TextInputValidationType | null, fieldGroup: number }> } | null, image?: { __typename?: 'Asset', fileName: string, mimeType?: string | null, size?: number | null, url: string, width?: number | null, height?: number | null } | null, vendorLogo?: { __typename: 'VendorLogo', postText?: string | null, pretext: string, name: string, darkColor: { __typename?: 'Color', hex: string }, lightColor: { __typename?: 'Color', hex: string }, logo: { __typename?: 'Asset', size?: number | null, mimeType?: string | null, width?: number | null, url: string, height?: number | null } } | null }> } | null };

export type ThemeQueryVariables = Exact<{ [key: string]: never; }>;


export type ThemeQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', theme?: { __typename?: 'Theme', colors: { __typename?: 'ThemeColors', black: { __typename?: 'Color', hex: string }, blue: { __typename?: 'Color', hex: string }, cyan: { __typename?: 'Color', hex: string }, dark: { __typename?: 'Color', hex: string }, gray: { __typename?: 'Color', hex: string }, green: { __typename?: 'Color', hex: string }, light: { __typename?: 'Color', hex: string }, orange: { __typename?: 'Color', hex: string }, pink: { __typename?: 'Color', hex: string }, primary: { __typename?: 'Color', hex: string }, purple: { __typename?: 'Color', hex: string }, red: { __typename?: 'Color', hex: string }, secondary: { __typename?: 'Color', hex: string }, teal: { __typename?: 'Color', hex: string }, tertiary: { __typename?: 'Color', hex: string }, white: { __typename?: 'Color', hex: string }, yellow: { __typename?: 'Color', hex: string } } } | null } | null };

export type TwitterHandleQueryVariables = Exact<{
  title?: InputMaybe<Scalars['String']['input']>;
}>;


export type TwitterHandleQuery = { __typename?: 'Query', configuration?: { __typename?: 'Configuration', id: string, socialLinks: Array<{ __typename?: 'SocialLink', id: string, href: string }> } | null };


      export interface PossibleTypesResultData {
        possibleTypes: {
          [key: string]: string[]
        }
      }
      const result: PossibleTypesResultData = {
  "possibleTypes": {
    "AddressParent": [
      "OfficeLocation"
    ],
    "AddressSearchFieldParent": [
      "Form"
    ],
    "AlertParent": [
      "Configuration",
      "FormButton"
    ],
    "BlogPostBodyRichTextEmbeddedTypes": [
      "Admonition",
      "Asset",
      "ContentButton",
      "Document",
      "DocumentGroup"
    ],
    "ButtonParent": [
      "Callout",
      "ContactForm",
      "Feature",
      "HomePageBlock",
      "PageContent"
    ],
    "CallToActionParent": [
      "Configuration"
    ],
    "CallToActionSettingsParent": [
      "DocsGroup",
      "PageContent"
    ],
    "CalloutParent": [
      "Page"
    ],
    "CheckboxFieldParent": [
      "ContactForm",
      "Form"
    ],
    "ContactFormfieldsUnion": [
      "CheckboxField",
      "FormButton",
      "SelectField",
      "TextAreaField",
      "TextInputField"
    ],
    "CurrencyFieldParent": [
      "Form"
    ],
    "DateFieldParent": [
      "Form"
    ],
    "DocsGroupSummaryRichTextEmbeddedTypes": [
      "Admonition",
      "Asset",
      "ContentButton"
    ],
    "DocsPageBodyRichTextEmbeddedTypes": [
      "Admonition",
      "Asset",
      "ContentButton",
      "Document",
      "DocumentGroup"
    ],
    "Entity": [
      "Address",
      "AddressSearchField",
      "Admonition",
      "Alert",
      "Asset",
      "BlogPost",
      "Button",
      "CallToAction",
      "CallToActionSettings",
      "Callout",
      "CheckboxField",
      "CloudLocation",
      "Configuration",
      "ContactForm",
      "ContentButton",
      "ContentTag",
      "CurrencyField",
      "DateField",
      "DocsGroup",
      "DocsPage",
      "Document",
      "DocumentGroup",
      "Employee",
      "ExternalLink",
      "Feature",
      "FooterGroup",
      "Form",
      "FormButton",
      "FormGroup",
      "HeaderGroup",
      "HomePage",
      "HomePageBlock",
      "OfficeLocation",
      "Page",
      "PageContent",
      "RemoteSelectField",
      "ScheduledOperation",
      "ScheduledRelease",
      "SelectField",
      "SocialLink",
      "Testimonial",
      "TextAreaField",
      "TextInputField",
      "Theme",
      "ThemeColors",
      "ThemeFonts",
      "User",
      "VendorLogo"
    ],
    "ExternalLinkParent": [
      "FooterGroup",
      "HeaderGroup"
    ],
    "FeatureParent": [
      "PageContent"
    ],
    "FormButtonParent": [
      "ContactForm",
      "Form"
    ],
    "FormGroupParent": [
      "Form"
    ],
    "FormfieldsUnion": [
      "AddressSearchField",
      "CheckboxField",
      "CurrencyField",
      "DateField",
      "FormGroup",
      "RemoteSelectField",
      "SelectField",
      "TextAreaField",
      "TextInputField"
    ],
    "HomePageBlockParent": [
      "HomePage"
    ],
    "Node": [
      "Admonition",
      "Asset",
      "BlogPost",
      "CloudLocation",
      "Configuration",
      "ContactForm",
      "ContentButton",
      "ContentTag",
      "DocsGroup",
      "DocsPage",
      "Document",
      "DocumentGroup",
      "Employee",
      "FooterGroup",
      "Form",
      "HeaderGroup",
      "HomePage",
      "OfficeLocation",
      "Page",
      "PageContent",
      "ScheduledOperation",
      "ScheduledRelease",
      "Testimonial",
      "Theme",
      "User"
    ],
    "RemoteSelectFieldParent": [
      "Form"
    ],
    "ScheduledOperationAffectedDocument": [
      "Admonition",
      "Asset",
      "BlogPost",
      "CloudLocation",
      "Configuration",
      "ContactForm",
      "ContentButton",
      "ContentTag",
      "DocsGroup",
      "DocsPage",
      "Document",
      "DocumentGroup",
      "Employee",
      "FooterGroup",
      "Form",
      "HeaderGroup",
      "HomePage",
      "OfficeLocation",
      "Page",
      "PageContent",
      "Testimonial",
      "Theme"
    ],
    "SelectFieldParent": [
      "ContactForm",
      "Form"
    ],
    "SocialLinkParent": [
      "Configuration"
    ],
    "TextAreaFieldParent": [
      "ContactForm",
      "Form"
    ],
    "TextInputFieldParent": [
      "ContactForm",
      "Form"
    ],
    "ThemeColorsParent": [
      "Theme"
    ],
    "VendorLogoParent": [
      "PageContent"
    ]
  }
};
      export default result;
    

export const ActionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"actions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pageContents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"callToAction"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"enable"},"value":{"kind":"BooleanValue","value":true}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"page"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}}]}}]}}]} as unknown as DocumentNode<ActionsQuery, ActionsQueryVariables>;
export const BlogPostStaticPathsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"blogPostStaticPaths"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blogPosts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}}]} as unknown as DocumentNode<BlogPostStaticPathsQuery, BlogPostStaticPathsQueryVariables>;
export const BlogPostTagsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"blogPostTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blogPosts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"contentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tag"}}]}}]}}]}}]} as unknown as DocumentNode<BlogPostTagsQuery, BlogPostTagsQueryVariables>;
export const BlogPostDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"blogPost"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blogPost"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"publishedAt"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"overrideDate"}},{"kind":"Field","name":{"kind":"Name","value":"contentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"authors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"photo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Document"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DocumentGroup"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"file"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"mimeType"},"value":{"kind":"StringValue","value":"application/pdf","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<BlogPostQuery, BlogPostQueryVariables>;
export const BlogPostsByTagsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"blogPostsByTags"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"tag"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blogPosts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"updatedAt_DESC"}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"contentTags_some"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"tag"},"value":{"kind":"Variable","name":{"kind":"Name","value":"tag"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"publishedAt"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"overrideDate"}},{"kind":"Field","name":{"kind":"Name","value":"contentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"authors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"photo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Document"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DocumentGroup"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"file"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"mimeType"},"value":{"kind":"StringValue","value":"application/pdf","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<BlogPostsByTagsQuery, BlogPostsByTagsQueryVariables>;
export const BlogPostsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"blogPosts"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blogPosts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"updatedAt_DESC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"publishedAt"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"overrideDate"}},{"kind":"Field","name":{"kind":"Name","value":"contentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"authors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"photo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Document"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DocumentGroup"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"file"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"mimeType"},"value":{"kind":"StringValue","value":"application/pdf","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<BlogPostsQuery, BlogPostsQueryVariables>;
export const CloudLocationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"cloudLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cloudLocations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"active"}},{"kind":"Field","name":{"kind":"Name","value":"coordinates"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"latitude"}},{"kind":"Field","name":{"kind":"Name","value":"longitude"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"identifier"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"testUrl"}},{"kind":"Field","name":{"kind":"Name","value":"timeout"}}]}}]}}]} as unknown as DocumentNode<CloudLocationsQuery, CloudLocationsQueryVariables>;
export const ConfigDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"config"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"values"},"name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"organizationName"}},{"kind":"Field","name":{"kind":"Name","value":"slogan"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"titleOverrides"}},{"kind":"Field","name":{"kind":"Name","value":"statusUrl"}},{"kind":"Field","name":{"kind":"Name","value":"socialLinks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"href"}}]}},{"kind":"Field","name":{"kind":"Name","value":"errorMessage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shown"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"testimonials"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"handle"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"transformation"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"image"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"resize"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"height"},"value":{"kind":"IntValue","value":"113"}},{"kind":"ObjectField","name":{"kind":"Name","value":"fit"},"value":{"kind":"EnumValue","value":"clip"}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"document"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"output"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"format"},"value":{"kind":"EnumValue","value":"webp"}}]}}]}}]}}]},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"subscribe"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}}]}}]}}]}}]} as unknown as DocumentNode<ConfigQuery, ConfigQueryVariables>;
export const ContactFormsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"contactForms"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"config"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"config"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"contactForms"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"color"}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FormButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"validationType"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]} as unknown as DocumentNode<ContactFormsQuery, ContactFormsQueryVariables>;
export const DocsGroupStaticPathsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsGroupStaticPaths"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsGroups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"100"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}}]} as unknown as DocumentNode<DocsGroupStaticPathsQuery, DocsGroupStaticPathsQueryVariables>;
export const DocsGroupDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsGroup"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"enable"}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}}]}},{"kind":"Field","name":{"kind":"Name","value":"docsPages"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"summary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<DocsGroupQuery, DocsGroupQueryVariables>;
export const DocsGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsGroups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"20"}},{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"enable"}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}}]}},{"kind":"Field","name":{"kind":"Name","value":"docsPages"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"summary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<DocsGroupsQuery, DocsGroupsQueryVariables>;
export const DocsPageStaticPathsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsPageStaticPaths"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"group"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsPages"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"100"}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"docsGroup"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"group"}}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}}]} as unknown as DocumentNode<DocsPageStaticPathsQuery, DocsPageStaticPathsQueryVariables>;
export const DocsPageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"docsPage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"docsPage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}},{"kind":"Field","name":{"kind":"Name","value":"references"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Admonition"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Asset"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ContentButton"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Document"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DocumentGroup"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"file"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"mimeType"},"value":{"kind":"StringValue","value":"application/pdf","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"contentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"tag"}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}}]}}]}}]} as unknown as DocumentNode<DocsPageQuery, DocsPageQueryVariables>;
export const DocumentGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"documentGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"documentGroups"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"EnumValue","value":"updatedAt_DESC"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"documents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"file"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"mimeType"},"value":{"kind":"StringValue","value":"application/pdf","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"contentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"tag"}}]}}]}}]}}]}}]} as unknown as DocumentNode<DocumentGroupsQuery, DocumentGroupsQueryVariables>;
export const DocumentTagsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"documentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"documents"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"EnumValue","value":"PUBLISHED"}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"file"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"mimeType"},"value":{"kind":"StringValue","value":"application/pdf","block":false}}]}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"contentTags"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tag"}}]}}]}}]}}]} as unknown as DocumentNode<DocumentTagsQuery, DocumentTagsQueryVariables>;
export const EmployeesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"employees"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"config"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"config"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"employees"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"50"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bio"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"location"}},{"kind":"Field","name":{"kind":"Name","value":"photo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"transformation"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"image"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"resize"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"fit"},"value":{"kind":"EnumValue","value":"crop"}},{"kind":"ObjectField","name":{"kind":"Name","value":"height"},"value":{"kind":"IntValue","value":"256"}},{"kind":"ObjectField","name":{"kind":"Name","value":"width"},"value":{"kind":"IntValue","value":"256"}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"document"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"output"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"format"},"value":{"kind":"EnumValue","value":"webp"}}]}}]}}]}}]},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]} as unknown as DocumentNode<EmployeesQuery, EmployeesQueryVariables>;
export const FooterGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"footerGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"row"}},{"kind":"Field","name":{"kind":"Name","value":"sortAlphabetically"}},{"kind":"Field","name":{"kind":"Name","value":"pages"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageContents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"page"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"docsGroup"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"externalLinks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"href"}},{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}}]}}]}}]}}]} as unknown as DocumentNode<FooterGroupsQuery, FooterGroupsQueryVariables>;
export const HeaderGroupsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"headerGroups"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"defaultValue":{"kind":"StringValue","value":"Stellar","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"headerGroups"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"pagesOnly"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"sortAlphabetically"}},{"kind":"Field","name":{"kind":"Name","value":"pages"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"contents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"hideFromHeader"}},{"kind":"Field","name":{"kind":"Name","value":"callToAction"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"enable"}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"externalLinks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"showIcon"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"href"}}]}}]}}]}}]}}]} as unknown as DocumentNode<HeaderGroupsQuery, HeaderGroupsQueryVariables>;
export const HomePageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"homePage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"homePage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blocks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"handle"}}]}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"mainVideo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"handle"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}}]}}]}}]} as unknown as DocumentNode<HomePageQuery, HomePageQueryVariables>;
export const OfficeLocationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"officeLocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"officeLocations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"closeTime"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"openTime"}},{"kind":"Field","name":{"kind":"Name","value":"photo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"url"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"transformation"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"image"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"resize"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"width"},"value":{"kind":"IntValue","value":"128"}},{"kind":"ObjectField","name":{"kind":"Name","value":"height"},"value":{"kind":"IntValue","value":"128"}},{"kind":"ObjectField","name":{"kind":"Name","value":"fit"},"value":{"kind":"EnumValue","value":"max"}}]}}]}},{"kind":"ObjectField","name":{"kind":"Name","value":"document"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"output"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"format"},"value":{"kind":"EnumValue","value":"webp"}}]}}]}}]}}]},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}}]}},{"kind":"Field","name":{"kind":"Name","value":"location"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"latitude"}},{"kind":"Field","name":{"kind":"Name","value":"longitude"}}]}},{"kind":"Field","name":{"kind":"Name","value":"address"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"address1"}},{"kind":"Field","name":{"kind":"Name","value":"address2"}},{"kind":"Field","name":{"kind":"Name","value":"address3"}},{"kind":"Field","name":{"kind":"Name","value":"city"}},{"kind":"Field","name":{"kind":"Name","value":"state"}},{"kind":"Field","name":{"kind":"Name","value":"zipCode"}}]}}]}}]}}]} as unknown as DocumentNode<OfficeLocationsQuery, OfficeLocationsQueryVariables>;
export const StaticPathsExactDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"staticPathsExact"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pages"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"100"}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug_not_contains"},"value":{"kind":"StringValue","value":"/","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}}]} as unknown as DocumentNode<StaticPathsExactQuery, StaticPathsExactQueryVariables>;
export const StaticPathsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"staticPaths"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"startsWith"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pages"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"100"}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug_starts_with"},"value":{"kind":"Variable","name":{"kind":"Name","value":"startsWith"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"slug"}}]}}]}}]} as unknown as DocumentNode<StaticPathsQuery, StaticPathsQueryVariables>;
export const PageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"page"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"slug"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Stage"}},"defaultValue":{"kind":"EnumValue","value":"PUBLISHED"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"page"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"slug"},"value":{"kind":"Variable","name":{"kind":"Name","value":"slug"}}}]}},{"kind":"Argument","name":{"kind":"Name","value":"stage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stage"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"callout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"form"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"50"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FormGroup"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"creatable"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AddressSearchField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"locationType"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"RemoteSelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"dataPath"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"validationType"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DateField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"range"}},{"kind":"Field","name":{"kind":"Name","value":"allowFuture"}},{"kind":"Field","name":{"kind":"Name","value":"allowPast"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CurrencyField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"unitSymbol"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"footerTitle"}},{"kind":"Field","name":{"kind":"Name","value":"contents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"features"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"link"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"icon"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"height"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}}]}},{"kind":"Field","name":{"kind":"Name","value":"iconColor"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"form"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"colorScheme"}},{"kind":"Field","name":{"kind":"Name","value":"button"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"alert"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"level"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"body"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"raw"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"variant"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fields"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"50"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FormGroup"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"groupId"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckboxField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"creatable"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"RemoteSelectField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"multiple"}},{"kind":"Field","name":{"kind":"Name","value":"dataPath"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextAreaField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TextInputField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"validationType"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AddressSearchField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"locationType"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DateField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"range"}},{"kind":"Field","name":{"kind":"Name","value":"allowFuture"}},{"kind":"Field","name":{"kind":"Name","value":"allowPast"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CurrencyField"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"formId"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"required"}},{"kind":"Field","name":{"kind":"Name","value":"fieldGroup"}},{"kind":"Field","name":{"kind":"Name","value":"unitSymbol"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"height"}}]}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"showUpdatedDate"}},{"kind":"Field","name":{"kind":"Name","value":"subtitle"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"vendorLogo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"darkColor"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lightColor"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"logo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"mimeType"}},{"kind":"Field","name":{"kind":"Name","value":"width"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"height"}}]}},{"kind":"Field","name":{"kind":"Name","value":"postText"}},{"kind":"Field","name":{"kind":"Name","value":"pretext"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<PageQuery, PageQueryVariables>;
export const ThemeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"theme"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"StringValue","value":"Stellar","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"theme"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"colors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"black"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"blue"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cyan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"dark"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"gray"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"green"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"light"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"orange"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pink"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"primary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"purple"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"red"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"secondary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"teal"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"tertiary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"white"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}},{"kind":"Field","name":{"kind":"Name","value":"yellow"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hex"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<ThemeQuery, ThemeQueryVariables>;
export const TwitterHandleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"twitterHandle"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configuration"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"socialLinks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"href_contains"},"value":{"kind":"StringValue","value":"twitter","block":false}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"href"}}]}}]}}]}}]} as unknown as DocumentNode<TwitterHandleQuery, TwitterHandleQueryVariables>;


export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping of union types */
export type ResolversUnionTypes<RefType extends Record<string, unknown>> = {
  AddressParent: ( OfficeLocation );
  AddressSearchFieldParent: ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  AlertParent: ( Configuration ) | ( FormButton );
  BlogPostBodyRichTextEmbeddedTypes: ( Admonition ) | ( Asset ) | ( ContentButton ) | ( Document ) | ( DocumentGroup );
  ButtonParent: ( Callout ) | ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( Feature ) | ( HomePageBlock ) | ( PageContent );
  CallToActionParent: ( Configuration );
  CallToActionSettingsParent: ( DocsGroup ) | ( PageContent );
  CalloutParent: ( Page );
  CheckboxFieldParent: ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  ContactFormfieldsUnion: ( CheckboxField ) | ( FormButton ) | ( SelectField ) | ( TextAreaField ) | ( TextInputField );
  CurrencyFieldParent: ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  DateFieldParent: ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  DocsGroupSummaryRichTextEmbeddedTypes: ( Admonition ) | ( Asset ) | ( ContentButton );
  DocsPageBodyRichTextEmbeddedTypes: ( Admonition ) | ( Asset ) | ( ContentButton ) | ( Document ) | ( DocumentGroup );
  ExternalLinkParent: ( FooterGroup ) | ( HeaderGroup );
  FeatureParent: ( PageContent );
  FormButtonParent: ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  FormGroupParent: ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  FormfieldsUnion: ( AddressSearchField ) | ( CheckboxField ) | ( CurrencyField ) | ( DateField ) | ( FormGroup ) | ( RemoteSelectField ) | ( SelectField ) | ( TextAreaField ) | ( TextInputField );
  HomePageBlockParent: ( HomePage );
  RemoteSelectFieldParent: ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  ScheduledOperationAffectedDocument: ( Admonition ) | ( Asset ) | ( BlogPost ) | ( CloudLocation ) | ( Configuration ) | ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( ContentButton ) | ( ContentTag ) | ( DocsGroup ) | ( DocsPage ) | ( Document ) | ( DocumentGroup ) | ( Employee ) | ( FooterGroup ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } ) | ( HeaderGroup ) | ( HomePage ) | ( OfficeLocation ) | ( Page ) | ( PageContent ) | ( Testimonial ) | ( Theme );
  SelectFieldParent: ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  SocialLinkParent: ( Configuration );
  TextAreaFieldParent: ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  TextInputFieldParent: ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } );
  ThemeColorsParent: ( Theme );
  VendorLogoParent: ( PageContent );
};

/** Mapping of interface types */
export type ResolversInterfaceTypes<RefType extends Record<string, unknown>> = {
  Entity: ( Address ) | ( AddressSearchField ) | ( Admonition ) | ( Alert ) | ( Asset ) | ( BlogPost ) | ( Button ) | ( CallToAction ) | ( CallToActionSettings ) | ( Callout ) | ( CheckboxField ) | ( CloudLocation ) | ( Configuration ) | ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( ContentButton ) | ( ContentTag ) | ( CurrencyField ) | ( DateField ) | ( DocsGroup ) | ( DocsPage ) | ( Document ) | ( DocumentGroup ) | ( Employee ) | ( ExternalLink ) | ( Feature ) | ( FooterGroup ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } ) | ( FormButton ) | ( FormGroup ) | ( HeaderGroup ) | ( HomePage ) | ( HomePageBlock ) | ( OfficeLocation ) | ( Page ) | ( PageContent ) | ( RemoteSelectField ) | ( Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<RefType['ScheduledOperationAffectedDocument']> } ) | ( ScheduledRelease ) | ( SelectField ) | ( SocialLink ) | ( Testimonial ) | ( TextAreaField ) | ( TextInputField ) | ( Theme ) | ( ThemeColors ) | ( ThemeFonts ) | ( User ) | ( VendorLogo );
  Node: ( Admonition ) | ( Asset ) | ( BlogPost ) | ( CloudLocation ) | ( Configuration ) | ( Omit<ContactForm, 'fields'> & { fields: Array<RefType['ContactFormfieldsUnion']> } ) | ( ContentButton ) | ( ContentTag ) | ( DocsGroup ) | ( DocsPage ) | ( Document ) | ( DocumentGroup ) | ( Employee ) | ( FooterGroup ) | ( Omit<Form, 'fields'> & { fields: Array<RefType['FormfieldsUnion']> } ) | ( HeaderGroup ) | ( HomePage ) | ( OfficeLocation ) | ( Page ) | ( PageContent ) | ( Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<RefType['ScheduledOperationAffectedDocument']> } ) | ( ScheduledRelease ) | ( Testimonial ) | ( Theme ) | ( User );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Address: ResolverTypeWrapper<Address>;
  AddressConnectInput: AddressConnectInput;
  AddressConnection: ResolverTypeWrapper<AddressConnection>;
  AddressCreateInput: AddressCreateInput;
  AddressCreateManyInlineInput: AddressCreateManyInlineInput;
  AddressCreateOneInlineInput: AddressCreateOneInlineInput;
  AddressCreateWithPositionInput: AddressCreateWithPositionInput;
  AddressEdge: ResolverTypeWrapper<AddressEdge>;
  AddressManyWhereInput: AddressManyWhereInput;
  AddressOrderByInput: AddressOrderByInput;
  AddressParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['AddressParent']>;
  AddressParentConnectInput: AddressParentConnectInput;
  AddressParentCreateInput: AddressParentCreateInput;
  AddressParentCreateManyInlineInput: AddressParentCreateManyInlineInput;
  AddressParentCreateOneInlineInput: AddressParentCreateOneInlineInput;
  AddressParentUpdateInput: AddressParentUpdateInput;
  AddressParentUpdateManyInlineInput: AddressParentUpdateManyInlineInput;
  AddressParentUpdateManyWithNestedWhereInput: AddressParentUpdateManyWithNestedWhereInput;
  AddressParentUpdateOneInlineInput: AddressParentUpdateOneInlineInput;
  AddressParentUpdateWithNestedWhereUniqueInput: AddressParentUpdateWithNestedWhereUniqueInput;
  AddressParentUpsertWithNestedWhereUniqueInput: AddressParentUpsertWithNestedWhereUniqueInput;
  AddressParentWhereInput: AddressParentWhereInput;
  AddressParentWhereUniqueInput: AddressParentWhereUniqueInput;
  AddressSearchField: ResolverTypeWrapper<AddressSearchField>;
  AddressSearchFieldConnectInput: AddressSearchFieldConnectInput;
  AddressSearchFieldConnection: ResolverTypeWrapper<AddressSearchFieldConnection>;
  AddressSearchFieldCreateInput: AddressSearchFieldCreateInput;
  AddressSearchFieldCreateManyInlineInput: AddressSearchFieldCreateManyInlineInput;
  AddressSearchFieldCreateOneInlineInput: AddressSearchFieldCreateOneInlineInput;
  AddressSearchFieldCreateWithPositionInput: AddressSearchFieldCreateWithPositionInput;
  AddressSearchFieldEdge: ResolverTypeWrapper<AddressSearchFieldEdge>;
  AddressSearchFieldManyWhereInput: AddressSearchFieldManyWhereInput;
  AddressSearchFieldOrderByInput: AddressSearchFieldOrderByInput;
  AddressSearchFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['AddressSearchFieldParent']>;
  AddressSearchFieldParentConnectInput: AddressSearchFieldParentConnectInput;
  AddressSearchFieldParentCreateInput: AddressSearchFieldParentCreateInput;
  AddressSearchFieldParentCreateManyInlineInput: AddressSearchFieldParentCreateManyInlineInput;
  AddressSearchFieldParentCreateOneInlineInput: AddressSearchFieldParentCreateOneInlineInput;
  AddressSearchFieldParentUpdateInput: AddressSearchFieldParentUpdateInput;
  AddressSearchFieldParentUpdateManyInlineInput: AddressSearchFieldParentUpdateManyInlineInput;
  AddressSearchFieldParentUpdateManyWithNestedWhereInput: AddressSearchFieldParentUpdateManyWithNestedWhereInput;
  AddressSearchFieldParentUpdateOneInlineInput: AddressSearchFieldParentUpdateOneInlineInput;
  AddressSearchFieldParentUpdateWithNestedWhereUniqueInput: AddressSearchFieldParentUpdateWithNestedWhereUniqueInput;
  AddressSearchFieldParentUpsertWithNestedWhereUniqueInput: AddressSearchFieldParentUpsertWithNestedWhereUniqueInput;
  AddressSearchFieldParentWhereInput: AddressSearchFieldParentWhereInput;
  AddressSearchFieldParentWhereUniqueInput: AddressSearchFieldParentWhereUniqueInput;
  AddressSearchFieldUpdateInput: AddressSearchFieldUpdateInput;
  AddressSearchFieldUpdateManyInlineInput: AddressSearchFieldUpdateManyInlineInput;
  AddressSearchFieldUpdateManyInput: AddressSearchFieldUpdateManyInput;
  AddressSearchFieldUpdateManyWithNestedWhereInput: AddressSearchFieldUpdateManyWithNestedWhereInput;
  AddressSearchFieldUpdateOneInlineInput: AddressSearchFieldUpdateOneInlineInput;
  AddressSearchFieldUpdateWithNestedWhereUniqueAndPositionInput: AddressSearchFieldUpdateWithNestedWhereUniqueAndPositionInput;
  AddressSearchFieldUpdateWithNestedWhereUniqueInput: AddressSearchFieldUpdateWithNestedWhereUniqueInput;
  AddressSearchFieldUpsertInput: AddressSearchFieldUpsertInput;
  AddressSearchFieldUpsertWithNestedWhereUniqueAndPositionInput: AddressSearchFieldUpsertWithNestedWhereUniqueAndPositionInput;
  AddressSearchFieldUpsertWithNestedWhereUniqueInput: AddressSearchFieldUpsertWithNestedWhereUniqueInput;
  AddressSearchFieldWhereInput: AddressSearchFieldWhereInput;
  AddressSearchFieldWhereUniqueInput: AddressSearchFieldWhereUniqueInput;
  AddressUpdateInput: AddressUpdateInput;
  AddressUpdateManyInlineInput: AddressUpdateManyInlineInput;
  AddressUpdateManyInput: AddressUpdateManyInput;
  AddressUpdateManyWithNestedWhereInput: AddressUpdateManyWithNestedWhereInput;
  AddressUpdateOneInlineInput: AddressUpdateOneInlineInput;
  AddressUpdateWithNestedWhereUniqueAndPositionInput: AddressUpdateWithNestedWhereUniqueAndPositionInput;
  AddressUpdateWithNestedWhereUniqueInput: AddressUpdateWithNestedWhereUniqueInput;
  AddressUpsertInput: AddressUpsertInput;
  AddressUpsertWithNestedWhereUniqueAndPositionInput: AddressUpsertWithNestedWhereUniqueAndPositionInput;
  AddressUpsertWithNestedWhereUniqueInput: AddressUpsertWithNestedWhereUniqueInput;
  AddressWhereInput: AddressWhereInput;
  AddressWhereUniqueInput: AddressWhereUniqueInput;
  Admonition: ResolverTypeWrapper<Admonition>;
  AdmonitionConnectInput: AdmonitionConnectInput;
  AdmonitionConnection: ResolverTypeWrapper<AdmonitionConnection>;
  AdmonitionCreateInput: AdmonitionCreateInput;
  AdmonitionCreateManyInlineInput: AdmonitionCreateManyInlineInput;
  AdmonitionCreateOneInlineInput: AdmonitionCreateOneInlineInput;
  AdmonitionEdge: ResolverTypeWrapper<AdmonitionEdge>;
  AdmonitionManyWhereInput: AdmonitionManyWhereInput;
  AdmonitionOrderByInput: AdmonitionOrderByInput;
  AdmonitionType: AdmonitionType;
  AdmonitionUpdateInput: AdmonitionUpdateInput;
  AdmonitionUpdateManyInlineInput: AdmonitionUpdateManyInlineInput;
  AdmonitionUpdateManyInput: AdmonitionUpdateManyInput;
  AdmonitionUpdateManyWithNestedWhereInput: AdmonitionUpdateManyWithNestedWhereInput;
  AdmonitionUpdateOneInlineInput: AdmonitionUpdateOneInlineInput;
  AdmonitionUpdateWithNestedWhereUniqueInput: AdmonitionUpdateWithNestedWhereUniqueInput;
  AdmonitionUpsertInput: AdmonitionUpsertInput;
  AdmonitionUpsertWithNestedWhereUniqueInput: AdmonitionUpsertWithNestedWhereUniqueInput;
  AdmonitionWhereComparatorInput: AdmonitionWhereComparatorInput;
  AdmonitionWhereInput: AdmonitionWhereInput;
  AdmonitionWhereStageInput: AdmonitionWhereStageInput;
  AdmonitionWhereUniqueInput: AdmonitionWhereUniqueInput;
  Aggregate: ResolverTypeWrapper<Aggregate>;
  Alert: ResolverTypeWrapper<Alert>;
  AlertConnectInput: AlertConnectInput;
  AlertConnection: ResolverTypeWrapper<AlertConnection>;
  AlertCreateInput: AlertCreateInput;
  AlertCreateManyInlineInput: AlertCreateManyInlineInput;
  AlertCreateOneInlineInput: AlertCreateOneInlineInput;
  AlertCreateWithPositionInput: AlertCreateWithPositionInput;
  AlertEdge: ResolverTypeWrapper<AlertEdge>;
  AlertLevel: AlertLevel;
  AlertManyWhereInput: AlertManyWhereInput;
  AlertOrderByInput: AlertOrderByInput;
  AlertParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['AlertParent']>;
  AlertParentConnectInput: AlertParentConnectInput;
  AlertParentCreateInput: AlertParentCreateInput;
  AlertParentCreateManyInlineInput: AlertParentCreateManyInlineInput;
  AlertParentCreateOneInlineInput: AlertParentCreateOneInlineInput;
  AlertParentUpdateInput: AlertParentUpdateInput;
  AlertParentUpdateManyInlineInput: AlertParentUpdateManyInlineInput;
  AlertParentUpdateManyWithNestedWhereInput: AlertParentUpdateManyWithNestedWhereInput;
  AlertParentUpdateOneInlineInput: AlertParentUpdateOneInlineInput;
  AlertParentUpdateWithNestedWhereUniqueInput: AlertParentUpdateWithNestedWhereUniqueInput;
  AlertParentUpsertWithNestedWhereUniqueInput: AlertParentUpsertWithNestedWhereUniqueInput;
  AlertParentWhereInput: AlertParentWhereInput;
  AlertParentWhereUniqueInput: AlertParentWhereUniqueInput;
  AlertUpdateInput: AlertUpdateInput;
  AlertUpdateManyInlineInput: AlertUpdateManyInlineInput;
  AlertUpdateManyInput: AlertUpdateManyInput;
  AlertUpdateManyWithNestedWhereInput: AlertUpdateManyWithNestedWhereInput;
  AlertUpdateOneInlineInput: AlertUpdateOneInlineInput;
  AlertUpdateWithNestedWhereUniqueAndPositionInput: AlertUpdateWithNestedWhereUniqueAndPositionInput;
  AlertUpdateWithNestedWhereUniqueInput: AlertUpdateWithNestedWhereUniqueInput;
  AlertUpsertInput: AlertUpsertInput;
  AlertUpsertWithNestedWhereUniqueAndPositionInput: AlertUpsertWithNestedWhereUniqueAndPositionInput;
  AlertUpsertWithNestedWhereUniqueInput: AlertUpsertWithNestedWhereUniqueInput;
  AlertWhereInput: AlertWhereInput;
  AlertWhereUniqueInput: AlertWhereUniqueInput;
  Asset: ResolverTypeWrapper<Asset>;
  AssetConnectInput: AssetConnectInput;
  AssetConnection: ResolverTypeWrapper<AssetConnection>;
  AssetCreateInput: AssetCreateInput;
  AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
  AssetCreateLocalizationInput: AssetCreateLocalizationInput;
  AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
  AssetCreateManyInlineInput: AssetCreateManyInlineInput;
  AssetCreateOneInlineInput: AssetCreateOneInlineInput;
  AssetEdge: ResolverTypeWrapper<AssetEdge>;
  AssetManyWhereInput: AssetManyWhereInput;
  AssetOrderByInput: AssetOrderByInput;
  AssetTransformationInput: AssetTransformationInput;
  AssetUpdateInput: AssetUpdateInput;
  AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
  AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
  AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
  AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
  AssetUpdateManyInput: AssetUpdateManyInput;
  AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
  AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
  AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
  AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
  AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
  AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
  AssetUpsertInput: AssetUpsertInput;
  AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
  AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
  AssetWhereComparatorInput: AssetWhereComparatorInput;
  AssetWhereInput: AssetWhereInput;
  AssetWhereStageInput: AssetWhereStageInput;
  AssetWhereUniqueInput: AssetWhereUniqueInput;
  BatchPayload: ResolverTypeWrapper<BatchPayload>;
  BlogPost: ResolverTypeWrapper<BlogPost>;
  BlogPostBodyRichText: ResolverTypeWrapper<Omit<BlogPostBodyRichText, 'references'> & { references: Array<ResolversTypes['BlogPostBodyRichTextEmbeddedTypes']> }>;
  BlogPostBodyRichTextEmbeddedTypes: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['BlogPostBodyRichTextEmbeddedTypes']>;
  BlogPostConnectInput: BlogPostConnectInput;
  BlogPostConnection: ResolverTypeWrapper<BlogPostConnection>;
  BlogPostCreateInput: BlogPostCreateInput;
  BlogPostCreateManyInlineInput: BlogPostCreateManyInlineInput;
  BlogPostCreateOneInlineInput: BlogPostCreateOneInlineInput;
  BlogPostEdge: ResolverTypeWrapper<BlogPostEdge>;
  BlogPostManyWhereInput: BlogPostManyWhereInput;
  BlogPostOrderByInput: BlogPostOrderByInput;
  BlogPostUpdateInput: BlogPostUpdateInput;
  BlogPostUpdateManyInlineInput: BlogPostUpdateManyInlineInput;
  BlogPostUpdateManyInput: BlogPostUpdateManyInput;
  BlogPostUpdateManyWithNestedWhereInput: BlogPostUpdateManyWithNestedWhereInput;
  BlogPostUpdateOneInlineInput: BlogPostUpdateOneInlineInput;
  BlogPostUpdateWithNestedWhereUniqueInput: BlogPostUpdateWithNestedWhereUniqueInput;
  BlogPostUpsertInput: BlogPostUpsertInput;
  BlogPostUpsertWithNestedWhereUniqueInput: BlogPostUpsertWithNestedWhereUniqueInput;
  BlogPostWhereComparatorInput: BlogPostWhereComparatorInput;
  BlogPostWhereInput: BlogPostWhereInput;
  BlogPostWhereStageInput: BlogPostWhereStageInput;
  BlogPostWhereUniqueInput: BlogPostWhereUniqueInput;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  Button: ResolverTypeWrapper<Button>;
  ButtonConnectInput: ButtonConnectInput;
  ButtonConnection: ResolverTypeWrapper<ButtonConnection>;
  ButtonCreateInput: ButtonCreateInput;
  ButtonCreateManyInlineInput: ButtonCreateManyInlineInput;
  ButtonCreateOneInlineInput: ButtonCreateOneInlineInput;
  ButtonCreateWithPositionInput: ButtonCreateWithPositionInput;
  ButtonEdge: ResolverTypeWrapper<ButtonEdge>;
  ButtonManyWhereInput: ButtonManyWhereInput;
  ButtonOrderByInput: ButtonOrderByInput;
  ButtonParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['ButtonParent']>;
  ButtonParentConnectInput: ButtonParentConnectInput;
  ButtonParentCreateInput: ButtonParentCreateInput;
  ButtonParentCreateManyInlineInput: ButtonParentCreateManyInlineInput;
  ButtonParentCreateOneInlineInput: ButtonParentCreateOneInlineInput;
  ButtonParentUpdateInput: ButtonParentUpdateInput;
  ButtonParentUpdateManyInlineInput: ButtonParentUpdateManyInlineInput;
  ButtonParentUpdateManyWithNestedWhereInput: ButtonParentUpdateManyWithNestedWhereInput;
  ButtonParentUpdateOneInlineInput: ButtonParentUpdateOneInlineInput;
  ButtonParentUpdateWithNestedWhereUniqueInput: ButtonParentUpdateWithNestedWhereUniqueInput;
  ButtonParentUpsertWithNestedWhereUniqueInput: ButtonParentUpsertWithNestedWhereUniqueInput;
  ButtonParentWhereInput: ButtonParentWhereInput;
  ButtonParentWhereUniqueInput: ButtonParentWhereUniqueInput;
  ButtonUpdateInput: ButtonUpdateInput;
  ButtonUpdateManyInlineInput: ButtonUpdateManyInlineInput;
  ButtonUpdateManyInput: ButtonUpdateManyInput;
  ButtonUpdateManyWithNestedWhereInput: ButtonUpdateManyWithNestedWhereInput;
  ButtonUpdateOneInlineInput: ButtonUpdateOneInlineInput;
  ButtonUpdateWithNestedWhereUniqueAndPositionInput: ButtonUpdateWithNestedWhereUniqueAndPositionInput;
  ButtonUpdateWithNestedWhereUniqueInput: ButtonUpdateWithNestedWhereUniqueInput;
  ButtonUpsertInput: ButtonUpsertInput;
  ButtonUpsertWithNestedWhereUniqueAndPositionInput: ButtonUpsertWithNestedWhereUniqueAndPositionInput;
  ButtonUpsertWithNestedWhereUniqueInput: ButtonUpsertWithNestedWhereUniqueInput;
  ButtonVariant: ButtonVariant;
  ButtonWhereInput: ButtonWhereInput;
  ButtonWhereUniqueInput: ButtonWhereUniqueInput;
  CallToAction: ResolverTypeWrapper<CallToAction>;
  CallToActionConnectInput: CallToActionConnectInput;
  CallToActionConnection: ResolverTypeWrapper<CallToActionConnection>;
  CallToActionCreateInput: CallToActionCreateInput;
  CallToActionCreateManyInlineInput: CallToActionCreateManyInlineInput;
  CallToActionCreateOneInlineInput: CallToActionCreateOneInlineInput;
  CallToActionCreateWithPositionInput: CallToActionCreateWithPositionInput;
  CallToActionEdge: ResolverTypeWrapper<CallToActionEdge>;
  CallToActionManyWhereInput: CallToActionManyWhereInput;
  CallToActionOrderByInput: CallToActionOrderByInput;
  CallToActionParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['CallToActionParent']>;
  CallToActionParentConnectInput: CallToActionParentConnectInput;
  CallToActionParentCreateInput: CallToActionParentCreateInput;
  CallToActionParentCreateManyInlineInput: CallToActionParentCreateManyInlineInput;
  CallToActionParentCreateOneInlineInput: CallToActionParentCreateOneInlineInput;
  CallToActionParentUpdateInput: CallToActionParentUpdateInput;
  CallToActionParentUpdateManyInlineInput: CallToActionParentUpdateManyInlineInput;
  CallToActionParentUpdateManyWithNestedWhereInput: CallToActionParentUpdateManyWithNestedWhereInput;
  CallToActionParentUpdateOneInlineInput: CallToActionParentUpdateOneInlineInput;
  CallToActionParentUpdateWithNestedWhereUniqueInput: CallToActionParentUpdateWithNestedWhereUniqueInput;
  CallToActionParentUpsertWithNestedWhereUniqueInput: CallToActionParentUpsertWithNestedWhereUniqueInput;
  CallToActionParentWhereInput: CallToActionParentWhereInput;
  CallToActionParentWhereUniqueInput: CallToActionParentWhereUniqueInput;
  CallToActionSettings: ResolverTypeWrapper<CallToActionSettings>;
  CallToActionSettingsConnectInput: CallToActionSettingsConnectInput;
  CallToActionSettingsConnection: ResolverTypeWrapper<CallToActionSettingsConnection>;
  CallToActionSettingsCreateInput: CallToActionSettingsCreateInput;
  CallToActionSettingsCreateManyInlineInput: CallToActionSettingsCreateManyInlineInput;
  CallToActionSettingsCreateOneInlineInput: CallToActionSettingsCreateOneInlineInput;
  CallToActionSettingsCreateWithPositionInput: CallToActionSettingsCreateWithPositionInput;
  CallToActionSettingsEdge: ResolverTypeWrapper<CallToActionSettingsEdge>;
  CallToActionSettingsManyWhereInput: CallToActionSettingsManyWhereInput;
  CallToActionSettingsOrderByInput: CallToActionSettingsOrderByInput;
  CallToActionSettingsParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['CallToActionSettingsParent']>;
  CallToActionSettingsParentConnectInput: CallToActionSettingsParentConnectInput;
  CallToActionSettingsParentCreateInput: CallToActionSettingsParentCreateInput;
  CallToActionSettingsParentCreateManyInlineInput: CallToActionSettingsParentCreateManyInlineInput;
  CallToActionSettingsParentCreateOneInlineInput: CallToActionSettingsParentCreateOneInlineInput;
  CallToActionSettingsParentUpdateInput: CallToActionSettingsParentUpdateInput;
  CallToActionSettingsParentUpdateManyInlineInput: CallToActionSettingsParentUpdateManyInlineInput;
  CallToActionSettingsParentUpdateManyWithNestedWhereInput: CallToActionSettingsParentUpdateManyWithNestedWhereInput;
  CallToActionSettingsParentUpdateOneInlineInput: CallToActionSettingsParentUpdateOneInlineInput;
  CallToActionSettingsParentUpdateWithNestedWhereUniqueInput: CallToActionSettingsParentUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsParentUpsertWithNestedWhereUniqueInput: CallToActionSettingsParentUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsParentWhereInput: CallToActionSettingsParentWhereInput;
  CallToActionSettingsParentWhereUniqueInput: CallToActionSettingsParentWhereUniqueInput;
  CallToActionSettingsUpdateInput: CallToActionSettingsUpdateInput;
  CallToActionSettingsUpdateManyInlineInput: CallToActionSettingsUpdateManyInlineInput;
  CallToActionSettingsUpdateManyInput: CallToActionSettingsUpdateManyInput;
  CallToActionSettingsUpdateManyWithNestedWhereInput: CallToActionSettingsUpdateManyWithNestedWhereInput;
  CallToActionSettingsUpdateOneInlineInput: CallToActionSettingsUpdateOneInlineInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueInput: CallToActionSettingsUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsUpsertInput: CallToActionSettingsUpsertInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueInput: CallToActionSettingsUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsWhereInput: CallToActionSettingsWhereInput;
  CallToActionSettingsWhereUniqueInput: CallToActionSettingsWhereUniqueInput;
  CallToActionUpdateInput: CallToActionUpdateInput;
  CallToActionUpdateManyInlineInput: CallToActionUpdateManyInlineInput;
  CallToActionUpdateManyInput: CallToActionUpdateManyInput;
  CallToActionUpdateManyWithNestedWhereInput: CallToActionUpdateManyWithNestedWhereInput;
  CallToActionUpdateOneInlineInput: CallToActionUpdateOneInlineInput;
  CallToActionUpdateWithNestedWhereUniqueAndPositionInput: CallToActionUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionUpdateWithNestedWhereUniqueInput: CallToActionUpdateWithNestedWhereUniqueInput;
  CallToActionUpsertInput: CallToActionUpsertInput;
  CallToActionUpsertWithNestedWhereUniqueAndPositionInput: CallToActionUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionUpsertWithNestedWhereUniqueInput: CallToActionUpsertWithNestedWhereUniqueInput;
  CallToActionWhereInput: CallToActionWhereInput;
  CallToActionWhereUniqueInput: CallToActionWhereUniqueInput;
  Callout: ResolverTypeWrapper<Callout>;
  CalloutConnectInput: CalloutConnectInput;
  CalloutConnection: ResolverTypeWrapper<CalloutConnection>;
  CalloutCreateInput: CalloutCreateInput;
  CalloutCreateManyInlineInput: CalloutCreateManyInlineInput;
  CalloutCreateOneInlineInput: CalloutCreateOneInlineInput;
  CalloutCreateWithPositionInput: CalloutCreateWithPositionInput;
  CalloutEdge: ResolverTypeWrapper<CalloutEdge>;
  CalloutManyWhereInput: CalloutManyWhereInput;
  CalloutOrderByInput: CalloutOrderByInput;
  CalloutParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['CalloutParent']>;
  CalloutParentConnectInput: CalloutParentConnectInput;
  CalloutParentCreateInput: CalloutParentCreateInput;
  CalloutParentCreateManyInlineInput: CalloutParentCreateManyInlineInput;
  CalloutParentCreateOneInlineInput: CalloutParentCreateOneInlineInput;
  CalloutParentUpdateInput: CalloutParentUpdateInput;
  CalloutParentUpdateManyInlineInput: CalloutParentUpdateManyInlineInput;
  CalloutParentUpdateManyWithNestedWhereInput: CalloutParentUpdateManyWithNestedWhereInput;
  CalloutParentUpdateOneInlineInput: CalloutParentUpdateOneInlineInput;
  CalloutParentUpdateWithNestedWhereUniqueInput: CalloutParentUpdateWithNestedWhereUniqueInput;
  CalloutParentUpsertWithNestedWhereUniqueInput: CalloutParentUpsertWithNestedWhereUniqueInput;
  CalloutParentWhereInput: CalloutParentWhereInput;
  CalloutParentWhereUniqueInput: CalloutParentWhereUniqueInput;
  CalloutUpdateInput: CalloutUpdateInput;
  CalloutUpdateManyInlineInput: CalloutUpdateManyInlineInput;
  CalloutUpdateManyInput: CalloutUpdateManyInput;
  CalloutUpdateManyWithNestedWhereInput: CalloutUpdateManyWithNestedWhereInput;
  CalloutUpdateOneInlineInput: CalloutUpdateOneInlineInput;
  CalloutUpdateWithNestedWhereUniqueAndPositionInput: CalloutUpdateWithNestedWhereUniqueAndPositionInput;
  CalloutUpdateWithNestedWhereUniqueInput: CalloutUpdateWithNestedWhereUniqueInput;
  CalloutUpsertInput: CalloutUpsertInput;
  CalloutUpsertWithNestedWhereUniqueAndPositionInput: CalloutUpsertWithNestedWhereUniqueAndPositionInput;
  CalloutUpsertWithNestedWhereUniqueInput: CalloutUpsertWithNestedWhereUniqueInput;
  CalloutWhereInput: CalloutWhereInput;
  CalloutWhereUniqueInput: CalloutWhereUniqueInput;
  CheckboxField: ResolverTypeWrapper<CheckboxField>;
  CheckboxFieldConnectInput: CheckboxFieldConnectInput;
  CheckboxFieldConnection: ResolverTypeWrapper<CheckboxFieldConnection>;
  CheckboxFieldCreateInput: CheckboxFieldCreateInput;
  CheckboxFieldCreateManyInlineInput: CheckboxFieldCreateManyInlineInput;
  CheckboxFieldCreateOneInlineInput: CheckboxFieldCreateOneInlineInput;
  CheckboxFieldCreateWithPositionInput: CheckboxFieldCreateWithPositionInput;
  CheckboxFieldEdge: ResolverTypeWrapper<CheckboxFieldEdge>;
  CheckboxFieldManyWhereInput: CheckboxFieldManyWhereInput;
  CheckboxFieldOrderByInput: CheckboxFieldOrderByInput;
  CheckboxFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['CheckboxFieldParent']>;
  CheckboxFieldParentConnectInput: CheckboxFieldParentConnectInput;
  CheckboxFieldParentCreateInput: CheckboxFieldParentCreateInput;
  CheckboxFieldParentCreateManyInlineInput: CheckboxFieldParentCreateManyInlineInput;
  CheckboxFieldParentCreateOneInlineInput: CheckboxFieldParentCreateOneInlineInput;
  CheckboxFieldParentUpdateInput: CheckboxFieldParentUpdateInput;
  CheckboxFieldParentUpdateManyInlineInput: CheckboxFieldParentUpdateManyInlineInput;
  CheckboxFieldParentUpdateManyWithNestedWhereInput: CheckboxFieldParentUpdateManyWithNestedWhereInput;
  CheckboxFieldParentUpdateOneInlineInput: CheckboxFieldParentUpdateOneInlineInput;
  CheckboxFieldParentUpdateWithNestedWhereUniqueInput: CheckboxFieldParentUpdateWithNestedWhereUniqueInput;
  CheckboxFieldParentUpsertWithNestedWhereUniqueInput: CheckboxFieldParentUpsertWithNestedWhereUniqueInput;
  CheckboxFieldParentWhereInput: CheckboxFieldParentWhereInput;
  CheckboxFieldParentWhereUniqueInput: CheckboxFieldParentWhereUniqueInput;
  CheckboxFieldUpdateInput: CheckboxFieldUpdateInput;
  CheckboxFieldUpdateManyInlineInput: CheckboxFieldUpdateManyInlineInput;
  CheckboxFieldUpdateManyInput: CheckboxFieldUpdateManyInput;
  CheckboxFieldUpdateManyWithNestedWhereInput: CheckboxFieldUpdateManyWithNestedWhereInput;
  CheckboxFieldUpdateOneInlineInput: CheckboxFieldUpdateOneInlineInput;
  CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpdateWithNestedWhereUniqueInput: CheckboxFieldUpdateWithNestedWhereUniqueInput;
  CheckboxFieldUpsertInput: CheckboxFieldUpsertInput;
  CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpsertWithNestedWhereUniqueInput: CheckboxFieldUpsertWithNestedWhereUniqueInput;
  CheckboxFieldWhereInput: CheckboxFieldWhereInput;
  CheckboxFieldWhereUniqueInput: CheckboxFieldWhereUniqueInput;
  CloudLocation: ResolverTypeWrapper<CloudLocation>;
  CloudLocationConnectInput: CloudLocationConnectInput;
  CloudLocationConnection: ResolverTypeWrapper<CloudLocationConnection>;
  CloudLocationCreateInput: CloudLocationCreateInput;
  CloudLocationCreateManyInlineInput: CloudLocationCreateManyInlineInput;
  CloudLocationCreateOneInlineInput: CloudLocationCreateOneInlineInput;
  CloudLocationEdge: ResolverTypeWrapper<CloudLocationEdge>;
  CloudLocationManyWhereInput: CloudLocationManyWhereInput;
  CloudLocationOrderByInput: CloudLocationOrderByInput;
  CloudLocationUpdateInput: CloudLocationUpdateInput;
  CloudLocationUpdateManyInlineInput: CloudLocationUpdateManyInlineInput;
  CloudLocationUpdateManyInput: CloudLocationUpdateManyInput;
  CloudLocationUpdateManyWithNestedWhereInput: CloudLocationUpdateManyWithNestedWhereInput;
  CloudLocationUpdateOneInlineInput: CloudLocationUpdateOneInlineInput;
  CloudLocationUpdateWithNestedWhereUniqueInput: CloudLocationUpdateWithNestedWhereUniqueInput;
  CloudLocationUpsertInput: CloudLocationUpsertInput;
  CloudLocationUpsertWithNestedWhereUniqueInput: CloudLocationUpsertWithNestedWhereUniqueInput;
  CloudLocationWhereComparatorInput: CloudLocationWhereComparatorInput;
  CloudLocationWhereInput: CloudLocationWhereInput;
  CloudLocationWhereStageInput: CloudLocationWhereStageInput;
  CloudLocationWhereUniqueInput: CloudLocationWhereUniqueInput;
  Color: ResolverTypeWrapper<Color>;
  ColorInput: ColorInput;
  Configuration: ResolverTypeWrapper<Configuration>;
  ConfigurationConnectInput: ConfigurationConnectInput;
  ConfigurationConnection: ResolverTypeWrapper<ConfigurationConnection>;
  ConfigurationCreateInput: ConfigurationCreateInput;
  ConfigurationCreateManyInlineInput: ConfigurationCreateManyInlineInput;
  ConfigurationCreateOneInlineInput: ConfigurationCreateOneInlineInput;
  ConfigurationEdge: ResolverTypeWrapper<ConfigurationEdge>;
  ConfigurationManyWhereInput: ConfigurationManyWhereInput;
  ConfigurationOrderByInput: ConfigurationOrderByInput;
  ConfigurationUpdateInput: ConfigurationUpdateInput;
  ConfigurationUpdateManyInlineInput: ConfigurationUpdateManyInlineInput;
  ConfigurationUpdateManyInput: ConfigurationUpdateManyInput;
  ConfigurationUpdateManyWithNestedWhereInput: ConfigurationUpdateManyWithNestedWhereInput;
  ConfigurationUpdateOneInlineInput: ConfigurationUpdateOneInlineInput;
  ConfigurationUpdateWithNestedWhereUniqueInput: ConfigurationUpdateWithNestedWhereUniqueInput;
  ConfigurationUpsertInput: ConfigurationUpsertInput;
  ConfigurationUpsertWithNestedWhereUniqueInput: ConfigurationUpsertWithNestedWhereUniqueInput;
  ConfigurationWhereComparatorInput: ConfigurationWhereComparatorInput;
  ConfigurationWhereInput: ConfigurationWhereInput;
  ConfigurationWhereStageInput: ConfigurationWhereStageInput;
  ConfigurationWhereUniqueInput: ConfigurationWhereUniqueInput;
  ConnectPositionInput: ConnectPositionInput;
  ContactForm: ResolverTypeWrapper<Omit<ContactForm, 'fields'> & { fields: Array<ResolversTypes['ContactFormfieldsUnion']> }>;
  ContactFormConnectInput: ContactFormConnectInput;
  ContactFormConnection: ResolverTypeWrapper<ContactFormConnection>;
  ContactFormCreateInput: ContactFormCreateInput;
  ContactFormCreateManyInlineInput: ContactFormCreateManyInlineInput;
  ContactFormCreateOneInlineInput: ContactFormCreateOneInlineInput;
  ContactFormEdge: ResolverTypeWrapper<ContactFormEdge>;
  ContactFormManyWhereInput: ContactFormManyWhereInput;
  ContactFormOrderByInput: ContactFormOrderByInput;
  ContactFormUpdateInput: ContactFormUpdateInput;
  ContactFormUpdateManyInlineInput: ContactFormUpdateManyInlineInput;
  ContactFormUpdateManyInput: ContactFormUpdateManyInput;
  ContactFormUpdateManyWithNestedWhereInput: ContactFormUpdateManyWithNestedWhereInput;
  ContactFormUpdateOneInlineInput: ContactFormUpdateOneInlineInput;
  ContactFormUpdateWithNestedWhereUniqueInput: ContactFormUpdateWithNestedWhereUniqueInput;
  ContactFormUpsertInput: ContactFormUpsertInput;
  ContactFormUpsertWithNestedWhereUniqueInput: ContactFormUpsertWithNestedWhereUniqueInput;
  ContactFormWhereComparatorInput: ContactFormWhereComparatorInput;
  ContactFormWhereInput: ContactFormWhereInput;
  ContactFormWhereStageInput: ContactFormWhereStageInput;
  ContactFormWhereUniqueInput: ContactFormWhereUniqueInput;
  ContactFormfieldsUnion: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['ContactFormfieldsUnion']>;
  ContactFormfieldsUnionConnectInput: ContactFormfieldsUnionConnectInput;
  ContactFormfieldsUnionCreateInput: ContactFormfieldsUnionCreateInput;
  ContactFormfieldsUnionCreateManyInlineInput: ContactFormfieldsUnionCreateManyInlineInput;
  ContactFormfieldsUnionCreateOneInlineInput: ContactFormfieldsUnionCreateOneInlineInput;
  ContactFormfieldsUnionCreateWithPositionInput: ContactFormfieldsUnionCreateWithPositionInput;
  ContactFormfieldsUnionUpdateInput: ContactFormfieldsUnionUpdateInput;
  ContactFormfieldsUnionUpdateManyInlineInput: ContactFormfieldsUnionUpdateManyInlineInput;
  ContactFormfieldsUnionUpdateManyWithNestedWhereInput: ContactFormfieldsUnionUpdateManyWithNestedWhereInput;
  ContactFormfieldsUnionUpdateOneInlineInput: ContactFormfieldsUnionUpdateOneInlineInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput;
  ContactFormfieldsUnionWhereInput: ContactFormfieldsUnionWhereInput;
  ContactFormfieldsUnionWhereUniqueInput: ContactFormfieldsUnionWhereUniqueInput;
  ContentButton: ResolverTypeWrapper<ContentButton>;
  ContentButtonConnectInput: ContentButtonConnectInput;
  ContentButtonConnection: ResolverTypeWrapper<ContentButtonConnection>;
  ContentButtonCreateInput: ContentButtonCreateInput;
  ContentButtonCreateManyInlineInput: ContentButtonCreateManyInlineInput;
  ContentButtonCreateOneInlineInput: ContentButtonCreateOneInlineInput;
  ContentButtonEdge: ResolverTypeWrapper<ContentButtonEdge>;
  ContentButtonManyWhereInput: ContentButtonManyWhereInput;
  ContentButtonOrderByInput: ContentButtonOrderByInput;
  ContentButtonUpdateInput: ContentButtonUpdateInput;
  ContentButtonUpdateManyInlineInput: ContentButtonUpdateManyInlineInput;
  ContentButtonUpdateManyInput: ContentButtonUpdateManyInput;
  ContentButtonUpdateManyWithNestedWhereInput: ContentButtonUpdateManyWithNestedWhereInput;
  ContentButtonUpdateOneInlineInput: ContentButtonUpdateOneInlineInput;
  ContentButtonUpdateWithNestedWhereUniqueInput: ContentButtonUpdateWithNestedWhereUniqueInput;
  ContentButtonUpsertInput: ContentButtonUpsertInput;
  ContentButtonUpsertWithNestedWhereUniqueInput: ContentButtonUpsertWithNestedWhereUniqueInput;
  ContentButtonWhereComparatorInput: ContentButtonWhereComparatorInput;
  ContentButtonWhereInput: ContentButtonWhereInput;
  ContentButtonWhereStageInput: ContentButtonWhereStageInput;
  ContentButtonWhereUniqueInput: ContentButtonWhereUniqueInput;
  ContentTag: ResolverTypeWrapper<ContentTag>;
  ContentTagConnectInput: ContentTagConnectInput;
  ContentTagConnection: ResolverTypeWrapper<ContentTagConnection>;
  ContentTagCreateInput: ContentTagCreateInput;
  ContentTagCreateManyInlineInput: ContentTagCreateManyInlineInput;
  ContentTagCreateOneInlineInput: ContentTagCreateOneInlineInput;
  ContentTagEdge: ResolverTypeWrapper<ContentTagEdge>;
  ContentTagManyWhereInput: ContentTagManyWhereInput;
  ContentTagOrderByInput: ContentTagOrderByInput;
  ContentTagUpdateInput: ContentTagUpdateInput;
  ContentTagUpdateManyInlineInput: ContentTagUpdateManyInlineInput;
  ContentTagUpdateManyInput: ContentTagUpdateManyInput;
  ContentTagUpdateManyWithNestedWhereInput: ContentTagUpdateManyWithNestedWhereInput;
  ContentTagUpdateOneInlineInput: ContentTagUpdateOneInlineInput;
  ContentTagUpdateWithNestedWhereUniqueInput: ContentTagUpdateWithNestedWhereUniqueInput;
  ContentTagUpsertInput: ContentTagUpsertInput;
  ContentTagUpsertWithNestedWhereUniqueInput: ContentTagUpsertWithNestedWhereUniqueInput;
  ContentTagWhereComparatorInput: ContentTagWhereComparatorInput;
  ContentTagWhereInput: ContentTagWhereInput;
  ContentTagWhereStageInput: ContentTagWhereStageInput;
  ContentTagWhereUniqueInput: ContentTagWhereUniqueInput;
  CurrencyField: ResolverTypeWrapper<CurrencyField>;
  CurrencyFieldConnectInput: CurrencyFieldConnectInput;
  CurrencyFieldConnection: ResolverTypeWrapper<CurrencyFieldConnection>;
  CurrencyFieldCreateInput: CurrencyFieldCreateInput;
  CurrencyFieldCreateManyInlineInput: CurrencyFieldCreateManyInlineInput;
  CurrencyFieldCreateOneInlineInput: CurrencyFieldCreateOneInlineInput;
  CurrencyFieldCreateWithPositionInput: CurrencyFieldCreateWithPositionInput;
  CurrencyFieldEdge: ResolverTypeWrapper<CurrencyFieldEdge>;
  CurrencyFieldManyWhereInput: CurrencyFieldManyWhereInput;
  CurrencyFieldOrderByInput: CurrencyFieldOrderByInput;
  CurrencyFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['CurrencyFieldParent']>;
  CurrencyFieldParentConnectInput: CurrencyFieldParentConnectInput;
  CurrencyFieldParentCreateInput: CurrencyFieldParentCreateInput;
  CurrencyFieldParentCreateManyInlineInput: CurrencyFieldParentCreateManyInlineInput;
  CurrencyFieldParentCreateOneInlineInput: CurrencyFieldParentCreateOneInlineInput;
  CurrencyFieldParentUpdateInput: CurrencyFieldParentUpdateInput;
  CurrencyFieldParentUpdateManyInlineInput: CurrencyFieldParentUpdateManyInlineInput;
  CurrencyFieldParentUpdateManyWithNestedWhereInput: CurrencyFieldParentUpdateManyWithNestedWhereInput;
  CurrencyFieldParentUpdateOneInlineInput: CurrencyFieldParentUpdateOneInlineInput;
  CurrencyFieldParentUpdateWithNestedWhereUniqueInput: CurrencyFieldParentUpdateWithNestedWhereUniqueInput;
  CurrencyFieldParentUpsertWithNestedWhereUniqueInput: CurrencyFieldParentUpsertWithNestedWhereUniqueInput;
  CurrencyFieldParentWhereInput: CurrencyFieldParentWhereInput;
  CurrencyFieldParentWhereUniqueInput: CurrencyFieldParentWhereUniqueInput;
  CurrencyFieldUpdateInput: CurrencyFieldUpdateInput;
  CurrencyFieldUpdateManyInlineInput: CurrencyFieldUpdateManyInlineInput;
  CurrencyFieldUpdateManyInput: CurrencyFieldUpdateManyInput;
  CurrencyFieldUpdateManyWithNestedWhereInput: CurrencyFieldUpdateManyWithNestedWhereInput;
  CurrencyFieldUpdateOneInlineInput: CurrencyFieldUpdateOneInlineInput;
  CurrencyFieldUpdateWithNestedWhereUniqueAndPositionInput: CurrencyFieldUpdateWithNestedWhereUniqueAndPositionInput;
  CurrencyFieldUpdateWithNestedWhereUniqueInput: CurrencyFieldUpdateWithNestedWhereUniqueInput;
  CurrencyFieldUpsertInput: CurrencyFieldUpsertInput;
  CurrencyFieldUpsertWithNestedWhereUniqueAndPositionInput: CurrencyFieldUpsertWithNestedWhereUniqueAndPositionInput;
  CurrencyFieldUpsertWithNestedWhereUniqueInput: CurrencyFieldUpsertWithNestedWhereUniqueInput;
  CurrencyFieldWhereInput: CurrencyFieldWhereInput;
  CurrencyFieldWhereUniqueInput: CurrencyFieldWhereUniqueInput;
  Date: ResolverTypeWrapper<Scalars['Date']['output']>;
  DateField: ResolverTypeWrapper<DateField>;
  DateFieldConnectInput: DateFieldConnectInput;
  DateFieldConnection: ResolverTypeWrapper<DateFieldConnection>;
  DateFieldCreateInput: DateFieldCreateInput;
  DateFieldCreateManyInlineInput: DateFieldCreateManyInlineInput;
  DateFieldCreateOneInlineInput: DateFieldCreateOneInlineInput;
  DateFieldCreateWithPositionInput: DateFieldCreateWithPositionInput;
  DateFieldEdge: ResolverTypeWrapper<DateFieldEdge>;
  DateFieldManyWhereInput: DateFieldManyWhereInput;
  DateFieldOrderByInput: DateFieldOrderByInput;
  DateFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['DateFieldParent']>;
  DateFieldParentConnectInput: DateFieldParentConnectInput;
  DateFieldParentCreateInput: DateFieldParentCreateInput;
  DateFieldParentCreateManyInlineInput: DateFieldParentCreateManyInlineInput;
  DateFieldParentCreateOneInlineInput: DateFieldParentCreateOneInlineInput;
  DateFieldParentUpdateInput: DateFieldParentUpdateInput;
  DateFieldParentUpdateManyInlineInput: DateFieldParentUpdateManyInlineInput;
  DateFieldParentUpdateManyWithNestedWhereInput: DateFieldParentUpdateManyWithNestedWhereInput;
  DateFieldParentUpdateOneInlineInput: DateFieldParentUpdateOneInlineInput;
  DateFieldParentUpdateWithNestedWhereUniqueInput: DateFieldParentUpdateWithNestedWhereUniqueInput;
  DateFieldParentUpsertWithNestedWhereUniqueInput: DateFieldParentUpsertWithNestedWhereUniqueInput;
  DateFieldParentWhereInput: DateFieldParentWhereInput;
  DateFieldParentWhereUniqueInput: DateFieldParentWhereUniqueInput;
  DateFieldUpdateInput: DateFieldUpdateInput;
  DateFieldUpdateManyInlineInput: DateFieldUpdateManyInlineInput;
  DateFieldUpdateManyInput: DateFieldUpdateManyInput;
  DateFieldUpdateManyWithNestedWhereInput: DateFieldUpdateManyWithNestedWhereInput;
  DateFieldUpdateOneInlineInput: DateFieldUpdateOneInlineInput;
  DateFieldUpdateWithNestedWhereUniqueAndPositionInput: DateFieldUpdateWithNestedWhereUniqueAndPositionInput;
  DateFieldUpdateWithNestedWhereUniqueInput: DateFieldUpdateWithNestedWhereUniqueInput;
  DateFieldUpsertInput: DateFieldUpsertInput;
  DateFieldUpsertWithNestedWhereUniqueAndPositionInput: DateFieldUpsertWithNestedWhereUniqueAndPositionInput;
  DateFieldUpsertWithNestedWhereUniqueInput: DateFieldUpsertWithNestedWhereUniqueInput;
  DateFieldWhereInput: DateFieldWhereInput;
  DateFieldWhereUniqueInput: DateFieldWhereUniqueInput;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']['output']>;
  DocsGroup: ResolverTypeWrapper<DocsGroup>;
  DocsGroupConnectInput: DocsGroupConnectInput;
  DocsGroupConnection: ResolverTypeWrapper<DocsGroupConnection>;
  DocsGroupCreateInput: DocsGroupCreateInput;
  DocsGroupCreateManyInlineInput: DocsGroupCreateManyInlineInput;
  DocsGroupCreateOneInlineInput: DocsGroupCreateOneInlineInput;
  DocsGroupEdge: ResolverTypeWrapper<DocsGroupEdge>;
  DocsGroupManyWhereInput: DocsGroupManyWhereInput;
  DocsGroupOrderByInput: DocsGroupOrderByInput;
  DocsGroupSummaryRichText: ResolverTypeWrapper<Omit<DocsGroupSummaryRichText, 'references'> & { references: Array<ResolversTypes['DocsGroupSummaryRichTextEmbeddedTypes']> }>;
  DocsGroupSummaryRichTextEmbeddedTypes: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['DocsGroupSummaryRichTextEmbeddedTypes']>;
  DocsGroupUpdateInput: DocsGroupUpdateInput;
  DocsGroupUpdateManyInlineInput: DocsGroupUpdateManyInlineInput;
  DocsGroupUpdateManyInput: DocsGroupUpdateManyInput;
  DocsGroupUpdateManyWithNestedWhereInput: DocsGroupUpdateManyWithNestedWhereInput;
  DocsGroupUpdateOneInlineInput: DocsGroupUpdateOneInlineInput;
  DocsGroupUpdateWithNestedWhereUniqueInput: DocsGroupUpdateWithNestedWhereUniqueInput;
  DocsGroupUpsertInput: DocsGroupUpsertInput;
  DocsGroupUpsertWithNestedWhereUniqueInput: DocsGroupUpsertWithNestedWhereUniqueInput;
  DocsGroupWhereComparatorInput: DocsGroupWhereComparatorInput;
  DocsGroupWhereInput: DocsGroupWhereInput;
  DocsGroupWhereStageInput: DocsGroupWhereStageInput;
  DocsGroupWhereUniqueInput: DocsGroupWhereUniqueInput;
  DocsPage: ResolverTypeWrapper<DocsPage>;
  DocsPageBodyRichText: ResolverTypeWrapper<Omit<DocsPageBodyRichText, 'references'> & { references: Array<ResolversTypes['DocsPageBodyRichTextEmbeddedTypes']> }>;
  DocsPageBodyRichTextEmbeddedTypes: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['DocsPageBodyRichTextEmbeddedTypes']>;
  DocsPageConnectInput: DocsPageConnectInput;
  DocsPageConnection: ResolverTypeWrapper<DocsPageConnection>;
  DocsPageCreateInput: DocsPageCreateInput;
  DocsPageCreateManyInlineInput: DocsPageCreateManyInlineInput;
  DocsPageCreateOneInlineInput: DocsPageCreateOneInlineInput;
  DocsPageEdge: ResolverTypeWrapper<DocsPageEdge>;
  DocsPageManyWhereInput: DocsPageManyWhereInput;
  DocsPageOrderByInput: DocsPageOrderByInput;
  DocsPageUpdateInput: DocsPageUpdateInput;
  DocsPageUpdateManyInlineInput: DocsPageUpdateManyInlineInput;
  DocsPageUpdateManyInput: DocsPageUpdateManyInput;
  DocsPageUpdateManyWithNestedWhereInput: DocsPageUpdateManyWithNestedWhereInput;
  DocsPageUpdateOneInlineInput: DocsPageUpdateOneInlineInput;
  DocsPageUpdateWithNestedWhereUniqueInput: DocsPageUpdateWithNestedWhereUniqueInput;
  DocsPageUpsertInput: DocsPageUpsertInput;
  DocsPageUpsertWithNestedWhereUniqueInput: DocsPageUpsertWithNestedWhereUniqueInput;
  DocsPageWhereComparatorInput: DocsPageWhereComparatorInput;
  DocsPageWhereInput: DocsPageWhereInput;
  DocsPageWhereStageInput: DocsPageWhereStageInput;
  DocsPageWhereUniqueInput: DocsPageWhereUniqueInput;
  Document: ResolverTypeWrapper<Document>;
  DocumentConnectInput: DocumentConnectInput;
  DocumentConnection: ResolverTypeWrapper<DocumentConnection>;
  DocumentCreateInput: DocumentCreateInput;
  DocumentCreateManyInlineInput: DocumentCreateManyInlineInput;
  DocumentCreateOneInlineInput: DocumentCreateOneInlineInput;
  DocumentEdge: ResolverTypeWrapper<DocumentEdge>;
  DocumentFileTypes: DocumentFileTypes;
  DocumentGroup: ResolverTypeWrapper<DocumentGroup>;
  DocumentGroupConnectInput: DocumentGroupConnectInput;
  DocumentGroupConnection: ResolverTypeWrapper<DocumentGroupConnection>;
  DocumentGroupCreateInput: DocumentGroupCreateInput;
  DocumentGroupCreateManyInlineInput: DocumentGroupCreateManyInlineInput;
  DocumentGroupCreateOneInlineInput: DocumentGroupCreateOneInlineInput;
  DocumentGroupEdge: ResolverTypeWrapper<DocumentGroupEdge>;
  DocumentGroupManyWhereInput: DocumentGroupManyWhereInput;
  DocumentGroupOrderByInput: DocumentGroupOrderByInput;
  DocumentGroupUpdateInput: DocumentGroupUpdateInput;
  DocumentGroupUpdateManyInlineInput: DocumentGroupUpdateManyInlineInput;
  DocumentGroupUpdateManyInput: DocumentGroupUpdateManyInput;
  DocumentGroupUpdateManyWithNestedWhereInput: DocumentGroupUpdateManyWithNestedWhereInput;
  DocumentGroupUpdateOneInlineInput: DocumentGroupUpdateOneInlineInput;
  DocumentGroupUpdateWithNestedWhereUniqueInput: DocumentGroupUpdateWithNestedWhereUniqueInput;
  DocumentGroupUpsertInput: DocumentGroupUpsertInput;
  DocumentGroupUpsertWithNestedWhereUniqueInput: DocumentGroupUpsertWithNestedWhereUniqueInput;
  DocumentGroupWhereComparatorInput: DocumentGroupWhereComparatorInput;
  DocumentGroupWhereInput: DocumentGroupWhereInput;
  DocumentGroupWhereStageInput: DocumentGroupWhereStageInput;
  DocumentGroupWhereUniqueInput: DocumentGroupWhereUniqueInput;
  DocumentManyWhereInput: DocumentManyWhereInput;
  DocumentOrderByInput: DocumentOrderByInput;
  DocumentOutputInput: DocumentOutputInput;
  DocumentTransformationInput: DocumentTransformationInput;
  DocumentUpdateInput: DocumentUpdateInput;
  DocumentUpdateManyInlineInput: DocumentUpdateManyInlineInput;
  DocumentUpdateManyInput: DocumentUpdateManyInput;
  DocumentUpdateManyWithNestedWhereInput: DocumentUpdateManyWithNestedWhereInput;
  DocumentUpdateOneInlineInput: DocumentUpdateOneInlineInput;
  DocumentUpdateWithNestedWhereUniqueInput: DocumentUpdateWithNestedWhereUniqueInput;
  DocumentUpsertInput: DocumentUpsertInput;
  DocumentUpsertWithNestedWhereUniqueInput: DocumentUpsertWithNestedWhereUniqueInput;
  DocumentVersion: ResolverTypeWrapper<DocumentVersion>;
  DocumentWhereComparatorInput: DocumentWhereComparatorInput;
  DocumentWhereInput: DocumentWhereInput;
  DocumentWhereStageInput: DocumentWhereStageInput;
  DocumentWhereUniqueInput: DocumentWhereUniqueInput;
  Employee: ResolverTypeWrapper<Employee>;
  EmployeeConnectInput: EmployeeConnectInput;
  EmployeeConnection: ResolverTypeWrapper<EmployeeConnection>;
  EmployeeCreateInput: EmployeeCreateInput;
  EmployeeCreateManyInlineInput: EmployeeCreateManyInlineInput;
  EmployeeCreateOneInlineInput: EmployeeCreateOneInlineInput;
  EmployeeEdge: ResolverTypeWrapper<EmployeeEdge>;
  EmployeeManyWhereInput: EmployeeManyWhereInput;
  EmployeeOrderByInput: EmployeeOrderByInput;
  EmployeeUpdateInput: EmployeeUpdateInput;
  EmployeeUpdateManyInlineInput: EmployeeUpdateManyInlineInput;
  EmployeeUpdateManyInput: EmployeeUpdateManyInput;
  EmployeeUpdateManyWithNestedWhereInput: EmployeeUpdateManyWithNestedWhereInput;
  EmployeeUpdateOneInlineInput: EmployeeUpdateOneInlineInput;
  EmployeeUpdateWithNestedWhereUniqueInput: EmployeeUpdateWithNestedWhereUniqueInput;
  EmployeeUpsertInput: EmployeeUpsertInput;
  EmployeeUpsertWithNestedWhereUniqueInput: EmployeeUpsertWithNestedWhereUniqueInput;
  EmployeeWhereComparatorInput: EmployeeWhereComparatorInput;
  EmployeeWhereInput: EmployeeWhereInput;
  EmployeeWhereStageInput: EmployeeWhereStageInput;
  EmployeeWhereUniqueInput: EmployeeWhereUniqueInput;
  Entity: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Entity']>;
  EntityTypeName: EntityTypeName;
  EntityWhereInput: EntityWhereInput;
  ExternalLink: ResolverTypeWrapper<ExternalLink>;
  ExternalLinkConnectInput: ExternalLinkConnectInput;
  ExternalLinkConnection: ResolverTypeWrapper<ExternalLinkConnection>;
  ExternalLinkCreateInput: ExternalLinkCreateInput;
  ExternalLinkCreateManyInlineInput: ExternalLinkCreateManyInlineInput;
  ExternalLinkCreateOneInlineInput: ExternalLinkCreateOneInlineInput;
  ExternalLinkCreateWithPositionInput: ExternalLinkCreateWithPositionInput;
  ExternalLinkEdge: ResolverTypeWrapper<ExternalLinkEdge>;
  ExternalLinkManyWhereInput: ExternalLinkManyWhereInput;
  ExternalLinkOrderByInput: ExternalLinkOrderByInput;
  ExternalLinkParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['ExternalLinkParent']>;
  ExternalLinkParentConnectInput: ExternalLinkParentConnectInput;
  ExternalLinkParentCreateInput: ExternalLinkParentCreateInput;
  ExternalLinkParentCreateManyInlineInput: ExternalLinkParentCreateManyInlineInput;
  ExternalLinkParentCreateOneInlineInput: ExternalLinkParentCreateOneInlineInput;
  ExternalLinkParentUpdateInput: ExternalLinkParentUpdateInput;
  ExternalLinkParentUpdateManyInlineInput: ExternalLinkParentUpdateManyInlineInput;
  ExternalLinkParentUpdateManyWithNestedWhereInput: ExternalLinkParentUpdateManyWithNestedWhereInput;
  ExternalLinkParentUpdateOneInlineInput: ExternalLinkParentUpdateOneInlineInput;
  ExternalLinkParentUpdateWithNestedWhereUniqueInput: ExternalLinkParentUpdateWithNestedWhereUniqueInput;
  ExternalLinkParentUpsertWithNestedWhereUniqueInput: ExternalLinkParentUpsertWithNestedWhereUniqueInput;
  ExternalLinkParentWhereInput: ExternalLinkParentWhereInput;
  ExternalLinkParentWhereUniqueInput: ExternalLinkParentWhereUniqueInput;
  ExternalLinkUpdateInput: ExternalLinkUpdateInput;
  ExternalLinkUpdateManyInlineInput: ExternalLinkUpdateManyInlineInput;
  ExternalLinkUpdateManyInput: ExternalLinkUpdateManyInput;
  ExternalLinkUpdateManyWithNestedWhereInput: ExternalLinkUpdateManyWithNestedWhereInput;
  ExternalLinkUpdateOneInlineInput: ExternalLinkUpdateOneInlineInput;
  ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput: ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpdateWithNestedWhereUniqueInput: ExternalLinkUpdateWithNestedWhereUniqueInput;
  ExternalLinkUpsertInput: ExternalLinkUpsertInput;
  ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput: ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpsertWithNestedWhereUniqueInput: ExternalLinkUpsertWithNestedWhereUniqueInput;
  ExternalLinkWhereInput: ExternalLinkWhereInput;
  ExternalLinkWhereUniqueInput: ExternalLinkWhereUniqueInput;
  Feature: ResolverTypeWrapper<Feature>;
  FeatureConnectInput: FeatureConnectInput;
  FeatureConnection: ResolverTypeWrapper<FeatureConnection>;
  FeatureCreateInput: FeatureCreateInput;
  FeatureCreateManyInlineInput: FeatureCreateManyInlineInput;
  FeatureCreateOneInlineInput: FeatureCreateOneInlineInput;
  FeatureCreateWithPositionInput: FeatureCreateWithPositionInput;
  FeatureEdge: ResolverTypeWrapper<FeatureEdge>;
  FeatureManyWhereInput: FeatureManyWhereInput;
  FeatureOrderByInput: FeatureOrderByInput;
  FeatureParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['FeatureParent']>;
  FeatureParentConnectInput: FeatureParentConnectInput;
  FeatureParentCreateInput: FeatureParentCreateInput;
  FeatureParentCreateManyInlineInput: FeatureParentCreateManyInlineInput;
  FeatureParentCreateOneInlineInput: FeatureParentCreateOneInlineInput;
  FeatureParentUpdateInput: FeatureParentUpdateInput;
  FeatureParentUpdateManyInlineInput: FeatureParentUpdateManyInlineInput;
  FeatureParentUpdateManyWithNestedWhereInput: FeatureParentUpdateManyWithNestedWhereInput;
  FeatureParentUpdateOneInlineInput: FeatureParentUpdateOneInlineInput;
  FeatureParentUpdateWithNestedWhereUniqueInput: FeatureParentUpdateWithNestedWhereUniqueInput;
  FeatureParentUpsertWithNestedWhereUniqueInput: FeatureParentUpsertWithNestedWhereUniqueInput;
  FeatureParentWhereInput: FeatureParentWhereInput;
  FeatureParentWhereUniqueInput: FeatureParentWhereUniqueInput;
  FeatureUpdateInput: FeatureUpdateInput;
  FeatureUpdateManyInlineInput: FeatureUpdateManyInlineInput;
  FeatureUpdateManyInput: FeatureUpdateManyInput;
  FeatureUpdateManyWithNestedWhereInput: FeatureUpdateManyWithNestedWhereInput;
  FeatureUpdateOneInlineInput: FeatureUpdateOneInlineInput;
  FeatureUpdateWithNestedWhereUniqueAndPositionInput: FeatureUpdateWithNestedWhereUniqueAndPositionInput;
  FeatureUpdateWithNestedWhereUniqueInput: FeatureUpdateWithNestedWhereUniqueInput;
  FeatureUpsertInput: FeatureUpsertInput;
  FeatureUpsertWithNestedWhereUniqueAndPositionInput: FeatureUpsertWithNestedWhereUniqueAndPositionInput;
  FeatureUpsertWithNestedWhereUniqueInput: FeatureUpsertWithNestedWhereUniqueInput;
  FeatureWhereInput: FeatureWhereInput;
  FeatureWhereUniqueInput: FeatureWhereUniqueInput;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  FooterGroup: ResolverTypeWrapper<FooterGroup>;
  FooterGroupConnectInput: FooterGroupConnectInput;
  FooterGroupConnection: ResolverTypeWrapper<FooterGroupConnection>;
  FooterGroupCreateInput: FooterGroupCreateInput;
  FooterGroupCreateManyInlineInput: FooterGroupCreateManyInlineInput;
  FooterGroupCreateOneInlineInput: FooterGroupCreateOneInlineInput;
  FooterGroupEdge: ResolverTypeWrapper<FooterGroupEdge>;
  FooterGroupManyWhereInput: FooterGroupManyWhereInput;
  FooterGroupOrderByInput: FooterGroupOrderByInput;
  FooterGroupUpdateInput: FooterGroupUpdateInput;
  FooterGroupUpdateManyInlineInput: FooterGroupUpdateManyInlineInput;
  FooterGroupUpdateManyInput: FooterGroupUpdateManyInput;
  FooterGroupUpdateManyWithNestedWhereInput: FooterGroupUpdateManyWithNestedWhereInput;
  FooterGroupUpdateOneInlineInput: FooterGroupUpdateOneInlineInput;
  FooterGroupUpdateWithNestedWhereUniqueInput: FooterGroupUpdateWithNestedWhereUniqueInput;
  FooterGroupUpsertInput: FooterGroupUpsertInput;
  FooterGroupUpsertWithNestedWhereUniqueInput: FooterGroupUpsertWithNestedWhereUniqueInput;
  FooterGroupWhereComparatorInput: FooterGroupWhereComparatorInput;
  FooterGroupWhereInput: FooterGroupWhereInput;
  FooterGroupWhereStageInput: FooterGroupWhereStageInput;
  FooterGroupWhereUniqueInput: FooterGroupWhereUniqueInput;
  Form: ResolverTypeWrapper<Omit<Form, 'fields'> & { fields: Array<ResolversTypes['FormfieldsUnion']> }>;
  FormAction: FormAction;
  FormButton: ResolverTypeWrapper<FormButton>;
  FormButtonConnectInput: FormButtonConnectInput;
  FormButtonConnection: ResolverTypeWrapper<FormButtonConnection>;
  FormButtonCreateInput: FormButtonCreateInput;
  FormButtonCreateManyInlineInput: FormButtonCreateManyInlineInput;
  FormButtonCreateOneInlineInput: FormButtonCreateOneInlineInput;
  FormButtonCreateWithPositionInput: FormButtonCreateWithPositionInput;
  FormButtonEdge: ResolverTypeWrapper<FormButtonEdge>;
  FormButtonManyWhereInput: FormButtonManyWhereInput;
  FormButtonOrderByInput: FormButtonOrderByInput;
  FormButtonParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['FormButtonParent']>;
  FormButtonParentConnectInput: FormButtonParentConnectInput;
  FormButtonParentCreateInput: FormButtonParentCreateInput;
  FormButtonParentCreateManyInlineInput: FormButtonParentCreateManyInlineInput;
  FormButtonParentCreateOneInlineInput: FormButtonParentCreateOneInlineInput;
  FormButtonParentUpdateInput: FormButtonParentUpdateInput;
  FormButtonParentUpdateManyInlineInput: FormButtonParentUpdateManyInlineInput;
  FormButtonParentUpdateManyWithNestedWhereInput: FormButtonParentUpdateManyWithNestedWhereInput;
  FormButtonParentUpdateOneInlineInput: FormButtonParentUpdateOneInlineInput;
  FormButtonParentUpdateWithNestedWhereUniqueInput: FormButtonParentUpdateWithNestedWhereUniqueInput;
  FormButtonParentUpsertWithNestedWhereUniqueInput: FormButtonParentUpsertWithNestedWhereUniqueInput;
  FormButtonParentWhereInput: FormButtonParentWhereInput;
  FormButtonParentWhereUniqueInput: FormButtonParentWhereUniqueInput;
  FormButtonUpdateInput: FormButtonUpdateInput;
  FormButtonUpdateManyInlineInput: FormButtonUpdateManyInlineInput;
  FormButtonUpdateManyInput: FormButtonUpdateManyInput;
  FormButtonUpdateManyWithNestedWhereInput: FormButtonUpdateManyWithNestedWhereInput;
  FormButtonUpdateOneInlineInput: FormButtonUpdateOneInlineInput;
  FormButtonUpdateWithNestedWhereUniqueAndPositionInput: FormButtonUpdateWithNestedWhereUniqueAndPositionInput;
  FormButtonUpdateWithNestedWhereUniqueInput: FormButtonUpdateWithNestedWhereUniqueInput;
  FormButtonUpsertInput: FormButtonUpsertInput;
  FormButtonUpsertWithNestedWhereUniqueAndPositionInput: FormButtonUpsertWithNestedWhereUniqueAndPositionInput;
  FormButtonUpsertWithNestedWhereUniqueInput: FormButtonUpsertWithNestedWhereUniqueInput;
  FormButtonWhereInput: FormButtonWhereInput;
  FormButtonWhereUniqueInput: FormButtonWhereUniqueInput;
  FormConnectInput: FormConnectInput;
  FormConnection: ResolverTypeWrapper<FormConnection>;
  FormCreateInput: FormCreateInput;
  FormCreateManyInlineInput: FormCreateManyInlineInput;
  FormCreateOneInlineInput: FormCreateOneInlineInput;
  FormEdge: ResolverTypeWrapper<FormEdge>;
  FormGroup: ResolverTypeWrapper<FormGroup>;
  FormGroupConnectInput: FormGroupConnectInput;
  FormGroupConnection: ResolverTypeWrapper<FormGroupConnection>;
  FormGroupCreateInput: FormGroupCreateInput;
  FormGroupCreateManyInlineInput: FormGroupCreateManyInlineInput;
  FormGroupCreateOneInlineInput: FormGroupCreateOneInlineInput;
  FormGroupCreateWithPositionInput: FormGroupCreateWithPositionInput;
  FormGroupEdge: ResolverTypeWrapper<FormGroupEdge>;
  FormGroupManyWhereInput: FormGroupManyWhereInput;
  FormGroupOrderByInput: FormGroupOrderByInput;
  FormGroupParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['FormGroupParent']>;
  FormGroupParentConnectInput: FormGroupParentConnectInput;
  FormGroupParentCreateInput: FormGroupParentCreateInput;
  FormGroupParentCreateManyInlineInput: FormGroupParentCreateManyInlineInput;
  FormGroupParentCreateOneInlineInput: FormGroupParentCreateOneInlineInput;
  FormGroupParentUpdateInput: FormGroupParentUpdateInput;
  FormGroupParentUpdateManyInlineInput: FormGroupParentUpdateManyInlineInput;
  FormGroupParentUpdateManyWithNestedWhereInput: FormGroupParentUpdateManyWithNestedWhereInput;
  FormGroupParentUpdateOneInlineInput: FormGroupParentUpdateOneInlineInput;
  FormGroupParentUpdateWithNestedWhereUniqueInput: FormGroupParentUpdateWithNestedWhereUniqueInput;
  FormGroupParentUpsertWithNestedWhereUniqueInput: FormGroupParentUpsertWithNestedWhereUniqueInput;
  FormGroupParentWhereInput: FormGroupParentWhereInput;
  FormGroupParentWhereUniqueInput: FormGroupParentWhereUniqueInput;
  FormGroupUpdateInput: FormGroupUpdateInput;
  FormGroupUpdateManyInlineInput: FormGroupUpdateManyInlineInput;
  FormGroupUpdateManyInput: FormGroupUpdateManyInput;
  FormGroupUpdateManyWithNestedWhereInput: FormGroupUpdateManyWithNestedWhereInput;
  FormGroupUpdateOneInlineInput: FormGroupUpdateOneInlineInput;
  FormGroupUpdateWithNestedWhereUniqueAndPositionInput: FormGroupUpdateWithNestedWhereUniqueAndPositionInput;
  FormGroupUpdateWithNestedWhereUniqueInput: FormGroupUpdateWithNestedWhereUniqueInput;
  FormGroupUpsertInput: FormGroupUpsertInput;
  FormGroupUpsertWithNestedWhereUniqueAndPositionInput: FormGroupUpsertWithNestedWhereUniqueAndPositionInput;
  FormGroupUpsertWithNestedWhereUniqueInput: FormGroupUpsertWithNestedWhereUniqueInput;
  FormGroupWhereInput: FormGroupWhereInput;
  FormGroupWhereUniqueInput: FormGroupWhereUniqueInput;
  FormManyWhereInput: FormManyWhereInput;
  FormOrderByInput: FormOrderByInput;
  FormUpdateInput: FormUpdateInput;
  FormUpdateManyInlineInput: FormUpdateManyInlineInput;
  FormUpdateManyInput: FormUpdateManyInput;
  FormUpdateManyWithNestedWhereInput: FormUpdateManyWithNestedWhereInput;
  FormUpdateOneInlineInput: FormUpdateOneInlineInput;
  FormUpdateWithNestedWhereUniqueInput: FormUpdateWithNestedWhereUniqueInput;
  FormUpsertInput: FormUpsertInput;
  FormUpsertWithNestedWhereUniqueInput: FormUpsertWithNestedWhereUniqueInput;
  FormWhereComparatorInput: FormWhereComparatorInput;
  FormWhereInput: FormWhereInput;
  FormWhereStageInput: FormWhereStageInput;
  FormWhereUniqueInput: FormWhereUniqueInput;
  FormfieldsUnion: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['FormfieldsUnion']>;
  FormfieldsUnionConnectInput: FormfieldsUnionConnectInput;
  FormfieldsUnionCreateInput: FormfieldsUnionCreateInput;
  FormfieldsUnionCreateManyInlineInput: FormfieldsUnionCreateManyInlineInput;
  FormfieldsUnionCreateOneInlineInput: FormfieldsUnionCreateOneInlineInput;
  FormfieldsUnionCreateWithPositionInput: FormfieldsUnionCreateWithPositionInput;
  FormfieldsUnionUpdateInput: FormfieldsUnionUpdateInput;
  FormfieldsUnionUpdateManyInlineInput: FormfieldsUnionUpdateManyInlineInput;
  FormfieldsUnionUpdateManyWithNestedWhereInput: FormfieldsUnionUpdateManyWithNestedWhereInput;
  FormfieldsUnionUpdateOneInlineInput: FormfieldsUnionUpdateOneInlineInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueInput: FormfieldsUnionUpdateWithNestedWhereUniqueInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueInput: FormfieldsUnionUpsertWithNestedWhereUniqueInput;
  FormfieldsUnionWhereInput: FormfieldsUnionWhereInput;
  FormfieldsUnionWhereUniqueInput: FormfieldsUnionWhereUniqueInput;
  HeaderGroup: ResolverTypeWrapper<HeaderGroup>;
  HeaderGroupConnectInput: HeaderGroupConnectInput;
  HeaderGroupConnection: ResolverTypeWrapper<HeaderGroupConnection>;
  HeaderGroupCreateInput: HeaderGroupCreateInput;
  HeaderGroupCreateManyInlineInput: HeaderGroupCreateManyInlineInput;
  HeaderGroupCreateOneInlineInput: HeaderGroupCreateOneInlineInput;
  HeaderGroupEdge: ResolverTypeWrapper<HeaderGroupEdge>;
  HeaderGroupManyWhereInput: HeaderGroupManyWhereInput;
  HeaderGroupOrderByInput: HeaderGroupOrderByInput;
  HeaderGroupUpdateInput: HeaderGroupUpdateInput;
  HeaderGroupUpdateManyInlineInput: HeaderGroupUpdateManyInlineInput;
  HeaderGroupUpdateManyInput: HeaderGroupUpdateManyInput;
  HeaderGroupUpdateManyWithNestedWhereInput: HeaderGroupUpdateManyWithNestedWhereInput;
  HeaderGroupUpdateOneInlineInput: HeaderGroupUpdateOneInlineInput;
  HeaderGroupUpdateWithNestedWhereUniqueInput: HeaderGroupUpdateWithNestedWhereUniqueInput;
  HeaderGroupUpsertInput: HeaderGroupUpsertInput;
  HeaderGroupUpsertWithNestedWhereUniqueInput: HeaderGroupUpsertWithNestedWhereUniqueInput;
  HeaderGroupWhereComparatorInput: HeaderGroupWhereComparatorInput;
  HeaderGroupWhereInput: HeaderGroupWhereInput;
  HeaderGroupWhereStageInput: HeaderGroupWhereStageInput;
  HeaderGroupWhereUniqueInput: HeaderGroupWhereUniqueInput;
  Hex: ResolverTypeWrapper<Scalars['Hex']['output']>;
  HomePage: ResolverTypeWrapper<HomePage>;
  HomePageBlock: ResolverTypeWrapper<HomePageBlock>;
  HomePageBlockConnectInput: HomePageBlockConnectInput;
  HomePageBlockConnection: ResolverTypeWrapper<HomePageBlockConnection>;
  HomePageBlockCreateInput: HomePageBlockCreateInput;
  HomePageBlockCreateManyInlineInput: HomePageBlockCreateManyInlineInput;
  HomePageBlockCreateOneInlineInput: HomePageBlockCreateOneInlineInput;
  HomePageBlockCreateWithPositionInput: HomePageBlockCreateWithPositionInput;
  HomePageBlockEdge: ResolverTypeWrapper<HomePageBlockEdge>;
  HomePageBlockManyWhereInput: HomePageBlockManyWhereInput;
  HomePageBlockOrderByInput: HomePageBlockOrderByInput;
  HomePageBlockParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['HomePageBlockParent']>;
  HomePageBlockParentConnectInput: HomePageBlockParentConnectInput;
  HomePageBlockParentCreateInput: HomePageBlockParentCreateInput;
  HomePageBlockParentCreateManyInlineInput: HomePageBlockParentCreateManyInlineInput;
  HomePageBlockParentCreateOneInlineInput: HomePageBlockParentCreateOneInlineInput;
  HomePageBlockParentUpdateInput: HomePageBlockParentUpdateInput;
  HomePageBlockParentUpdateManyInlineInput: HomePageBlockParentUpdateManyInlineInput;
  HomePageBlockParentUpdateManyWithNestedWhereInput: HomePageBlockParentUpdateManyWithNestedWhereInput;
  HomePageBlockParentUpdateOneInlineInput: HomePageBlockParentUpdateOneInlineInput;
  HomePageBlockParentUpdateWithNestedWhereUniqueInput: HomePageBlockParentUpdateWithNestedWhereUniqueInput;
  HomePageBlockParentUpsertWithNestedWhereUniqueInput: HomePageBlockParentUpsertWithNestedWhereUniqueInput;
  HomePageBlockParentWhereInput: HomePageBlockParentWhereInput;
  HomePageBlockParentWhereUniqueInput: HomePageBlockParentWhereUniqueInput;
  HomePageBlockUpdateInput: HomePageBlockUpdateInput;
  HomePageBlockUpdateManyInlineInput: HomePageBlockUpdateManyInlineInput;
  HomePageBlockUpdateManyInput: HomePageBlockUpdateManyInput;
  HomePageBlockUpdateManyWithNestedWhereInput: HomePageBlockUpdateManyWithNestedWhereInput;
  HomePageBlockUpdateOneInlineInput: HomePageBlockUpdateOneInlineInput;
  HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput: HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpdateWithNestedWhereUniqueInput: HomePageBlockUpdateWithNestedWhereUniqueInput;
  HomePageBlockUpsertInput: HomePageBlockUpsertInput;
  HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput: HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpsertWithNestedWhereUniqueInput: HomePageBlockUpsertWithNestedWhereUniqueInput;
  HomePageBlockWhereInput: HomePageBlockWhereInput;
  HomePageBlockWhereUniqueInput: HomePageBlockWhereUniqueInput;
  HomePageConnectInput: HomePageConnectInput;
  HomePageConnection: ResolverTypeWrapper<HomePageConnection>;
  HomePageCreateInput: HomePageCreateInput;
  HomePageCreateManyInlineInput: HomePageCreateManyInlineInput;
  HomePageCreateOneInlineInput: HomePageCreateOneInlineInput;
  HomePageEdge: ResolverTypeWrapper<HomePageEdge>;
  HomePageManyWhereInput: HomePageManyWhereInput;
  HomePageOrderByInput: HomePageOrderByInput;
  HomePageUpdateInput: HomePageUpdateInput;
  HomePageUpdateManyInlineInput: HomePageUpdateManyInlineInput;
  HomePageUpdateManyInput: HomePageUpdateManyInput;
  HomePageUpdateManyWithNestedWhereInput: HomePageUpdateManyWithNestedWhereInput;
  HomePageUpdateOneInlineInput: HomePageUpdateOneInlineInput;
  HomePageUpdateWithNestedWhereUniqueInput: HomePageUpdateWithNestedWhereUniqueInput;
  HomePageUpsertInput: HomePageUpsertInput;
  HomePageUpsertWithNestedWhereUniqueInput: HomePageUpsertWithNestedWhereUniqueInput;
  HomePageWhereComparatorInput: HomePageWhereComparatorInput;
  HomePageWhereInput: HomePageWhereInput;
  HomePageWhereStageInput: HomePageWhereStageInput;
  HomePageWhereUniqueInput: HomePageWhereUniqueInput;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  ImageFit: ImageFit;
  ImageResizeInput: ImageResizeInput;
  ImageTransformationInput: ImageTransformationInput;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  Json: ResolverTypeWrapper<Scalars['Json']['output']>;
  Locale: Locale;
  Location: ResolverTypeWrapper<Location>;
  LocationInput: LocationInput;
  LocationType: LocationType;
  Long: ResolverTypeWrapper<Scalars['Long']['output']>;
  Mutation: ResolverTypeWrapper<{}>;
  Node: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Node']>;
  OfficeLocation: ResolverTypeWrapper<OfficeLocation>;
  OfficeLocationConnectInput: OfficeLocationConnectInput;
  OfficeLocationConnection: ResolverTypeWrapper<OfficeLocationConnection>;
  OfficeLocationCreateInput: OfficeLocationCreateInput;
  OfficeLocationCreateManyInlineInput: OfficeLocationCreateManyInlineInput;
  OfficeLocationCreateOneInlineInput: OfficeLocationCreateOneInlineInput;
  OfficeLocationEdge: ResolverTypeWrapper<OfficeLocationEdge>;
  OfficeLocationManyWhereInput: OfficeLocationManyWhereInput;
  OfficeLocationOrderByInput: OfficeLocationOrderByInput;
  OfficeLocationUpdateInput: OfficeLocationUpdateInput;
  OfficeLocationUpdateManyInlineInput: OfficeLocationUpdateManyInlineInput;
  OfficeLocationUpdateManyInput: OfficeLocationUpdateManyInput;
  OfficeLocationUpdateManyWithNestedWhereInput: OfficeLocationUpdateManyWithNestedWhereInput;
  OfficeLocationUpdateOneInlineInput: OfficeLocationUpdateOneInlineInput;
  OfficeLocationUpdateWithNestedWhereUniqueInput: OfficeLocationUpdateWithNestedWhereUniqueInput;
  OfficeLocationUpsertInput: OfficeLocationUpsertInput;
  OfficeLocationUpsertWithNestedWhereUniqueInput: OfficeLocationUpsertWithNestedWhereUniqueInput;
  OfficeLocationWhereComparatorInput: OfficeLocationWhereComparatorInput;
  OfficeLocationWhereInput: OfficeLocationWhereInput;
  OfficeLocationWhereStageInput: OfficeLocationWhereStageInput;
  OfficeLocationWhereUniqueInput: OfficeLocationWhereUniqueInput;
  Page: ResolverTypeWrapper<Page>;
  PageConnectInput: PageConnectInput;
  PageConnection: ResolverTypeWrapper<PageConnection>;
  PageContent: ResolverTypeWrapper<PageContent>;
  PageContentConnectInput: PageContentConnectInput;
  PageContentConnection: ResolverTypeWrapper<PageContentConnection>;
  PageContentCreateInput: PageContentCreateInput;
  PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
  PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
  PageContentEdge: ResolverTypeWrapper<PageContentEdge>;
  PageContentManyWhereInput: PageContentManyWhereInput;
  PageContentOrderByInput: PageContentOrderByInput;
  PageContentUpdateInput: PageContentUpdateInput;
  PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
  PageContentUpdateManyInput: PageContentUpdateManyInput;
  PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
  PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
  PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
  PageContentUpsertInput: PageContentUpsertInput;
  PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
  PageContentWhereComparatorInput: PageContentWhereComparatorInput;
  PageContentWhereInput: PageContentWhereInput;
  PageContentWhereStageInput: PageContentWhereStageInput;
  PageContentWhereUniqueInput: PageContentWhereUniqueInput;
  PageCreateInput: PageCreateInput;
  PageCreateManyInlineInput: PageCreateManyInlineInput;
  PageCreateOneInlineInput: PageCreateOneInlineInput;
  PageEdge: ResolverTypeWrapper<PageEdge>;
  PageInfo: ResolverTypeWrapper<PageInfo>;
  PageManyWhereInput: PageManyWhereInput;
  PageOrderByInput: PageOrderByInput;
  PageUpdateInput: PageUpdateInput;
  PageUpdateManyInlineInput: PageUpdateManyInlineInput;
  PageUpdateManyInput: PageUpdateManyInput;
  PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
  PageUpdateOneInlineInput: PageUpdateOneInlineInput;
  PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
  PageUpsertInput: PageUpsertInput;
  PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
  PageWhereComparatorInput: PageWhereComparatorInput;
  PageWhereInput: PageWhereInput;
  PageWhereStageInput: PageWhereStageInput;
  PageWhereUniqueInput: PageWhereUniqueInput;
  PublishLocaleInput: PublishLocaleInput;
  Query: ResolverTypeWrapper<{}>;
  RGBA: ResolverTypeWrapper<Rgba>;
  RGBAHue: ResolverTypeWrapper<Scalars['RGBAHue']['output']>;
  RGBAInput: RgbaInput;
  RGBATransparency: ResolverTypeWrapper<Scalars['RGBATransparency']['output']>;
  RemoteSelectField: ResolverTypeWrapper<RemoteSelectField>;
  RemoteSelectFieldConnectInput: RemoteSelectFieldConnectInput;
  RemoteSelectFieldConnection: ResolverTypeWrapper<RemoteSelectFieldConnection>;
  RemoteSelectFieldCreateInput: RemoteSelectFieldCreateInput;
  RemoteSelectFieldCreateManyInlineInput: RemoteSelectFieldCreateManyInlineInput;
  RemoteSelectFieldCreateOneInlineInput: RemoteSelectFieldCreateOneInlineInput;
  RemoteSelectFieldCreateWithPositionInput: RemoteSelectFieldCreateWithPositionInput;
  RemoteSelectFieldEdge: ResolverTypeWrapper<RemoteSelectFieldEdge>;
  RemoteSelectFieldManyWhereInput: RemoteSelectFieldManyWhereInput;
  RemoteSelectFieldOrderByInput: RemoteSelectFieldOrderByInput;
  RemoteSelectFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['RemoteSelectFieldParent']>;
  RemoteSelectFieldParentConnectInput: RemoteSelectFieldParentConnectInput;
  RemoteSelectFieldParentCreateInput: RemoteSelectFieldParentCreateInput;
  RemoteSelectFieldParentCreateManyInlineInput: RemoteSelectFieldParentCreateManyInlineInput;
  RemoteSelectFieldParentCreateOneInlineInput: RemoteSelectFieldParentCreateOneInlineInput;
  RemoteSelectFieldParentUpdateInput: RemoteSelectFieldParentUpdateInput;
  RemoteSelectFieldParentUpdateManyInlineInput: RemoteSelectFieldParentUpdateManyInlineInput;
  RemoteSelectFieldParentUpdateManyWithNestedWhereInput: RemoteSelectFieldParentUpdateManyWithNestedWhereInput;
  RemoteSelectFieldParentUpdateOneInlineInput: RemoteSelectFieldParentUpdateOneInlineInput;
  RemoteSelectFieldParentUpdateWithNestedWhereUniqueInput: RemoteSelectFieldParentUpdateWithNestedWhereUniqueInput;
  RemoteSelectFieldParentUpsertWithNestedWhereUniqueInput: RemoteSelectFieldParentUpsertWithNestedWhereUniqueInput;
  RemoteSelectFieldParentWhereInput: RemoteSelectFieldParentWhereInput;
  RemoteSelectFieldParentWhereUniqueInput: RemoteSelectFieldParentWhereUniqueInput;
  RemoteSelectFieldUpdateInput: RemoteSelectFieldUpdateInput;
  RemoteSelectFieldUpdateManyInlineInput: RemoteSelectFieldUpdateManyInlineInput;
  RemoteSelectFieldUpdateManyInput: RemoteSelectFieldUpdateManyInput;
  RemoteSelectFieldUpdateManyWithNestedWhereInput: RemoteSelectFieldUpdateManyWithNestedWhereInput;
  RemoteSelectFieldUpdateOneInlineInput: RemoteSelectFieldUpdateOneInlineInput;
  RemoteSelectFieldUpdateWithNestedWhereUniqueAndPositionInput: RemoteSelectFieldUpdateWithNestedWhereUniqueAndPositionInput;
  RemoteSelectFieldUpdateWithNestedWhereUniqueInput: RemoteSelectFieldUpdateWithNestedWhereUniqueInput;
  RemoteSelectFieldUpsertInput: RemoteSelectFieldUpsertInput;
  RemoteSelectFieldUpsertWithNestedWhereUniqueAndPositionInput: RemoteSelectFieldUpsertWithNestedWhereUniqueAndPositionInput;
  RemoteSelectFieldUpsertWithNestedWhereUniqueInput: RemoteSelectFieldUpsertWithNestedWhereUniqueInput;
  RemoteSelectFieldWhereInput: RemoteSelectFieldWhereInput;
  RemoteSelectFieldWhereUniqueInput: RemoteSelectFieldWhereUniqueInput;
  RichText: ResolverTypeWrapper<RichText>;
  RichTextAST: ResolverTypeWrapper<Scalars['RichTextAST']['output']>;
  ScheduledOperation: ResolverTypeWrapper<Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<ResolversTypes['ScheduledOperationAffectedDocument']> }>;
  ScheduledOperationAffectedDocument: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['ScheduledOperationAffectedDocument']>;
  ScheduledOperationConnectInput: ScheduledOperationConnectInput;
  ScheduledOperationConnection: ResolverTypeWrapper<ScheduledOperationConnection>;
  ScheduledOperationCreateManyInlineInput: ScheduledOperationCreateManyInlineInput;
  ScheduledOperationCreateOneInlineInput: ScheduledOperationCreateOneInlineInput;
  ScheduledOperationEdge: ResolverTypeWrapper<ScheduledOperationEdge>;
  ScheduledOperationManyWhereInput: ScheduledOperationManyWhereInput;
  ScheduledOperationOrderByInput: ScheduledOperationOrderByInput;
  ScheduledOperationStatus: ScheduledOperationStatus;
  ScheduledOperationUpdateManyInlineInput: ScheduledOperationUpdateManyInlineInput;
  ScheduledOperationUpdateOneInlineInput: ScheduledOperationUpdateOneInlineInput;
  ScheduledOperationWhereInput: ScheduledOperationWhereInput;
  ScheduledOperationWhereUniqueInput: ScheduledOperationWhereUniqueInput;
  ScheduledRelease: ResolverTypeWrapper<ScheduledRelease>;
  ScheduledReleaseConnectInput: ScheduledReleaseConnectInput;
  ScheduledReleaseConnection: ResolverTypeWrapper<ScheduledReleaseConnection>;
  ScheduledReleaseCreateInput: ScheduledReleaseCreateInput;
  ScheduledReleaseCreateManyInlineInput: ScheduledReleaseCreateManyInlineInput;
  ScheduledReleaseCreateOneInlineInput: ScheduledReleaseCreateOneInlineInput;
  ScheduledReleaseEdge: ResolverTypeWrapper<ScheduledReleaseEdge>;
  ScheduledReleaseManyWhereInput: ScheduledReleaseManyWhereInput;
  ScheduledReleaseOrderByInput: ScheduledReleaseOrderByInput;
  ScheduledReleaseStatus: ScheduledReleaseStatus;
  ScheduledReleaseUpdateInput: ScheduledReleaseUpdateInput;
  ScheduledReleaseUpdateManyInlineInput: ScheduledReleaseUpdateManyInlineInput;
  ScheduledReleaseUpdateManyInput: ScheduledReleaseUpdateManyInput;
  ScheduledReleaseUpdateManyWithNestedWhereInput: ScheduledReleaseUpdateManyWithNestedWhereInput;
  ScheduledReleaseUpdateOneInlineInput: ScheduledReleaseUpdateOneInlineInput;
  ScheduledReleaseUpdateWithNestedWhereUniqueInput: ScheduledReleaseUpdateWithNestedWhereUniqueInput;
  ScheduledReleaseUpsertInput: ScheduledReleaseUpsertInput;
  ScheduledReleaseUpsertWithNestedWhereUniqueInput: ScheduledReleaseUpsertWithNestedWhereUniqueInput;
  ScheduledReleaseWhereInput: ScheduledReleaseWhereInput;
  ScheduledReleaseWhereUniqueInput: ScheduledReleaseWhereUniqueInput;
  SelectField: ResolverTypeWrapper<SelectField>;
  SelectFieldConnectInput: SelectFieldConnectInput;
  SelectFieldConnection: ResolverTypeWrapper<SelectFieldConnection>;
  SelectFieldCreateInput: SelectFieldCreateInput;
  SelectFieldCreateManyInlineInput: SelectFieldCreateManyInlineInput;
  SelectFieldCreateOneInlineInput: SelectFieldCreateOneInlineInput;
  SelectFieldCreateWithPositionInput: SelectFieldCreateWithPositionInput;
  SelectFieldEdge: ResolverTypeWrapper<SelectFieldEdge>;
  SelectFieldManyWhereInput: SelectFieldManyWhereInput;
  SelectFieldOrderByInput: SelectFieldOrderByInput;
  SelectFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['SelectFieldParent']>;
  SelectFieldParentConnectInput: SelectFieldParentConnectInput;
  SelectFieldParentCreateInput: SelectFieldParentCreateInput;
  SelectFieldParentCreateManyInlineInput: SelectFieldParentCreateManyInlineInput;
  SelectFieldParentCreateOneInlineInput: SelectFieldParentCreateOneInlineInput;
  SelectFieldParentUpdateInput: SelectFieldParentUpdateInput;
  SelectFieldParentUpdateManyInlineInput: SelectFieldParentUpdateManyInlineInput;
  SelectFieldParentUpdateManyWithNestedWhereInput: SelectFieldParentUpdateManyWithNestedWhereInput;
  SelectFieldParentUpdateOneInlineInput: SelectFieldParentUpdateOneInlineInput;
  SelectFieldParentUpdateWithNestedWhereUniqueInput: SelectFieldParentUpdateWithNestedWhereUniqueInput;
  SelectFieldParentUpsertWithNestedWhereUniqueInput: SelectFieldParentUpsertWithNestedWhereUniqueInput;
  SelectFieldParentWhereInput: SelectFieldParentWhereInput;
  SelectFieldParentWhereUniqueInput: SelectFieldParentWhereUniqueInput;
  SelectFieldUpdateInput: SelectFieldUpdateInput;
  SelectFieldUpdateManyInlineInput: SelectFieldUpdateManyInlineInput;
  SelectFieldUpdateManyInput: SelectFieldUpdateManyInput;
  SelectFieldUpdateManyWithNestedWhereInput: SelectFieldUpdateManyWithNestedWhereInput;
  SelectFieldUpdateOneInlineInput: SelectFieldUpdateOneInlineInput;
  SelectFieldUpdateWithNestedWhereUniqueAndPositionInput: SelectFieldUpdateWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpdateWithNestedWhereUniqueInput: SelectFieldUpdateWithNestedWhereUniqueInput;
  SelectFieldUpsertInput: SelectFieldUpsertInput;
  SelectFieldUpsertWithNestedWhereUniqueAndPositionInput: SelectFieldUpsertWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpsertWithNestedWhereUniqueInput: SelectFieldUpsertWithNestedWhereUniqueInput;
  SelectFieldWhereInput: SelectFieldWhereInput;
  SelectFieldWhereUniqueInput: SelectFieldWhereUniqueInput;
  SocialLink: ResolverTypeWrapper<SocialLink>;
  SocialLinkConnectInput: SocialLinkConnectInput;
  SocialLinkConnection: ResolverTypeWrapper<SocialLinkConnection>;
  SocialLinkCreateInput: SocialLinkCreateInput;
  SocialLinkCreateManyInlineInput: SocialLinkCreateManyInlineInput;
  SocialLinkCreateOneInlineInput: SocialLinkCreateOneInlineInput;
  SocialLinkCreateWithPositionInput: SocialLinkCreateWithPositionInput;
  SocialLinkEdge: ResolverTypeWrapper<SocialLinkEdge>;
  SocialLinkManyWhereInput: SocialLinkManyWhereInput;
  SocialLinkOrderByInput: SocialLinkOrderByInput;
  SocialLinkParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['SocialLinkParent']>;
  SocialLinkParentConnectInput: SocialLinkParentConnectInput;
  SocialLinkParentCreateInput: SocialLinkParentCreateInput;
  SocialLinkParentCreateManyInlineInput: SocialLinkParentCreateManyInlineInput;
  SocialLinkParentCreateOneInlineInput: SocialLinkParentCreateOneInlineInput;
  SocialLinkParentUpdateInput: SocialLinkParentUpdateInput;
  SocialLinkParentUpdateManyInlineInput: SocialLinkParentUpdateManyInlineInput;
  SocialLinkParentUpdateManyWithNestedWhereInput: SocialLinkParentUpdateManyWithNestedWhereInput;
  SocialLinkParentUpdateOneInlineInput: SocialLinkParentUpdateOneInlineInput;
  SocialLinkParentUpdateWithNestedWhereUniqueInput: SocialLinkParentUpdateWithNestedWhereUniqueInput;
  SocialLinkParentUpsertWithNestedWhereUniqueInput: SocialLinkParentUpsertWithNestedWhereUniqueInput;
  SocialLinkParentWhereInput: SocialLinkParentWhereInput;
  SocialLinkParentWhereUniqueInput: SocialLinkParentWhereUniqueInput;
  SocialLinkUpdateInput: SocialLinkUpdateInput;
  SocialLinkUpdateManyInlineInput: SocialLinkUpdateManyInlineInput;
  SocialLinkUpdateManyInput: SocialLinkUpdateManyInput;
  SocialLinkUpdateManyWithNestedWhereInput: SocialLinkUpdateManyWithNestedWhereInput;
  SocialLinkUpdateOneInlineInput: SocialLinkUpdateOneInlineInput;
  SocialLinkUpdateWithNestedWhereUniqueAndPositionInput: SocialLinkUpdateWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpdateWithNestedWhereUniqueInput: SocialLinkUpdateWithNestedWhereUniqueInput;
  SocialLinkUpsertInput: SocialLinkUpsertInput;
  SocialLinkUpsertWithNestedWhereUniqueAndPositionInput: SocialLinkUpsertWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpsertWithNestedWhereUniqueInput: SocialLinkUpsertWithNestedWhereUniqueInput;
  SocialLinkWhereInput: SocialLinkWhereInput;
  SocialLinkWhereUniqueInput: SocialLinkWhereUniqueInput;
  Stage: Stage;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  SystemDateTimeFieldVariation: SystemDateTimeFieldVariation;
  Testimonial: ResolverTypeWrapper<Testimonial>;
  TestimonialConnectInput: TestimonialConnectInput;
  TestimonialConnection: ResolverTypeWrapper<TestimonialConnection>;
  TestimonialCreateInput: TestimonialCreateInput;
  TestimonialCreateManyInlineInput: TestimonialCreateManyInlineInput;
  TestimonialCreateOneInlineInput: TestimonialCreateOneInlineInput;
  TestimonialEdge: ResolverTypeWrapper<TestimonialEdge>;
  TestimonialManyWhereInput: TestimonialManyWhereInput;
  TestimonialOrderByInput: TestimonialOrderByInput;
  TestimonialUpdateInput: TestimonialUpdateInput;
  TestimonialUpdateManyInlineInput: TestimonialUpdateManyInlineInput;
  TestimonialUpdateManyInput: TestimonialUpdateManyInput;
  TestimonialUpdateManyWithNestedWhereInput: TestimonialUpdateManyWithNestedWhereInput;
  TestimonialUpdateOneInlineInput: TestimonialUpdateOneInlineInput;
  TestimonialUpdateWithNestedWhereUniqueInput: TestimonialUpdateWithNestedWhereUniqueInput;
  TestimonialUpsertInput: TestimonialUpsertInput;
  TestimonialUpsertWithNestedWhereUniqueInput: TestimonialUpsertWithNestedWhereUniqueInput;
  TestimonialWhereComparatorInput: TestimonialWhereComparatorInput;
  TestimonialWhereInput: TestimonialWhereInput;
  TestimonialWhereStageInput: TestimonialWhereStageInput;
  TestimonialWhereUniqueInput: TestimonialWhereUniqueInput;
  TextAreaField: ResolverTypeWrapper<TextAreaField>;
  TextAreaFieldConnectInput: TextAreaFieldConnectInput;
  TextAreaFieldConnection: ResolverTypeWrapper<TextAreaFieldConnection>;
  TextAreaFieldCreateInput: TextAreaFieldCreateInput;
  TextAreaFieldCreateManyInlineInput: TextAreaFieldCreateManyInlineInput;
  TextAreaFieldCreateOneInlineInput: TextAreaFieldCreateOneInlineInput;
  TextAreaFieldCreateWithPositionInput: TextAreaFieldCreateWithPositionInput;
  TextAreaFieldEdge: ResolverTypeWrapper<TextAreaFieldEdge>;
  TextAreaFieldManyWhereInput: TextAreaFieldManyWhereInput;
  TextAreaFieldOrderByInput: TextAreaFieldOrderByInput;
  TextAreaFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['TextAreaFieldParent']>;
  TextAreaFieldParentConnectInput: TextAreaFieldParentConnectInput;
  TextAreaFieldParentCreateInput: TextAreaFieldParentCreateInput;
  TextAreaFieldParentCreateManyInlineInput: TextAreaFieldParentCreateManyInlineInput;
  TextAreaFieldParentCreateOneInlineInput: TextAreaFieldParentCreateOneInlineInput;
  TextAreaFieldParentUpdateInput: TextAreaFieldParentUpdateInput;
  TextAreaFieldParentUpdateManyInlineInput: TextAreaFieldParentUpdateManyInlineInput;
  TextAreaFieldParentUpdateManyWithNestedWhereInput: TextAreaFieldParentUpdateManyWithNestedWhereInput;
  TextAreaFieldParentUpdateOneInlineInput: TextAreaFieldParentUpdateOneInlineInput;
  TextAreaFieldParentUpdateWithNestedWhereUniqueInput: TextAreaFieldParentUpdateWithNestedWhereUniqueInput;
  TextAreaFieldParentUpsertWithNestedWhereUniqueInput: TextAreaFieldParentUpsertWithNestedWhereUniqueInput;
  TextAreaFieldParentWhereInput: TextAreaFieldParentWhereInput;
  TextAreaFieldParentWhereUniqueInput: TextAreaFieldParentWhereUniqueInput;
  TextAreaFieldUpdateInput: TextAreaFieldUpdateInput;
  TextAreaFieldUpdateManyInlineInput: TextAreaFieldUpdateManyInlineInput;
  TextAreaFieldUpdateManyInput: TextAreaFieldUpdateManyInput;
  TextAreaFieldUpdateManyWithNestedWhereInput: TextAreaFieldUpdateManyWithNestedWhereInput;
  TextAreaFieldUpdateOneInlineInput: TextAreaFieldUpdateOneInlineInput;
  TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpdateWithNestedWhereUniqueInput: TextAreaFieldUpdateWithNestedWhereUniqueInput;
  TextAreaFieldUpsertInput: TextAreaFieldUpsertInput;
  TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpsertWithNestedWhereUniqueInput: TextAreaFieldUpsertWithNestedWhereUniqueInput;
  TextAreaFieldWhereInput: TextAreaFieldWhereInput;
  TextAreaFieldWhereUniqueInput: TextAreaFieldWhereUniqueInput;
  TextInputField: ResolverTypeWrapper<TextInputField>;
  TextInputFieldConnectInput: TextInputFieldConnectInput;
  TextInputFieldConnection: ResolverTypeWrapper<TextInputFieldConnection>;
  TextInputFieldCreateInput: TextInputFieldCreateInput;
  TextInputFieldCreateManyInlineInput: TextInputFieldCreateManyInlineInput;
  TextInputFieldCreateOneInlineInput: TextInputFieldCreateOneInlineInput;
  TextInputFieldCreateWithPositionInput: TextInputFieldCreateWithPositionInput;
  TextInputFieldEdge: ResolverTypeWrapper<TextInputFieldEdge>;
  TextInputFieldManyWhereInput: TextInputFieldManyWhereInput;
  TextInputFieldOrderByInput: TextInputFieldOrderByInput;
  TextInputFieldParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['TextInputFieldParent']>;
  TextInputFieldParentConnectInput: TextInputFieldParentConnectInput;
  TextInputFieldParentCreateInput: TextInputFieldParentCreateInput;
  TextInputFieldParentCreateManyInlineInput: TextInputFieldParentCreateManyInlineInput;
  TextInputFieldParentCreateOneInlineInput: TextInputFieldParentCreateOneInlineInput;
  TextInputFieldParentUpdateInput: TextInputFieldParentUpdateInput;
  TextInputFieldParentUpdateManyInlineInput: TextInputFieldParentUpdateManyInlineInput;
  TextInputFieldParentUpdateManyWithNestedWhereInput: TextInputFieldParentUpdateManyWithNestedWhereInput;
  TextInputFieldParentUpdateOneInlineInput: TextInputFieldParentUpdateOneInlineInput;
  TextInputFieldParentUpdateWithNestedWhereUniqueInput: TextInputFieldParentUpdateWithNestedWhereUniqueInput;
  TextInputFieldParentUpsertWithNestedWhereUniqueInput: TextInputFieldParentUpsertWithNestedWhereUniqueInput;
  TextInputFieldParentWhereInput: TextInputFieldParentWhereInput;
  TextInputFieldParentWhereUniqueInput: TextInputFieldParentWhereUniqueInput;
  TextInputFieldUpdateInput: TextInputFieldUpdateInput;
  TextInputFieldUpdateManyInlineInput: TextInputFieldUpdateManyInlineInput;
  TextInputFieldUpdateManyInput: TextInputFieldUpdateManyInput;
  TextInputFieldUpdateManyWithNestedWhereInput: TextInputFieldUpdateManyWithNestedWhereInput;
  TextInputFieldUpdateOneInlineInput: TextInputFieldUpdateOneInlineInput;
  TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput: TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpdateWithNestedWhereUniqueInput: TextInputFieldUpdateWithNestedWhereUniqueInput;
  TextInputFieldUpsertInput: TextInputFieldUpsertInput;
  TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput: TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpsertWithNestedWhereUniqueInput: TextInputFieldUpsertWithNestedWhereUniqueInput;
  TextInputFieldWhereInput: TextInputFieldWhereInput;
  TextInputFieldWhereUniqueInput: TextInputFieldWhereUniqueInput;
  TextInputValidationType: TextInputValidationType;
  Theme: ResolverTypeWrapper<Theme>;
  ThemeColor: ThemeColor;
  ThemeColors: ResolverTypeWrapper<ThemeColors>;
  ThemeColorsConnectInput: ThemeColorsConnectInput;
  ThemeColorsConnection: ResolverTypeWrapper<ThemeColorsConnection>;
  ThemeColorsCreateInput: ThemeColorsCreateInput;
  ThemeColorsCreateManyInlineInput: ThemeColorsCreateManyInlineInput;
  ThemeColorsCreateOneInlineInput: ThemeColorsCreateOneInlineInput;
  ThemeColorsCreateWithPositionInput: ThemeColorsCreateWithPositionInput;
  ThemeColorsEdge: ResolverTypeWrapper<ThemeColorsEdge>;
  ThemeColorsManyWhereInput: ThemeColorsManyWhereInput;
  ThemeColorsOrderByInput: ThemeColorsOrderByInput;
  ThemeColorsParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['ThemeColorsParent']>;
  ThemeColorsParentConnectInput: ThemeColorsParentConnectInput;
  ThemeColorsParentCreateInput: ThemeColorsParentCreateInput;
  ThemeColorsParentCreateManyInlineInput: ThemeColorsParentCreateManyInlineInput;
  ThemeColorsParentCreateOneInlineInput: ThemeColorsParentCreateOneInlineInput;
  ThemeColorsParentUpdateInput: ThemeColorsParentUpdateInput;
  ThemeColorsParentUpdateManyInlineInput: ThemeColorsParentUpdateManyInlineInput;
  ThemeColorsParentUpdateManyWithNestedWhereInput: ThemeColorsParentUpdateManyWithNestedWhereInput;
  ThemeColorsParentUpdateOneInlineInput: ThemeColorsParentUpdateOneInlineInput;
  ThemeColorsParentUpdateWithNestedWhereUniqueInput: ThemeColorsParentUpdateWithNestedWhereUniqueInput;
  ThemeColorsParentUpsertWithNestedWhereUniqueInput: ThemeColorsParentUpsertWithNestedWhereUniqueInput;
  ThemeColorsParentWhereInput: ThemeColorsParentWhereInput;
  ThemeColorsParentWhereUniqueInput: ThemeColorsParentWhereUniqueInput;
  ThemeColorsUpdateInput: ThemeColorsUpdateInput;
  ThemeColorsUpdateManyInlineInput: ThemeColorsUpdateManyInlineInput;
  ThemeColorsUpdateManyInput: ThemeColorsUpdateManyInput;
  ThemeColorsUpdateManyWithNestedWhereInput: ThemeColorsUpdateManyWithNestedWhereInput;
  ThemeColorsUpdateOneInlineInput: ThemeColorsUpdateOneInlineInput;
  ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput: ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpdateWithNestedWhereUniqueInput: ThemeColorsUpdateWithNestedWhereUniqueInput;
  ThemeColorsUpsertInput: ThemeColorsUpsertInput;
  ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput: ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpsertWithNestedWhereUniqueInput: ThemeColorsUpsertWithNestedWhereUniqueInput;
  ThemeColorsWhereInput: ThemeColorsWhereInput;
  ThemeColorsWhereUniqueInput: ThemeColorsWhereUniqueInput;
  ThemeConnectInput: ThemeConnectInput;
  ThemeConnection: ResolverTypeWrapper<ThemeConnection>;
  ThemeCreateInput: ThemeCreateInput;
  ThemeCreateManyInlineInput: ThemeCreateManyInlineInput;
  ThemeCreateOneInlineInput: ThemeCreateOneInlineInput;
  ThemeEdge: ResolverTypeWrapper<ThemeEdge>;
  ThemeFonts: ResolverTypeWrapper<ThemeFonts>;
  ThemeFontsConnection: ResolverTypeWrapper<ThemeFontsConnection>;
  ThemeFontsCreateInput: ThemeFontsCreateInput;
  ThemeFontsCreateWithPositionInput: ThemeFontsCreateWithPositionInput;
  ThemeFontsEdge: ResolverTypeWrapper<ThemeFontsEdge>;
  ThemeFontsManyWhereInput: ThemeFontsManyWhereInput;
  ThemeFontsOrderByInput: ThemeFontsOrderByInput;
  ThemeFontsUpdateInput: ThemeFontsUpdateInput;
  ThemeFontsUpdateManyInput: ThemeFontsUpdateManyInput;
  ThemeFontsUpdateManyWithNestedWhereInput: ThemeFontsUpdateManyWithNestedWhereInput;
  ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput: ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpdateWithNestedWhereUniqueInput: ThemeFontsUpdateWithNestedWhereUniqueInput;
  ThemeFontsUpsertInput: ThemeFontsUpsertInput;
  ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput: ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpsertWithNestedWhereUniqueInput: ThemeFontsUpsertWithNestedWhereUniqueInput;
  ThemeFontsWhereInput: ThemeFontsWhereInput;
  ThemeFontsWhereUniqueInput: ThemeFontsWhereUniqueInput;
  ThemeManyWhereInput: ThemeManyWhereInput;
  ThemeOrderByInput: ThemeOrderByInput;
  ThemeUpdateInput: ThemeUpdateInput;
  ThemeUpdateManyInlineInput: ThemeUpdateManyInlineInput;
  ThemeUpdateManyInput: ThemeUpdateManyInput;
  ThemeUpdateManyWithNestedWhereInput: ThemeUpdateManyWithNestedWhereInput;
  ThemeUpdateOneInlineInput: ThemeUpdateOneInlineInput;
  ThemeUpdateWithNestedWhereUniqueInput: ThemeUpdateWithNestedWhereUniqueInput;
  ThemeUpsertInput: ThemeUpsertInput;
  ThemeUpsertWithNestedWhereUniqueInput: ThemeUpsertWithNestedWhereUniqueInput;
  ThemeWhereComparatorInput: ThemeWhereComparatorInput;
  ThemeWhereInput: ThemeWhereInput;
  ThemeWhereStageInput: ThemeWhereStageInput;
  ThemeWhereUniqueInput: ThemeWhereUniqueInput;
  UnpublishLocaleInput: UnpublishLocaleInput;
  User: ResolverTypeWrapper<User>;
  UserConnectInput: UserConnectInput;
  UserConnection: ResolverTypeWrapper<UserConnection>;
  UserCreateManyInlineInput: UserCreateManyInlineInput;
  UserCreateOneInlineInput: UserCreateOneInlineInput;
  UserEdge: ResolverTypeWrapper<UserEdge>;
  UserKind: UserKind;
  UserManyWhereInput: UserManyWhereInput;
  UserOrderByInput: UserOrderByInput;
  UserUpdateManyInlineInput: UserUpdateManyInlineInput;
  UserUpdateOneInlineInput: UserUpdateOneInlineInput;
  UserWhereComparatorInput: UserWhereComparatorInput;
  UserWhereInput: UserWhereInput;
  UserWhereStageInput: UserWhereStageInput;
  UserWhereUniqueInput: UserWhereUniqueInput;
  VendorLogo: ResolverTypeWrapper<VendorLogo>;
  VendorLogoConnectInput: VendorLogoConnectInput;
  VendorLogoConnection: ResolverTypeWrapper<VendorLogoConnection>;
  VendorLogoCreateInput: VendorLogoCreateInput;
  VendorLogoCreateManyInlineInput: VendorLogoCreateManyInlineInput;
  VendorLogoCreateOneInlineInput: VendorLogoCreateOneInlineInput;
  VendorLogoCreateWithPositionInput: VendorLogoCreateWithPositionInput;
  VendorLogoEdge: ResolverTypeWrapper<VendorLogoEdge>;
  VendorLogoManyWhereInput: VendorLogoManyWhereInput;
  VendorLogoOrderByInput: VendorLogoOrderByInput;
  VendorLogoParent: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['VendorLogoParent']>;
  VendorLogoParentConnectInput: VendorLogoParentConnectInput;
  VendorLogoParentCreateInput: VendorLogoParentCreateInput;
  VendorLogoParentCreateManyInlineInput: VendorLogoParentCreateManyInlineInput;
  VendorLogoParentCreateOneInlineInput: VendorLogoParentCreateOneInlineInput;
  VendorLogoParentUpdateInput: VendorLogoParentUpdateInput;
  VendorLogoParentUpdateManyInlineInput: VendorLogoParentUpdateManyInlineInput;
  VendorLogoParentUpdateManyWithNestedWhereInput: VendorLogoParentUpdateManyWithNestedWhereInput;
  VendorLogoParentUpdateOneInlineInput: VendorLogoParentUpdateOneInlineInput;
  VendorLogoParentUpdateWithNestedWhereUniqueInput: VendorLogoParentUpdateWithNestedWhereUniqueInput;
  VendorLogoParentUpsertWithNestedWhereUniqueInput: VendorLogoParentUpsertWithNestedWhereUniqueInput;
  VendorLogoParentWhereInput: VendorLogoParentWhereInput;
  VendorLogoParentWhereUniqueInput: VendorLogoParentWhereUniqueInput;
  VendorLogoUpdateInput: VendorLogoUpdateInput;
  VendorLogoUpdateManyInlineInput: VendorLogoUpdateManyInlineInput;
  VendorLogoUpdateManyInput: VendorLogoUpdateManyInput;
  VendorLogoUpdateManyWithNestedWhereInput: VendorLogoUpdateManyWithNestedWhereInput;
  VendorLogoUpdateOneInlineInput: VendorLogoUpdateOneInlineInput;
  VendorLogoUpdateWithNestedWhereUniqueAndPositionInput: VendorLogoUpdateWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpdateWithNestedWhereUniqueInput: VendorLogoUpdateWithNestedWhereUniqueInput;
  VendorLogoUpsertInput: VendorLogoUpsertInput;
  VendorLogoUpsertWithNestedWhereUniqueAndPositionInput: VendorLogoUpsertWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpsertWithNestedWhereUniqueInput: VendorLogoUpsertWithNestedWhereUniqueInput;
  VendorLogoWhereInput: VendorLogoWhereInput;
  VendorLogoWhereUniqueInput: VendorLogoWhereUniqueInput;
  Version: ResolverTypeWrapper<Version>;
  VersionWhereInput: VersionWhereInput;
  _FilterKind: _FilterKind;
  _MutationInputFieldKind: _MutationInputFieldKind;
  _MutationKind: _MutationKind;
  _OrderDirection: _OrderDirection;
  _RelationInputCardinality: _RelationInputCardinality;
  _RelationInputKind: _RelationInputKind;
  _RelationKind: _RelationKind;
  _SystemDateTimeFieldVariation: _SystemDateTimeFieldVariation;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Address: Address;
  AddressConnectInput: AddressConnectInput;
  AddressConnection: AddressConnection;
  AddressCreateInput: AddressCreateInput;
  AddressCreateManyInlineInput: AddressCreateManyInlineInput;
  AddressCreateOneInlineInput: AddressCreateOneInlineInput;
  AddressCreateWithPositionInput: AddressCreateWithPositionInput;
  AddressEdge: AddressEdge;
  AddressManyWhereInput: AddressManyWhereInput;
  AddressParent: ResolversUnionTypes<ResolversParentTypes>['AddressParent'];
  AddressParentConnectInput: AddressParentConnectInput;
  AddressParentCreateInput: AddressParentCreateInput;
  AddressParentCreateManyInlineInput: AddressParentCreateManyInlineInput;
  AddressParentCreateOneInlineInput: AddressParentCreateOneInlineInput;
  AddressParentUpdateInput: AddressParentUpdateInput;
  AddressParentUpdateManyInlineInput: AddressParentUpdateManyInlineInput;
  AddressParentUpdateManyWithNestedWhereInput: AddressParentUpdateManyWithNestedWhereInput;
  AddressParentUpdateOneInlineInput: AddressParentUpdateOneInlineInput;
  AddressParentUpdateWithNestedWhereUniqueInput: AddressParentUpdateWithNestedWhereUniqueInput;
  AddressParentUpsertWithNestedWhereUniqueInput: AddressParentUpsertWithNestedWhereUniqueInput;
  AddressParentWhereInput: AddressParentWhereInput;
  AddressParentWhereUniqueInput: AddressParentWhereUniqueInput;
  AddressSearchField: AddressSearchField;
  AddressSearchFieldConnectInput: AddressSearchFieldConnectInput;
  AddressSearchFieldConnection: AddressSearchFieldConnection;
  AddressSearchFieldCreateInput: AddressSearchFieldCreateInput;
  AddressSearchFieldCreateManyInlineInput: AddressSearchFieldCreateManyInlineInput;
  AddressSearchFieldCreateOneInlineInput: AddressSearchFieldCreateOneInlineInput;
  AddressSearchFieldCreateWithPositionInput: AddressSearchFieldCreateWithPositionInput;
  AddressSearchFieldEdge: AddressSearchFieldEdge;
  AddressSearchFieldManyWhereInput: AddressSearchFieldManyWhereInput;
  AddressSearchFieldParent: ResolversUnionTypes<ResolversParentTypes>['AddressSearchFieldParent'];
  AddressSearchFieldParentConnectInput: AddressSearchFieldParentConnectInput;
  AddressSearchFieldParentCreateInput: AddressSearchFieldParentCreateInput;
  AddressSearchFieldParentCreateManyInlineInput: AddressSearchFieldParentCreateManyInlineInput;
  AddressSearchFieldParentCreateOneInlineInput: AddressSearchFieldParentCreateOneInlineInput;
  AddressSearchFieldParentUpdateInput: AddressSearchFieldParentUpdateInput;
  AddressSearchFieldParentUpdateManyInlineInput: AddressSearchFieldParentUpdateManyInlineInput;
  AddressSearchFieldParentUpdateManyWithNestedWhereInput: AddressSearchFieldParentUpdateManyWithNestedWhereInput;
  AddressSearchFieldParentUpdateOneInlineInput: AddressSearchFieldParentUpdateOneInlineInput;
  AddressSearchFieldParentUpdateWithNestedWhereUniqueInput: AddressSearchFieldParentUpdateWithNestedWhereUniqueInput;
  AddressSearchFieldParentUpsertWithNestedWhereUniqueInput: AddressSearchFieldParentUpsertWithNestedWhereUniqueInput;
  AddressSearchFieldParentWhereInput: AddressSearchFieldParentWhereInput;
  AddressSearchFieldParentWhereUniqueInput: AddressSearchFieldParentWhereUniqueInput;
  AddressSearchFieldUpdateInput: AddressSearchFieldUpdateInput;
  AddressSearchFieldUpdateManyInlineInput: AddressSearchFieldUpdateManyInlineInput;
  AddressSearchFieldUpdateManyInput: AddressSearchFieldUpdateManyInput;
  AddressSearchFieldUpdateManyWithNestedWhereInput: AddressSearchFieldUpdateManyWithNestedWhereInput;
  AddressSearchFieldUpdateOneInlineInput: AddressSearchFieldUpdateOneInlineInput;
  AddressSearchFieldUpdateWithNestedWhereUniqueAndPositionInput: AddressSearchFieldUpdateWithNestedWhereUniqueAndPositionInput;
  AddressSearchFieldUpdateWithNestedWhereUniqueInput: AddressSearchFieldUpdateWithNestedWhereUniqueInput;
  AddressSearchFieldUpsertInput: AddressSearchFieldUpsertInput;
  AddressSearchFieldUpsertWithNestedWhereUniqueAndPositionInput: AddressSearchFieldUpsertWithNestedWhereUniqueAndPositionInput;
  AddressSearchFieldUpsertWithNestedWhereUniqueInput: AddressSearchFieldUpsertWithNestedWhereUniqueInput;
  AddressSearchFieldWhereInput: AddressSearchFieldWhereInput;
  AddressSearchFieldWhereUniqueInput: AddressSearchFieldWhereUniqueInput;
  AddressUpdateInput: AddressUpdateInput;
  AddressUpdateManyInlineInput: AddressUpdateManyInlineInput;
  AddressUpdateManyInput: AddressUpdateManyInput;
  AddressUpdateManyWithNestedWhereInput: AddressUpdateManyWithNestedWhereInput;
  AddressUpdateOneInlineInput: AddressUpdateOneInlineInput;
  AddressUpdateWithNestedWhereUniqueAndPositionInput: AddressUpdateWithNestedWhereUniqueAndPositionInput;
  AddressUpdateWithNestedWhereUniqueInput: AddressUpdateWithNestedWhereUniqueInput;
  AddressUpsertInput: AddressUpsertInput;
  AddressUpsertWithNestedWhereUniqueAndPositionInput: AddressUpsertWithNestedWhereUniqueAndPositionInput;
  AddressUpsertWithNestedWhereUniqueInput: AddressUpsertWithNestedWhereUniqueInput;
  AddressWhereInput: AddressWhereInput;
  AddressWhereUniqueInput: AddressWhereUniqueInput;
  Admonition: Admonition;
  AdmonitionConnectInput: AdmonitionConnectInput;
  AdmonitionConnection: AdmonitionConnection;
  AdmonitionCreateInput: AdmonitionCreateInput;
  AdmonitionCreateManyInlineInput: AdmonitionCreateManyInlineInput;
  AdmonitionCreateOneInlineInput: AdmonitionCreateOneInlineInput;
  AdmonitionEdge: AdmonitionEdge;
  AdmonitionManyWhereInput: AdmonitionManyWhereInput;
  AdmonitionUpdateInput: AdmonitionUpdateInput;
  AdmonitionUpdateManyInlineInput: AdmonitionUpdateManyInlineInput;
  AdmonitionUpdateManyInput: AdmonitionUpdateManyInput;
  AdmonitionUpdateManyWithNestedWhereInput: AdmonitionUpdateManyWithNestedWhereInput;
  AdmonitionUpdateOneInlineInput: AdmonitionUpdateOneInlineInput;
  AdmonitionUpdateWithNestedWhereUniqueInput: AdmonitionUpdateWithNestedWhereUniqueInput;
  AdmonitionUpsertInput: AdmonitionUpsertInput;
  AdmonitionUpsertWithNestedWhereUniqueInput: AdmonitionUpsertWithNestedWhereUniqueInput;
  AdmonitionWhereComparatorInput: AdmonitionWhereComparatorInput;
  AdmonitionWhereInput: AdmonitionWhereInput;
  AdmonitionWhereStageInput: AdmonitionWhereStageInput;
  AdmonitionWhereUniqueInput: AdmonitionWhereUniqueInput;
  Aggregate: Aggregate;
  Alert: Alert;
  AlertConnectInput: AlertConnectInput;
  AlertConnection: AlertConnection;
  AlertCreateInput: AlertCreateInput;
  AlertCreateManyInlineInput: AlertCreateManyInlineInput;
  AlertCreateOneInlineInput: AlertCreateOneInlineInput;
  AlertCreateWithPositionInput: AlertCreateWithPositionInput;
  AlertEdge: AlertEdge;
  AlertManyWhereInput: AlertManyWhereInput;
  AlertParent: ResolversUnionTypes<ResolversParentTypes>['AlertParent'];
  AlertParentConnectInput: AlertParentConnectInput;
  AlertParentCreateInput: AlertParentCreateInput;
  AlertParentCreateManyInlineInput: AlertParentCreateManyInlineInput;
  AlertParentCreateOneInlineInput: AlertParentCreateOneInlineInput;
  AlertParentUpdateInput: AlertParentUpdateInput;
  AlertParentUpdateManyInlineInput: AlertParentUpdateManyInlineInput;
  AlertParentUpdateManyWithNestedWhereInput: AlertParentUpdateManyWithNestedWhereInput;
  AlertParentUpdateOneInlineInput: AlertParentUpdateOneInlineInput;
  AlertParentUpdateWithNestedWhereUniqueInput: AlertParentUpdateWithNestedWhereUniqueInput;
  AlertParentUpsertWithNestedWhereUniqueInput: AlertParentUpsertWithNestedWhereUniqueInput;
  AlertParentWhereInput: AlertParentWhereInput;
  AlertParentWhereUniqueInput: AlertParentWhereUniqueInput;
  AlertUpdateInput: AlertUpdateInput;
  AlertUpdateManyInlineInput: AlertUpdateManyInlineInput;
  AlertUpdateManyInput: AlertUpdateManyInput;
  AlertUpdateManyWithNestedWhereInput: AlertUpdateManyWithNestedWhereInput;
  AlertUpdateOneInlineInput: AlertUpdateOneInlineInput;
  AlertUpdateWithNestedWhereUniqueAndPositionInput: AlertUpdateWithNestedWhereUniqueAndPositionInput;
  AlertUpdateWithNestedWhereUniqueInput: AlertUpdateWithNestedWhereUniqueInput;
  AlertUpsertInput: AlertUpsertInput;
  AlertUpsertWithNestedWhereUniqueAndPositionInput: AlertUpsertWithNestedWhereUniqueAndPositionInput;
  AlertUpsertWithNestedWhereUniqueInput: AlertUpsertWithNestedWhereUniqueInput;
  AlertWhereInput: AlertWhereInput;
  AlertWhereUniqueInput: AlertWhereUniqueInput;
  Asset: Asset;
  AssetConnectInput: AssetConnectInput;
  AssetConnection: AssetConnection;
  AssetCreateInput: AssetCreateInput;
  AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
  AssetCreateLocalizationInput: AssetCreateLocalizationInput;
  AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
  AssetCreateManyInlineInput: AssetCreateManyInlineInput;
  AssetCreateOneInlineInput: AssetCreateOneInlineInput;
  AssetEdge: AssetEdge;
  AssetManyWhereInput: AssetManyWhereInput;
  AssetTransformationInput: AssetTransformationInput;
  AssetUpdateInput: AssetUpdateInput;
  AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
  AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
  AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
  AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
  AssetUpdateManyInput: AssetUpdateManyInput;
  AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
  AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
  AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
  AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
  AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
  AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
  AssetUpsertInput: AssetUpsertInput;
  AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
  AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
  AssetWhereComparatorInput: AssetWhereComparatorInput;
  AssetWhereInput: AssetWhereInput;
  AssetWhereStageInput: AssetWhereStageInput;
  AssetWhereUniqueInput: AssetWhereUniqueInput;
  BatchPayload: BatchPayload;
  BlogPost: BlogPost;
  BlogPostBodyRichText: Omit<BlogPostBodyRichText, 'references'> & { references: Array<ResolversParentTypes['BlogPostBodyRichTextEmbeddedTypes']> };
  BlogPostBodyRichTextEmbeddedTypes: ResolversUnionTypes<ResolversParentTypes>['BlogPostBodyRichTextEmbeddedTypes'];
  BlogPostConnectInput: BlogPostConnectInput;
  BlogPostConnection: BlogPostConnection;
  BlogPostCreateInput: BlogPostCreateInput;
  BlogPostCreateManyInlineInput: BlogPostCreateManyInlineInput;
  BlogPostCreateOneInlineInput: BlogPostCreateOneInlineInput;
  BlogPostEdge: BlogPostEdge;
  BlogPostManyWhereInput: BlogPostManyWhereInput;
  BlogPostUpdateInput: BlogPostUpdateInput;
  BlogPostUpdateManyInlineInput: BlogPostUpdateManyInlineInput;
  BlogPostUpdateManyInput: BlogPostUpdateManyInput;
  BlogPostUpdateManyWithNestedWhereInput: BlogPostUpdateManyWithNestedWhereInput;
  BlogPostUpdateOneInlineInput: BlogPostUpdateOneInlineInput;
  BlogPostUpdateWithNestedWhereUniqueInput: BlogPostUpdateWithNestedWhereUniqueInput;
  BlogPostUpsertInput: BlogPostUpsertInput;
  BlogPostUpsertWithNestedWhereUniqueInput: BlogPostUpsertWithNestedWhereUniqueInput;
  BlogPostWhereComparatorInput: BlogPostWhereComparatorInput;
  BlogPostWhereInput: BlogPostWhereInput;
  BlogPostWhereStageInput: BlogPostWhereStageInput;
  BlogPostWhereUniqueInput: BlogPostWhereUniqueInput;
  Boolean: Scalars['Boolean']['output'];
  Button: Button;
  ButtonConnectInput: ButtonConnectInput;
  ButtonConnection: ButtonConnection;
  ButtonCreateInput: ButtonCreateInput;
  ButtonCreateManyInlineInput: ButtonCreateManyInlineInput;
  ButtonCreateOneInlineInput: ButtonCreateOneInlineInput;
  ButtonCreateWithPositionInput: ButtonCreateWithPositionInput;
  ButtonEdge: ButtonEdge;
  ButtonManyWhereInput: ButtonManyWhereInput;
  ButtonParent: ResolversUnionTypes<ResolversParentTypes>['ButtonParent'];
  ButtonParentConnectInput: ButtonParentConnectInput;
  ButtonParentCreateInput: ButtonParentCreateInput;
  ButtonParentCreateManyInlineInput: ButtonParentCreateManyInlineInput;
  ButtonParentCreateOneInlineInput: ButtonParentCreateOneInlineInput;
  ButtonParentUpdateInput: ButtonParentUpdateInput;
  ButtonParentUpdateManyInlineInput: ButtonParentUpdateManyInlineInput;
  ButtonParentUpdateManyWithNestedWhereInput: ButtonParentUpdateManyWithNestedWhereInput;
  ButtonParentUpdateOneInlineInput: ButtonParentUpdateOneInlineInput;
  ButtonParentUpdateWithNestedWhereUniqueInput: ButtonParentUpdateWithNestedWhereUniqueInput;
  ButtonParentUpsertWithNestedWhereUniqueInput: ButtonParentUpsertWithNestedWhereUniqueInput;
  ButtonParentWhereInput: ButtonParentWhereInput;
  ButtonParentWhereUniqueInput: ButtonParentWhereUniqueInput;
  ButtonUpdateInput: ButtonUpdateInput;
  ButtonUpdateManyInlineInput: ButtonUpdateManyInlineInput;
  ButtonUpdateManyInput: ButtonUpdateManyInput;
  ButtonUpdateManyWithNestedWhereInput: ButtonUpdateManyWithNestedWhereInput;
  ButtonUpdateOneInlineInput: ButtonUpdateOneInlineInput;
  ButtonUpdateWithNestedWhereUniqueAndPositionInput: ButtonUpdateWithNestedWhereUniqueAndPositionInput;
  ButtonUpdateWithNestedWhereUniqueInput: ButtonUpdateWithNestedWhereUniqueInput;
  ButtonUpsertInput: ButtonUpsertInput;
  ButtonUpsertWithNestedWhereUniqueAndPositionInput: ButtonUpsertWithNestedWhereUniqueAndPositionInput;
  ButtonUpsertWithNestedWhereUniqueInput: ButtonUpsertWithNestedWhereUniqueInput;
  ButtonWhereInput: ButtonWhereInput;
  ButtonWhereUniqueInput: ButtonWhereUniqueInput;
  CallToAction: CallToAction;
  CallToActionConnectInput: CallToActionConnectInput;
  CallToActionConnection: CallToActionConnection;
  CallToActionCreateInput: CallToActionCreateInput;
  CallToActionCreateManyInlineInput: CallToActionCreateManyInlineInput;
  CallToActionCreateOneInlineInput: CallToActionCreateOneInlineInput;
  CallToActionCreateWithPositionInput: CallToActionCreateWithPositionInput;
  CallToActionEdge: CallToActionEdge;
  CallToActionManyWhereInput: CallToActionManyWhereInput;
  CallToActionParent: ResolversUnionTypes<ResolversParentTypes>['CallToActionParent'];
  CallToActionParentConnectInput: CallToActionParentConnectInput;
  CallToActionParentCreateInput: CallToActionParentCreateInput;
  CallToActionParentCreateManyInlineInput: CallToActionParentCreateManyInlineInput;
  CallToActionParentCreateOneInlineInput: CallToActionParentCreateOneInlineInput;
  CallToActionParentUpdateInput: CallToActionParentUpdateInput;
  CallToActionParentUpdateManyInlineInput: CallToActionParentUpdateManyInlineInput;
  CallToActionParentUpdateManyWithNestedWhereInput: CallToActionParentUpdateManyWithNestedWhereInput;
  CallToActionParentUpdateOneInlineInput: CallToActionParentUpdateOneInlineInput;
  CallToActionParentUpdateWithNestedWhereUniqueInput: CallToActionParentUpdateWithNestedWhereUniqueInput;
  CallToActionParentUpsertWithNestedWhereUniqueInput: CallToActionParentUpsertWithNestedWhereUniqueInput;
  CallToActionParentWhereInput: CallToActionParentWhereInput;
  CallToActionParentWhereUniqueInput: CallToActionParentWhereUniqueInput;
  CallToActionSettings: CallToActionSettings;
  CallToActionSettingsConnectInput: CallToActionSettingsConnectInput;
  CallToActionSettingsConnection: CallToActionSettingsConnection;
  CallToActionSettingsCreateInput: CallToActionSettingsCreateInput;
  CallToActionSettingsCreateManyInlineInput: CallToActionSettingsCreateManyInlineInput;
  CallToActionSettingsCreateOneInlineInput: CallToActionSettingsCreateOneInlineInput;
  CallToActionSettingsCreateWithPositionInput: CallToActionSettingsCreateWithPositionInput;
  CallToActionSettingsEdge: CallToActionSettingsEdge;
  CallToActionSettingsManyWhereInput: CallToActionSettingsManyWhereInput;
  CallToActionSettingsParent: ResolversUnionTypes<ResolversParentTypes>['CallToActionSettingsParent'];
  CallToActionSettingsParentConnectInput: CallToActionSettingsParentConnectInput;
  CallToActionSettingsParentCreateInput: CallToActionSettingsParentCreateInput;
  CallToActionSettingsParentCreateManyInlineInput: CallToActionSettingsParentCreateManyInlineInput;
  CallToActionSettingsParentCreateOneInlineInput: CallToActionSettingsParentCreateOneInlineInput;
  CallToActionSettingsParentUpdateInput: CallToActionSettingsParentUpdateInput;
  CallToActionSettingsParentUpdateManyInlineInput: CallToActionSettingsParentUpdateManyInlineInput;
  CallToActionSettingsParentUpdateManyWithNestedWhereInput: CallToActionSettingsParentUpdateManyWithNestedWhereInput;
  CallToActionSettingsParentUpdateOneInlineInput: CallToActionSettingsParentUpdateOneInlineInput;
  CallToActionSettingsParentUpdateWithNestedWhereUniqueInput: CallToActionSettingsParentUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsParentUpsertWithNestedWhereUniqueInput: CallToActionSettingsParentUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsParentWhereInput: CallToActionSettingsParentWhereInput;
  CallToActionSettingsParentWhereUniqueInput: CallToActionSettingsParentWhereUniqueInput;
  CallToActionSettingsUpdateInput: CallToActionSettingsUpdateInput;
  CallToActionSettingsUpdateManyInlineInput: CallToActionSettingsUpdateManyInlineInput;
  CallToActionSettingsUpdateManyInput: CallToActionSettingsUpdateManyInput;
  CallToActionSettingsUpdateManyWithNestedWhereInput: CallToActionSettingsUpdateManyWithNestedWhereInput;
  CallToActionSettingsUpdateOneInlineInput: CallToActionSettingsUpdateOneInlineInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpdateWithNestedWhereUniqueInput: CallToActionSettingsUpdateWithNestedWhereUniqueInput;
  CallToActionSettingsUpsertInput: CallToActionSettingsUpsertInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput: CallToActionSettingsUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionSettingsUpsertWithNestedWhereUniqueInput: CallToActionSettingsUpsertWithNestedWhereUniqueInput;
  CallToActionSettingsWhereInput: CallToActionSettingsWhereInput;
  CallToActionSettingsWhereUniqueInput: CallToActionSettingsWhereUniqueInput;
  CallToActionUpdateInput: CallToActionUpdateInput;
  CallToActionUpdateManyInlineInput: CallToActionUpdateManyInlineInput;
  CallToActionUpdateManyInput: CallToActionUpdateManyInput;
  CallToActionUpdateManyWithNestedWhereInput: CallToActionUpdateManyWithNestedWhereInput;
  CallToActionUpdateOneInlineInput: CallToActionUpdateOneInlineInput;
  CallToActionUpdateWithNestedWhereUniqueAndPositionInput: CallToActionUpdateWithNestedWhereUniqueAndPositionInput;
  CallToActionUpdateWithNestedWhereUniqueInput: CallToActionUpdateWithNestedWhereUniqueInput;
  CallToActionUpsertInput: CallToActionUpsertInput;
  CallToActionUpsertWithNestedWhereUniqueAndPositionInput: CallToActionUpsertWithNestedWhereUniqueAndPositionInput;
  CallToActionUpsertWithNestedWhereUniqueInput: CallToActionUpsertWithNestedWhereUniqueInput;
  CallToActionWhereInput: CallToActionWhereInput;
  CallToActionWhereUniqueInput: CallToActionWhereUniqueInput;
  Callout: Callout;
  CalloutConnectInput: CalloutConnectInput;
  CalloutConnection: CalloutConnection;
  CalloutCreateInput: CalloutCreateInput;
  CalloutCreateManyInlineInput: CalloutCreateManyInlineInput;
  CalloutCreateOneInlineInput: CalloutCreateOneInlineInput;
  CalloutCreateWithPositionInput: CalloutCreateWithPositionInput;
  CalloutEdge: CalloutEdge;
  CalloutManyWhereInput: CalloutManyWhereInput;
  CalloutParent: ResolversUnionTypes<ResolversParentTypes>['CalloutParent'];
  CalloutParentConnectInput: CalloutParentConnectInput;
  CalloutParentCreateInput: CalloutParentCreateInput;
  CalloutParentCreateManyInlineInput: CalloutParentCreateManyInlineInput;
  CalloutParentCreateOneInlineInput: CalloutParentCreateOneInlineInput;
  CalloutParentUpdateInput: CalloutParentUpdateInput;
  CalloutParentUpdateManyInlineInput: CalloutParentUpdateManyInlineInput;
  CalloutParentUpdateManyWithNestedWhereInput: CalloutParentUpdateManyWithNestedWhereInput;
  CalloutParentUpdateOneInlineInput: CalloutParentUpdateOneInlineInput;
  CalloutParentUpdateWithNestedWhereUniqueInput: CalloutParentUpdateWithNestedWhereUniqueInput;
  CalloutParentUpsertWithNestedWhereUniqueInput: CalloutParentUpsertWithNestedWhereUniqueInput;
  CalloutParentWhereInput: CalloutParentWhereInput;
  CalloutParentWhereUniqueInput: CalloutParentWhereUniqueInput;
  CalloutUpdateInput: CalloutUpdateInput;
  CalloutUpdateManyInlineInput: CalloutUpdateManyInlineInput;
  CalloutUpdateManyInput: CalloutUpdateManyInput;
  CalloutUpdateManyWithNestedWhereInput: CalloutUpdateManyWithNestedWhereInput;
  CalloutUpdateOneInlineInput: CalloutUpdateOneInlineInput;
  CalloutUpdateWithNestedWhereUniqueAndPositionInput: CalloutUpdateWithNestedWhereUniqueAndPositionInput;
  CalloutUpdateWithNestedWhereUniqueInput: CalloutUpdateWithNestedWhereUniqueInput;
  CalloutUpsertInput: CalloutUpsertInput;
  CalloutUpsertWithNestedWhereUniqueAndPositionInput: CalloutUpsertWithNestedWhereUniqueAndPositionInput;
  CalloutUpsertWithNestedWhereUniqueInput: CalloutUpsertWithNestedWhereUniqueInput;
  CalloutWhereInput: CalloutWhereInput;
  CalloutWhereUniqueInput: CalloutWhereUniqueInput;
  CheckboxField: CheckboxField;
  CheckboxFieldConnectInput: CheckboxFieldConnectInput;
  CheckboxFieldConnection: CheckboxFieldConnection;
  CheckboxFieldCreateInput: CheckboxFieldCreateInput;
  CheckboxFieldCreateManyInlineInput: CheckboxFieldCreateManyInlineInput;
  CheckboxFieldCreateOneInlineInput: CheckboxFieldCreateOneInlineInput;
  CheckboxFieldCreateWithPositionInput: CheckboxFieldCreateWithPositionInput;
  CheckboxFieldEdge: CheckboxFieldEdge;
  CheckboxFieldManyWhereInput: CheckboxFieldManyWhereInput;
  CheckboxFieldParent: ResolversUnionTypes<ResolversParentTypes>['CheckboxFieldParent'];
  CheckboxFieldParentConnectInput: CheckboxFieldParentConnectInput;
  CheckboxFieldParentCreateInput: CheckboxFieldParentCreateInput;
  CheckboxFieldParentCreateManyInlineInput: CheckboxFieldParentCreateManyInlineInput;
  CheckboxFieldParentCreateOneInlineInput: CheckboxFieldParentCreateOneInlineInput;
  CheckboxFieldParentUpdateInput: CheckboxFieldParentUpdateInput;
  CheckboxFieldParentUpdateManyInlineInput: CheckboxFieldParentUpdateManyInlineInput;
  CheckboxFieldParentUpdateManyWithNestedWhereInput: CheckboxFieldParentUpdateManyWithNestedWhereInput;
  CheckboxFieldParentUpdateOneInlineInput: CheckboxFieldParentUpdateOneInlineInput;
  CheckboxFieldParentUpdateWithNestedWhereUniqueInput: CheckboxFieldParentUpdateWithNestedWhereUniqueInput;
  CheckboxFieldParentUpsertWithNestedWhereUniqueInput: CheckboxFieldParentUpsertWithNestedWhereUniqueInput;
  CheckboxFieldParentWhereInput: CheckboxFieldParentWhereInput;
  CheckboxFieldParentWhereUniqueInput: CheckboxFieldParentWhereUniqueInput;
  CheckboxFieldUpdateInput: CheckboxFieldUpdateInput;
  CheckboxFieldUpdateManyInlineInput: CheckboxFieldUpdateManyInlineInput;
  CheckboxFieldUpdateManyInput: CheckboxFieldUpdateManyInput;
  CheckboxFieldUpdateManyWithNestedWhereInput: CheckboxFieldUpdateManyWithNestedWhereInput;
  CheckboxFieldUpdateOneInlineInput: CheckboxFieldUpdateOneInlineInput;
  CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpdateWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpdateWithNestedWhereUniqueInput: CheckboxFieldUpdateWithNestedWhereUniqueInput;
  CheckboxFieldUpsertInput: CheckboxFieldUpsertInput;
  CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput: CheckboxFieldUpsertWithNestedWhereUniqueAndPositionInput;
  CheckboxFieldUpsertWithNestedWhereUniqueInput: CheckboxFieldUpsertWithNestedWhereUniqueInput;
  CheckboxFieldWhereInput: CheckboxFieldWhereInput;
  CheckboxFieldWhereUniqueInput: CheckboxFieldWhereUniqueInput;
  CloudLocation: CloudLocation;
  CloudLocationConnectInput: CloudLocationConnectInput;
  CloudLocationConnection: CloudLocationConnection;
  CloudLocationCreateInput: CloudLocationCreateInput;
  CloudLocationCreateManyInlineInput: CloudLocationCreateManyInlineInput;
  CloudLocationCreateOneInlineInput: CloudLocationCreateOneInlineInput;
  CloudLocationEdge: CloudLocationEdge;
  CloudLocationManyWhereInput: CloudLocationManyWhereInput;
  CloudLocationUpdateInput: CloudLocationUpdateInput;
  CloudLocationUpdateManyInlineInput: CloudLocationUpdateManyInlineInput;
  CloudLocationUpdateManyInput: CloudLocationUpdateManyInput;
  CloudLocationUpdateManyWithNestedWhereInput: CloudLocationUpdateManyWithNestedWhereInput;
  CloudLocationUpdateOneInlineInput: CloudLocationUpdateOneInlineInput;
  CloudLocationUpdateWithNestedWhereUniqueInput: CloudLocationUpdateWithNestedWhereUniqueInput;
  CloudLocationUpsertInput: CloudLocationUpsertInput;
  CloudLocationUpsertWithNestedWhereUniqueInput: CloudLocationUpsertWithNestedWhereUniqueInput;
  CloudLocationWhereComparatorInput: CloudLocationWhereComparatorInput;
  CloudLocationWhereInput: CloudLocationWhereInput;
  CloudLocationWhereStageInput: CloudLocationWhereStageInput;
  CloudLocationWhereUniqueInput: CloudLocationWhereUniqueInput;
  Color: Color;
  ColorInput: ColorInput;
  Configuration: Configuration;
  ConfigurationConnectInput: ConfigurationConnectInput;
  ConfigurationConnection: ConfigurationConnection;
  ConfigurationCreateInput: ConfigurationCreateInput;
  ConfigurationCreateManyInlineInput: ConfigurationCreateManyInlineInput;
  ConfigurationCreateOneInlineInput: ConfigurationCreateOneInlineInput;
  ConfigurationEdge: ConfigurationEdge;
  ConfigurationManyWhereInput: ConfigurationManyWhereInput;
  ConfigurationUpdateInput: ConfigurationUpdateInput;
  ConfigurationUpdateManyInlineInput: ConfigurationUpdateManyInlineInput;
  ConfigurationUpdateManyInput: ConfigurationUpdateManyInput;
  ConfigurationUpdateManyWithNestedWhereInput: ConfigurationUpdateManyWithNestedWhereInput;
  ConfigurationUpdateOneInlineInput: ConfigurationUpdateOneInlineInput;
  ConfigurationUpdateWithNestedWhereUniqueInput: ConfigurationUpdateWithNestedWhereUniqueInput;
  ConfigurationUpsertInput: ConfigurationUpsertInput;
  ConfigurationUpsertWithNestedWhereUniqueInput: ConfigurationUpsertWithNestedWhereUniqueInput;
  ConfigurationWhereComparatorInput: ConfigurationWhereComparatorInput;
  ConfigurationWhereInput: ConfigurationWhereInput;
  ConfigurationWhereStageInput: ConfigurationWhereStageInput;
  ConfigurationWhereUniqueInput: ConfigurationWhereUniqueInput;
  ConnectPositionInput: ConnectPositionInput;
  ContactForm: Omit<ContactForm, 'fields'> & { fields: Array<ResolversParentTypes['ContactFormfieldsUnion']> };
  ContactFormConnectInput: ContactFormConnectInput;
  ContactFormConnection: ContactFormConnection;
  ContactFormCreateInput: ContactFormCreateInput;
  ContactFormCreateManyInlineInput: ContactFormCreateManyInlineInput;
  ContactFormCreateOneInlineInput: ContactFormCreateOneInlineInput;
  ContactFormEdge: ContactFormEdge;
  ContactFormManyWhereInput: ContactFormManyWhereInput;
  ContactFormUpdateInput: ContactFormUpdateInput;
  ContactFormUpdateManyInlineInput: ContactFormUpdateManyInlineInput;
  ContactFormUpdateManyInput: ContactFormUpdateManyInput;
  ContactFormUpdateManyWithNestedWhereInput: ContactFormUpdateManyWithNestedWhereInput;
  ContactFormUpdateOneInlineInput: ContactFormUpdateOneInlineInput;
  ContactFormUpdateWithNestedWhereUniqueInput: ContactFormUpdateWithNestedWhereUniqueInput;
  ContactFormUpsertInput: ContactFormUpsertInput;
  ContactFormUpsertWithNestedWhereUniqueInput: ContactFormUpsertWithNestedWhereUniqueInput;
  ContactFormWhereComparatorInput: ContactFormWhereComparatorInput;
  ContactFormWhereInput: ContactFormWhereInput;
  ContactFormWhereStageInput: ContactFormWhereStageInput;
  ContactFormWhereUniqueInput: ContactFormWhereUniqueInput;
  ContactFormfieldsUnion: ResolversUnionTypes<ResolversParentTypes>['ContactFormfieldsUnion'];
  ContactFormfieldsUnionConnectInput: ContactFormfieldsUnionConnectInput;
  ContactFormfieldsUnionCreateInput: ContactFormfieldsUnionCreateInput;
  ContactFormfieldsUnionCreateManyInlineInput: ContactFormfieldsUnionCreateManyInlineInput;
  ContactFormfieldsUnionCreateOneInlineInput: ContactFormfieldsUnionCreateOneInlineInput;
  ContactFormfieldsUnionCreateWithPositionInput: ContactFormfieldsUnionCreateWithPositionInput;
  ContactFormfieldsUnionUpdateInput: ContactFormfieldsUnionUpdateInput;
  ContactFormfieldsUnionUpdateManyInlineInput: ContactFormfieldsUnionUpdateManyInlineInput;
  ContactFormfieldsUnionUpdateManyWithNestedWhereInput: ContactFormfieldsUnionUpdateManyWithNestedWhereInput;
  ContactFormfieldsUnionUpdateOneInlineInput: ContactFormfieldsUnionUpdateOneInlineInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput: ContactFormfieldsUnionUpdateWithNestedWhereUniqueInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput: ContactFormfieldsUnionUpsertWithNestedWhereUniqueInput;
  ContactFormfieldsUnionWhereInput: ContactFormfieldsUnionWhereInput;
  ContactFormfieldsUnionWhereUniqueInput: ContactFormfieldsUnionWhereUniqueInput;
  ContentButton: ContentButton;
  ContentButtonConnectInput: ContentButtonConnectInput;
  ContentButtonConnection: ContentButtonConnection;
  ContentButtonCreateInput: ContentButtonCreateInput;
  ContentButtonCreateManyInlineInput: ContentButtonCreateManyInlineInput;
  ContentButtonCreateOneInlineInput: ContentButtonCreateOneInlineInput;
  ContentButtonEdge: ContentButtonEdge;
  ContentButtonManyWhereInput: ContentButtonManyWhereInput;
  ContentButtonUpdateInput: ContentButtonUpdateInput;
  ContentButtonUpdateManyInlineInput: ContentButtonUpdateManyInlineInput;
  ContentButtonUpdateManyInput: ContentButtonUpdateManyInput;
  ContentButtonUpdateManyWithNestedWhereInput: ContentButtonUpdateManyWithNestedWhereInput;
  ContentButtonUpdateOneInlineInput: ContentButtonUpdateOneInlineInput;
  ContentButtonUpdateWithNestedWhereUniqueInput: ContentButtonUpdateWithNestedWhereUniqueInput;
  ContentButtonUpsertInput: ContentButtonUpsertInput;
  ContentButtonUpsertWithNestedWhereUniqueInput: ContentButtonUpsertWithNestedWhereUniqueInput;
  ContentButtonWhereComparatorInput: ContentButtonWhereComparatorInput;
  ContentButtonWhereInput: ContentButtonWhereInput;
  ContentButtonWhereStageInput: ContentButtonWhereStageInput;
  ContentButtonWhereUniqueInput: ContentButtonWhereUniqueInput;
  ContentTag: ContentTag;
  ContentTagConnectInput: ContentTagConnectInput;
  ContentTagConnection: ContentTagConnection;
  ContentTagCreateInput: ContentTagCreateInput;
  ContentTagCreateManyInlineInput: ContentTagCreateManyInlineInput;
  ContentTagCreateOneInlineInput: ContentTagCreateOneInlineInput;
  ContentTagEdge: ContentTagEdge;
  ContentTagManyWhereInput: ContentTagManyWhereInput;
  ContentTagUpdateInput: ContentTagUpdateInput;
  ContentTagUpdateManyInlineInput: ContentTagUpdateManyInlineInput;
  ContentTagUpdateManyInput: ContentTagUpdateManyInput;
  ContentTagUpdateManyWithNestedWhereInput: ContentTagUpdateManyWithNestedWhereInput;
  ContentTagUpdateOneInlineInput: ContentTagUpdateOneInlineInput;
  ContentTagUpdateWithNestedWhereUniqueInput: ContentTagUpdateWithNestedWhereUniqueInput;
  ContentTagUpsertInput: ContentTagUpsertInput;
  ContentTagUpsertWithNestedWhereUniqueInput: ContentTagUpsertWithNestedWhereUniqueInput;
  ContentTagWhereComparatorInput: ContentTagWhereComparatorInput;
  ContentTagWhereInput: ContentTagWhereInput;
  ContentTagWhereStageInput: ContentTagWhereStageInput;
  ContentTagWhereUniqueInput: ContentTagWhereUniqueInput;
  CurrencyField: CurrencyField;
  CurrencyFieldConnectInput: CurrencyFieldConnectInput;
  CurrencyFieldConnection: CurrencyFieldConnection;
  CurrencyFieldCreateInput: CurrencyFieldCreateInput;
  CurrencyFieldCreateManyInlineInput: CurrencyFieldCreateManyInlineInput;
  CurrencyFieldCreateOneInlineInput: CurrencyFieldCreateOneInlineInput;
  CurrencyFieldCreateWithPositionInput: CurrencyFieldCreateWithPositionInput;
  CurrencyFieldEdge: CurrencyFieldEdge;
  CurrencyFieldManyWhereInput: CurrencyFieldManyWhereInput;
  CurrencyFieldParent: ResolversUnionTypes<ResolversParentTypes>['CurrencyFieldParent'];
  CurrencyFieldParentConnectInput: CurrencyFieldParentConnectInput;
  CurrencyFieldParentCreateInput: CurrencyFieldParentCreateInput;
  CurrencyFieldParentCreateManyInlineInput: CurrencyFieldParentCreateManyInlineInput;
  CurrencyFieldParentCreateOneInlineInput: CurrencyFieldParentCreateOneInlineInput;
  CurrencyFieldParentUpdateInput: CurrencyFieldParentUpdateInput;
  CurrencyFieldParentUpdateManyInlineInput: CurrencyFieldParentUpdateManyInlineInput;
  CurrencyFieldParentUpdateManyWithNestedWhereInput: CurrencyFieldParentUpdateManyWithNestedWhereInput;
  CurrencyFieldParentUpdateOneInlineInput: CurrencyFieldParentUpdateOneInlineInput;
  CurrencyFieldParentUpdateWithNestedWhereUniqueInput: CurrencyFieldParentUpdateWithNestedWhereUniqueInput;
  CurrencyFieldParentUpsertWithNestedWhereUniqueInput: CurrencyFieldParentUpsertWithNestedWhereUniqueInput;
  CurrencyFieldParentWhereInput: CurrencyFieldParentWhereInput;
  CurrencyFieldParentWhereUniqueInput: CurrencyFieldParentWhereUniqueInput;
  CurrencyFieldUpdateInput: CurrencyFieldUpdateInput;
  CurrencyFieldUpdateManyInlineInput: CurrencyFieldUpdateManyInlineInput;
  CurrencyFieldUpdateManyInput: CurrencyFieldUpdateManyInput;
  CurrencyFieldUpdateManyWithNestedWhereInput: CurrencyFieldUpdateManyWithNestedWhereInput;
  CurrencyFieldUpdateOneInlineInput: CurrencyFieldUpdateOneInlineInput;
  CurrencyFieldUpdateWithNestedWhereUniqueAndPositionInput: CurrencyFieldUpdateWithNestedWhereUniqueAndPositionInput;
  CurrencyFieldUpdateWithNestedWhereUniqueInput: CurrencyFieldUpdateWithNestedWhereUniqueInput;
  CurrencyFieldUpsertInput: CurrencyFieldUpsertInput;
  CurrencyFieldUpsertWithNestedWhereUniqueAndPositionInput: CurrencyFieldUpsertWithNestedWhereUniqueAndPositionInput;
  CurrencyFieldUpsertWithNestedWhereUniqueInput: CurrencyFieldUpsertWithNestedWhereUniqueInput;
  CurrencyFieldWhereInput: CurrencyFieldWhereInput;
  CurrencyFieldWhereUniqueInput: CurrencyFieldWhereUniqueInput;
  Date: Scalars['Date']['output'];
  DateField: DateField;
  DateFieldConnectInput: DateFieldConnectInput;
  DateFieldConnection: DateFieldConnection;
  DateFieldCreateInput: DateFieldCreateInput;
  DateFieldCreateManyInlineInput: DateFieldCreateManyInlineInput;
  DateFieldCreateOneInlineInput: DateFieldCreateOneInlineInput;
  DateFieldCreateWithPositionInput: DateFieldCreateWithPositionInput;
  DateFieldEdge: DateFieldEdge;
  DateFieldManyWhereInput: DateFieldManyWhereInput;
  DateFieldParent: ResolversUnionTypes<ResolversParentTypes>['DateFieldParent'];
  DateFieldParentConnectInput: DateFieldParentConnectInput;
  DateFieldParentCreateInput: DateFieldParentCreateInput;
  DateFieldParentCreateManyInlineInput: DateFieldParentCreateManyInlineInput;
  DateFieldParentCreateOneInlineInput: DateFieldParentCreateOneInlineInput;
  DateFieldParentUpdateInput: DateFieldParentUpdateInput;
  DateFieldParentUpdateManyInlineInput: DateFieldParentUpdateManyInlineInput;
  DateFieldParentUpdateManyWithNestedWhereInput: DateFieldParentUpdateManyWithNestedWhereInput;
  DateFieldParentUpdateOneInlineInput: DateFieldParentUpdateOneInlineInput;
  DateFieldParentUpdateWithNestedWhereUniqueInput: DateFieldParentUpdateWithNestedWhereUniqueInput;
  DateFieldParentUpsertWithNestedWhereUniqueInput: DateFieldParentUpsertWithNestedWhereUniqueInput;
  DateFieldParentWhereInput: DateFieldParentWhereInput;
  DateFieldParentWhereUniqueInput: DateFieldParentWhereUniqueInput;
  DateFieldUpdateInput: DateFieldUpdateInput;
  DateFieldUpdateManyInlineInput: DateFieldUpdateManyInlineInput;
  DateFieldUpdateManyInput: DateFieldUpdateManyInput;
  DateFieldUpdateManyWithNestedWhereInput: DateFieldUpdateManyWithNestedWhereInput;
  DateFieldUpdateOneInlineInput: DateFieldUpdateOneInlineInput;
  DateFieldUpdateWithNestedWhereUniqueAndPositionInput: DateFieldUpdateWithNestedWhereUniqueAndPositionInput;
  DateFieldUpdateWithNestedWhereUniqueInput: DateFieldUpdateWithNestedWhereUniqueInput;
  DateFieldUpsertInput: DateFieldUpsertInput;
  DateFieldUpsertWithNestedWhereUniqueAndPositionInput: DateFieldUpsertWithNestedWhereUniqueAndPositionInput;
  DateFieldUpsertWithNestedWhereUniqueInput: DateFieldUpsertWithNestedWhereUniqueInput;
  DateFieldWhereInput: DateFieldWhereInput;
  DateFieldWhereUniqueInput: DateFieldWhereUniqueInput;
  DateTime: Scalars['DateTime']['output'];
  DocsGroup: DocsGroup;
  DocsGroupConnectInput: DocsGroupConnectInput;
  DocsGroupConnection: DocsGroupConnection;
  DocsGroupCreateInput: DocsGroupCreateInput;
  DocsGroupCreateManyInlineInput: DocsGroupCreateManyInlineInput;
  DocsGroupCreateOneInlineInput: DocsGroupCreateOneInlineInput;
  DocsGroupEdge: DocsGroupEdge;
  DocsGroupManyWhereInput: DocsGroupManyWhereInput;
  DocsGroupSummaryRichText: Omit<DocsGroupSummaryRichText, 'references'> & { references: Array<ResolversParentTypes['DocsGroupSummaryRichTextEmbeddedTypes']> };
  DocsGroupSummaryRichTextEmbeddedTypes: ResolversUnionTypes<ResolversParentTypes>['DocsGroupSummaryRichTextEmbeddedTypes'];
  DocsGroupUpdateInput: DocsGroupUpdateInput;
  DocsGroupUpdateManyInlineInput: DocsGroupUpdateManyInlineInput;
  DocsGroupUpdateManyInput: DocsGroupUpdateManyInput;
  DocsGroupUpdateManyWithNestedWhereInput: DocsGroupUpdateManyWithNestedWhereInput;
  DocsGroupUpdateOneInlineInput: DocsGroupUpdateOneInlineInput;
  DocsGroupUpdateWithNestedWhereUniqueInput: DocsGroupUpdateWithNestedWhereUniqueInput;
  DocsGroupUpsertInput: DocsGroupUpsertInput;
  DocsGroupUpsertWithNestedWhereUniqueInput: DocsGroupUpsertWithNestedWhereUniqueInput;
  DocsGroupWhereComparatorInput: DocsGroupWhereComparatorInput;
  DocsGroupWhereInput: DocsGroupWhereInput;
  DocsGroupWhereStageInput: DocsGroupWhereStageInput;
  DocsGroupWhereUniqueInput: DocsGroupWhereUniqueInput;
  DocsPage: DocsPage;
  DocsPageBodyRichText: Omit<DocsPageBodyRichText, 'references'> & { references: Array<ResolversParentTypes['DocsPageBodyRichTextEmbeddedTypes']> };
  DocsPageBodyRichTextEmbeddedTypes: ResolversUnionTypes<ResolversParentTypes>['DocsPageBodyRichTextEmbeddedTypes'];
  DocsPageConnectInput: DocsPageConnectInput;
  DocsPageConnection: DocsPageConnection;
  DocsPageCreateInput: DocsPageCreateInput;
  DocsPageCreateManyInlineInput: DocsPageCreateManyInlineInput;
  DocsPageCreateOneInlineInput: DocsPageCreateOneInlineInput;
  DocsPageEdge: DocsPageEdge;
  DocsPageManyWhereInput: DocsPageManyWhereInput;
  DocsPageUpdateInput: DocsPageUpdateInput;
  DocsPageUpdateManyInlineInput: DocsPageUpdateManyInlineInput;
  DocsPageUpdateManyInput: DocsPageUpdateManyInput;
  DocsPageUpdateManyWithNestedWhereInput: DocsPageUpdateManyWithNestedWhereInput;
  DocsPageUpdateOneInlineInput: DocsPageUpdateOneInlineInput;
  DocsPageUpdateWithNestedWhereUniqueInput: DocsPageUpdateWithNestedWhereUniqueInput;
  DocsPageUpsertInput: DocsPageUpsertInput;
  DocsPageUpsertWithNestedWhereUniqueInput: DocsPageUpsertWithNestedWhereUniqueInput;
  DocsPageWhereComparatorInput: DocsPageWhereComparatorInput;
  DocsPageWhereInput: DocsPageWhereInput;
  DocsPageWhereStageInput: DocsPageWhereStageInput;
  DocsPageWhereUniqueInput: DocsPageWhereUniqueInput;
  Document: Document;
  DocumentConnectInput: DocumentConnectInput;
  DocumentConnection: DocumentConnection;
  DocumentCreateInput: DocumentCreateInput;
  DocumentCreateManyInlineInput: DocumentCreateManyInlineInput;
  DocumentCreateOneInlineInput: DocumentCreateOneInlineInput;
  DocumentEdge: DocumentEdge;
  DocumentGroup: DocumentGroup;
  DocumentGroupConnectInput: DocumentGroupConnectInput;
  DocumentGroupConnection: DocumentGroupConnection;
  DocumentGroupCreateInput: DocumentGroupCreateInput;
  DocumentGroupCreateManyInlineInput: DocumentGroupCreateManyInlineInput;
  DocumentGroupCreateOneInlineInput: DocumentGroupCreateOneInlineInput;
  DocumentGroupEdge: DocumentGroupEdge;
  DocumentGroupManyWhereInput: DocumentGroupManyWhereInput;
  DocumentGroupUpdateInput: DocumentGroupUpdateInput;
  DocumentGroupUpdateManyInlineInput: DocumentGroupUpdateManyInlineInput;
  DocumentGroupUpdateManyInput: DocumentGroupUpdateManyInput;
  DocumentGroupUpdateManyWithNestedWhereInput: DocumentGroupUpdateManyWithNestedWhereInput;
  DocumentGroupUpdateOneInlineInput: DocumentGroupUpdateOneInlineInput;
  DocumentGroupUpdateWithNestedWhereUniqueInput: DocumentGroupUpdateWithNestedWhereUniqueInput;
  DocumentGroupUpsertInput: DocumentGroupUpsertInput;
  DocumentGroupUpsertWithNestedWhereUniqueInput: DocumentGroupUpsertWithNestedWhereUniqueInput;
  DocumentGroupWhereComparatorInput: DocumentGroupWhereComparatorInput;
  DocumentGroupWhereInput: DocumentGroupWhereInput;
  DocumentGroupWhereStageInput: DocumentGroupWhereStageInput;
  DocumentGroupWhereUniqueInput: DocumentGroupWhereUniqueInput;
  DocumentManyWhereInput: DocumentManyWhereInput;
  DocumentOutputInput: DocumentOutputInput;
  DocumentTransformationInput: DocumentTransformationInput;
  DocumentUpdateInput: DocumentUpdateInput;
  DocumentUpdateManyInlineInput: DocumentUpdateManyInlineInput;
  DocumentUpdateManyInput: DocumentUpdateManyInput;
  DocumentUpdateManyWithNestedWhereInput: DocumentUpdateManyWithNestedWhereInput;
  DocumentUpdateOneInlineInput: DocumentUpdateOneInlineInput;
  DocumentUpdateWithNestedWhereUniqueInput: DocumentUpdateWithNestedWhereUniqueInput;
  DocumentUpsertInput: DocumentUpsertInput;
  DocumentUpsertWithNestedWhereUniqueInput: DocumentUpsertWithNestedWhereUniqueInput;
  DocumentVersion: DocumentVersion;
  DocumentWhereComparatorInput: DocumentWhereComparatorInput;
  DocumentWhereInput: DocumentWhereInput;
  DocumentWhereStageInput: DocumentWhereStageInput;
  DocumentWhereUniqueInput: DocumentWhereUniqueInput;
  Employee: Employee;
  EmployeeConnectInput: EmployeeConnectInput;
  EmployeeConnection: EmployeeConnection;
  EmployeeCreateInput: EmployeeCreateInput;
  EmployeeCreateManyInlineInput: EmployeeCreateManyInlineInput;
  EmployeeCreateOneInlineInput: EmployeeCreateOneInlineInput;
  EmployeeEdge: EmployeeEdge;
  EmployeeManyWhereInput: EmployeeManyWhereInput;
  EmployeeUpdateInput: EmployeeUpdateInput;
  EmployeeUpdateManyInlineInput: EmployeeUpdateManyInlineInput;
  EmployeeUpdateManyInput: EmployeeUpdateManyInput;
  EmployeeUpdateManyWithNestedWhereInput: EmployeeUpdateManyWithNestedWhereInput;
  EmployeeUpdateOneInlineInput: EmployeeUpdateOneInlineInput;
  EmployeeUpdateWithNestedWhereUniqueInput: EmployeeUpdateWithNestedWhereUniqueInput;
  EmployeeUpsertInput: EmployeeUpsertInput;
  EmployeeUpsertWithNestedWhereUniqueInput: EmployeeUpsertWithNestedWhereUniqueInput;
  EmployeeWhereComparatorInput: EmployeeWhereComparatorInput;
  EmployeeWhereInput: EmployeeWhereInput;
  EmployeeWhereStageInput: EmployeeWhereStageInput;
  EmployeeWhereUniqueInput: EmployeeWhereUniqueInput;
  Entity: ResolversInterfaceTypes<ResolversParentTypes>['Entity'];
  EntityWhereInput: EntityWhereInput;
  ExternalLink: ExternalLink;
  ExternalLinkConnectInput: ExternalLinkConnectInput;
  ExternalLinkConnection: ExternalLinkConnection;
  ExternalLinkCreateInput: ExternalLinkCreateInput;
  ExternalLinkCreateManyInlineInput: ExternalLinkCreateManyInlineInput;
  ExternalLinkCreateOneInlineInput: ExternalLinkCreateOneInlineInput;
  ExternalLinkCreateWithPositionInput: ExternalLinkCreateWithPositionInput;
  ExternalLinkEdge: ExternalLinkEdge;
  ExternalLinkManyWhereInput: ExternalLinkManyWhereInput;
  ExternalLinkParent: ResolversUnionTypes<ResolversParentTypes>['ExternalLinkParent'];
  ExternalLinkParentConnectInput: ExternalLinkParentConnectInput;
  ExternalLinkParentCreateInput: ExternalLinkParentCreateInput;
  ExternalLinkParentCreateManyInlineInput: ExternalLinkParentCreateManyInlineInput;
  ExternalLinkParentCreateOneInlineInput: ExternalLinkParentCreateOneInlineInput;
  ExternalLinkParentUpdateInput: ExternalLinkParentUpdateInput;
  ExternalLinkParentUpdateManyInlineInput: ExternalLinkParentUpdateManyInlineInput;
  ExternalLinkParentUpdateManyWithNestedWhereInput: ExternalLinkParentUpdateManyWithNestedWhereInput;
  ExternalLinkParentUpdateOneInlineInput: ExternalLinkParentUpdateOneInlineInput;
  ExternalLinkParentUpdateWithNestedWhereUniqueInput: ExternalLinkParentUpdateWithNestedWhereUniqueInput;
  ExternalLinkParentUpsertWithNestedWhereUniqueInput: ExternalLinkParentUpsertWithNestedWhereUniqueInput;
  ExternalLinkParentWhereInput: ExternalLinkParentWhereInput;
  ExternalLinkParentWhereUniqueInput: ExternalLinkParentWhereUniqueInput;
  ExternalLinkUpdateInput: ExternalLinkUpdateInput;
  ExternalLinkUpdateManyInlineInput: ExternalLinkUpdateManyInlineInput;
  ExternalLinkUpdateManyInput: ExternalLinkUpdateManyInput;
  ExternalLinkUpdateManyWithNestedWhereInput: ExternalLinkUpdateManyWithNestedWhereInput;
  ExternalLinkUpdateOneInlineInput: ExternalLinkUpdateOneInlineInput;
  ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput: ExternalLinkUpdateWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpdateWithNestedWhereUniqueInput: ExternalLinkUpdateWithNestedWhereUniqueInput;
  ExternalLinkUpsertInput: ExternalLinkUpsertInput;
  ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput: ExternalLinkUpsertWithNestedWhereUniqueAndPositionInput;
  ExternalLinkUpsertWithNestedWhereUniqueInput: ExternalLinkUpsertWithNestedWhereUniqueInput;
  ExternalLinkWhereInput: ExternalLinkWhereInput;
  ExternalLinkWhereUniqueInput: ExternalLinkWhereUniqueInput;
  Feature: Feature;
  FeatureConnectInput: FeatureConnectInput;
  FeatureConnection: FeatureConnection;
  FeatureCreateInput: FeatureCreateInput;
  FeatureCreateManyInlineInput: FeatureCreateManyInlineInput;
  FeatureCreateOneInlineInput: FeatureCreateOneInlineInput;
  FeatureCreateWithPositionInput: FeatureCreateWithPositionInput;
  FeatureEdge: FeatureEdge;
  FeatureManyWhereInput: FeatureManyWhereInput;
  FeatureParent: ResolversUnionTypes<ResolversParentTypes>['FeatureParent'];
  FeatureParentConnectInput: FeatureParentConnectInput;
  FeatureParentCreateInput: FeatureParentCreateInput;
  FeatureParentCreateManyInlineInput: FeatureParentCreateManyInlineInput;
  FeatureParentCreateOneInlineInput: FeatureParentCreateOneInlineInput;
  FeatureParentUpdateInput: FeatureParentUpdateInput;
  FeatureParentUpdateManyInlineInput: FeatureParentUpdateManyInlineInput;
  FeatureParentUpdateManyWithNestedWhereInput: FeatureParentUpdateManyWithNestedWhereInput;
  FeatureParentUpdateOneInlineInput: FeatureParentUpdateOneInlineInput;
  FeatureParentUpdateWithNestedWhereUniqueInput: FeatureParentUpdateWithNestedWhereUniqueInput;
  FeatureParentUpsertWithNestedWhereUniqueInput: FeatureParentUpsertWithNestedWhereUniqueInput;
  FeatureParentWhereInput: FeatureParentWhereInput;
  FeatureParentWhereUniqueInput: FeatureParentWhereUniqueInput;
  FeatureUpdateInput: FeatureUpdateInput;
  FeatureUpdateManyInlineInput: FeatureUpdateManyInlineInput;
  FeatureUpdateManyInput: FeatureUpdateManyInput;
  FeatureUpdateManyWithNestedWhereInput: FeatureUpdateManyWithNestedWhereInput;
  FeatureUpdateOneInlineInput: FeatureUpdateOneInlineInput;
  FeatureUpdateWithNestedWhereUniqueAndPositionInput: FeatureUpdateWithNestedWhereUniqueAndPositionInput;
  FeatureUpdateWithNestedWhereUniqueInput: FeatureUpdateWithNestedWhereUniqueInput;
  FeatureUpsertInput: FeatureUpsertInput;
  FeatureUpsertWithNestedWhereUniqueAndPositionInput: FeatureUpsertWithNestedWhereUniqueAndPositionInput;
  FeatureUpsertWithNestedWhereUniqueInput: FeatureUpsertWithNestedWhereUniqueInput;
  FeatureWhereInput: FeatureWhereInput;
  FeatureWhereUniqueInput: FeatureWhereUniqueInput;
  Float: Scalars['Float']['output'];
  FooterGroup: FooterGroup;
  FooterGroupConnectInput: FooterGroupConnectInput;
  FooterGroupConnection: FooterGroupConnection;
  FooterGroupCreateInput: FooterGroupCreateInput;
  FooterGroupCreateManyInlineInput: FooterGroupCreateManyInlineInput;
  FooterGroupCreateOneInlineInput: FooterGroupCreateOneInlineInput;
  FooterGroupEdge: FooterGroupEdge;
  FooterGroupManyWhereInput: FooterGroupManyWhereInput;
  FooterGroupUpdateInput: FooterGroupUpdateInput;
  FooterGroupUpdateManyInlineInput: FooterGroupUpdateManyInlineInput;
  FooterGroupUpdateManyInput: FooterGroupUpdateManyInput;
  FooterGroupUpdateManyWithNestedWhereInput: FooterGroupUpdateManyWithNestedWhereInput;
  FooterGroupUpdateOneInlineInput: FooterGroupUpdateOneInlineInput;
  FooterGroupUpdateWithNestedWhereUniqueInput: FooterGroupUpdateWithNestedWhereUniqueInput;
  FooterGroupUpsertInput: FooterGroupUpsertInput;
  FooterGroupUpsertWithNestedWhereUniqueInput: FooterGroupUpsertWithNestedWhereUniqueInput;
  FooterGroupWhereComparatorInput: FooterGroupWhereComparatorInput;
  FooterGroupWhereInput: FooterGroupWhereInput;
  FooterGroupWhereStageInput: FooterGroupWhereStageInput;
  FooterGroupWhereUniqueInput: FooterGroupWhereUniqueInput;
  Form: Omit<Form, 'fields'> & { fields: Array<ResolversParentTypes['FormfieldsUnion']> };
  FormButton: FormButton;
  FormButtonConnectInput: FormButtonConnectInput;
  FormButtonConnection: FormButtonConnection;
  FormButtonCreateInput: FormButtonCreateInput;
  FormButtonCreateManyInlineInput: FormButtonCreateManyInlineInput;
  FormButtonCreateOneInlineInput: FormButtonCreateOneInlineInput;
  FormButtonCreateWithPositionInput: FormButtonCreateWithPositionInput;
  FormButtonEdge: FormButtonEdge;
  FormButtonManyWhereInput: FormButtonManyWhereInput;
  FormButtonParent: ResolversUnionTypes<ResolversParentTypes>['FormButtonParent'];
  FormButtonParentConnectInput: FormButtonParentConnectInput;
  FormButtonParentCreateInput: FormButtonParentCreateInput;
  FormButtonParentCreateManyInlineInput: FormButtonParentCreateManyInlineInput;
  FormButtonParentCreateOneInlineInput: FormButtonParentCreateOneInlineInput;
  FormButtonParentUpdateInput: FormButtonParentUpdateInput;
  FormButtonParentUpdateManyInlineInput: FormButtonParentUpdateManyInlineInput;
  FormButtonParentUpdateManyWithNestedWhereInput: FormButtonParentUpdateManyWithNestedWhereInput;
  FormButtonParentUpdateOneInlineInput: FormButtonParentUpdateOneInlineInput;
  FormButtonParentUpdateWithNestedWhereUniqueInput: FormButtonParentUpdateWithNestedWhereUniqueInput;
  FormButtonParentUpsertWithNestedWhereUniqueInput: FormButtonParentUpsertWithNestedWhereUniqueInput;
  FormButtonParentWhereInput: FormButtonParentWhereInput;
  FormButtonParentWhereUniqueInput: FormButtonParentWhereUniqueInput;
  FormButtonUpdateInput: FormButtonUpdateInput;
  FormButtonUpdateManyInlineInput: FormButtonUpdateManyInlineInput;
  FormButtonUpdateManyInput: FormButtonUpdateManyInput;
  FormButtonUpdateManyWithNestedWhereInput: FormButtonUpdateManyWithNestedWhereInput;
  FormButtonUpdateOneInlineInput: FormButtonUpdateOneInlineInput;
  FormButtonUpdateWithNestedWhereUniqueAndPositionInput: FormButtonUpdateWithNestedWhereUniqueAndPositionInput;
  FormButtonUpdateWithNestedWhereUniqueInput: FormButtonUpdateWithNestedWhereUniqueInput;
  FormButtonUpsertInput: FormButtonUpsertInput;
  FormButtonUpsertWithNestedWhereUniqueAndPositionInput: FormButtonUpsertWithNestedWhereUniqueAndPositionInput;
  FormButtonUpsertWithNestedWhereUniqueInput: FormButtonUpsertWithNestedWhereUniqueInput;
  FormButtonWhereInput: FormButtonWhereInput;
  FormButtonWhereUniqueInput: FormButtonWhereUniqueInput;
  FormConnectInput: FormConnectInput;
  FormConnection: FormConnection;
  FormCreateInput: FormCreateInput;
  FormCreateManyInlineInput: FormCreateManyInlineInput;
  FormCreateOneInlineInput: FormCreateOneInlineInput;
  FormEdge: FormEdge;
  FormGroup: FormGroup;
  FormGroupConnectInput: FormGroupConnectInput;
  FormGroupConnection: FormGroupConnection;
  FormGroupCreateInput: FormGroupCreateInput;
  FormGroupCreateManyInlineInput: FormGroupCreateManyInlineInput;
  FormGroupCreateOneInlineInput: FormGroupCreateOneInlineInput;
  FormGroupCreateWithPositionInput: FormGroupCreateWithPositionInput;
  FormGroupEdge: FormGroupEdge;
  FormGroupManyWhereInput: FormGroupManyWhereInput;
  FormGroupParent: ResolversUnionTypes<ResolversParentTypes>['FormGroupParent'];
  FormGroupParentConnectInput: FormGroupParentConnectInput;
  FormGroupParentCreateInput: FormGroupParentCreateInput;
  FormGroupParentCreateManyInlineInput: FormGroupParentCreateManyInlineInput;
  FormGroupParentCreateOneInlineInput: FormGroupParentCreateOneInlineInput;
  FormGroupParentUpdateInput: FormGroupParentUpdateInput;
  FormGroupParentUpdateManyInlineInput: FormGroupParentUpdateManyInlineInput;
  FormGroupParentUpdateManyWithNestedWhereInput: FormGroupParentUpdateManyWithNestedWhereInput;
  FormGroupParentUpdateOneInlineInput: FormGroupParentUpdateOneInlineInput;
  FormGroupParentUpdateWithNestedWhereUniqueInput: FormGroupParentUpdateWithNestedWhereUniqueInput;
  FormGroupParentUpsertWithNestedWhereUniqueInput: FormGroupParentUpsertWithNestedWhereUniqueInput;
  FormGroupParentWhereInput: FormGroupParentWhereInput;
  FormGroupParentWhereUniqueInput: FormGroupParentWhereUniqueInput;
  FormGroupUpdateInput: FormGroupUpdateInput;
  FormGroupUpdateManyInlineInput: FormGroupUpdateManyInlineInput;
  FormGroupUpdateManyInput: FormGroupUpdateManyInput;
  FormGroupUpdateManyWithNestedWhereInput: FormGroupUpdateManyWithNestedWhereInput;
  FormGroupUpdateOneInlineInput: FormGroupUpdateOneInlineInput;
  FormGroupUpdateWithNestedWhereUniqueAndPositionInput: FormGroupUpdateWithNestedWhereUniqueAndPositionInput;
  FormGroupUpdateWithNestedWhereUniqueInput: FormGroupUpdateWithNestedWhereUniqueInput;
  FormGroupUpsertInput: FormGroupUpsertInput;
  FormGroupUpsertWithNestedWhereUniqueAndPositionInput: FormGroupUpsertWithNestedWhereUniqueAndPositionInput;
  FormGroupUpsertWithNestedWhereUniqueInput: FormGroupUpsertWithNestedWhereUniqueInput;
  FormGroupWhereInput: FormGroupWhereInput;
  FormGroupWhereUniqueInput: FormGroupWhereUniqueInput;
  FormManyWhereInput: FormManyWhereInput;
  FormUpdateInput: FormUpdateInput;
  FormUpdateManyInlineInput: FormUpdateManyInlineInput;
  FormUpdateManyInput: FormUpdateManyInput;
  FormUpdateManyWithNestedWhereInput: FormUpdateManyWithNestedWhereInput;
  FormUpdateOneInlineInput: FormUpdateOneInlineInput;
  FormUpdateWithNestedWhereUniqueInput: FormUpdateWithNestedWhereUniqueInput;
  FormUpsertInput: FormUpsertInput;
  FormUpsertWithNestedWhereUniqueInput: FormUpsertWithNestedWhereUniqueInput;
  FormWhereComparatorInput: FormWhereComparatorInput;
  FormWhereInput: FormWhereInput;
  FormWhereStageInput: FormWhereStageInput;
  FormWhereUniqueInput: FormWhereUniqueInput;
  FormfieldsUnion: ResolversUnionTypes<ResolversParentTypes>['FormfieldsUnion'];
  FormfieldsUnionConnectInput: FormfieldsUnionConnectInput;
  FormfieldsUnionCreateInput: FormfieldsUnionCreateInput;
  FormfieldsUnionCreateManyInlineInput: FormfieldsUnionCreateManyInlineInput;
  FormfieldsUnionCreateOneInlineInput: FormfieldsUnionCreateOneInlineInput;
  FormfieldsUnionCreateWithPositionInput: FormfieldsUnionCreateWithPositionInput;
  FormfieldsUnionUpdateInput: FormfieldsUnionUpdateInput;
  FormfieldsUnionUpdateManyInlineInput: FormfieldsUnionUpdateManyInlineInput;
  FormfieldsUnionUpdateManyWithNestedWhereInput: FormfieldsUnionUpdateManyWithNestedWhereInput;
  FormfieldsUnionUpdateOneInlineInput: FormfieldsUnionUpdateOneInlineInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpdateWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpdateWithNestedWhereUniqueInput: FormfieldsUnionUpdateWithNestedWhereUniqueInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput: FormfieldsUnionUpsertWithNestedWhereUniqueAndPositionInput;
  FormfieldsUnionUpsertWithNestedWhereUniqueInput: FormfieldsUnionUpsertWithNestedWhereUniqueInput;
  FormfieldsUnionWhereInput: FormfieldsUnionWhereInput;
  FormfieldsUnionWhereUniqueInput: FormfieldsUnionWhereUniqueInput;
  HeaderGroup: HeaderGroup;
  HeaderGroupConnectInput: HeaderGroupConnectInput;
  HeaderGroupConnection: HeaderGroupConnection;
  HeaderGroupCreateInput: HeaderGroupCreateInput;
  HeaderGroupCreateManyInlineInput: HeaderGroupCreateManyInlineInput;
  HeaderGroupCreateOneInlineInput: HeaderGroupCreateOneInlineInput;
  HeaderGroupEdge: HeaderGroupEdge;
  HeaderGroupManyWhereInput: HeaderGroupManyWhereInput;
  HeaderGroupUpdateInput: HeaderGroupUpdateInput;
  HeaderGroupUpdateManyInlineInput: HeaderGroupUpdateManyInlineInput;
  HeaderGroupUpdateManyInput: HeaderGroupUpdateManyInput;
  HeaderGroupUpdateManyWithNestedWhereInput: HeaderGroupUpdateManyWithNestedWhereInput;
  HeaderGroupUpdateOneInlineInput: HeaderGroupUpdateOneInlineInput;
  HeaderGroupUpdateWithNestedWhereUniqueInput: HeaderGroupUpdateWithNestedWhereUniqueInput;
  HeaderGroupUpsertInput: HeaderGroupUpsertInput;
  HeaderGroupUpsertWithNestedWhereUniqueInput: HeaderGroupUpsertWithNestedWhereUniqueInput;
  HeaderGroupWhereComparatorInput: HeaderGroupWhereComparatorInput;
  HeaderGroupWhereInput: HeaderGroupWhereInput;
  HeaderGroupWhereStageInput: HeaderGroupWhereStageInput;
  HeaderGroupWhereUniqueInput: HeaderGroupWhereUniqueInput;
  Hex: Scalars['Hex']['output'];
  HomePage: HomePage;
  HomePageBlock: HomePageBlock;
  HomePageBlockConnectInput: HomePageBlockConnectInput;
  HomePageBlockConnection: HomePageBlockConnection;
  HomePageBlockCreateInput: HomePageBlockCreateInput;
  HomePageBlockCreateManyInlineInput: HomePageBlockCreateManyInlineInput;
  HomePageBlockCreateOneInlineInput: HomePageBlockCreateOneInlineInput;
  HomePageBlockCreateWithPositionInput: HomePageBlockCreateWithPositionInput;
  HomePageBlockEdge: HomePageBlockEdge;
  HomePageBlockManyWhereInput: HomePageBlockManyWhereInput;
  HomePageBlockParent: ResolversUnionTypes<ResolversParentTypes>['HomePageBlockParent'];
  HomePageBlockParentConnectInput: HomePageBlockParentConnectInput;
  HomePageBlockParentCreateInput: HomePageBlockParentCreateInput;
  HomePageBlockParentCreateManyInlineInput: HomePageBlockParentCreateManyInlineInput;
  HomePageBlockParentCreateOneInlineInput: HomePageBlockParentCreateOneInlineInput;
  HomePageBlockParentUpdateInput: HomePageBlockParentUpdateInput;
  HomePageBlockParentUpdateManyInlineInput: HomePageBlockParentUpdateManyInlineInput;
  HomePageBlockParentUpdateManyWithNestedWhereInput: HomePageBlockParentUpdateManyWithNestedWhereInput;
  HomePageBlockParentUpdateOneInlineInput: HomePageBlockParentUpdateOneInlineInput;
  HomePageBlockParentUpdateWithNestedWhereUniqueInput: HomePageBlockParentUpdateWithNestedWhereUniqueInput;
  HomePageBlockParentUpsertWithNestedWhereUniqueInput: HomePageBlockParentUpsertWithNestedWhereUniqueInput;
  HomePageBlockParentWhereInput: HomePageBlockParentWhereInput;
  HomePageBlockParentWhereUniqueInput: HomePageBlockParentWhereUniqueInput;
  HomePageBlockUpdateInput: HomePageBlockUpdateInput;
  HomePageBlockUpdateManyInlineInput: HomePageBlockUpdateManyInlineInput;
  HomePageBlockUpdateManyInput: HomePageBlockUpdateManyInput;
  HomePageBlockUpdateManyWithNestedWhereInput: HomePageBlockUpdateManyWithNestedWhereInput;
  HomePageBlockUpdateOneInlineInput: HomePageBlockUpdateOneInlineInput;
  HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput: HomePageBlockUpdateWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpdateWithNestedWhereUniqueInput: HomePageBlockUpdateWithNestedWhereUniqueInput;
  HomePageBlockUpsertInput: HomePageBlockUpsertInput;
  HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput: HomePageBlockUpsertWithNestedWhereUniqueAndPositionInput;
  HomePageBlockUpsertWithNestedWhereUniqueInput: HomePageBlockUpsertWithNestedWhereUniqueInput;
  HomePageBlockWhereInput: HomePageBlockWhereInput;
  HomePageBlockWhereUniqueInput: HomePageBlockWhereUniqueInput;
  HomePageConnectInput: HomePageConnectInput;
  HomePageConnection: HomePageConnection;
  HomePageCreateInput: HomePageCreateInput;
  HomePageCreateManyInlineInput: HomePageCreateManyInlineInput;
  HomePageCreateOneInlineInput: HomePageCreateOneInlineInput;
  HomePageEdge: HomePageEdge;
  HomePageManyWhereInput: HomePageManyWhereInput;
  HomePageUpdateInput: HomePageUpdateInput;
  HomePageUpdateManyInlineInput: HomePageUpdateManyInlineInput;
  HomePageUpdateManyInput: HomePageUpdateManyInput;
  HomePageUpdateManyWithNestedWhereInput: HomePageUpdateManyWithNestedWhereInput;
  HomePageUpdateOneInlineInput: HomePageUpdateOneInlineInput;
  HomePageUpdateWithNestedWhereUniqueInput: HomePageUpdateWithNestedWhereUniqueInput;
  HomePageUpsertInput: HomePageUpsertInput;
  HomePageUpsertWithNestedWhereUniqueInput: HomePageUpsertWithNestedWhereUniqueInput;
  HomePageWhereComparatorInput: HomePageWhereComparatorInput;
  HomePageWhereInput: HomePageWhereInput;
  HomePageWhereStageInput: HomePageWhereStageInput;
  HomePageWhereUniqueInput: HomePageWhereUniqueInput;
  ID: Scalars['ID']['output'];
  ImageResizeInput: ImageResizeInput;
  ImageTransformationInput: ImageTransformationInput;
  Int: Scalars['Int']['output'];
  Json: Scalars['Json']['output'];
  Location: Location;
  LocationInput: LocationInput;
  Long: Scalars['Long']['output'];
  Mutation: {};
  Node: ResolversInterfaceTypes<ResolversParentTypes>['Node'];
  OfficeLocation: OfficeLocation;
  OfficeLocationConnectInput: OfficeLocationConnectInput;
  OfficeLocationConnection: OfficeLocationConnection;
  OfficeLocationCreateInput: OfficeLocationCreateInput;
  OfficeLocationCreateManyInlineInput: OfficeLocationCreateManyInlineInput;
  OfficeLocationCreateOneInlineInput: OfficeLocationCreateOneInlineInput;
  OfficeLocationEdge: OfficeLocationEdge;
  OfficeLocationManyWhereInput: OfficeLocationManyWhereInput;
  OfficeLocationUpdateInput: OfficeLocationUpdateInput;
  OfficeLocationUpdateManyInlineInput: OfficeLocationUpdateManyInlineInput;
  OfficeLocationUpdateManyInput: OfficeLocationUpdateManyInput;
  OfficeLocationUpdateManyWithNestedWhereInput: OfficeLocationUpdateManyWithNestedWhereInput;
  OfficeLocationUpdateOneInlineInput: OfficeLocationUpdateOneInlineInput;
  OfficeLocationUpdateWithNestedWhereUniqueInput: OfficeLocationUpdateWithNestedWhereUniqueInput;
  OfficeLocationUpsertInput: OfficeLocationUpsertInput;
  OfficeLocationUpsertWithNestedWhereUniqueInput: OfficeLocationUpsertWithNestedWhereUniqueInput;
  OfficeLocationWhereComparatorInput: OfficeLocationWhereComparatorInput;
  OfficeLocationWhereInput: OfficeLocationWhereInput;
  OfficeLocationWhereStageInput: OfficeLocationWhereStageInput;
  OfficeLocationWhereUniqueInput: OfficeLocationWhereUniqueInput;
  Page: Page;
  PageConnectInput: PageConnectInput;
  PageConnection: PageConnection;
  PageContent: PageContent;
  PageContentConnectInput: PageContentConnectInput;
  PageContentConnection: PageContentConnection;
  PageContentCreateInput: PageContentCreateInput;
  PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
  PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
  PageContentEdge: PageContentEdge;
  PageContentManyWhereInput: PageContentManyWhereInput;
  PageContentUpdateInput: PageContentUpdateInput;
  PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
  PageContentUpdateManyInput: PageContentUpdateManyInput;
  PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
  PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
  PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
  PageContentUpsertInput: PageContentUpsertInput;
  PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
  PageContentWhereComparatorInput: PageContentWhereComparatorInput;
  PageContentWhereInput: PageContentWhereInput;
  PageContentWhereStageInput: PageContentWhereStageInput;
  PageContentWhereUniqueInput: PageContentWhereUniqueInput;
  PageCreateInput: PageCreateInput;
  PageCreateManyInlineInput: PageCreateManyInlineInput;
  PageCreateOneInlineInput: PageCreateOneInlineInput;
  PageEdge: PageEdge;
  PageInfo: PageInfo;
  PageManyWhereInput: PageManyWhereInput;
  PageUpdateInput: PageUpdateInput;
  PageUpdateManyInlineInput: PageUpdateManyInlineInput;
  PageUpdateManyInput: PageUpdateManyInput;
  PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
  PageUpdateOneInlineInput: PageUpdateOneInlineInput;
  PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
  PageUpsertInput: PageUpsertInput;
  PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
  PageWhereComparatorInput: PageWhereComparatorInput;
  PageWhereInput: PageWhereInput;
  PageWhereStageInput: PageWhereStageInput;
  PageWhereUniqueInput: PageWhereUniqueInput;
  PublishLocaleInput: PublishLocaleInput;
  Query: {};
  RGBA: Rgba;
  RGBAHue: Scalars['RGBAHue']['output'];
  RGBAInput: RgbaInput;
  RGBATransparency: Scalars['RGBATransparency']['output'];
  RemoteSelectField: RemoteSelectField;
  RemoteSelectFieldConnectInput: RemoteSelectFieldConnectInput;
  RemoteSelectFieldConnection: RemoteSelectFieldConnection;
  RemoteSelectFieldCreateInput: RemoteSelectFieldCreateInput;
  RemoteSelectFieldCreateManyInlineInput: RemoteSelectFieldCreateManyInlineInput;
  RemoteSelectFieldCreateOneInlineInput: RemoteSelectFieldCreateOneInlineInput;
  RemoteSelectFieldCreateWithPositionInput: RemoteSelectFieldCreateWithPositionInput;
  RemoteSelectFieldEdge: RemoteSelectFieldEdge;
  RemoteSelectFieldManyWhereInput: RemoteSelectFieldManyWhereInput;
  RemoteSelectFieldParent: ResolversUnionTypes<ResolversParentTypes>['RemoteSelectFieldParent'];
  RemoteSelectFieldParentConnectInput: RemoteSelectFieldParentConnectInput;
  RemoteSelectFieldParentCreateInput: RemoteSelectFieldParentCreateInput;
  RemoteSelectFieldParentCreateManyInlineInput: RemoteSelectFieldParentCreateManyInlineInput;
  RemoteSelectFieldParentCreateOneInlineInput: RemoteSelectFieldParentCreateOneInlineInput;
  RemoteSelectFieldParentUpdateInput: RemoteSelectFieldParentUpdateInput;
  RemoteSelectFieldParentUpdateManyInlineInput: RemoteSelectFieldParentUpdateManyInlineInput;
  RemoteSelectFieldParentUpdateManyWithNestedWhereInput: RemoteSelectFieldParentUpdateManyWithNestedWhereInput;
  RemoteSelectFieldParentUpdateOneInlineInput: RemoteSelectFieldParentUpdateOneInlineInput;
  RemoteSelectFieldParentUpdateWithNestedWhereUniqueInput: RemoteSelectFieldParentUpdateWithNestedWhereUniqueInput;
  RemoteSelectFieldParentUpsertWithNestedWhereUniqueInput: RemoteSelectFieldParentUpsertWithNestedWhereUniqueInput;
  RemoteSelectFieldParentWhereInput: RemoteSelectFieldParentWhereInput;
  RemoteSelectFieldParentWhereUniqueInput: RemoteSelectFieldParentWhereUniqueInput;
  RemoteSelectFieldUpdateInput: RemoteSelectFieldUpdateInput;
  RemoteSelectFieldUpdateManyInlineInput: RemoteSelectFieldUpdateManyInlineInput;
  RemoteSelectFieldUpdateManyInput: RemoteSelectFieldUpdateManyInput;
  RemoteSelectFieldUpdateManyWithNestedWhereInput: RemoteSelectFieldUpdateManyWithNestedWhereInput;
  RemoteSelectFieldUpdateOneInlineInput: RemoteSelectFieldUpdateOneInlineInput;
  RemoteSelectFieldUpdateWithNestedWhereUniqueAndPositionInput: RemoteSelectFieldUpdateWithNestedWhereUniqueAndPositionInput;
  RemoteSelectFieldUpdateWithNestedWhereUniqueInput: RemoteSelectFieldUpdateWithNestedWhereUniqueInput;
  RemoteSelectFieldUpsertInput: RemoteSelectFieldUpsertInput;
  RemoteSelectFieldUpsertWithNestedWhereUniqueAndPositionInput: RemoteSelectFieldUpsertWithNestedWhereUniqueAndPositionInput;
  RemoteSelectFieldUpsertWithNestedWhereUniqueInput: RemoteSelectFieldUpsertWithNestedWhereUniqueInput;
  RemoteSelectFieldWhereInput: RemoteSelectFieldWhereInput;
  RemoteSelectFieldWhereUniqueInput: RemoteSelectFieldWhereUniqueInput;
  RichText: RichText;
  RichTextAST: Scalars['RichTextAST']['output'];
  ScheduledOperation: Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<ResolversParentTypes['ScheduledOperationAffectedDocument']> };
  ScheduledOperationAffectedDocument: ResolversUnionTypes<ResolversParentTypes>['ScheduledOperationAffectedDocument'];
  ScheduledOperationConnectInput: ScheduledOperationConnectInput;
  ScheduledOperationConnection: ScheduledOperationConnection;
  ScheduledOperationCreateManyInlineInput: ScheduledOperationCreateManyInlineInput;
  ScheduledOperationCreateOneInlineInput: ScheduledOperationCreateOneInlineInput;
  ScheduledOperationEdge: ScheduledOperationEdge;
  ScheduledOperationManyWhereInput: ScheduledOperationManyWhereInput;
  ScheduledOperationUpdateManyInlineInput: ScheduledOperationUpdateManyInlineInput;
  ScheduledOperationUpdateOneInlineInput: ScheduledOperationUpdateOneInlineInput;
  ScheduledOperationWhereInput: ScheduledOperationWhereInput;
  ScheduledOperationWhereUniqueInput: ScheduledOperationWhereUniqueInput;
  ScheduledRelease: ScheduledRelease;
  ScheduledReleaseConnectInput: ScheduledReleaseConnectInput;
  ScheduledReleaseConnection: ScheduledReleaseConnection;
  ScheduledReleaseCreateInput: ScheduledReleaseCreateInput;
  ScheduledReleaseCreateManyInlineInput: ScheduledReleaseCreateManyInlineInput;
  ScheduledReleaseCreateOneInlineInput: ScheduledReleaseCreateOneInlineInput;
  ScheduledReleaseEdge: ScheduledReleaseEdge;
  ScheduledReleaseManyWhereInput: ScheduledReleaseManyWhereInput;
  ScheduledReleaseUpdateInput: ScheduledReleaseUpdateInput;
  ScheduledReleaseUpdateManyInlineInput: ScheduledReleaseUpdateManyInlineInput;
  ScheduledReleaseUpdateManyInput: ScheduledReleaseUpdateManyInput;
  ScheduledReleaseUpdateManyWithNestedWhereInput: ScheduledReleaseUpdateManyWithNestedWhereInput;
  ScheduledReleaseUpdateOneInlineInput: ScheduledReleaseUpdateOneInlineInput;
  ScheduledReleaseUpdateWithNestedWhereUniqueInput: ScheduledReleaseUpdateWithNestedWhereUniqueInput;
  ScheduledReleaseUpsertInput: ScheduledReleaseUpsertInput;
  ScheduledReleaseUpsertWithNestedWhereUniqueInput: ScheduledReleaseUpsertWithNestedWhereUniqueInput;
  ScheduledReleaseWhereInput: ScheduledReleaseWhereInput;
  ScheduledReleaseWhereUniqueInput: ScheduledReleaseWhereUniqueInput;
  SelectField: SelectField;
  SelectFieldConnectInput: SelectFieldConnectInput;
  SelectFieldConnection: SelectFieldConnection;
  SelectFieldCreateInput: SelectFieldCreateInput;
  SelectFieldCreateManyInlineInput: SelectFieldCreateManyInlineInput;
  SelectFieldCreateOneInlineInput: SelectFieldCreateOneInlineInput;
  SelectFieldCreateWithPositionInput: SelectFieldCreateWithPositionInput;
  SelectFieldEdge: SelectFieldEdge;
  SelectFieldManyWhereInput: SelectFieldManyWhereInput;
  SelectFieldParent: ResolversUnionTypes<ResolversParentTypes>['SelectFieldParent'];
  SelectFieldParentConnectInput: SelectFieldParentConnectInput;
  SelectFieldParentCreateInput: SelectFieldParentCreateInput;
  SelectFieldParentCreateManyInlineInput: SelectFieldParentCreateManyInlineInput;
  SelectFieldParentCreateOneInlineInput: SelectFieldParentCreateOneInlineInput;
  SelectFieldParentUpdateInput: SelectFieldParentUpdateInput;
  SelectFieldParentUpdateManyInlineInput: SelectFieldParentUpdateManyInlineInput;
  SelectFieldParentUpdateManyWithNestedWhereInput: SelectFieldParentUpdateManyWithNestedWhereInput;
  SelectFieldParentUpdateOneInlineInput: SelectFieldParentUpdateOneInlineInput;
  SelectFieldParentUpdateWithNestedWhereUniqueInput: SelectFieldParentUpdateWithNestedWhereUniqueInput;
  SelectFieldParentUpsertWithNestedWhereUniqueInput: SelectFieldParentUpsertWithNestedWhereUniqueInput;
  SelectFieldParentWhereInput: SelectFieldParentWhereInput;
  SelectFieldParentWhereUniqueInput: SelectFieldParentWhereUniqueInput;
  SelectFieldUpdateInput: SelectFieldUpdateInput;
  SelectFieldUpdateManyInlineInput: SelectFieldUpdateManyInlineInput;
  SelectFieldUpdateManyInput: SelectFieldUpdateManyInput;
  SelectFieldUpdateManyWithNestedWhereInput: SelectFieldUpdateManyWithNestedWhereInput;
  SelectFieldUpdateOneInlineInput: SelectFieldUpdateOneInlineInput;
  SelectFieldUpdateWithNestedWhereUniqueAndPositionInput: SelectFieldUpdateWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpdateWithNestedWhereUniqueInput: SelectFieldUpdateWithNestedWhereUniqueInput;
  SelectFieldUpsertInput: SelectFieldUpsertInput;
  SelectFieldUpsertWithNestedWhereUniqueAndPositionInput: SelectFieldUpsertWithNestedWhereUniqueAndPositionInput;
  SelectFieldUpsertWithNestedWhereUniqueInput: SelectFieldUpsertWithNestedWhereUniqueInput;
  SelectFieldWhereInput: SelectFieldWhereInput;
  SelectFieldWhereUniqueInput: SelectFieldWhereUniqueInput;
  SocialLink: SocialLink;
  SocialLinkConnectInput: SocialLinkConnectInput;
  SocialLinkConnection: SocialLinkConnection;
  SocialLinkCreateInput: SocialLinkCreateInput;
  SocialLinkCreateManyInlineInput: SocialLinkCreateManyInlineInput;
  SocialLinkCreateOneInlineInput: SocialLinkCreateOneInlineInput;
  SocialLinkCreateWithPositionInput: SocialLinkCreateWithPositionInput;
  SocialLinkEdge: SocialLinkEdge;
  SocialLinkManyWhereInput: SocialLinkManyWhereInput;
  SocialLinkParent: ResolversUnionTypes<ResolversParentTypes>['SocialLinkParent'];
  SocialLinkParentConnectInput: SocialLinkParentConnectInput;
  SocialLinkParentCreateInput: SocialLinkParentCreateInput;
  SocialLinkParentCreateManyInlineInput: SocialLinkParentCreateManyInlineInput;
  SocialLinkParentCreateOneInlineInput: SocialLinkParentCreateOneInlineInput;
  SocialLinkParentUpdateInput: SocialLinkParentUpdateInput;
  SocialLinkParentUpdateManyInlineInput: SocialLinkParentUpdateManyInlineInput;
  SocialLinkParentUpdateManyWithNestedWhereInput: SocialLinkParentUpdateManyWithNestedWhereInput;
  SocialLinkParentUpdateOneInlineInput: SocialLinkParentUpdateOneInlineInput;
  SocialLinkParentUpdateWithNestedWhereUniqueInput: SocialLinkParentUpdateWithNestedWhereUniqueInput;
  SocialLinkParentUpsertWithNestedWhereUniqueInput: SocialLinkParentUpsertWithNestedWhereUniqueInput;
  SocialLinkParentWhereInput: SocialLinkParentWhereInput;
  SocialLinkParentWhereUniqueInput: SocialLinkParentWhereUniqueInput;
  SocialLinkUpdateInput: SocialLinkUpdateInput;
  SocialLinkUpdateManyInlineInput: SocialLinkUpdateManyInlineInput;
  SocialLinkUpdateManyInput: SocialLinkUpdateManyInput;
  SocialLinkUpdateManyWithNestedWhereInput: SocialLinkUpdateManyWithNestedWhereInput;
  SocialLinkUpdateOneInlineInput: SocialLinkUpdateOneInlineInput;
  SocialLinkUpdateWithNestedWhereUniqueAndPositionInput: SocialLinkUpdateWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpdateWithNestedWhereUniqueInput: SocialLinkUpdateWithNestedWhereUniqueInput;
  SocialLinkUpsertInput: SocialLinkUpsertInput;
  SocialLinkUpsertWithNestedWhereUniqueAndPositionInput: SocialLinkUpsertWithNestedWhereUniqueAndPositionInput;
  SocialLinkUpsertWithNestedWhereUniqueInput: SocialLinkUpsertWithNestedWhereUniqueInput;
  SocialLinkWhereInput: SocialLinkWhereInput;
  SocialLinkWhereUniqueInput: SocialLinkWhereUniqueInput;
  String: Scalars['String']['output'];
  Testimonial: Testimonial;
  TestimonialConnectInput: TestimonialConnectInput;
  TestimonialConnection: TestimonialConnection;
  TestimonialCreateInput: TestimonialCreateInput;
  TestimonialCreateManyInlineInput: TestimonialCreateManyInlineInput;
  TestimonialCreateOneInlineInput: TestimonialCreateOneInlineInput;
  TestimonialEdge: TestimonialEdge;
  TestimonialManyWhereInput: TestimonialManyWhereInput;
  TestimonialUpdateInput: TestimonialUpdateInput;
  TestimonialUpdateManyInlineInput: TestimonialUpdateManyInlineInput;
  TestimonialUpdateManyInput: TestimonialUpdateManyInput;
  TestimonialUpdateManyWithNestedWhereInput: TestimonialUpdateManyWithNestedWhereInput;
  TestimonialUpdateOneInlineInput: TestimonialUpdateOneInlineInput;
  TestimonialUpdateWithNestedWhereUniqueInput: TestimonialUpdateWithNestedWhereUniqueInput;
  TestimonialUpsertInput: TestimonialUpsertInput;
  TestimonialUpsertWithNestedWhereUniqueInput: TestimonialUpsertWithNestedWhereUniqueInput;
  TestimonialWhereComparatorInput: TestimonialWhereComparatorInput;
  TestimonialWhereInput: TestimonialWhereInput;
  TestimonialWhereStageInput: TestimonialWhereStageInput;
  TestimonialWhereUniqueInput: TestimonialWhereUniqueInput;
  TextAreaField: TextAreaField;
  TextAreaFieldConnectInput: TextAreaFieldConnectInput;
  TextAreaFieldConnection: TextAreaFieldConnection;
  TextAreaFieldCreateInput: TextAreaFieldCreateInput;
  TextAreaFieldCreateManyInlineInput: TextAreaFieldCreateManyInlineInput;
  TextAreaFieldCreateOneInlineInput: TextAreaFieldCreateOneInlineInput;
  TextAreaFieldCreateWithPositionInput: TextAreaFieldCreateWithPositionInput;
  TextAreaFieldEdge: TextAreaFieldEdge;
  TextAreaFieldManyWhereInput: TextAreaFieldManyWhereInput;
  TextAreaFieldParent: ResolversUnionTypes<ResolversParentTypes>['TextAreaFieldParent'];
  TextAreaFieldParentConnectInput: TextAreaFieldParentConnectInput;
  TextAreaFieldParentCreateInput: TextAreaFieldParentCreateInput;
  TextAreaFieldParentCreateManyInlineInput: TextAreaFieldParentCreateManyInlineInput;
  TextAreaFieldParentCreateOneInlineInput: TextAreaFieldParentCreateOneInlineInput;
  TextAreaFieldParentUpdateInput: TextAreaFieldParentUpdateInput;
  TextAreaFieldParentUpdateManyInlineInput: TextAreaFieldParentUpdateManyInlineInput;
  TextAreaFieldParentUpdateManyWithNestedWhereInput: TextAreaFieldParentUpdateManyWithNestedWhereInput;
  TextAreaFieldParentUpdateOneInlineInput: TextAreaFieldParentUpdateOneInlineInput;
  TextAreaFieldParentUpdateWithNestedWhereUniqueInput: TextAreaFieldParentUpdateWithNestedWhereUniqueInput;
  TextAreaFieldParentUpsertWithNestedWhereUniqueInput: TextAreaFieldParentUpsertWithNestedWhereUniqueInput;
  TextAreaFieldParentWhereInput: TextAreaFieldParentWhereInput;
  TextAreaFieldParentWhereUniqueInput: TextAreaFieldParentWhereUniqueInput;
  TextAreaFieldUpdateInput: TextAreaFieldUpdateInput;
  TextAreaFieldUpdateManyInlineInput: TextAreaFieldUpdateManyInlineInput;
  TextAreaFieldUpdateManyInput: TextAreaFieldUpdateManyInput;
  TextAreaFieldUpdateManyWithNestedWhereInput: TextAreaFieldUpdateManyWithNestedWhereInput;
  TextAreaFieldUpdateOneInlineInput: TextAreaFieldUpdateOneInlineInput;
  TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpdateWithNestedWhereUniqueInput: TextAreaFieldUpdateWithNestedWhereUniqueInput;
  TextAreaFieldUpsertInput: TextAreaFieldUpsertInput;
  TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput: TextAreaFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextAreaFieldUpsertWithNestedWhereUniqueInput: TextAreaFieldUpsertWithNestedWhereUniqueInput;
  TextAreaFieldWhereInput: TextAreaFieldWhereInput;
  TextAreaFieldWhereUniqueInput: TextAreaFieldWhereUniqueInput;
  TextInputField: TextInputField;
  TextInputFieldConnectInput: TextInputFieldConnectInput;
  TextInputFieldConnection: TextInputFieldConnection;
  TextInputFieldCreateInput: TextInputFieldCreateInput;
  TextInputFieldCreateManyInlineInput: TextInputFieldCreateManyInlineInput;
  TextInputFieldCreateOneInlineInput: TextInputFieldCreateOneInlineInput;
  TextInputFieldCreateWithPositionInput: TextInputFieldCreateWithPositionInput;
  TextInputFieldEdge: TextInputFieldEdge;
  TextInputFieldManyWhereInput: TextInputFieldManyWhereInput;
  TextInputFieldParent: ResolversUnionTypes<ResolversParentTypes>['TextInputFieldParent'];
  TextInputFieldParentConnectInput: TextInputFieldParentConnectInput;
  TextInputFieldParentCreateInput: TextInputFieldParentCreateInput;
  TextInputFieldParentCreateManyInlineInput: TextInputFieldParentCreateManyInlineInput;
  TextInputFieldParentCreateOneInlineInput: TextInputFieldParentCreateOneInlineInput;
  TextInputFieldParentUpdateInput: TextInputFieldParentUpdateInput;
  TextInputFieldParentUpdateManyInlineInput: TextInputFieldParentUpdateManyInlineInput;
  TextInputFieldParentUpdateManyWithNestedWhereInput: TextInputFieldParentUpdateManyWithNestedWhereInput;
  TextInputFieldParentUpdateOneInlineInput: TextInputFieldParentUpdateOneInlineInput;
  TextInputFieldParentUpdateWithNestedWhereUniqueInput: TextInputFieldParentUpdateWithNestedWhereUniqueInput;
  TextInputFieldParentUpsertWithNestedWhereUniqueInput: TextInputFieldParentUpsertWithNestedWhereUniqueInput;
  TextInputFieldParentWhereInput: TextInputFieldParentWhereInput;
  TextInputFieldParentWhereUniqueInput: TextInputFieldParentWhereUniqueInput;
  TextInputFieldUpdateInput: TextInputFieldUpdateInput;
  TextInputFieldUpdateManyInlineInput: TextInputFieldUpdateManyInlineInput;
  TextInputFieldUpdateManyInput: TextInputFieldUpdateManyInput;
  TextInputFieldUpdateManyWithNestedWhereInput: TextInputFieldUpdateManyWithNestedWhereInput;
  TextInputFieldUpdateOneInlineInput: TextInputFieldUpdateOneInlineInput;
  TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput: TextInputFieldUpdateWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpdateWithNestedWhereUniqueInput: TextInputFieldUpdateWithNestedWhereUniqueInput;
  TextInputFieldUpsertInput: TextInputFieldUpsertInput;
  TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput: TextInputFieldUpsertWithNestedWhereUniqueAndPositionInput;
  TextInputFieldUpsertWithNestedWhereUniqueInput: TextInputFieldUpsertWithNestedWhereUniqueInput;
  TextInputFieldWhereInput: TextInputFieldWhereInput;
  TextInputFieldWhereUniqueInput: TextInputFieldWhereUniqueInput;
  Theme: Theme;
  ThemeColors: ThemeColors;
  ThemeColorsConnectInput: ThemeColorsConnectInput;
  ThemeColorsConnection: ThemeColorsConnection;
  ThemeColorsCreateInput: ThemeColorsCreateInput;
  ThemeColorsCreateManyInlineInput: ThemeColorsCreateManyInlineInput;
  ThemeColorsCreateOneInlineInput: ThemeColorsCreateOneInlineInput;
  ThemeColorsCreateWithPositionInput: ThemeColorsCreateWithPositionInput;
  ThemeColorsEdge: ThemeColorsEdge;
  ThemeColorsManyWhereInput: ThemeColorsManyWhereInput;
  ThemeColorsParent: ResolversUnionTypes<ResolversParentTypes>['ThemeColorsParent'];
  ThemeColorsParentConnectInput: ThemeColorsParentConnectInput;
  ThemeColorsParentCreateInput: ThemeColorsParentCreateInput;
  ThemeColorsParentCreateManyInlineInput: ThemeColorsParentCreateManyInlineInput;
  ThemeColorsParentCreateOneInlineInput: ThemeColorsParentCreateOneInlineInput;
  ThemeColorsParentUpdateInput: ThemeColorsParentUpdateInput;
  ThemeColorsParentUpdateManyInlineInput: ThemeColorsParentUpdateManyInlineInput;
  ThemeColorsParentUpdateManyWithNestedWhereInput: ThemeColorsParentUpdateManyWithNestedWhereInput;
  ThemeColorsParentUpdateOneInlineInput: ThemeColorsParentUpdateOneInlineInput;
  ThemeColorsParentUpdateWithNestedWhereUniqueInput: ThemeColorsParentUpdateWithNestedWhereUniqueInput;
  ThemeColorsParentUpsertWithNestedWhereUniqueInput: ThemeColorsParentUpsertWithNestedWhereUniqueInput;
  ThemeColorsParentWhereInput: ThemeColorsParentWhereInput;
  ThemeColorsParentWhereUniqueInput: ThemeColorsParentWhereUniqueInput;
  ThemeColorsUpdateInput: ThemeColorsUpdateInput;
  ThemeColorsUpdateManyInlineInput: ThemeColorsUpdateManyInlineInput;
  ThemeColorsUpdateManyInput: ThemeColorsUpdateManyInput;
  ThemeColorsUpdateManyWithNestedWhereInput: ThemeColorsUpdateManyWithNestedWhereInput;
  ThemeColorsUpdateOneInlineInput: ThemeColorsUpdateOneInlineInput;
  ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput: ThemeColorsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpdateWithNestedWhereUniqueInput: ThemeColorsUpdateWithNestedWhereUniqueInput;
  ThemeColorsUpsertInput: ThemeColorsUpsertInput;
  ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput: ThemeColorsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeColorsUpsertWithNestedWhereUniqueInput: ThemeColorsUpsertWithNestedWhereUniqueInput;
  ThemeColorsWhereInput: ThemeColorsWhereInput;
  ThemeColorsWhereUniqueInput: ThemeColorsWhereUniqueInput;
  ThemeConnectInput: ThemeConnectInput;
  ThemeConnection: ThemeConnection;
  ThemeCreateInput: ThemeCreateInput;
  ThemeCreateManyInlineInput: ThemeCreateManyInlineInput;
  ThemeCreateOneInlineInput: ThemeCreateOneInlineInput;
  ThemeEdge: ThemeEdge;
  ThemeFonts: ThemeFonts;
  ThemeFontsConnection: ThemeFontsConnection;
  ThemeFontsCreateInput: ThemeFontsCreateInput;
  ThemeFontsCreateWithPositionInput: ThemeFontsCreateWithPositionInput;
  ThemeFontsEdge: ThemeFontsEdge;
  ThemeFontsManyWhereInput: ThemeFontsManyWhereInput;
  ThemeFontsUpdateInput: ThemeFontsUpdateInput;
  ThemeFontsUpdateManyInput: ThemeFontsUpdateManyInput;
  ThemeFontsUpdateManyWithNestedWhereInput: ThemeFontsUpdateManyWithNestedWhereInput;
  ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput: ThemeFontsUpdateWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpdateWithNestedWhereUniqueInput: ThemeFontsUpdateWithNestedWhereUniqueInput;
  ThemeFontsUpsertInput: ThemeFontsUpsertInput;
  ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput: ThemeFontsUpsertWithNestedWhereUniqueAndPositionInput;
  ThemeFontsUpsertWithNestedWhereUniqueInput: ThemeFontsUpsertWithNestedWhereUniqueInput;
  ThemeFontsWhereInput: ThemeFontsWhereInput;
  ThemeFontsWhereUniqueInput: ThemeFontsWhereUniqueInput;
  ThemeManyWhereInput: ThemeManyWhereInput;
  ThemeUpdateInput: ThemeUpdateInput;
  ThemeUpdateManyInlineInput: ThemeUpdateManyInlineInput;
  ThemeUpdateManyInput: ThemeUpdateManyInput;
  ThemeUpdateManyWithNestedWhereInput: ThemeUpdateManyWithNestedWhereInput;
  ThemeUpdateOneInlineInput: ThemeUpdateOneInlineInput;
  ThemeUpdateWithNestedWhereUniqueInput: ThemeUpdateWithNestedWhereUniqueInput;
  ThemeUpsertInput: ThemeUpsertInput;
  ThemeUpsertWithNestedWhereUniqueInput: ThemeUpsertWithNestedWhereUniqueInput;
  ThemeWhereComparatorInput: ThemeWhereComparatorInput;
  ThemeWhereInput: ThemeWhereInput;
  ThemeWhereStageInput: ThemeWhereStageInput;
  ThemeWhereUniqueInput: ThemeWhereUniqueInput;
  UnpublishLocaleInput: UnpublishLocaleInput;
  User: User;
  UserConnectInput: UserConnectInput;
  UserConnection: UserConnection;
  UserCreateManyInlineInput: UserCreateManyInlineInput;
  UserCreateOneInlineInput: UserCreateOneInlineInput;
  UserEdge: UserEdge;
  UserManyWhereInput: UserManyWhereInput;
  UserUpdateManyInlineInput: UserUpdateManyInlineInput;
  UserUpdateOneInlineInput: UserUpdateOneInlineInput;
  UserWhereComparatorInput: UserWhereComparatorInput;
  UserWhereInput: UserWhereInput;
  UserWhereStageInput: UserWhereStageInput;
  UserWhereUniqueInput: UserWhereUniqueInput;
  VendorLogo: VendorLogo;
  VendorLogoConnectInput: VendorLogoConnectInput;
  VendorLogoConnection: VendorLogoConnection;
  VendorLogoCreateInput: VendorLogoCreateInput;
  VendorLogoCreateManyInlineInput: VendorLogoCreateManyInlineInput;
  VendorLogoCreateOneInlineInput: VendorLogoCreateOneInlineInput;
  VendorLogoCreateWithPositionInput: VendorLogoCreateWithPositionInput;
  VendorLogoEdge: VendorLogoEdge;
  VendorLogoManyWhereInput: VendorLogoManyWhereInput;
  VendorLogoParent: ResolversUnionTypes<ResolversParentTypes>['VendorLogoParent'];
  VendorLogoParentConnectInput: VendorLogoParentConnectInput;
  VendorLogoParentCreateInput: VendorLogoParentCreateInput;
  VendorLogoParentCreateManyInlineInput: VendorLogoParentCreateManyInlineInput;
  VendorLogoParentCreateOneInlineInput: VendorLogoParentCreateOneInlineInput;
  VendorLogoParentUpdateInput: VendorLogoParentUpdateInput;
  VendorLogoParentUpdateManyInlineInput: VendorLogoParentUpdateManyInlineInput;
  VendorLogoParentUpdateManyWithNestedWhereInput: VendorLogoParentUpdateManyWithNestedWhereInput;
  VendorLogoParentUpdateOneInlineInput: VendorLogoParentUpdateOneInlineInput;
  VendorLogoParentUpdateWithNestedWhereUniqueInput: VendorLogoParentUpdateWithNestedWhereUniqueInput;
  VendorLogoParentUpsertWithNestedWhereUniqueInput: VendorLogoParentUpsertWithNestedWhereUniqueInput;
  VendorLogoParentWhereInput: VendorLogoParentWhereInput;
  VendorLogoParentWhereUniqueInput: VendorLogoParentWhereUniqueInput;
  VendorLogoUpdateInput: VendorLogoUpdateInput;
  VendorLogoUpdateManyInlineInput: VendorLogoUpdateManyInlineInput;
  VendorLogoUpdateManyInput: VendorLogoUpdateManyInput;
  VendorLogoUpdateManyWithNestedWhereInput: VendorLogoUpdateManyWithNestedWhereInput;
  VendorLogoUpdateOneInlineInput: VendorLogoUpdateOneInlineInput;
  VendorLogoUpdateWithNestedWhereUniqueAndPositionInput: VendorLogoUpdateWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpdateWithNestedWhereUniqueInput: VendorLogoUpdateWithNestedWhereUniqueInput;
  VendorLogoUpsertInput: VendorLogoUpsertInput;
  VendorLogoUpsertWithNestedWhereUniqueAndPositionInput: VendorLogoUpsertWithNestedWhereUniqueAndPositionInput;
  VendorLogoUpsertWithNestedWhereUniqueInput: VendorLogoUpsertWithNestedWhereUniqueInput;
  VendorLogoWhereInput: VendorLogoWhereInput;
  VendorLogoWhereUniqueInput: VendorLogoWhereUniqueInput;
  Version: Version;
  VersionWhereInput: VersionWhereInput;
};

export type AddressResolvers<ContextType = any, ParentType extends ResolversParentTypes['Address'] = ResolversParentTypes['Address']> = {
  address1?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  address2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  address3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  state?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  zipCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddressConnection'] = ResolversParentTypes['AddressConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AddressEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddressEdge'] = ResolversParentTypes['AddressEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Address'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddressParent'] = ResolversParentTypes['AddressParent']> = {
  __resolveType: TypeResolveFn<'OfficeLocation', ParentType, ContextType>;
};

export type AddressSearchFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddressSearchField'] = ResolversParentTypes['AddressSearchField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locationType?: Resolver<ResolversTypes['LocationType'], ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressSearchFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddressSearchFieldConnection'] = ResolversParentTypes['AddressSearchFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AddressSearchFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressSearchFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddressSearchFieldEdge'] = ResolversParentTypes['AddressSearchFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['AddressSearchField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AddressSearchFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddressSearchFieldParent'] = ResolversParentTypes['AddressSearchFieldParent']> = {
  __resolveType: TypeResolveFn<'Form', ParentType, ContextType>;
};

export type AdmonitionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Admonition'] = ResolversParentTypes['Admonition']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AdmonitionCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<AdmonitionDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<AdmonitionHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AdmonitionPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<AdmonitionScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['AdmonitionType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AdmonitionUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdmonitionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdmonitionConnection'] = ResolversParentTypes['AdmonitionConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AdmonitionEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AdmonitionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdmonitionEdge'] = ResolversParentTypes['AdmonitionEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Admonition'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['Aggregate'] = ResolversParentTypes['Aggregate']> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertResolvers<ContextType = any, ParentType extends ResolversParentTypes['Alert'] = ResolversParentTypes['Alert']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  level?: Resolver<ResolversTypes['AlertLevel'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AlertConnection'] = ResolversParentTypes['AlertConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AlertEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AlertEdge'] = ResolversParentTypes['AlertEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Alert'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AlertParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['AlertParent'] = ResolversParentTypes['AlertParent']> = {
  __resolveType: TypeResolveFn<'Configuration' | 'FormButton', ParentType, ContextType>;
};

export type AssetResolvers<ContextType = any, ParentType extends ResolversParentTypes['Asset'] = ResolversParentTypes['Asset']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetCreatedAtArgs, 'variation'>>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  fileDocument?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType, Partial<AssetFileDocumentArgs>>;
  fileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  handle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<AssetHistoryArgs, 'limit' | 'skip'>>;
  iconContactForm?: Resolver<Array<ResolversTypes['ContactForm']>, ParentType, ContextType, Partial<AssetIconContactFormArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  imagePageContent?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<AssetImagePageContentArgs>>;
  imageTestimonial?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, Partial<AssetImageTestimonialArgs>>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetLocalizationsArgs, 'includeCurrent' | 'locales'>>;
  mainVideoHomePage?: Resolver<Array<ResolversTypes['HomePage']>, ParentType, ContextType, Partial<AssetMainVideoHomePageArgs>>;
  mimeType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  photoEmployee?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, Partial<AssetPhotoEmployeeArgs>>;
  photoOfficeLocation?: Resolver<Array<ResolversTypes['OfficeLocation']>, ParentType, ContextType, Partial<AssetPhotoOfficeLocationArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<AssetPublishedAtArgs, 'variation'>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<AssetScheduledInArgs>>;
  size?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetUpdatedAtArgs, 'variation'>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetUpdatedByArgs>>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType, Partial<AssetUrlArgs>>;
  width?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssetConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssetConnection'] = ResolversParentTypes['AssetConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AssetEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssetEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssetEdge'] = ResolversParentTypes['AssetEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Asset'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BatchPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BatchPayload'] = ResolversParentTypes['BatchPayload']> = {
  count?: Resolver<ResolversTypes['Long'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BlogPostResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPost'] = ResolversParentTypes['BlogPost']> = {
  authors?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, Partial<BlogPostAuthorsArgs>>;
  body?: Resolver<ResolversTypes['BlogPostBodyRichText'], ParentType, ContextType>;
  contentTags?: Resolver<Array<ResolversTypes['ContentTag']>, ParentType, ContextType, Partial<BlogPostContentTagsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<BlogPostCreatedByArgs>>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<BlogPostDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<BlogPostHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  overrideDate?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<BlogPostPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<BlogPostScheduledInArgs>>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<BlogPostUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BlogPostBodyRichTextResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostBodyRichText'] = ResolversParentTypes['BlogPostBodyRichText']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  json?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  references?: Resolver<Array<ResolversTypes['BlogPostBodyRichTextEmbeddedTypes']>, ParentType, ContextType, Partial<BlogPostBodyRichTextReferencesArgs>>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BlogPostBodyRichTextEmbeddedTypesResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostBodyRichTextEmbeddedTypes'] = ResolversParentTypes['BlogPostBodyRichTextEmbeddedTypes']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'ContentButton' | 'Document' | 'DocumentGroup', ParentType, ContextType>;
};

export type BlogPostConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostConnection'] = ResolversParentTypes['BlogPostConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['BlogPostEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type BlogPostEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostEdge'] = ResolversParentTypes['BlogPostEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['BlogPost'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonResolvers<ContextType = any, ParentType extends ResolversParentTypes['Button'] = ResolversParentTypes['Button']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  variant?: Resolver<Maybe<ResolversTypes['ButtonVariant']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ButtonConnection'] = ResolversParentTypes['ButtonConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ButtonEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ButtonEdge'] = ResolversParentTypes['ButtonEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Button'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ButtonParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ButtonParent'] = ResolversParentTypes['ButtonParent']> = {
  __resolveType: TypeResolveFn<'Callout' | 'ContactForm' | 'Feature' | 'HomePageBlock' | 'PageContent', ParentType, ContextType>;
};

export type CallToActionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToAction'] = ResolversParentTypes['CallToAction']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  shown?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionConnection'] = ResolversParentTypes['CallToActionConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CallToActionEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionEdge'] = ResolversParentTypes['CallToActionEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CallToAction'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionParent'] = ResolversParentTypes['CallToActionParent']> = {
  __resolveType: TypeResolveFn<'Configuration', ParentType, ContextType>;
};

export type CallToActionSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettings'] = ResolversParentTypes['CallToActionSettings']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  enable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  icon?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<CallToActionSettingsIconArgs>>;
  iconColor?: Resolver<Maybe<ResolversTypes['ThemeColor']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionSettingsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettingsConnection'] = ResolversParentTypes['CallToActionSettingsConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CallToActionSettingsEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionSettingsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettingsEdge'] = ResolversParentTypes['CallToActionSettingsEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CallToActionSettings'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CallToActionSettingsParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CallToActionSettingsParent'] = ResolversParentTypes['CallToActionSettingsParent']> = {
  __resolveType: TypeResolveFn<'DocsGroup' | 'PageContent', ParentType, ContextType>;
};

export type CalloutResolvers<ContextType = any, ParentType extends ResolversParentTypes['Callout'] = ResolversParentTypes['Callout']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<CalloutButtonArgs>>;
  form?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, Partial<CalloutFormArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalloutConnection'] = ResolversParentTypes['CalloutConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CalloutEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalloutEdge'] = ResolversParentTypes['CalloutEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalloutParent'] = ResolversParentTypes['CalloutParent']> = {
  __resolveType: TypeResolveFn<'Page', ParentType, ContextType>;
};

export type CheckboxFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxField'] = ResolversParentTypes['CheckboxField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  multiple?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  options?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckboxFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxFieldConnection'] = ResolversParentTypes['CheckboxFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CheckboxFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckboxFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxFieldEdge'] = ResolversParentTypes['CheckboxFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CheckboxField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckboxFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckboxFieldParent'] = ResolversParentTypes['CheckboxFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type CloudLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CloudLocation'] = ResolversParentTypes['CloudLocation']> = {
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  coordinates?: Resolver<ResolversTypes['Location'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<CloudLocationCreatedByArgs>>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<CloudLocationDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<CloudLocationHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  identifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<CloudLocationPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<CloudLocationScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  testUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  timeout?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<CloudLocationUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CloudLocationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CloudLocationConnection'] = ResolversParentTypes['CloudLocationConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CloudLocationEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CloudLocationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CloudLocationEdge'] = ResolversParentTypes['CloudLocationEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CloudLocation'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ColorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Color'] = ResolversParentTypes['Color']> = {
  css?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hex?: Resolver<ResolversTypes['Hex'], ParentType, ContextType>;
  rgba?: Resolver<ResolversTypes['RGBA'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Configuration'] = ResolversParentTypes['Configuration']> = {
  callToAction?: Resolver<ResolversTypes['CallToAction'], ParentType, ContextType, Partial<ConfigurationCallToActionArgs>>;
  contactForms?: Resolver<Array<ResolversTypes['ContactForm']>, ParentType, ContextType, Partial<ConfigurationContactFormsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ConfigurationCreatedByArgs>>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  docsGroups?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, Partial<ConfigurationDocsGroupsArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<ConfigurationDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  employees?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, Partial<ConfigurationEmployeesArgs>>;
  errorMessage?: Resolver<ResolversTypes['Alert'], ParentType, ContextType, Partial<ConfigurationErrorMessageArgs>>;
  footerGroups?: Resolver<Array<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<ConfigurationFooterGroupsArgs>>;
  headerGroups?: Resolver<Array<ResolversTypes['HeaderGroup']>, ParentType, ContextType, Partial<ConfigurationHeaderGroupsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ConfigurationHistoryArgs, 'limit' | 'skip'>>;
  hqAddress?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hqCoordinates?: Resolver<ResolversTypes['Location'], ParentType, ContextType>;
  hqMapInfo?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  openMapsText?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  organizationName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ConfigurationPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ConfigurationScheduledInArgs>>;
  slogan?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  socialLinks?: Resolver<Array<ResolversTypes['SocialLink']>, ParentType, ContextType, Partial<ConfigurationSocialLinksArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  statusUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subscribe?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, Partial<ConfigurationSubscribeArgs>>;
  testimonials?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, Partial<ConfigurationTestimonialsArgs>>;
  theme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, Partial<ConfigurationThemeArgs>>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  titleOverrides?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ConfigurationUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurationConnection'] = ResolversParentTypes['ConfigurationConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ConfigurationEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigurationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConfigurationEdge'] = ResolversParentTypes['ConfigurationEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Configuration'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactForm'] = ResolversParentTypes['ContactForm']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  button?: Resolver<ResolversTypes['Button'], ParentType, ContextType, Partial<ContactFormButtonArgs>>;
  color?: Resolver<ResolversTypes['ThemeColor'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContactFormCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<ContactFormDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  fields?: Resolver<Array<ResolversTypes['ContactFormfieldsUnion']>, ParentType, ContextType, Partial<ContactFormFieldsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ContactFormHistoryArgs, 'limit' | 'skip'>>;
  icon?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<ContactFormIconArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContactFormPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ContactFormScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContactFormUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactFormConnection'] = ResolversParentTypes['ContactFormConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ContactFormEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactFormEdge'] = ResolversParentTypes['ContactFormEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ContactForm'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContactFormfieldsUnionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContactFormfieldsUnion'] = ResolversParentTypes['ContactFormfieldsUnion']> = {
  __resolveType: TypeResolveFn<'CheckboxField' | 'FormButton' | 'SelectField' | 'TextAreaField' | 'TextInputField', ParentType, ContextType>;
};

export type ContentButtonResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentButton'] = ResolversParentTypes['ContentButton']> = {
  colorScheme?: Resolver<Maybe<ResolversTypes['ThemeColor']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentButtonCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<ContentButtonDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ContentButtonHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  link?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentButtonPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ContentButtonScheduledInArgs>>;
  showIcon?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentButtonUpdatedByArgs>>;
  variant?: Resolver<Maybe<ResolversTypes['ButtonVariant']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentButtonConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentButtonConnection'] = ResolversParentTypes['ContentButtonConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ContentButtonEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentButtonEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentButtonEdge'] = ResolversParentTypes['ContentButtonEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ContentButton'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentTagResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentTag'] = ResolversParentTypes['ContentTag']> = {
  blogPosts?: Resolver<Array<ResolversTypes['BlogPost']>, ParentType, ContextType, Partial<ContentTagBlogPostsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentTagCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<ContentTagDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  documents?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType, Partial<ContentTagDocumentsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ContentTagHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentTagPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ContentTagScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  tag?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ContentTagUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentTagConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentTagConnection'] = ResolversParentTypes['ContentTagConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ContentTagEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContentTagEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ContentTagEdge'] = ResolversParentTypes['ContentTagEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ContentTag'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['CurrencyField'] = ResolversParentTypes['CurrencyField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  unitSymbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CurrencyFieldConnection'] = ResolversParentTypes['CurrencyFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['CurrencyFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CurrencyFieldEdge'] = ResolversParentTypes['CurrencyFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['CurrencyField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CurrencyFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CurrencyFieldParent'] = ResolversParentTypes['CurrencyFieldParent']> = {
  __resolveType: TypeResolveFn<'Form', ParentType, ContextType>;
};

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export type DateFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['DateField'] = ResolversParentTypes['DateField']> = {
  allowFuture?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  allowPast?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  range?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DateFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DateFieldConnection'] = ResolversParentTypes['DateFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DateFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DateFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DateFieldEdge'] = ResolversParentTypes['DateFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['DateField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DateFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['DateFieldParent'] = ResolversParentTypes['DateFieldParent']> = {
  __resolveType: TypeResolveFn<'Form', ParentType, ContextType>;
};

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DocsGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroup'] = ResolversParentTypes['DocsGroup']> = {
  callToAction?: Resolver<ResolversTypes['CallToActionSettings'], ParentType, ContextType, Partial<DocsGroupCallToActionArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsGroupCreatedByArgs>>;
  docsPages?: Resolver<Array<ResolversTypes['DocsPage']>, ParentType, ContextType, Partial<DocsGroupDocsPagesArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<DocsGroupDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<DocsGroupFooterGroupArgs>>;
  footerTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<DocsGroupHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsGroupPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<DocsGroupScheduledInArgs>>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  summary?: Resolver<ResolversTypes['DocsGroupSummaryRichText'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsGroupUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupConnection'] = ResolversParentTypes['DocsGroupConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DocsGroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupEdge'] = ResolversParentTypes['DocsGroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['DocsGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupSummaryRichTextResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupSummaryRichText'] = ResolversParentTypes['DocsGroupSummaryRichText']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  json?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  references?: Resolver<Array<ResolversTypes['DocsGroupSummaryRichTextEmbeddedTypes']>, ParentType, ContextType, Partial<DocsGroupSummaryRichTextReferencesArgs>>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsGroupSummaryRichTextEmbeddedTypesResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsGroupSummaryRichTextEmbeddedTypes'] = ResolversParentTypes['DocsGroupSummaryRichTextEmbeddedTypes']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'ContentButton', ParentType, ContextType>;
};

export type DocsPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPage'] = ResolversParentTypes['DocsPage']> = {
  body?: Resolver<ResolversTypes['DocsPageBodyRichText'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsPageCreatedByArgs>>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  docsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, Partial<DocsPageDocsGroupArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<DocsPageDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<DocsPageHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsPagePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<DocsPageScheduledInArgs>>;
  showUpdatedDate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocsPageUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsPageBodyRichTextResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageBodyRichText'] = ResolversParentTypes['DocsPageBodyRichText']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  json?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  references?: Resolver<Array<ResolversTypes['DocsPageBodyRichTextEmbeddedTypes']>, ParentType, ContextType, Partial<DocsPageBodyRichTextReferencesArgs>>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsPageBodyRichTextEmbeddedTypesResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageBodyRichTextEmbeddedTypes'] = ResolversParentTypes['DocsPageBodyRichTextEmbeddedTypes']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'ContentButton' | 'Document' | 'DocumentGroup', ParentType, ContextType>;
};

export type DocsPageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageConnection'] = ResolversParentTypes['DocsPageConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DocsPageEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocsPageEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocsPageEdge'] = ResolversParentTypes['DocsPageEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['DocsPage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Document'] = ResolversParentTypes['Document']> = {
  contentTags?: Resolver<Array<ResolversTypes['ContentTag']>, ParentType, ContextType, Partial<DocumentContentTagsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocumentCreatedByArgs>>;
  documentGroups?: Resolver<Array<ResolversTypes['DocumentGroup']>, ParentType, ContextType, Partial<DocumentDocumentGroupsArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<DocumentDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  file?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<DocumentFileArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<DocumentHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocumentPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<DocumentScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocumentUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentConnection'] = ResolversParentTypes['DocumentConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DocumentEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentEdge'] = ResolversParentTypes['DocumentEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Document'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentGroup'] = ResolversParentTypes['DocumentGroup']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocumentGroupCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<DocumentGroupDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  documents?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType, Partial<DocumentGroupDocumentsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<DocumentGroupHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocumentGroupPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<DocumentGroupScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<DocumentGroupUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentGroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentGroupConnection'] = ResolversParentTypes['DocumentGroupConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DocumentGroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentGroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentGroupEdge'] = ResolversParentTypes['DocumentGroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['DocumentGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentVersionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DocumentVersion'] = ResolversParentTypes['DocumentVersion']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmployeeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Employee'] = ResolversParentTypes['Employee']> = {
  bio?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  blogPosts?: Resolver<Array<ResolversTypes['BlogPost']>, ParentType, ContextType, Partial<EmployeeBlogPostsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<EmployeeCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<EmployeeDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<EmployeeHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  location?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  photo?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<EmployeePhotoArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<EmployeePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<EmployeeScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<EmployeeUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmployeeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmployeeConnection'] = ResolversParentTypes['EmployeeConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['EmployeeEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EmployeeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmployeeEdge'] = ResolversParentTypes['EmployeeEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Employee'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EntityResolvers<ContextType = any, ParentType extends ResolversParentTypes['Entity'] = ResolversParentTypes['Entity']> = {
  __resolveType: TypeResolveFn<'Address' | 'AddressSearchField' | 'Admonition' | 'Alert' | 'Asset' | 'BlogPost' | 'Button' | 'CallToAction' | 'CallToActionSettings' | 'Callout' | 'CheckboxField' | 'CloudLocation' | 'Configuration' | 'ContactForm' | 'ContentButton' | 'ContentTag' | 'CurrencyField' | 'DateField' | 'DocsGroup' | 'DocsPage' | 'Document' | 'DocumentGroup' | 'Employee' | 'ExternalLink' | 'Feature' | 'FooterGroup' | 'Form' | 'FormButton' | 'FormGroup' | 'HeaderGroup' | 'HomePage' | 'HomePageBlock' | 'OfficeLocation' | 'Page' | 'PageContent' | 'RemoteSelectField' | 'ScheduledOperation' | 'ScheduledRelease' | 'SelectField' | 'SocialLink' | 'Testimonial' | 'TextAreaField' | 'TextInputField' | 'Theme' | 'ThemeColors' | 'ThemeFonts' | 'User' | 'VendorLogo', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
};

export type ExternalLinkResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLink'] = ResolversParentTypes['ExternalLink']> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  showIcon?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalLinkConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLinkConnection'] = ResolversParentTypes['ExternalLinkConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ExternalLinkEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalLinkEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLinkEdge'] = ResolversParentTypes['ExternalLinkEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ExternalLink'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ExternalLinkParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ExternalLinkParent'] = ResolversParentTypes['ExternalLinkParent']> = {
  __resolveType: TypeResolveFn<'FooterGroup' | 'HeaderGroup', ParentType, ContextType>;
};

export type FeatureResolvers<ContextType = any, ParentType extends ResolversParentTypes['Feature'] = ResolversParentTypes['Feature']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<FeatureButtonArgs>>;
  icon?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<FeatureIconArgs>>;
  iconColor?: Resolver<Maybe<ResolversTypes['ThemeColor']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeatureConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeatureConnection'] = ResolversParentTypes['FeatureConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FeatureEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeatureEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeatureEdge'] = ResolversParentTypes['FeatureEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Feature'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FeatureParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['FeatureParent'] = ResolversParentTypes['FeatureParent']> = {
  __resolveType: TypeResolveFn<'PageContent', ParentType, ContextType>;
};

export type FooterGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['FooterGroup'] = ResolversParentTypes['FooterGroup']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterGroupCreatedByArgs>>;
  docsGroup?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, Partial<FooterGroupDocsGroupArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<FooterGroupDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  externalLinks?: Resolver<Array<ResolversTypes['ExternalLink']>, ParentType, ContextType, Partial<FooterGroupExternalLinksArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<FooterGroupHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pageContents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<FooterGroupPageContentsArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<FooterGroupPagesArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterGroupPublishedByArgs>>;
  row?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<FooterGroupScheduledInArgs>>;
  sortAlphabetically?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterGroupUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FooterGroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FooterGroupConnection'] = ResolversParentTypes['FooterGroupConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FooterGroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FooterGroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FooterGroupEdge'] = ResolversParentTypes['FooterGroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['FooterGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormResolvers<ContextType = any, ParentType extends ResolversParentTypes['Form'] = ResolversParentTypes['Form']> = {
  button?: Resolver<ResolversTypes['FormButton'], ParentType, ContextType, Partial<FormButtonArgs>>;
  colorScheme?: Resolver<ResolversTypes['ThemeColor'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FormCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<FormDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  fields?: Resolver<Array<ResolversTypes['FormfieldsUnion']>, ParentType, ContextType, Partial<FormFieldsArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<FormHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  pageContents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<FormPageContentsArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FormPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<FormScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FormUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButton'] = ResolversParentTypes['FormButton']> = {
  action?: Resolver<Maybe<ResolversTypes['FormAction']>, ParentType, ContextType>;
  alert?: Resolver<Maybe<ResolversTypes['Alert']>, ParentType, ContextType, Partial<FormButtonAlertArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  variant?: Resolver<Maybe<ResolversTypes['ButtonVariant']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButtonConnection'] = ResolversParentTypes['FormButtonConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FormButtonEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButtonEdge'] = ResolversParentTypes['FormButtonEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['FormButton'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormButtonParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormButtonParent'] = ResolversParentTypes['FormButtonParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type FormConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormConnection'] = ResolversParentTypes['FormConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FormEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormEdge'] = ResolversParentTypes['FormEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Form'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormGroup'] = ResolversParentTypes['FormGroup']> = {
  groupId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormGroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormGroupConnection'] = ResolversParentTypes['FormGroupConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FormGroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormGroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormGroupEdge'] = ResolversParentTypes['FormGroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['FormGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormGroupParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormGroupParent'] = ResolversParentTypes['FormGroupParent']> = {
  __resolveType: TypeResolveFn<'Form', ParentType, ContextType>;
};

export type FormfieldsUnionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FormfieldsUnion'] = ResolversParentTypes['FormfieldsUnion']> = {
  __resolveType: TypeResolveFn<'AddressSearchField' | 'CheckboxField' | 'CurrencyField' | 'DateField' | 'FormGroup' | 'RemoteSelectField' | 'SelectField' | 'TextAreaField' | 'TextInputField', ParentType, ContextType>;
};

export type HeaderGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['HeaderGroup'] = ResolversParentTypes['HeaderGroup']> = {
  columns?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HeaderGroupCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<HeaderGroupDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  externalLinks?: Resolver<Array<ResolversTypes['ExternalLink']>, ParentType, ContextType, Partial<HeaderGroupExternalLinksArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<HeaderGroupHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<HeaderGroupPagesArgs>>;
  pagesOnly?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HeaderGroupPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<HeaderGroupScheduledInArgs>>;
  sortAlphabetically?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HeaderGroupUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HeaderGroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['HeaderGroupConnection'] = ResolversParentTypes['HeaderGroupConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['HeaderGroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HeaderGroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HeaderGroupEdge'] = ResolversParentTypes['HeaderGroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['HeaderGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface HexScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Hex'], any> {
  name: 'Hex';
}

export type HomePageResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePage'] = ResolversParentTypes['HomePage']> = {
  blocks?: Resolver<Array<ResolversTypes['HomePageBlock']>, ParentType, ContextType, Partial<HomePageBlocksArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HomePageCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<HomePageDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<HomePageHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  mainVideo?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<HomePageMainVideoArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HomePagePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<HomePageScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<HomePageUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlock'] = ResolversParentTypes['HomePageBlock']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<HomePageBlockButtonArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<HomePageBlockImageArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlockConnection'] = ResolversParentTypes['HomePageBlockConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['HomePageBlockEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlockEdge'] = ResolversParentTypes['HomePageBlockEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['HomePageBlock'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageBlockParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageBlockParent'] = ResolversParentTypes['HomePageBlockParent']> = {
  __resolveType: TypeResolveFn<'HomePage', ParentType, ContextType>;
};

export type HomePageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageConnection'] = ResolversParentTypes['HomePageConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['HomePageEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HomePageEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['HomePageEdge'] = ResolversParentTypes['HomePageEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['HomePage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Json'], any> {
  name: 'Json';
}

export type LocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']> = {
  distance?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<LocationDistanceArgs, 'from'>>;
  latitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  longitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface LongScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Long'], any> {
  name: 'Long';
}

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  createAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationCreateAdmonitionArgs, 'data'>>;
  createAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationCreateAssetArgs, 'data'>>;
  createBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationCreateBlogPostArgs, 'data'>>;
  createCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationCreateCloudLocationArgs, 'data'>>;
  createConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationCreateConfigurationArgs, 'data'>>;
  createContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationCreateContactFormArgs, 'data'>>;
  createContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationCreateContentButtonArgs, 'data'>>;
  createContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationCreateContentTagArgs, 'data'>>;
  createDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationCreateDocsGroupArgs, 'data'>>;
  createDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationCreateDocsPageArgs, 'data'>>;
  createDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationCreateDocumentArgs, 'data'>>;
  createDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationCreateDocumentGroupArgs, 'data'>>;
  createEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationCreateEmployeeArgs, 'data'>>;
  createFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationCreateFooterGroupArgs, 'data'>>;
  createForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationCreateFormArgs, 'data'>>;
  createHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationCreateHeaderGroupArgs, 'data'>>;
  createHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationCreateHomePageArgs, 'data'>>;
  createOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationCreateOfficeLocationArgs, 'data'>>;
  createPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationCreatePageArgs, 'data'>>;
  createPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationCreatePageContentArgs, 'data'>>;
  createScheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<MutationCreateScheduledReleaseArgs, 'data'>>;
  createTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationCreateTestimonialArgs, 'data'>>;
  createTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationCreateThemeArgs, 'data'>>;
  deleteAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationDeleteAdmonitionArgs, 'where'>>;
  deleteAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationDeleteAssetArgs, 'where'>>;
  deleteBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationDeleteBlogPostArgs, 'where'>>;
  deleteCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationDeleteCloudLocationArgs, 'where'>>;
  deleteConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationDeleteConfigurationArgs, 'where'>>;
  deleteContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationDeleteContactFormArgs, 'where'>>;
  deleteContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationDeleteContentButtonArgs, 'where'>>;
  deleteContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationDeleteContentTagArgs, 'where'>>;
  deleteDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationDeleteDocsGroupArgs, 'where'>>;
  deleteDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationDeleteDocsPageArgs, 'where'>>;
  deleteDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationDeleteDocumentArgs, 'where'>>;
  deleteDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationDeleteDocumentGroupArgs, 'where'>>;
  deleteEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationDeleteEmployeeArgs, 'where'>>;
  deleteFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationDeleteFooterGroupArgs, 'where'>>;
  deleteForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationDeleteFormArgs, 'where'>>;
  deleteHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationDeleteHeaderGroupArgs, 'where'>>;
  deleteHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationDeleteHomePageArgs, 'where'>>;
  deleteManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyAdmonitionsArgs>>;
  deleteManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, Partial<MutationDeleteManyAdmonitionsConnectionArgs>>;
  deleteManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyAssetsArgs>>;
  deleteManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, Partial<MutationDeleteManyAssetsConnectionArgs>>;
  deleteManyBlogPosts?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyBlogPostsArgs>>;
  deleteManyBlogPostsConnection?: Resolver<ResolversTypes['BlogPostConnection'], ParentType, ContextType, Partial<MutationDeleteManyBlogPostsConnectionArgs>>;
  deleteManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyCloudLocationsArgs>>;
  deleteManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, Partial<MutationDeleteManyCloudLocationsConnectionArgs>>;
  deleteManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyConfigurationsArgs>>;
  deleteManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, Partial<MutationDeleteManyConfigurationsConnectionArgs>>;
  deleteManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyContactFormsArgs>>;
  deleteManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, Partial<MutationDeleteManyContactFormsConnectionArgs>>;
  deleteManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyContentButtonsArgs>>;
  deleteManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, Partial<MutationDeleteManyContentButtonsConnectionArgs>>;
  deleteManyContentTags?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyContentTagsArgs>>;
  deleteManyContentTagsConnection?: Resolver<ResolversTypes['ContentTagConnection'], ParentType, ContextType, Partial<MutationDeleteManyContentTagsConnectionArgs>>;
  deleteManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyDocsGroupsArgs>>;
  deleteManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, Partial<MutationDeleteManyDocsGroupsConnectionArgs>>;
  deleteManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyDocsPagesArgs>>;
  deleteManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, Partial<MutationDeleteManyDocsPagesConnectionArgs>>;
  deleteManyDocumentGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyDocumentGroupsArgs>>;
  deleteManyDocumentGroupsConnection?: Resolver<ResolversTypes['DocumentGroupConnection'], ParentType, ContextType, Partial<MutationDeleteManyDocumentGroupsConnectionArgs>>;
  deleteManyDocuments?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyDocumentsArgs>>;
  deleteManyDocumentsConnection?: Resolver<ResolversTypes['DocumentConnection'], ParentType, ContextType, Partial<MutationDeleteManyDocumentsConnectionArgs>>;
  deleteManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyEmployeesArgs>>;
  deleteManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, Partial<MutationDeleteManyEmployeesConnectionArgs>>;
  deleteManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyFooterGroupsArgs>>;
  deleteManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, Partial<MutationDeleteManyFooterGroupsConnectionArgs>>;
  deleteManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyFormsArgs>>;
  deleteManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, Partial<MutationDeleteManyFormsConnectionArgs>>;
  deleteManyHeaderGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyHeaderGroupsArgs>>;
  deleteManyHeaderGroupsConnection?: Resolver<ResolversTypes['HeaderGroupConnection'], ParentType, ContextType, Partial<MutationDeleteManyHeaderGroupsConnectionArgs>>;
  deleteManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyHomePagesArgs>>;
  deleteManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, Partial<MutationDeleteManyHomePagesConnectionArgs>>;
  deleteManyOfficeLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyOfficeLocationsArgs>>;
  deleteManyOfficeLocationsConnection?: Resolver<ResolversTypes['OfficeLocationConnection'], ParentType, ContextType, Partial<MutationDeleteManyOfficeLocationsConnectionArgs>>;
  deleteManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyPageContentsArgs>>;
  deleteManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, Partial<MutationDeleteManyPageContentsConnectionArgs>>;
  deleteManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyPagesArgs>>;
  deleteManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, Partial<MutationDeleteManyPagesConnectionArgs>>;
  deleteManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyTestimonialsArgs>>;
  deleteManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, Partial<MutationDeleteManyTestimonialsConnectionArgs>>;
  deleteManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, Partial<MutationDeleteManyThemesArgs>>;
  deleteManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, Partial<MutationDeleteManyThemesConnectionArgs>>;
  deleteOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationDeleteOfficeLocationArgs, 'where'>>;
  deletePage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationDeletePageArgs, 'where'>>;
  deletePageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationDeletePageContentArgs, 'where'>>;
  deleteScheduledOperation?: Resolver<Maybe<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<MutationDeleteScheduledOperationArgs, 'where'>>;
  deleteScheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<MutationDeleteScheduledReleaseArgs, 'where'>>;
  deleteTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationDeleteTestimonialArgs, 'where'>>;
  deleteTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationDeleteThemeArgs, 'where'>>;
  publishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationPublishAdmonitionArgs, 'to' | 'where'>>;
  publishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationPublishAssetArgs, 'publishBase' | 'to' | 'where' | 'withDefaultLocale'>>;
  publishBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationPublishBlogPostArgs, 'to' | 'where'>>;
  publishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationPublishCloudLocationArgs, 'to' | 'where'>>;
  publishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationPublishConfigurationArgs, 'to' | 'where'>>;
  publishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationPublishContactFormArgs, 'to' | 'where'>>;
  publishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationPublishContentButtonArgs, 'to' | 'where'>>;
  publishContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationPublishContentTagArgs, 'to' | 'where'>>;
  publishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationPublishDocsGroupArgs, 'to' | 'where'>>;
  publishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationPublishDocsPageArgs, 'to' | 'where'>>;
  publishDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationPublishDocumentArgs, 'to' | 'where'>>;
  publishDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationPublishDocumentGroupArgs, 'to' | 'where'>>;
  publishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationPublishEmployeeArgs, 'to' | 'where'>>;
  publishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationPublishFooterGroupArgs, 'to' | 'where'>>;
  publishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationPublishFormArgs, 'to' | 'where'>>;
  publishHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationPublishHeaderGroupArgs, 'to' | 'where'>>;
  publishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationPublishHomePageArgs, 'to' | 'where'>>;
  publishManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyAdmonitionsArgs, 'to'>>;
  publishManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<MutationPublishManyAdmonitionsConnectionArgs, 'from' | 'to'>>;
  publishManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyAssetsArgs, 'publishBase' | 'to' | 'withDefaultLocale'>>;
  publishManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<MutationPublishManyAssetsConnectionArgs, 'from' | 'publishBase' | 'to' | 'withDefaultLocale'>>;
  publishManyBlogPosts?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyBlogPostsArgs, 'to'>>;
  publishManyBlogPostsConnection?: Resolver<ResolversTypes['BlogPostConnection'], ParentType, ContextType, RequireFields<MutationPublishManyBlogPostsConnectionArgs, 'from' | 'to'>>;
  publishManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyCloudLocationsArgs, 'to'>>;
  publishManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<MutationPublishManyCloudLocationsConnectionArgs, 'from' | 'to'>>;
  publishManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyConfigurationsArgs, 'to'>>;
  publishManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<MutationPublishManyConfigurationsConnectionArgs, 'from' | 'to'>>;
  publishManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyContactFormsArgs, 'to'>>;
  publishManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<MutationPublishManyContactFormsConnectionArgs, 'from' | 'to'>>;
  publishManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyContentButtonsArgs, 'to'>>;
  publishManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<MutationPublishManyContentButtonsConnectionArgs, 'from' | 'to'>>;
  publishManyContentTags?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyContentTagsArgs, 'to'>>;
  publishManyContentTagsConnection?: Resolver<ResolversTypes['ContentTagConnection'], ParentType, ContextType, RequireFields<MutationPublishManyContentTagsConnectionArgs, 'from' | 'to'>>;
  publishManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyDocsGroupsArgs, 'to'>>;
  publishManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<MutationPublishManyDocsGroupsConnectionArgs, 'from' | 'to'>>;
  publishManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyDocsPagesArgs, 'to'>>;
  publishManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<MutationPublishManyDocsPagesConnectionArgs, 'from' | 'to'>>;
  publishManyDocumentGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyDocumentGroupsArgs, 'to'>>;
  publishManyDocumentGroupsConnection?: Resolver<ResolversTypes['DocumentGroupConnection'], ParentType, ContextType, RequireFields<MutationPublishManyDocumentGroupsConnectionArgs, 'from' | 'to'>>;
  publishManyDocuments?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyDocumentsArgs, 'to'>>;
  publishManyDocumentsConnection?: Resolver<ResolversTypes['DocumentConnection'], ParentType, ContextType, RequireFields<MutationPublishManyDocumentsConnectionArgs, 'from' | 'to'>>;
  publishManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyEmployeesArgs, 'to'>>;
  publishManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<MutationPublishManyEmployeesConnectionArgs, 'from' | 'to'>>;
  publishManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyFooterGroupsArgs, 'to'>>;
  publishManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<MutationPublishManyFooterGroupsConnectionArgs, 'from' | 'to'>>;
  publishManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyFormsArgs, 'to'>>;
  publishManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<MutationPublishManyFormsConnectionArgs, 'from' | 'to'>>;
  publishManyHeaderGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyHeaderGroupsArgs, 'to'>>;
  publishManyHeaderGroupsConnection?: Resolver<ResolversTypes['HeaderGroupConnection'], ParentType, ContextType, RequireFields<MutationPublishManyHeaderGroupsConnectionArgs, 'from' | 'to'>>;
  publishManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyHomePagesArgs, 'to'>>;
  publishManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<MutationPublishManyHomePagesConnectionArgs, 'from' | 'to'>>;
  publishManyOfficeLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyOfficeLocationsArgs, 'to'>>;
  publishManyOfficeLocationsConnection?: Resolver<ResolversTypes['OfficeLocationConnection'], ParentType, ContextType, RequireFields<MutationPublishManyOfficeLocationsConnectionArgs, 'from' | 'to'>>;
  publishManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyPageContentsArgs, 'to'>>;
  publishManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<MutationPublishManyPageContentsConnectionArgs, 'from' | 'to'>>;
  publishManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyPagesArgs, 'to'>>;
  publishManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<MutationPublishManyPagesConnectionArgs, 'from' | 'to'>>;
  publishManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyTestimonialsArgs, 'to'>>;
  publishManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<MutationPublishManyTestimonialsConnectionArgs, 'from' | 'to'>>;
  publishManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationPublishManyThemesArgs, 'to'>>;
  publishManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<MutationPublishManyThemesConnectionArgs, 'from' | 'to'>>;
  publishOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationPublishOfficeLocationArgs, 'to' | 'where'>>;
  publishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationPublishPageArgs, 'to' | 'where'>>;
  publishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationPublishPageContentArgs, 'to' | 'where'>>;
  publishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationPublishTestimonialArgs, 'to' | 'where'>>;
  publishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationPublishThemeArgs, 'to' | 'where'>>;
  schedulePublishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationSchedulePublishAdmonitionArgs, 'to' | 'where'>>;
  schedulePublishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationSchedulePublishAssetArgs, 'publishBase' | 'to' | 'where' | 'withDefaultLocale'>>;
  schedulePublishBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationSchedulePublishBlogPostArgs, 'to' | 'where'>>;
  schedulePublishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationSchedulePublishCloudLocationArgs, 'to' | 'where'>>;
  schedulePublishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationSchedulePublishConfigurationArgs, 'to' | 'where'>>;
  schedulePublishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationSchedulePublishContactFormArgs, 'to' | 'where'>>;
  schedulePublishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationSchedulePublishContentButtonArgs, 'to' | 'where'>>;
  schedulePublishContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationSchedulePublishContentTagArgs, 'to' | 'where'>>;
  schedulePublishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationSchedulePublishDocsGroupArgs, 'to' | 'where'>>;
  schedulePublishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationSchedulePublishDocsPageArgs, 'to' | 'where'>>;
  schedulePublishDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationSchedulePublishDocumentArgs, 'to' | 'where'>>;
  schedulePublishDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationSchedulePublishDocumentGroupArgs, 'to' | 'where'>>;
  schedulePublishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationSchedulePublishEmployeeArgs, 'to' | 'where'>>;
  schedulePublishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationSchedulePublishFooterGroupArgs, 'to' | 'where'>>;
  schedulePublishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationSchedulePublishFormArgs, 'to' | 'where'>>;
  schedulePublishHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationSchedulePublishHeaderGroupArgs, 'to' | 'where'>>;
  schedulePublishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationSchedulePublishHomePageArgs, 'to' | 'where'>>;
  schedulePublishOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationSchedulePublishOfficeLocationArgs, 'to' | 'where'>>;
  schedulePublishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationSchedulePublishPageArgs, 'to' | 'where'>>;
  schedulePublishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationSchedulePublishPageContentArgs, 'to' | 'where'>>;
  schedulePublishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationSchedulePublishTestimonialArgs, 'to' | 'where'>>;
  schedulePublishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationSchedulePublishThemeArgs, 'to' | 'where'>>;
  scheduleUnpublishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishAdmonitionArgs, 'from' | 'where'>>;
  scheduleUnpublishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishAssetArgs, 'from' | 'unpublishBase' | 'where'>>;
  scheduleUnpublishBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishBlogPostArgs, 'from' | 'where'>>;
  scheduleUnpublishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishCloudLocationArgs, 'from' | 'where'>>;
  scheduleUnpublishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishConfigurationArgs, 'from' | 'where'>>;
  scheduleUnpublishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishContactFormArgs, 'from' | 'where'>>;
  scheduleUnpublishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishContentButtonArgs, 'from' | 'where'>>;
  scheduleUnpublishContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishContentTagArgs, 'from' | 'where'>>;
  scheduleUnpublishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishDocsGroupArgs, 'from' | 'where'>>;
  scheduleUnpublishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishDocsPageArgs, 'from' | 'where'>>;
  scheduleUnpublishDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishDocumentArgs, 'from' | 'where'>>;
  scheduleUnpublishDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishDocumentGroupArgs, 'from' | 'where'>>;
  scheduleUnpublishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishEmployeeArgs, 'from' | 'where'>>;
  scheduleUnpublishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishFooterGroupArgs, 'from' | 'where'>>;
  scheduleUnpublishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishFormArgs, 'from' | 'where'>>;
  scheduleUnpublishHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishHeaderGroupArgs, 'from' | 'where'>>;
  scheduleUnpublishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishHomePageArgs, 'from' | 'where'>>;
  scheduleUnpublishOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishOfficeLocationArgs, 'from' | 'where'>>;
  scheduleUnpublishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishPageArgs, 'from' | 'where'>>;
  scheduleUnpublishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishPageContentArgs, 'from' | 'where'>>;
  scheduleUnpublishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishTestimonialArgs, 'from' | 'where'>>;
  scheduleUnpublishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationScheduleUnpublishThemeArgs, 'from' | 'where'>>;
  unpublishAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationUnpublishAdmonitionArgs, 'from' | 'where'>>;
  unpublishAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationUnpublishAssetArgs, 'from' | 'unpublishBase' | 'where'>>;
  unpublishBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationUnpublishBlogPostArgs, 'from' | 'where'>>;
  unpublishCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationUnpublishCloudLocationArgs, 'from' | 'where'>>;
  unpublishConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationUnpublishConfigurationArgs, 'from' | 'where'>>;
  unpublishContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationUnpublishContactFormArgs, 'from' | 'where'>>;
  unpublishContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationUnpublishContentButtonArgs, 'from' | 'where'>>;
  unpublishContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationUnpublishContentTagArgs, 'from' | 'where'>>;
  unpublishDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationUnpublishDocsGroupArgs, 'from' | 'where'>>;
  unpublishDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationUnpublishDocsPageArgs, 'from' | 'where'>>;
  unpublishDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationUnpublishDocumentArgs, 'from' | 'where'>>;
  unpublishDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationUnpublishDocumentGroupArgs, 'from' | 'where'>>;
  unpublishEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationUnpublishEmployeeArgs, 'from' | 'where'>>;
  unpublishFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationUnpublishFooterGroupArgs, 'from' | 'where'>>;
  unpublishForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationUnpublishFormArgs, 'from' | 'where'>>;
  unpublishHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationUnpublishHeaderGroupArgs, 'from' | 'where'>>;
  unpublishHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationUnpublishHomePageArgs, 'from' | 'where'>>;
  unpublishManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyAdmonitionsArgs, 'from'>>;
  unpublishManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyAdmonitionsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyAssetsArgs, 'from' | 'unpublishBase'>>;
  unpublishManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyAssetsConnectionArgs, 'from' | 'stage' | 'unpublishBase'>>;
  unpublishManyBlogPosts?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyBlogPostsArgs, 'from'>>;
  unpublishManyBlogPostsConnection?: Resolver<ResolversTypes['BlogPostConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyBlogPostsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyCloudLocationsArgs, 'from'>>;
  unpublishManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyCloudLocationsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyConfigurationsArgs, 'from'>>;
  unpublishManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyConfigurationsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyContactFormsArgs, 'from'>>;
  unpublishManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyContactFormsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyContentButtonsArgs, 'from'>>;
  unpublishManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyContentButtonsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyContentTags?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyContentTagsArgs, 'from'>>;
  unpublishManyContentTagsConnection?: Resolver<ResolversTypes['ContentTagConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyContentTagsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsGroupsArgs, 'from'>>;
  unpublishManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsGroupsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsPagesArgs, 'from'>>;
  unpublishManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocsPagesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyDocumentGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocumentGroupsArgs, 'from'>>;
  unpublishManyDocumentGroupsConnection?: Resolver<ResolversTypes['DocumentGroupConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocumentGroupsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyDocuments?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocumentsArgs, 'from'>>;
  unpublishManyDocumentsConnection?: Resolver<ResolversTypes['DocumentConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyDocumentsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyEmployeesArgs, 'from'>>;
  unpublishManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyEmployeesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyFooterGroupsArgs, 'from'>>;
  unpublishManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyFooterGroupsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyFormsArgs, 'from'>>;
  unpublishManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyFormsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyHeaderGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyHeaderGroupsArgs, 'from'>>;
  unpublishManyHeaderGroupsConnection?: Resolver<ResolversTypes['HeaderGroupConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyHeaderGroupsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyHomePagesArgs, 'from'>>;
  unpublishManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyHomePagesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyOfficeLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyOfficeLocationsArgs, 'from'>>;
  unpublishManyOfficeLocationsConnection?: Resolver<ResolversTypes['OfficeLocationConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyOfficeLocationsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyPageContentsArgs, 'from'>>;
  unpublishManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyPageContentsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyPagesArgs, 'from'>>;
  unpublishManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyPagesConnectionArgs, 'from' | 'stage'>>;
  unpublishManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyTestimonialsArgs, 'from'>>;
  unpublishManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyTestimonialsConnectionArgs, 'from' | 'stage'>>;
  unpublishManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUnpublishManyThemesArgs, 'from'>>;
  unpublishManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<MutationUnpublishManyThemesConnectionArgs, 'from' | 'stage'>>;
  unpublishOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationUnpublishOfficeLocationArgs, 'from' | 'where'>>;
  unpublishPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationUnpublishPageArgs, 'from' | 'where'>>;
  unpublishPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationUnpublishPageContentArgs, 'from' | 'where'>>;
  unpublishTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationUnpublishTestimonialArgs, 'from' | 'where'>>;
  unpublishTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationUnpublishThemeArgs, 'from' | 'where'>>;
  updateAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationUpdateAdmonitionArgs, 'data' | 'where'>>;
  updateAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationUpdateAssetArgs, 'data' | 'where'>>;
  updateBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationUpdateBlogPostArgs, 'data' | 'where'>>;
  updateCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationUpdateCloudLocationArgs, 'data' | 'where'>>;
  updateConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationUpdateConfigurationArgs, 'data' | 'where'>>;
  updateContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationUpdateContactFormArgs, 'data' | 'where'>>;
  updateContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationUpdateContentButtonArgs, 'data' | 'where'>>;
  updateContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationUpdateContentTagArgs, 'data' | 'where'>>;
  updateDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationUpdateDocsGroupArgs, 'data' | 'where'>>;
  updateDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationUpdateDocsPageArgs, 'data' | 'where'>>;
  updateDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationUpdateDocumentArgs, 'data' | 'where'>>;
  updateDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationUpdateDocumentGroupArgs, 'data' | 'where'>>;
  updateEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationUpdateEmployeeArgs, 'data' | 'where'>>;
  updateFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationUpdateFooterGroupArgs, 'data' | 'where'>>;
  updateForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationUpdateFormArgs, 'data' | 'where'>>;
  updateHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationUpdateHeaderGroupArgs, 'data' | 'where'>>;
  updateHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationUpdateHomePageArgs, 'data' | 'where'>>;
  updateManyAdmonitions?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyAdmonitionsArgs, 'data'>>;
  updateManyAdmonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyAdmonitionsConnectionArgs, 'data'>>;
  updateManyAssets?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyAssetsArgs, 'data'>>;
  updateManyAssetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyAssetsConnectionArgs, 'data'>>;
  updateManyBlogPosts?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyBlogPostsArgs, 'data'>>;
  updateManyBlogPostsConnection?: Resolver<ResolversTypes['BlogPostConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyBlogPostsConnectionArgs, 'data'>>;
  updateManyCloudLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyCloudLocationsArgs, 'data'>>;
  updateManyCloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyCloudLocationsConnectionArgs, 'data'>>;
  updateManyConfigurations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyConfigurationsArgs, 'data'>>;
  updateManyConfigurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyConfigurationsConnectionArgs, 'data'>>;
  updateManyContactForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyContactFormsArgs, 'data'>>;
  updateManyContactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyContactFormsConnectionArgs, 'data'>>;
  updateManyContentButtons?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyContentButtonsArgs, 'data'>>;
  updateManyContentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyContentButtonsConnectionArgs, 'data'>>;
  updateManyContentTags?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyContentTagsArgs, 'data'>>;
  updateManyContentTagsConnection?: Resolver<ResolversTypes['ContentTagConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyContentTagsConnectionArgs, 'data'>>;
  updateManyDocsGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsGroupsArgs, 'data'>>;
  updateManyDocsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsGroupsConnectionArgs, 'data'>>;
  updateManyDocsPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsPagesArgs, 'data'>>;
  updateManyDocsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyDocsPagesConnectionArgs, 'data'>>;
  updateManyDocumentGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyDocumentGroupsArgs, 'data'>>;
  updateManyDocumentGroupsConnection?: Resolver<ResolversTypes['DocumentGroupConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyDocumentGroupsConnectionArgs, 'data'>>;
  updateManyDocuments?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyDocumentsArgs, 'data'>>;
  updateManyDocumentsConnection?: Resolver<ResolversTypes['DocumentConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyDocumentsConnectionArgs, 'data'>>;
  updateManyEmployees?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyEmployeesArgs, 'data'>>;
  updateManyEmployeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyEmployeesConnectionArgs, 'data'>>;
  updateManyFooterGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyFooterGroupsArgs, 'data'>>;
  updateManyFooterGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyFooterGroupsConnectionArgs, 'data'>>;
  updateManyForms?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyFormsArgs, 'data'>>;
  updateManyFormsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyFormsConnectionArgs, 'data'>>;
  updateManyHeaderGroups?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyHeaderGroupsArgs, 'data'>>;
  updateManyHeaderGroupsConnection?: Resolver<ResolversTypes['HeaderGroupConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyHeaderGroupsConnectionArgs, 'data'>>;
  updateManyHomePages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyHomePagesArgs, 'data'>>;
  updateManyHomePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyHomePagesConnectionArgs, 'data'>>;
  updateManyOfficeLocations?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyOfficeLocationsArgs, 'data'>>;
  updateManyOfficeLocationsConnection?: Resolver<ResolversTypes['OfficeLocationConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyOfficeLocationsConnectionArgs, 'data'>>;
  updateManyPageContents?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyPageContentsArgs, 'data'>>;
  updateManyPageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyPageContentsConnectionArgs, 'data'>>;
  updateManyPages?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyPagesArgs, 'data'>>;
  updateManyPagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyPagesConnectionArgs, 'data'>>;
  updateManyTestimonials?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyTestimonialsArgs, 'data'>>;
  updateManyTestimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyTestimonialsConnectionArgs, 'data'>>;
  updateManyThemes?: Resolver<ResolversTypes['BatchPayload'], ParentType, ContextType, RequireFields<MutationUpdateManyThemesArgs, 'data'>>;
  updateManyThemesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<MutationUpdateManyThemesConnectionArgs, 'data'>>;
  updateOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationUpdateOfficeLocationArgs, 'data' | 'where'>>;
  updatePage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationUpdatePageArgs, 'data' | 'where'>>;
  updatePageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationUpdatePageContentArgs, 'data' | 'where'>>;
  updateScheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<MutationUpdateScheduledReleaseArgs, 'data' | 'where'>>;
  updateTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationUpdateTestimonialArgs, 'data' | 'where'>>;
  updateTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationUpdateThemeArgs, 'data' | 'where'>>;
  upsertAdmonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<MutationUpsertAdmonitionArgs, 'upsert' | 'where'>>;
  upsertAsset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<MutationUpsertAssetArgs, 'upsert' | 'where'>>;
  upsertBlogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<MutationUpsertBlogPostArgs, 'upsert' | 'where'>>;
  upsertCloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<MutationUpsertCloudLocationArgs, 'upsert' | 'where'>>;
  upsertConfiguration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<MutationUpsertConfigurationArgs, 'upsert' | 'where'>>;
  upsertContactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<MutationUpsertContactFormArgs, 'upsert' | 'where'>>;
  upsertContentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<MutationUpsertContentButtonArgs, 'upsert' | 'where'>>;
  upsertContentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<MutationUpsertContentTagArgs, 'upsert' | 'where'>>;
  upsertDocsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<MutationUpsertDocsGroupArgs, 'upsert' | 'where'>>;
  upsertDocsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<MutationUpsertDocsPageArgs, 'upsert' | 'where'>>;
  upsertDocument?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<MutationUpsertDocumentArgs, 'upsert' | 'where'>>;
  upsertDocumentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<MutationUpsertDocumentGroupArgs, 'upsert' | 'where'>>;
  upsertEmployee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<MutationUpsertEmployeeArgs, 'upsert' | 'where'>>;
  upsertFooterGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<MutationUpsertFooterGroupArgs, 'upsert' | 'where'>>;
  upsertForm?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<MutationUpsertFormArgs, 'upsert' | 'where'>>;
  upsertHeaderGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<MutationUpsertHeaderGroupArgs, 'upsert' | 'where'>>;
  upsertHomePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<MutationUpsertHomePageArgs, 'upsert' | 'where'>>;
  upsertOfficeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<MutationUpsertOfficeLocationArgs, 'upsert' | 'where'>>;
  upsertPage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<MutationUpsertPageArgs, 'upsert' | 'where'>>;
  upsertPageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<MutationUpsertPageContentArgs, 'upsert' | 'where'>>;
  upsertTestimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<MutationUpsertTestimonialArgs, 'upsert' | 'where'>>;
  upsertTheme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<MutationUpsertThemeArgs, 'upsert' | 'where'>>;
};

export type NodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'BlogPost' | 'CloudLocation' | 'Configuration' | 'ContactForm' | 'ContentButton' | 'ContentTag' | 'DocsGroup' | 'DocsPage' | 'Document' | 'DocumentGroup' | 'Employee' | 'FooterGroup' | 'Form' | 'HeaderGroup' | 'HomePage' | 'OfficeLocation' | 'Page' | 'PageContent' | 'ScheduledOperation' | 'ScheduledRelease' | 'Testimonial' | 'Theme' | 'User', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
};

export type OfficeLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['OfficeLocation'] = ResolversParentTypes['OfficeLocation']> = {
  address?: Resolver<ResolversTypes['Address'], ParentType, ContextType, Partial<OfficeLocationAddressArgs>>;
  closeTime?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<OfficeLocationCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<OfficeLocationDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<OfficeLocationHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  location?: Resolver<ResolversTypes['Location'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  openTime?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  photo?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<OfficeLocationPhotoArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<OfficeLocationPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<OfficeLocationScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<OfficeLocationUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OfficeLocationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['OfficeLocationConnection'] = ResolversParentTypes['OfficeLocationConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['OfficeLocationEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OfficeLocationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['OfficeLocationEdge'] = ResolversParentTypes['OfficeLocationEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['OfficeLocation'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageResolvers<ContextType = any, ParentType extends ResolversParentTypes['Page'] = ResolversParentTypes['Page']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  callout?: Resolver<Maybe<ResolversTypes['Callout']>, ParentType, ContextType, Partial<PageCalloutArgs>>;
  contents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<PageContentsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PageDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<PageFooterGroupArgs>>;
  footerTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  headerGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, Partial<PageHeaderGroupArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PageHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PagePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<PageScheduledInArgs>>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageConnection'] = ResolversParentTypes['PageConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['PageEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageContentResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageContent'] = ResolversParentTypes['PageContent']> = {
  body?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  button?: Resolver<Maybe<ResolversTypes['Button']>, ParentType, ContextType, Partial<PageContentButtonArgs>>;
  callToAction?: Resolver<ResolversTypes['CallToActionSettings'], ParentType, ContextType, Partial<PageContentCallToActionArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageContentCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<PageContentDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  features?: Resolver<Array<ResolversTypes['Feature']>, ParentType, ContextType, Partial<PageContentFeaturesArgs>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, Partial<PageContentFooterGroupArgs>>;
  footerTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  form?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, Partial<PageContentFormArgs>>;
  hideFromHeader?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PageContentHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<PageContentImageArgs>>;
  page?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, Partial<PageContentPageArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageContentPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<PageContentScheduledInArgs>>;
  showUpdatedDate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageContentUpdatedByArgs>>;
  vendorLogo?: Resolver<Maybe<ResolversTypes['VendorLogo']>, ParentType, ContextType, Partial<PageContentVendorLogoArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageContentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageContentConnection'] = ResolversParentTypes['PageContentConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['PageContentEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageContentEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageContentEdge'] = ResolversParentTypes['PageContentEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['PageContent'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageEdge'] = ResolversParentTypes['PageEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Page'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  pageSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  admonition?: Resolver<Maybe<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<QueryAdmonitionArgs, 'locales' | 'stage' | 'where'>>;
  admonitionVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryAdmonitionVersionArgs, 'where'>>;
  admonitions?: Resolver<Array<ResolversTypes['Admonition']>, ParentType, ContextType, RequireFields<QueryAdmonitionsArgs, 'locales' | 'stage'>>;
  admonitionsConnection?: Resolver<ResolversTypes['AdmonitionConnection'], ParentType, ContextType, RequireFields<QueryAdmonitionsConnectionArgs, 'locales' | 'stage'>>;
  asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<QueryAssetArgs, 'locales' | 'stage' | 'where'>>;
  assetVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryAssetVersionArgs, 'where'>>;
  assets?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<QueryAssetsArgs, 'locales' | 'stage'>>;
  assetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<QueryAssetsConnectionArgs, 'locales' | 'stage'>>;
  blogPost?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<QueryBlogPostArgs, 'locales' | 'stage' | 'where'>>;
  blogPostVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryBlogPostVersionArgs, 'where'>>;
  blogPosts?: Resolver<Array<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<QueryBlogPostsArgs, 'locales' | 'stage'>>;
  blogPostsConnection?: Resolver<ResolversTypes['BlogPostConnection'], ParentType, ContextType, RequireFields<QueryBlogPostsConnectionArgs, 'locales' | 'stage'>>;
  cloudLocation?: Resolver<Maybe<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<QueryCloudLocationArgs, 'locales' | 'stage' | 'where'>>;
  cloudLocationVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryCloudLocationVersionArgs, 'where'>>;
  cloudLocations?: Resolver<Array<ResolversTypes['CloudLocation']>, ParentType, ContextType, RequireFields<QueryCloudLocationsArgs, 'locales' | 'stage'>>;
  cloudLocationsConnection?: Resolver<ResolversTypes['CloudLocationConnection'], ParentType, ContextType, RequireFields<QueryCloudLocationsConnectionArgs, 'locales' | 'stage'>>;
  configuration?: Resolver<Maybe<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<QueryConfigurationArgs, 'locales' | 'stage' | 'where'>>;
  configurationVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryConfigurationVersionArgs, 'where'>>;
  configurations?: Resolver<Array<ResolversTypes['Configuration']>, ParentType, ContextType, RequireFields<QueryConfigurationsArgs, 'locales' | 'stage'>>;
  configurationsConnection?: Resolver<ResolversTypes['ConfigurationConnection'], ParentType, ContextType, RequireFields<QueryConfigurationsConnectionArgs, 'locales' | 'stage'>>;
  contactForm?: Resolver<Maybe<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<QueryContactFormArgs, 'locales' | 'stage' | 'where'>>;
  contactFormVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryContactFormVersionArgs, 'where'>>;
  contactForms?: Resolver<Array<ResolversTypes['ContactForm']>, ParentType, ContextType, RequireFields<QueryContactFormsArgs, 'locales' | 'stage'>>;
  contactFormsConnection?: Resolver<ResolversTypes['ContactFormConnection'], ParentType, ContextType, RequireFields<QueryContactFormsConnectionArgs, 'locales' | 'stage'>>;
  contentButton?: Resolver<Maybe<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<QueryContentButtonArgs, 'locales' | 'stage' | 'where'>>;
  contentButtonVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryContentButtonVersionArgs, 'where'>>;
  contentButtons?: Resolver<Array<ResolversTypes['ContentButton']>, ParentType, ContextType, RequireFields<QueryContentButtonsArgs, 'locales' | 'stage'>>;
  contentButtonsConnection?: Resolver<ResolversTypes['ContentButtonConnection'], ParentType, ContextType, RequireFields<QueryContentButtonsConnectionArgs, 'locales' | 'stage'>>;
  contentTag?: Resolver<Maybe<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<QueryContentTagArgs, 'locales' | 'stage' | 'where'>>;
  contentTagVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryContentTagVersionArgs, 'where'>>;
  contentTags?: Resolver<Array<ResolversTypes['ContentTag']>, ParentType, ContextType, RequireFields<QueryContentTagsArgs, 'locales' | 'stage'>>;
  contentTagsConnection?: Resolver<ResolversTypes['ContentTagConnection'], ParentType, ContextType, RequireFields<QueryContentTagsConnectionArgs, 'locales' | 'stage'>>;
  docsGroup?: Resolver<Maybe<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<QueryDocsGroupArgs, 'locales' | 'stage' | 'where'>>;
  docsGroupVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryDocsGroupVersionArgs, 'where'>>;
  docsGroups?: Resolver<Array<ResolversTypes['DocsGroup']>, ParentType, ContextType, RequireFields<QueryDocsGroupsArgs, 'locales' | 'stage'>>;
  docsGroupsConnection?: Resolver<ResolversTypes['DocsGroupConnection'], ParentType, ContextType, RequireFields<QueryDocsGroupsConnectionArgs, 'locales' | 'stage'>>;
  docsPage?: Resolver<Maybe<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<QueryDocsPageArgs, 'locales' | 'stage' | 'where'>>;
  docsPageVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryDocsPageVersionArgs, 'where'>>;
  docsPages?: Resolver<Array<ResolversTypes['DocsPage']>, ParentType, ContextType, RequireFields<QueryDocsPagesArgs, 'locales' | 'stage'>>;
  docsPagesConnection?: Resolver<ResolversTypes['DocsPageConnection'], ParentType, ContextType, RequireFields<QueryDocsPagesConnectionArgs, 'locales' | 'stage'>>;
  document?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<QueryDocumentArgs, 'locales' | 'stage' | 'where'>>;
  documentGroup?: Resolver<Maybe<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<QueryDocumentGroupArgs, 'locales' | 'stage' | 'where'>>;
  documentGroupVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryDocumentGroupVersionArgs, 'where'>>;
  documentGroups?: Resolver<Array<ResolversTypes['DocumentGroup']>, ParentType, ContextType, RequireFields<QueryDocumentGroupsArgs, 'locales' | 'stage'>>;
  documentGroupsConnection?: Resolver<ResolversTypes['DocumentGroupConnection'], ParentType, ContextType, RequireFields<QueryDocumentGroupsConnectionArgs, 'locales' | 'stage'>>;
  documentVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryDocumentVersionArgs, 'where'>>;
  documents?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType, RequireFields<QueryDocumentsArgs, 'locales' | 'stage'>>;
  documentsConnection?: Resolver<ResolversTypes['DocumentConnection'], ParentType, ContextType, RequireFields<QueryDocumentsConnectionArgs, 'locales' | 'stage'>>;
  employee?: Resolver<Maybe<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<QueryEmployeeArgs, 'locales' | 'stage' | 'where'>>;
  employeeVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryEmployeeVersionArgs, 'where'>>;
  employees?: Resolver<Array<ResolversTypes['Employee']>, ParentType, ContextType, RequireFields<QueryEmployeesArgs, 'locales' | 'stage'>>;
  employeesConnection?: Resolver<ResolversTypes['EmployeeConnection'], ParentType, ContextType, RequireFields<QueryEmployeesConnectionArgs, 'locales' | 'stage'>>;
  entities?: Resolver<Maybe<Array<ResolversTypes['Entity']>>, ParentType, ContextType, RequireFields<QueryEntitiesArgs, 'where'>>;
  footerGroup?: Resolver<Maybe<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<QueryFooterGroupArgs, 'locales' | 'stage' | 'where'>>;
  footerGroupVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryFooterGroupVersionArgs, 'where'>>;
  footerGroups?: Resolver<Array<ResolversTypes['FooterGroup']>, ParentType, ContextType, RequireFields<QueryFooterGroupsArgs, 'locales' | 'stage'>>;
  footerGroupsConnection?: Resolver<ResolversTypes['FooterGroupConnection'], ParentType, ContextType, RequireFields<QueryFooterGroupsConnectionArgs, 'locales' | 'stage'>>;
  form?: Resolver<Maybe<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<QueryFormArgs, 'locales' | 'stage' | 'where'>>;
  formVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryFormVersionArgs, 'where'>>;
  forms?: Resolver<Array<ResolversTypes['Form']>, ParentType, ContextType, RequireFields<QueryFormsArgs, 'locales' | 'stage'>>;
  formsConnection?: Resolver<ResolversTypes['FormConnection'], ParentType, ContextType, RequireFields<QueryFormsConnectionArgs, 'locales' | 'stage'>>;
  headerGroup?: Resolver<Maybe<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<QueryHeaderGroupArgs, 'locales' | 'stage' | 'where'>>;
  headerGroupVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryHeaderGroupVersionArgs, 'where'>>;
  headerGroups?: Resolver<Array<ResolversTypes['HeaderGroup']>, ParentType, ContextType, RequireFields<QueryHeaderGroupsArgs, 'locales' | 'stage'>>;
  headerGroupsConnection?: Resolver<ResolversTypes['HeaderGroupConnection'], ParentType, ContextType, RequireFields<QueryHeaderGroupsConnectionArgs, 'locales' | 'stage'>>;
  homePage?: Resolver<Maybe<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<QueryHomePageArgs, 'locales' | 'stage' | 'where'>>;
  homePageVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryHomePageVersionArgs, 'where'>>;
  homePages?: Resolver<Array<ResolversTypes['HomePage']>, ParentType, ContextType, RequireFields<QueryHomePagesArgs, 'locales' | 'stage'>>;
  homePagesConnection?: Resolver<ResolversTypes['HomePageConnection'], ParentType, ContextType, RequireFields<QueryHomePagesConnectionArgs, 'locales' | 'stage'>>;
  node?: Resolver<Maybe<ResolversTypes['Node']>, ParentType, ContextType, RequireFields<QueryNodeArgs, 'id' | 'locales' | 'stage'>>;
  officeLocation?: Resolver<Maybe<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<QueryOfficeLocationArgs, 'locales' | 'stage' | 'where'>>;
  officeLocationVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryOfficeLocationVersionArgs, 'where'>>;
  officeLocations?: Resolver<Array<ResolversTypes['OfficeLocation']>, ParentType, ContextType, RequireFields<QueryOfficeLocationsArgs, 'locales' | 'stage'>>;
  officeLocationsConnection?: Resolver<ResolversTypes['OfficeLocationConnection'], ParentType, ContextType, RequireFields<QueryOfficeLocationsConnectionArgs, 'locales' | 'stage'>>;
  page?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<QueryPageArgs, 'locales' | 'stage' | 'where'>>;
  pageContent?: Resolver<Maybe<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<QueryPageContentArgs, 'locales' | 'stage' | 'where'>>;
  pageContentVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryPageContentVersionArgs, 'where'>>;
  pageContents?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<QueryPageContentsArgs, 'locales' | 'stage'>>;
  pageContentsConnection?: Resolver<ResolversTypes['PageContentConnection'], ParentType, ContextType, RequireFields<QueryPageContentsConnectionArgs, 'locales' | 'stage'>>;
  pageVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryPageVersionArgs, 'where'>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<QueryPagesArgs, 'locales' | 'stage'>>;
  pagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<QueryPagesConnectionArgs, 'locales' | 'stage'>>;
  scheduledOperation?: Resolver<Maybe<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<QueryScheduledOperationArgs, 'locales' | 'stage' | 'where'>>;
  scheduledOperations?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<QueryScheduledOperationsArgs, 'locales' | 'stage'>>;
  scheduledOperationsConnection?: Resolver<ResolversTypes['ScheduledOperationConnection'], ParentType, ContextType, RequireFields<QueryScheduledOperationsConnectionArgs, 'locales' | 'stage'>>;
  scheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<QueryScheduledReleaseArgs, 'locales' | 'stage' | 'where'>>;
  scheduledReleases?: Resolver<Array<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<QueryScheduledReleasesArgs, 'locales' | 'stage'>>;
  scheduledReleasesConnection?: Resolver<ResolversTypes['ScheduledReleaseConnection'], ParentType, ContextType, RequireFields<QueryScheduledReleasesConnectionArgs, 'locales' | 'stage'>>;
  testimonial?: Resolver<Maybe<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<QueryTestimonialArgs, 'locales' | 'stage' | 'where'>>;
  testimonialVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryTestimonialVersionArgs, 'where'>>;
  testimonials?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<QueryTestimonialsArgs, 'locales' | 'stage'>>;
  testimonialsConnection?: Resolver<ResolversTypes['TestimonialConnection'], ParentType, ContextType, RequireFields<QueryTestimonialsConnectionArgs, 'locales' | 'stage'>>;
  theme?: Resolver<Maybe<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<QueryThemeArgs, 'locales' | 'stage' | 'where'>>;
  themeVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryThemeVersionArgs, 'where'>>;
  themes?: Resolver<Array<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<QueryThemesArgs, 'locales' | 'stage'>>;
  themesConnection?: Resolver<ResolversTypes['ThemeConnection'], ParentType, ContextType, RequireFields<QueryThemesConnectionArgs, 'locales' | 'stage'>>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryUserArgs, 'locales' | 'stage' | 'where'>>;
  users?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryUsersArgs, 'locales' | 'stage'>>;
  usersConnection?: Resolver<ResolversTypes['UserConnection'], ParentType, ContextType, RequireFields<QueryUsersConnectionArgs, 'locales' | 'stage'>>;
};

export type RgbaResolvers<ContextType = any, ParentType extends ResolversParentTypes['RGBA'] = ResolversParentTypes['RGBA']> = {
  a?: Resolver<ResolversTypes['RGBATransparency'], ParentType, ContextType>;
  b?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  g?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  r?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface RgbaHueScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBAHue'], any> {
  name: 'RGBAHue';
}

export interface RgbaTransparencyScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBATransparency'], any> {
  name: 'RGBATransparency';
}

export type RemoteSelectFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoteSelectField'] = ResolversParentTypes['RemoteSelectField']> = {
  dataPath?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  multiple?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RemoteSelectFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoteSelectFieldConnection'] = ResolversParentTypes['RemoteSelectFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RemoteSelectFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RemoteSelectFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoteSelectFieldEdge'] = ResolversParentTypes['RemoteSelectFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['RemoteSelectField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RemoteSelectFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['RemoteSelectFieldParent'] = ResolversParentTypes['RemoteSelectFieldParent']> = {
  __resolveType: TypeResolveFn<'Form', ParentType, ContextType>;
};

export type RichTextResolvers<ContextType = any, ParentType extends ResolversParentTypes['RichText'] = ResolversParentTypes['RichText']> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface RichTextAstScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RichTextAST'], any> {
  name: 'RichTextAST';
}

export type ScheduledOperationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperation'] = ResolversParentTypes['ScheduledOperation']> = {
  affectedDocuments?: Resolver<Array<ResolversTypes['ScheduledOperationAffectedDocument']>, ParentType, ContextType, Partial<ScheduledOperationAffectedDocumentsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationCreatedByArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<ScheduledOperationDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  errorMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationPublishedByArgs>>;
  rawPayload?: Resolver<ResolversTypes['Json'], ParentType, ContextType>;
  release?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, Partial<ScheduledOperationReleaseArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['ScheduledOperationStatus'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledOperationAffectedDocumentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperationAffectedDocument'] = ResolversParentTypes['ScheduledOperationAffectedDocument']> = {
  __resolveType: TypeResolveFn<'Admonition' | 'Asset' | 'BlogPost' | 'CloudLocation' | 'Configuration' | 'ContactForm' | 'ContentButton' | 'ContentTag' | 'DocsGroup' | 'DocsPage' | 'Document' | 'DocumentGroup' | 'Employee' | 'FooterGroup' | 'Form' | 'HeaderGroup' | 'HomePage' | 'OfficeLocation' | 'Page' | 'PageContent' | 'Testimonial' | 'Theme', ParentType, ContextType>;
};

export type ScheduledOperationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperationConnection'] = ResolversParentTypes['ScheduledOperationConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ScheduledOperationEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledOperationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledOperationEdge'] = ResolversParentTypes['ScheduledOperationEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ScheduledOperation'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledReleaseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledRelease'] = ResolversParentTypes['ScheduledRelease']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleaseCreatedByArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<ScheduledReleaseDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  errorMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isImplicit?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  operations?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ScheduledReleaseOperationsArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleasePublishedByArgs>>;
  releaseAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['ScheduledReleaseStatus'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleaseUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledReleaseConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledReleaseConnection'] = ResolversParentTypes['ScheduledReleaseConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ScheduledReleaseEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ScheduledReleaseEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ScheduledReleaseEdge'] = ResolversParentTypes['ScheduledReleaseEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ScheduledRelease'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectField'] = ResolversParentTypes['SelectField']> = {
  creatable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  multiple?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  options?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectFieldConnection'] = ResolversParentTypes['SelectFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['SelectFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectFieldEdge'] = ResolversParentTypes['SelectFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['SelectField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SelectFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['SelectFieldParent'] = ResolversParentTypes['SelectFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type SocialLinkResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLink'] = ResolversParentTypes['SocialLink']> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SocialLinkConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLinkConnection'] = ResolversParentTypes['SocialLinkConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['SocialLinkEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SocialLinkEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLinkEdge'] = ResolversParentTypes['SocialLinkEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['SocialLink'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SocialLinkParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['SocialLinkParent'] = ResolversParentTypes['SocialLinkParent']> = {
  __resolveType: TypeResolveFn<'Configuration', ParentType, ContextType>;
};

export type TestimonialResolvers<ContextType = any, ParentType extends ResolversParentTypes['Testimonial'] = ResolversParentTypes['Testimonial']> = {
  body?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<TestimonialCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Testimonial']>, ParentType, ContextType, RequireFields<TestimonialDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<TestimonialHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  image?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<TestimonialImageArgs>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<TestimonialPublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<TestimonialScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<TestimonialUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TestimonialConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TestimonialConnection'] = ResolversParentTypes['TestimonialConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['TestimonialEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TestimonialEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TestimonialEdge'] = ResolversParentTypes['TestimonialEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Testimonial'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaField'] = ResolversParentTypes['TextAreaField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaFieldConnection'] = ResolversParentTypes['TextAreaFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['TextAreaFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaFieldEdge'] = ResolversParentTypes['TextAreaFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['TextAreaField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextAreaFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextAreaFieldParent'] = ResolversParentTypes['TextAreaFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type TextInputFieldResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputField'] = ResolversParentTypes['TextInputField']> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fieldGroup?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  formId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  validationType?: Resolver<Maybe<ResolversTypes['TextInputValidationType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextInputFieldConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputFieldConnection'] = ResolversParentTypes['TextInputFieldConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['TextInputFieldEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextInputFieldEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputFieldEdge'] = ResolversParentTypes['TextInputFieldEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['TextInputField'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TextInputFieldParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['TextInputFieldParent'] = ResolversParentTypes['TextInputFieldParent']> = {
  __resolveType: TypeResolveFn<'ContactForm' | 'Form', ParentType, ContextType>;
};

export type ThemeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Theme'] = ResolversParentTypes['Theme']> = {
  colors?: Resolver<ResolversTypes['ThemeColors'], ParentType, ContextType, Partial<ThemeColorsArgs>>;
  configurations?: Resolver<Array<ResolversTypes['Configuration']>, ParentType, ContextType, Partial<ThemeConfigurationsArgs>>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ThemeCreatedByArgs>>;
  documentInStages?: Resolver<Array<ResolversTypes['Theme']>, ParentType, ContextType, RequireFields<ThemeDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ThemeHistoryArgs, 'limit' | 'skip'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ThemePublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ThemeScheduledInArgs>>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ThemeUpdatedByArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColors'] = ResolversParentTypes['ThemeColors']> = {
  black?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  blue?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  cyan?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  dark?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  gray?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  green?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  light?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  orange?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  pink?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  primary?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  purple?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  red?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  secondary?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  teal?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  tertiary?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  white?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  yellow?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColorsConnection'] = ResolversParentTypes['ThemeColorsConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ThemeColorsEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColorsEdge'] = ResolversParentTypes['ThemeColorsEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ThemeColors'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeColorsParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeColorsParent'] = ResolversParentTypes['ThemeColorsParent']> = {
  __resolveType: TypeResolveFn<'Theme', ParentType, ContextType>;
};

export type ThemeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeConnection'] = ResolversParentTypes['ThemeConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ThemeEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeEdge'] = ResolversParentTypes['ThemeEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Theme'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeFontsResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeFonts'] = ResolversParentTypes['ThemeFonts']> = {
  black?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  bold?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  extrabold?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hairline?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  headings?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  light?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  medium?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  monospace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  normal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  semibold?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  thin?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeFontsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeFontsConnection'] = ResolversParentTypes['ThemeFontsConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ThemeFontsEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ThemeFontsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ThemeFontsEdge'] = ResolversParentTypes['ThemeFontsEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['ThemeFonts'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<UserDocumentInStagesArgs, 'includeCurrent' | 'inheritLocale' | 'stages'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['UserKind'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserConnection'] = ResolversParentTypes['UserConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['UserEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserEdge'] = ResolversParentTypes['UserEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogo'] = ResolversParentTypes['VendorLogo']> = {
  darkColor?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  lightColor?: Resolver<ResolversTypes['Color'], ParentType, ContextType>;
  logo?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<VendorLogoLogoArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  postText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pretext?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogoConnection'] = ResolversParentTypes['VendorLogoConnection']> = {
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['VendorLogoEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogoEdge'] = ResolversParentTypes['VendorLogoEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['VendorLogo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VendorLogoParentResolvers<ContextType = any, ParentType extends ResolversParentTypes['VendorLogoParent'] = ResolversParentTypes['VendorLogoParent']> = {
  __resolveType: TypeResolveFn<'PageContent', ParentType, ContextType>;
};

export type VersionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Version'] = ResolversParentTypes['Version']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Address?: AddressResolvers<ContextType>;
  AddressConnection?: AddressConnectionResolvers<ContextType>;
  AddressEdge?: AddressEdgeResolvers<ContextType>;
  AddressParent?: AddressParentResolvers<ContextType>;
  AddressSearchField?: AddressSearchFieldResolvers<ContextType>;
  AddressSearchFieldConnection?: AddressSearchFieldConnectionResolvers<ContextType>;
  AddressSearchFieldEdge?: AddressSearchFieldEdgeResolvers<ContextType>;
  AddressSearchFieldParent?: AddressSearchFieldParentResolvers<ContextType>;
  Admonition?: AdmonitionResolvers<ContextType>;
  AdmonitionConnection?: AdmonitionConnectionResolvers<ContextType>;
  AdmonitionEdge?: AdmonitionEdgeResolvers<ContextType>;
  Aggregate?: AggregateResolvers<ContextType>;
  Alert?: AlertResolvers<ContextType>;
  AlertConnection?: AlertConnectionResolvers<ContextType>;
  AlertEdge?: AlertEdgeResolvers<ContextType>;
  AlertParent?: AlertParentResolvers<ContextType>;
  Asset?: AssetResolvers<ContextType>;
  AssetConnection?: AssetConnectionResolvers<ContextType>;
  AssetEdge?: AssetEdgeResolvers<ContextType>;
  BatchPayload?: BatchPayloadResolvers<ContextType>;
  BlogPost?: BlogPostResolvers<ContextType>;
  BlogPostBodyRichText?: BlogPostBodyRichTextResolvers<ContextType>;
  BlogPostBodyRichTextEmbeddedTypes?: BlogPostBodyRichTextEmbeddedTypesResolvers<ContextType>;
  BlogPostConnection?: BlogPostConnectionResolvers<ContextType>;
  BlogPostEdge?: BlogPostEdgeResolvers<ContextType>;
  Button?: ButtonResolvers<ContextType>;
  ButtonConnection?: ButtonConnectionResolvers<ContextType>;
  ButtonEdge?: ButtonEdgeResolvers<ContextType>;
  ButtonParent?: ButtonParentResolvers<ContextType>;
  CallToAction?: CallToActionResolvers<ContextType>;
  CallToActionConnection?: CallToActionConnectionResolvers<ContextType>;
  CallToActionEdge?: CallToActionEdgeResolvers<ContextType>;
  CallToActionParent?: CallToActionParentResolvers<ContextType>;
  CallToActionSettings?: CallToActionSettingsResolvers<ContextType>;
  CallToActionSettingsConnection?: CallToActionSettingsConnectionResolvers<ContextType>;
  CallToActionSettingsEdge?: CallToActionSettingsEdgeResolvers<ContextType>;
  CallToActionSettingsParent?: CallToActionSettingsParentResolvers<ContextType>;
  Callout?: CalloutResolvers<ContextType>;
  CalloutConnection?: CalloutConnectionResolvers<ContextType>;
  CalloutEdge?: CalloutEdgeResolvers<ContextType>;
  CalloutParent?: CalloutParentResolvers<ContextType>;
  CheckboxField?: CheckboxFieldResolvers<ContextType>;
  CheckboxFieldConnection?: CheckboxFieldConnectionResolvers<ContextType>;
  CheckboxFieldEdge?: CheckboxFieldEdgeResolvers<ContextType>;
  CheckboxFieldParent?: CheckboxFieldParentResolvers<ContextType>;
  CloudLocation?: CloudLocationResolvers<ContextType>;
  CloudLocationConnection?: CloudLocationConnectionResolvers<ContextType>;
  CloudLocationEdge?: CloudLocationEdgeResolvers<ContextType>;
  Color?: ColorResolvers<ContextType>;
  Configuration?: ConfigurationResolvers<ContextType>;
  ConfigurationConnection?: ConfigurationConnectionResolvers<ContextType>;
  ConfigurationEdge?: ConfigurationEdgeResolvers<ContextType>;
  ContactForm?: ContactFormResolvers<ContextType>;
  ContactFormConnection?: ContactFormConnectionResolvers<ContextType>;
  ContactFormEdge?: ContactFormEdgeResolvers<ContextType>;
  ContactFormfieldsUnion?: ContactFormfieldsUnionResolvers<ContextType>;
  ContentButton?: ContentButtonResolvers<ContextType>;
  ContentButtonConnection?: ContentButtonConnectionResolvers<ContextType>;
  ContentButtonEdge?: ContentButtonEdgeResolvers<ContextType>;
  ContentTag?: ContentTagResolvers<ContextType>;
  ContentTagConnection?: ContentTagConnectionResolvers<ContextType>;
  ContentTagEdge?: ContentTagEdgeResolvers<ContextType>;
  CurrencyField?: CurrencyFieldResolvers<ContextType>;
  CurrencyFieldConnection?: CurrencyFieldConnectionResolvers<ContextType>;
  CurrencyFieldEdge?: CurrencyFieldEdgeResolvers<ContextType>;
  CurrencyFieldParent?: CurrencyFieldParentResolvers<ContextType>;
  Date?: GraphQLScalarType;
  DateField?: DateFieldResolvers<ContextType>;
  DateFieldConnection?: DateFieldConnectionResolvers<ContextType>;
  DateFieldEdge?: DateFieldEdgeResolvers<ContextType>;
  DateFieldParent?: DateFieldParentResolvers<ContextType>;
  DateTime?: GraphQLScalarType;
  DocsGroup?: DocsGroupResolvers<ContextType>;
  DocsGroupConnection?: DocsGroupConnectionResolvers<ContextType>;
  DocsGroupEdge?: DocsGroupEdgeResolvers<ContextType>;
  DocsGroupSummaryRichText?: DocsGroupSummaryRichTextResolvers<ContextType>;
  DocsGroupSummaryRichTextEmbeddedTypes?: DocsGroupSummaryRichTextEmbeddedTypesResolvers<ContextType>;
  DocsPage?: DocsPageResolvers<ContextType>;
  DocsPageBodyRichText?: DocsPageBodyRichTextResolvers<ContextType>;
  DocsPageBodyRichTextEmbeddedTypes?: DocsPageBodyRichTextEmbeddedTypesResolvers<ContextType>;
  DocsPageConnection?: DocsPageConnectionResolvers<ContextType>;
  DocsPageEdge?: DocsPageEdgeResolvers<ContextType>;
  Document?: DocumentResolvers<ContextType>;
  DocumentConnection?: DocumentConnectionResolvers<ContextType>;
  DocumentEdge?: DocumentEdgeResolvers<ContextType>;
  DocumentGroup?: DocumentGroupResolvers<ContextType>;
  DocumentGroupConnection?: DocumentGroupConnectionResolvers<ContextType>;
  DocumentGroupEdge?: DocumentGroupEdgeResolvers<ContextType>;
  DocumentVersion?: DocumentVersionResolvers<ContextType>;
  Employee?: EmployeeResolvers<ContextType>;
  EmployeeConnection?: EmployeeConnectionResolvers<ContextType>;
  EmployeeEdge?: EmployeeEdgeResolvers<ContextType>;
  Entity?: EntityResolvers<ContextType>;
  ExternalLink?: ExternalLinkResolvers<ContextType>;
  ExternalLinkConnection?: ExternalLinkConnectionResolvers<ContextType>;
  ExternalLinkEdge?: ExternalLinkEdgeResolvers<ContextType>;
  ExternalLinkParent?: ExternalLinkParentResolvers<ContextType>;
  Feature?: FeatureResolvers<ContextType>;
  FeatureConnection?: FeatureConnectionResolvers<ContextType>;
  FeatureEdge?: FeatureEdgeResolvers<ContextType>;
  FeatureParent?: FeatureParentResolvers<ContextType>;
  FooterGroup?: FooterGroupResolvers<ContextType>;
  FooterGroupConnection?: FooterGroupConnectionResolvers<ContextType>;
  FooterGroupEdge?: FooterGroupEdgeResolvers<ContextType>;
  Form?: FormResolvers<ContextType>;
  FormButton?: FormButtonResolvers<ContextType>;
  FormButtonConnection?: FormButtonConnectionResolvers<ContextType>;
  FormButtonEdge?: FormButtonEdgeResolvers<ContextType>;
  FormButtonParent?: FormButtonParentResolvers<ContextType>;
  FormConnection?: FormConnectionResolvers<ContextType>;
  FormEdge?: FormEdgeResolvers<ContextType>;
  FormGroup?: FormGroupResolvers<ContextType>;
  FormGroupConnection?: FormGroupConnectionResolvers<ContextType>;
  FormGroupEdge?: FormGroupEdgeResolvers<ContextType>;
  FormGroupParent?: FormGroupParentResolvers<ContextType>;
  FormfieldsUnion?: FormfieldsUnionResolvers<ContextType>;
  HeaderGroup?: HeaderGroupResolvers<ContextType>;
  HeaderGroupConnection?: HeaderGroupConnectionResolvers<ContextType>;
  HeaderGroupEdge?: HeaderGroupEdgeResolvers<ContextType>;
  Hex?: GraphQLScalarType;
  HomePage?: HomePageResolvers<ContextType>;
  HomePageBlock?: HomePageBlockResolvers<ContextType>;
  HomePageBlockConnection?: HomePageBlockConnectionResolvers<ContextType>;
  HomePageBlockEdge?: HomePageBlockEdgeResolvers<ContextType>;
  HomePageBlockParent?: HomePageBlockParentResolvers<ContextType>;
  HomePageConnection?: HomePageConnectionResolvers<ContextType>;
  HomePageEdge?: HomePageEdgeResolvers<ContextType>;
  Json?: GraphQLScalarType;
  Location?: LocationResolvers<ContextType>;
  Long?: GraphQLScalarType;
  Mutation?: MutationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  OfficeLocation?: OfficeLocationResolvers<ContextType>;
  OfficeLocationConnection?: OfficeLocationConnectionResolvers<ContextType>;
  OfficeLocationEdge?: OfficeLocationEdgeResolvers<ContextType>;
  Page?: PageResolvers<ContextType>;
  PageConnection?: PageConnectionResolvers<ContextType>;
  PageContent?: PageContentResolvers<ContextType>;
  PageContentConnection?: PageContentConnectionResolvers<ContextType>;
  PageContentEdge?: PageContentEdgeResolvers<ContextType>;
  PageEdge?: PageEdgeResolvers<ContextType>;
  PageInfo?: PageInfoResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  RGBA?: RgbaResolvers<ContextType>;
  RGBAHue?: GraphQLScalarType;
  RGBATransparency?: GraphQLScalarType;
  RemoteSelectField?: RemoteSelectFieldResolvers<ContextType>;
  RemoteSelectFieldConnection?: RemoteSelectFieldConnectionResolvers<ContextType>;
  RemoteSelectFieldEdge?: RemoteSelectFieldEdgeResolvers<ContextType>;
  RemoteSelectFieldParent?: RemoteSelectFieldParentResolvers<ContextType>;
  RichText?: RichTextResolvers<ContextType>;
  RichTextAST?: GraphQLScalarType;
  ScheduledOperation?: ScheduledOperationResolvers<ContextType>;
  ScheduledOperationAffectedDocument?: ScheduledOperationAffectedDocumentResolvers<ContextType>;
  ScheduledOperationConnection?: ScheduledOperationConnectionResolvers<ContextType>;
  ScheduledOperationEdge?: ScheduledOperationEdgeResolvers<ContextType>;
  ScheduledRelease?: ScheduledReleaseResolvers<ContextType>;
  ScheduledReleaseConnection?: ScheduledReleaseConnectionResolvers<ContextType>;
  ScheduledReleaseEdge?: ScheduledReleaseEdgeResolvers<ContextType>;
  SelectField?: SelectFieldResolvers<ContextType>;
  SelectFieldConnection?: SelectFieldConnectionResolvers<ContextType>;
  SelectFieldEdge?: SelectFieldEdgeResolvers<ContextType>;
  SelectFieldParent?: SelectFieldParentResolvers<ContextType>;
  SocialLink?: SocialLinkResolvers<ContextType>;
  SocialLinkConnection?: SocialLinkConnectionResolvers<ContextType>;
  SocialLinkEdge?: SocialLinkEdgeResolvers<ContextType>;
  SocialLinkParent?: SocialLinkParentResolvers<ContextType>;
  Testimonial?: TestimonialResolvers<ContextType>;
  TestimonialConnection?: TestimonialConnectionResolvers<ContextType>;
  TestimonialEdge?: TestimonialEdgeResolvers<ContextType>;
  TextAreaField?: TextAreaFieldResolvers<ContextType>;
  TextAreaFieldConnection?: TextAreaFieldConnectionResolvers<ContextType>;
  TextAreaFieldEdge?: TextAreaFieldEdgeResolvers<ContextType>;
  TextAreaFieldParent?: TextAreaFieldParentResolvers<ContextType>;
  TextInputField?: TextInputFieldResolvers<ContextType>;
  TextInputFieldConnection?: TextInputFieldConnectionResolvers<ContextType>;
  TextInputFieldEdge?: TextInputFieldEdgeResolvers<ContextType>;
  TextInputFieldParent?: TextInputFieldParentResolvers<ContextType>;
  Theme?: ThemeResolvers<ContextType>;
  ThemeColors?: ThemeColorsResolvers<ContextType>;
  ThemeColorsConnection?: ThemeColorsConnectionResolvers<ContextType>;
  ThemeColorsEdge?: ThemeColorsEdgeResolvers<ContextType>;
  ThemeColorsParent?: ThemeColorsParentResolvers<ContextType>;
  ThemeConnection?: ThemeConnectionResolvers<ContextType>;
  ThemeEdge?: ThemeEdgeResolvers<ContextType>;
  ThemeFonts?: ThemeFontsResolvers<ContextType>;
  ThemeFontsConnection?: ThemeFontsConnectionResolvers<ContextType>;
  ThemeFontsEdge?: ThemeFontsEdgeResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserConnection?: UserConnectionResolvers<ContextType>;
  UserEdge?: UserEdgeResolvers<ContextType>;
  VendorLogo?: VendorLogoResolvers<ContextType>;
  VendorLogoConnection?: VendorLogoConnectionResolvers<ContextType>;
  VendorLogoEdge?: VendorLogoEdgeResolvers<ContextType>;
  VendorLogoParent?: VendorLogoParentResolvers<ContextType>;
  Version?: VersionResolvers<ContextType>;
};

