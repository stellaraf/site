{"ast":null,"code":"var _jsxFileName = \"/Users/ml/dev/stellar/site/components/USMap.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport { Box, Tooltip } from '@chakra-ui/core';\nimport { MdMyLocation } from 'react-icons/md';\nimport { ComposableMap, Geographies, Geography, Marker } from 'react-simple-maps'; // const MarkerIcon = props => <Box as={MdMyLocation} {...props} />;\n\nconst MarkerIcon = forwardRef((_ref, ref) => {\n  let {\n    size = 19,\n    color = 'currentColor'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"size\", \"color\"]);\n\n  return __jsx(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 19 19\",\n    height: size,\n    width: size,\n    ref: ref,\n    style: {\n      zIndex: 1\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }), __jsx(\"rect\", {\n    fill: \"none\",\n    x: \"0\",\n    y: \"0\",\n    width: \"19\",\n    height: size,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), __jsx(\"path\", {\n    fill: color,\n    transform: \"translate(2 2)\",\n    d: \"M7.5,14.941l-.4-.495c-.973-1.189-4.9-6.556-4.9-9.16A5.066,5.066,0,0,1,7.036,0q.222-.01.445,0a5.066,5.066,0,0,1,5.286,4.836q.01.225,0,.45c0,2.213-2.669,6.111-4.678,8.851ZM7.481.986a4.077,4.077,0,0,0-4.3,4.3c0,1.832,2.759,6.038,4.286,8.034,1.25-1.71,4.315-5.989,4.315-8.034a4.077,4.077,0,0,0-4.3-4.3Z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }));\n});\nexport const USMap = forwardRef(({\n  geoData,\n  locations,\n  mapColor\n}, ref) => {\n  return __jsx(Box, {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(ComposableMap, {\n    projection: \"geoAlbersUsa\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Geographies, {\n    geography: geoData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, ({\n    geographies\n  }) => __jsx(React.Fragment, null, geographies.map(geo => __jsx(Geography, {\n    key: geo.rsmKey // stroke=\"#FFF\"\n    ,\n    geography: geo,\n    fill: mapColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  })), locations && locations.map(loc => {\n    if (loc.active) {\n      return __jsx(Marker, {\n        coordinates: [loc.coordinates.lon, loc.coordinates.lat],\n        key: loc.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 23\n        }\n      }, __jsx(Tooltip, {\n        label: loc.displayName,\n        placement: \"top\",\n        hasArrow: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }\n      }, __jsx(MarkerIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 27\n        }\n      })));\n    }\n  })))));\n});","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/components/USMap.js"],"names":["React","forwardRef","Box","Tooltip","MdMyLocation","ComposableMap","Geographies","Geography","Marker","MarkerIcon","ref","size","color","props","zIndex","USMap","geoData","locations","mapColor","geographies","map","geo","rsmKey","loc","active","coordinates","lon","lat","id","displayName"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,iBAA7B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,SAArC,EAAgDC,MAAhD,QAA8D,mBAA9D,C,CAEA;;AAEA,MAAMC,UAAU,GAAGR,UAAU,CAAC,OAAkDS,GAAlD,KAA0D;AAAA,MAAzD;AAAEC,IAAAA,IAAI,GAAG,EAAT;AAAaC,IAAAA,KAAK,GAAG;AAArB,GAAyD;AAAA,MAAjBC,KAAiB;;AACtF,SACE;AACE,IAAA,KAAK,EAAC,4BADR;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,MAAM,EAAEF,IAHV;AAIE,IAAA,KAAK,EAAEA,IAJT;AAKE,IAAA,GAAG,EAAED,GALP;AAME,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE;AAAV;AANT,KAOMD,KAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQE;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,CAAC,EAAC,GAApB;AAAwB,IAAA,CAAC,EAAC,GAA1B;AAA8B,IAAA,KAAK,EAAC,IAApC;AAAyC,IAAA,MAAM,EAAEF,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AACE,IAAA,IAAI,EAAEC,KADR;AAEE,IAAA,SAAS,EAAC,gBAFZ;AAGE,IAAA,CAAC,EAAC,4SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAiBD,CAlB4B,CAA7B;AAoBA,OAAO,MAAMG,KAAK,GAAGd,UAAU,CAAC,CAAC;AAAEe,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA;AAAtB,CAAD,EAAmCR,GAAnC,KAA2C;AACzE,SACE,MAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,UAAU,EAAC,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEM,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEG,IAAAA;AAAF,GAAD,KACC,4BACGA,WAAW,CAACC,GAAZ,CAAgBC,GAAG,IAClB,MAAC,SAAD;AACE,IAAA,GAAG,EAAEA,GAAG,CAACC,MADX,CAEE;AAFF;AAGE,IAAA,SAAS,EAAED,GAHb;AAIE,IAAA,IAAI,EAAEH,QAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,EASGD,SAAS,IACRA,SAAS,CAACG,GAAV,CAAcG,GAAG,IAAI;AACnB,QAAIA,GAAG,CAACC,MAAR,EAAgB;AACd,aACE,MAAC,MAAD;AAAQ,QAAA,WAAW,EAAE,CAACD,GAAG,CAACE,WAAJ,CAAgBC,GAAjB,EAAsBH,GAAG,CAACE,WAAJ,CAAgBE,GAAtC,CAArB;AAAiE,QAAA,GAAG,EAAEJ,GAAG,CAACK,EAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,OAAD;AAAS,QAAA,KAAK,EAAEL,GAAG,CAACM,WAApB;AAAiC,QAAA,SAAS,EAAC,KAA3C;AAAiD,QAAA,QAAQ,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAOD;AACF,GAVD,CAVJ,CAFJ,CADF,CADF,CADF;AAgCD,CAjC8B,CAAxB","sourcesContent":["import * as React from 'react';\nimport { forwardRef } from 'react';\nimport { Box, Tooltip } from '@chakra-ui/core';\nimport { MdMyLocation } from 'react-icons/md';\nimport { ComposableMap, Geographies, Geography, Marker } from 'react-simple-maps';\n\n// const MarkerIcon = props => <Box as={MdMyLocation} {...props} />;\n\nconst MarkerIcon = forwardRef(({ size = 19, color = 'currentColor', ...props }, ref) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 19 19\"\n      height={size}\n      width={size}\n      ref={ref}\n      style={{ zIndex: 1 }}\n      {...props}>\n      <rect fill=\"none\" x=\"0\" y=\"0\" width=\"19\" height={size} />\n      <path\n        fill={color}\n        transform=\"translate(2 2)\"\n        d=\"M7.5,14.941l-.4-.495c-.973-1.189-4.9-6.556-4.9-9.16A5.066,5.066,0,0,1,7.036,0q.222-.01.445,0a5.066,5.066,0,0,1,5.286,4.836q.01.225,0,.45c0,2.213-2.669,6.111-4.678,8.851ZM7.481.986a4.077,4.077,0,0,0-4.3,4.3c0,1.832,2.759,6.038,4.286,8.034,1.25-1.71,4.315-5.989,4.315-8.034a4.077,4.077,0,0,0-4.3-4.3Z\"\n      />\n    </svg>\n  );\n});\n\nexport const USMap = forwardRef(({ geoData, locations, mapColor }, ref) => {\n  return (\n    <Box ref={ref}>\n      <ComposableMap projection=\"geoAlbersUsa\">\n        <Geographies geography={geoData}>\n          {({ geographies }) => (\n            <>\n              {geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  // stroke=\"#FFF\"\n                  geography={geo}\n                  fill={mapColor}\n                />\n              ))}\n              {locations &&\n                locations.map(loc => {\n                  if (loc.active) {\n                    return (\n                      <Marker coordinates={[loc.coordinates.lon, loc.coordinates.lat]} key={loc.id}>\n                        <Tooltip label={loc.displayName} placement=\"top\" hasArrow>\n                          <MarkerIcon />\n                        </Tooltip>\n                      </Marker>\n                    );\n                  }\n                })}\n            </>\n          )}\n        </Geographies>\n      </ComposableMap>\n    </Box>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}