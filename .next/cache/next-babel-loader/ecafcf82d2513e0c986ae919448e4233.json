{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createClient } from 'contentful';\nconst client = createClient({\n  space: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_ACCESS_TOKEN\n});\n/**\n * Query Contentful for a specific content_type\n */\n\nexport const contentQuery = async (contentType, query) => {\n  let queryParams = {\n    content_type: contentType\n  };\n\n  if (query) {\n    queryParams = _objectSpread(_objectSpread({}, queryParams), query);\n  }\n\n  const entries = await client.getEntries(queryParams);\n  return entries;\n};\n/**\n * Get all pages\n */\n\nexport const getPages = async () => {\n  const data = await contentQuery('page');\n  return data.items.map(e => _objectSpread({\n    id: e.sys.id\n  }, Object(e.fields)));\n};\n/**\n * Get Page by slug\n */\n\nexport const getPage = async pageSlug => {\n  let page = null;\n  const data = await contentQuery('page', {\n    'fields.slug': pageSlug\n  });\n\n  if (data.items.length !== 0) {\n    page = _objectSpread({\n      id: data[0].sys.id\n    }, Object(data[0].fields));\n  }\n\n  return page;\n};\n/**\n * Get content for a specific page by its sys.id\n */\n\nexport const getPageContent = async pageId => {\n  let pageContent = null;\n  const data = await contentQuery('pageContent', {\n    'fields.page.sys.id': pageId\n  });\n\n  if (data.items.length !== 0) {\n    pageContent = data.items.map(i => i.fields);\n  }\n\n  return pageContent;\n};","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/util/content.ts"],"names":["createClient","client","space","process","env","CONTENTFUL_SPACE_ID","accessToken","CONTENTFUL_ACCESS_TOKEN","contentQuery","contentType","query","queryParams","content_type","entries","getEntries","getPages","data","items","map","e","id","sys","Object","fields","getPage","pageSlug","page","length","getPageContent","pageId","pageContent","i"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA+D,YAA/D;AAwBA,MAAMC,MAAM,GAAGD,YAAY,CAAC;AAC1BE,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADO;AAE1BC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFC,CAAD,CAA3B;AAKA;;;;AAGA,OAAO,MAAMC,YAAY,GAAG,OAC1BC,WAD0B,EAE1BC,KAF0B,KAGQ;AAClC,MAAIC,WAAW,GAAG;AAAEC,IAAAA,YAAY,EAAEH;AAAhB,GAAlB;;AACA,MAAIC,KAAJ,EAAW;AACTC,IAAAA,WAAW,mCAAQA,WAAR,GAAwBD,KAAxB,CAAX;AACD;;AACD,QAAMG,OAAO,GAAG,MAAMZ,MAAM,CAACa,UAAP,CAAkBH,WAAlB,CAAtB;AACA,SAAOE,OAAP;AACD,CAVM;AAYP;;;;AAGA,OAAO,MAAME,QAAQ,GAAG,YAAkC;AACxD,QAAMC,IAAI,GAAG,MAAMR,YAAY,CAAC,MAAD,CAA/B;AACA,SAAOQ,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeC,CAAC;AAAOC,IAAAA,EAAE,EAAED,CAAC,CAACE,GAAF,CAAMD;AAAjB,KAAwBE,MAAM,CAACH,CAAC,CAACI,MAAH,CAA9B,CAAhB,CAAP;AACD,CAHM;AAKP;;;;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAOC,QAAP,IAAgD;AACrE,MAAIC,IAAI,GAAG,IAAX;AACA,QAAMV,IAAI,GAAG,MAAMR,YAAY,CAAC,MAAD,EAAS;AAAE,mBAAeiB;AAAjB,GAAT,CAA/B;;AACA,MAAIT,IAAI,CAACC,KAAL,CAAWU,MAAX,KAAsB,CAA1B,EAA6B;AAC3BD,IAAAA,IAAI;AAAKN,MAAAA,EAAE,EAAEJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,GAAR,CAAYD;AAArB,OAA4BE,MAAM,CAACN,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAT,CAAlC,CAAJ;AACD;;AACD,SAAOG,IAAP;AACD,CAPM;AASP;;;;AAGA,OAAO,MAAME,cAAc,GAAG,MAAOC,MAAP,IAAkD;AAC9E,MAAIC,WAAW,GAAG,IAAlB;AACA,QAAMd,IAAI,GAAG,MAAMR,YAAY,CAAC,aAAD,EAAgB;AAAE,0BAAsBqB;AAAxB,GAAhB,CAA/B;;AAEA,MAAIb,IAAI,CAACC,KAAL,CAAWU,MAAX,KAAsB,CAA1B,EAA6B;AAC3BG,IAAAA,WAAW,GAAGd,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAea,CAAC,IAAIA,CAAC,CAACR,MAAtB,CAAd;AACD;;AACD,SAAOO,WAAP;AACD,CARM","sourcesContent":["import { createClient, EntryCollection, ContentTypeLink } from 'contentful';\n\ninterface PageAttrs {\n  id: string;\n  slug: string;\n  title: string;\n  subtitle?: string;\n}\n\ninterface ContentRef {\n  sys: ContentTypeLink;\n}\n\ninterface PageContent {\n  page: ContentRef;\n  sortWeight: number;\n  title: string;\n  subtitle?: string;\n  paragraphs: ContentRef[];\n  button: boolean;\n  buttonText?: string;\n  buttonLink?: string;\n}\n\nconst client = createClient({\n  space: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\n});\n\n/**\n * Query Contentful for a specific content_type\n */\nexport const contentQuery = async (\n  contentType: string,\n  query?: object,\n): Promise<EntryCollection<any>> => {\n  let queryParams = { content_type: contentType };\n  if (query) {\n    queryParams = { ...queryParams, ...query };\n  }\n  const entries = await client.getEntries(queryParams);\n  return entries;\n};\n\n/**\n * Get all pages\n */\nexport const getPages = async (): Promise<PageAttrs[]> => {\n  const data = await contentQuery('page');\n  return data.items.map(e => ({ id: e.sys.id, ...Object(e.fields) }));\n};\n\n/**\n * Get Page by slug\n */\nexport const getPage = async (pageSlug: string): Promise<PageAttrs> => {\n  let page = null;\n  const data = await contentQuery('page', { 'fields.slug': pageSlug });\n  if (data.items.length !== 0) {\n    page = { id: data[0].sys.id, ...Object(data[0].fields) };\n  }\n  return page;\n};\n\n/**\n * Get content for a specific page by its sys.id\n */\nexport const getPageContent = async (pageId: string): Promise<PageContent[]> => {\n  let pageContent = null;\n  const data = await contentQuery('pageContent', { 'fields.page.sys.id': pageId });\n\n  if (data.items.length !== 0) {\n    pageContent = data.items.map(i => i.fields);\n  }\n  return pageContent;\n};\n"]},"metadata":{},"sourceType":"module"}