{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { parseToHsla, transparentize, readableColorIsBlack, hsla, saturate, desaturate } from \"color2k\";\nimport { theme as chakraTheme } from \"@chakra-ui/core\";\nexport const isLight = color => readableColorIsBlack(color);\nexport const isDark = color => !readableColorIsBlack(color);\nexport const opposingColor = (theme, color) => {\n  if (color.includes(\".\")) {\n    const colorParts = color.split(\".\");\n\n    if (colorParts.length !== 2) {\n      throw Error(`Color is improperly formatted. Got '${color}'`);\n    }\n\n    const [colorName, colorOpacity] = colorParts;\n    color = theme.colors[colorName][colorOpacity];\n  }\n\n  const opposing = isDark(color) ? theme.colors.white : theme.colors.black;\n  return opposing;\n};\n\nconst alphaColors = color => ({\n  50: transparentize(color, Number(1 - 0.04).toFixed(2)),\n  100: transparentize(color, Number(1 - 0.08).toFixed(2)),\n  200: transparentize(color, Number(1 - 0.12).toFixed(2)),\n  300: transparentize(color, Number(1 - 0.16).toFixed(2)),\n  400: transparentize(color, Number(1 - 0.24).toFixed(2)),\n  500: transparentize(color, Number(1 - 0.38).toFixed(2)),\n  600: transparentize(color, Number(1 - 0.48).toFixed(2)),\n  700: transparentize(color, Number(1 - 0.6).toFixed(2)),\n  800: transparentize(color, Number(1 - 0.8).toFixed(2)),\n  900: transparentize(color, Number(1 - 0.92).toFixed(2))\n});\n\nconst generateColors = colorInput => {\n  const colorMap = {};\n  const lightnessMap = [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05];\n  const saturationMap = [0.32, 0.16, 0.08, 0.04, 0, 0, 0.04, 0.08, 0.16, 0.32];\n  const colorHsla = parseToHsla(colorInput);\n  const lightnessGoal = colorHsla[2];\n  const closestLightness = lightnessMap.reduce((prev, curr) => Math.abs(curr - lightnessGoal) < Math.abs(prev - lightnessGoal) ? curr : prev);\n  const baseColorIndex = lightnessMap.findIndex(l => l === closestLightness);\n  const colors = lightnessMap.map(l => {\n    const [h, s, _, a] = colorHsla;\n    return hsla(h, s, l, a);\n  }).map((color, i) => {\n    const saturationDelta = saturationMap[i] - saturationMap[baseColorIndex];\n    return saturationDelta >= 0 ? saturate(color, saturationDelta) : desaturate(color, saturationDelta * -1);\n  });\n\n  const getColorNumber = index => index === 0 ? 50 : index * 100;\n\n  colors.map((color, i) => {\n    const colorIndex = getColorNumber(i);\n    colorMap[colorIndex] = color;\n  });\n  return colorMap;\n};\n\nconst defaultBodyFonts = [\"-apple-system\", \"BlinkMacSystemFont\", '\"Segoe UI\"', \"Helvetica\", \"Arial\", \"sans-serif\", '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'];\nconst defaultMonoFonts = [\"SFMono-Regular\", \"Melno\", \"Monaco\", \"Consolas\", '\"Liberation Mono\"', '\"Courier New\"', \"monospace\"];\n\nconst generatePalette = palette => {\n  const generatedPalette = {};\n  Object.keys(palette).map(color => {\n    if (![\"black\", \"white\"].includes(color)) {\n      generatedPalette[color] = generateColors(palette[color]);\n    } else {\n      generatedPalette[color] = palette[color];\n      generatedPalette[`${color}Alpha`] = alphaColors(palette[color]);\n    }\n  });\n  return generatedPalette;\n};\n\nconst formatFont = font => {\n  const fontList = font.split(\" \");\n  const fontFmt = fontList.length >= 2 ? `'${fontList.join(\" \")}'` : fontList.join(\" \");\n  return fontFmt;\n};\n\nconst importFonts = userFonts => {\n  const [body, mono] = [defaultBodyFonts, defaultMonoFonts];\n  const bodyFmt = formatFont(userFonts.body);\n  const monoFmt = formatFont(userFonts.mono);\n\n  if (userFonts.body && !body.includes(bodyFmt)) {\n    body.unshift(bodyFmt);\n  }\n\n  if (userFonts.mono && !mono.includes(monoFmt)) {\n    mono.unshift(monoFmt);\n  }\n\n  return {\n    body: body.join(\", \"),\n    heading: body.join(\", \"),\n    mono: mono.join(\", \")\n  };\n};\n\nconst importColors = (userColors = {}) => {\n  const generatedColors = generatePalette(userColors);\n  return _objectSpread({\n    transparent: \"transparent\",\n    current: \"currentColor\",\n    original: userColors\n  }, generatedColors);\n};\n\nexport const makeTheme = userTheme => _objectSpread(_objectSpread({}, chakraTheme), {}, {\n  colors: importColors(userTheme.colors),\n  fonts: importFonts(userTheme.fonts),\n  fontWeights: {\n    light: 200,\n    normal: 400,\n    semibold: 600,\n    medium: 600,\n    bold: 800\n  }\n});","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/util/theme.js"],"names":["parseToHsla","transparentize","readableColorIsBlack","hsla","saturate","desaturate","theme","chakraTheme","isLight","color","isDark","opposingColor","includes","colorParts","split","length","Error","colorName","colorOpacity","colors","opposing","white","black","alphaColors","Number","toFixed","generateColors","colorInput","colorMap","lightnessMap","saturationMap","colorHsla","lightnessGoal","closestLightness","reduce","prev","curr","Math","abs","baseColorIndex","findIndex","l","map","h","s","_","a","i","saturationDelta","getColorNumber","index","colorIndex","defaultBodyFonts","defaultMonoFonts","generatePalette","palette","generatedPalette","Object","keys","formatFont","font","fontList","fontFmt","join","importFonts","userFonts","body","mono","bodyFmt","monoFmt","unshift","heading","importColors","userColors","generatedColors","transparent","current","original","makeTheme","userTheme","fonts","fontWeights","light","normal","semibold","medium","bold"],"mappings":"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","sourcesContent":["import {\n  parseToHsla,\n  transparentize,\n  readableColorIsBlack,\n  hsla,\n  saturate,\n  desaturate\n} from \"color2k\";\nimport { theme as chakraTheme } from \"@chakra-ui/core\";\n\nexport const isLight = color => readableColorIsBlack(color);\nexport const isDark = color => !readableColorIsBlack(color);\n\nexport const opposingColor = (theme, color) => {\n  if (color.includes(\".\")) {\n    const colorParts = color.split(\".\");\n    if (colorParts.length !== 2) {\n      throw Error(`Color is improperly formatted. Got '${color}'`);\n    }\n    const [colorName, colorOpacity] = colorParts;\n    color = theme.colors[colorName][colorOpacity];\n  }\n  const opposing = isDark(color) ? theme.colors.white : theme.colors.black;\n  return opposing;\n};\n\nconst alphaColors = color => ({\n  50: transparentize(color, Number(1 - 0.04).toFixed(2)),\n  100: transparentize(color, Number(1 - 0.08).toFixed(2)),\n  200: transparentize(color, Number(1 - 0.12).toFixed(2)),\n  300: transparentize(color, Number(1 - 0.16).toFixed(2)),\n  400: transparentize(color, Number(1 - 0.24).toFixed(2)),\n  500: transparentize(color, Number(1 - 0.38).toFixed(2)),\n  600: transparentize(color, Number(1 - 0.48).toFixed(2)),\n  700: transparentize(color, Number(1 - 0.6).toFixed(2)),\n  800: transparentize(color, Number(1 - 0.8).toFixed(2)),\n  900: transparentize(color, Number(1 - 0.92).toFixed(2))\n});\n\nconst generateColors = colorInput => {\n  const colorMap = {};\n\n  const lightnessMap = [\n    0.95,\n    0.85,\n    0.75,\n    0.65,\n    0.55,\n    0.45,\n    0.35,\n    0.25,\n    0.15,\n    0.05\n  ];\n  const saturationMap = [0.32, 0.16, 0.08, 0.04, 0, 0, 0.04, 0.08, 0.16, 0.32];\n\n  const colorHsla = parseToHsla(colorInput);\n  const lightnessGoal = colorHsla[2];\n\n  const closestLightness = lightnessMap.reduce((prev, curr) =>\n    Math.abs(curr - lightnessGoal) < Math.abs(prev - lightnessGoal)\n      ? curr\n      : prev\n  );\n\n  const baseColorIndex = lightnessMap.findIndex(l => l === closestLightness);\n\n  const colors = lightnessMap\n    .map(l => {\n      const [h, s, _, a] = colorHsla;\n      return hsla(h, s, l, a);\n    })\n    .map((color, i) => {\n      const saturationDelta = saturationMap[i] - saturationMap[baseColorIndex];\n      return saturationDelta >= 0\n        ? saturate(color, saturationDelta)\n        : desaturate(color, saturationDelta * -1);\n    });\n\n  const getColorNumber = index => (index === 0 ? 50 : index * 100);\n\n  colors.map((color, i) => {\n    const colorIndex = getColorNumber(i);\n    colorMap[colorIndex] = color;\n  });\n  return colorMap;\n};\n\nconst defaultBodyFonts = [\n  \"-apple-system\",\n  \"BlinkMacSystemFont\",\n  '\"Segoe UI\"',\n  \"Helvetica\",\n  \"Arial\",\n  \"sans-serif\",\n  '\"Apple Color Emoji\"',\n  '\"Segoe UI Emoji\"',\n  '\"Segoe UI Symbol\"'\n];\n\nconst defaultMonoFonts = [\n  \"SFMono-Regular\",\n  \"Melno\",\n  \"Monaco\",\n  \"Consolas\",\n  '\"Liberation Mono\"',\n  '\"Courier New\"',\n  \"monospace\"\n];\n\nconst generatePalette = palette => {\n  const generatedPalette = {};\n  Object.keys(palette).map(color => {\n    if (![\"black\", \"white\"].includes(color)) {\n      generatedPalette[color] = generateColors(palette[color]);\n    } else {\n      generatedPalette[color] = palette[color];\n      generatedPalette[`${color}Alpha`] = alphaColors(palette[color]);\n    }\n  });\n  return generatedPalette;\n};\n\nconst formatFont = font => {\n  const fontList = font.split(\" \");\n  const fontFmt =\n    fontList.length >= 2 ? `'${fontList.join(\" \")}'` : fontList.join(\" \");\n  return fontFmt;\n};\n\nconst importFonts = userFonts => {\n  const [body, mono] = [defaultBodyFonts, defaultMonoFonts];\n  const bodyFmt = formatFont(userFonts.body);\n  const monoFmt = formatFont(userFonts.mono);\n  if (userFonts.body && !body.includes(bodyFmt)) {\n    body.unshift(bodyFmt);\n  }\n  if (userFonts.mono && !mono.includes(monoFmt)) {\n    mono.unshift(monoFmt);\n  }\n  return {\n    body: body.join(\", \"),\n    heading: body.join(\", \"),\n    mono: mono.join(\", \")\n  };\n};\n\nconst importColors = (userColors = {}) => {\n  const generatedColors = generatePalette(userColors);\n  return {\n    transparent: \"transparent\",\n    current: \"currentColor\",\n    original: userColors,\n    ...generatedColors\n  };\n};\n\nexport const makeTheme = userTheme => ({\n  ...chakraTheme,\n  colors: importColors(userTheme.colors),\n  fonts: importFonts(userTheme.fonts),\n  fontWeights: {\n    light: 200,\n    normal: 400,\n    semibold: 600,\n    medium: 600,\n    bold: 800\n  }\n});\n"]},"metadata":{},"sourceType":"module"}