{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ml/dev/stellar/site/src/components/svg/DiagonalLine.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styled from \"styled-components\";\n/**\n *\n * @param {\"leftUp|leftDown\"} direction Shape direction\n * @param {string} offset Offset from base\n * @param {string} height Height of the angle\n * @param {string} color Color of line\n * @param {string} strokeWidth Width of the line\n * @param {string} viewBox Override underlying SVG viewBox\n */\n\nfunction DiagonalLine(_ref) {\n  let {\n    direction,\n    side,\n    offset,\n    height = \"5vh\",\n    color,\n    strokeWidth,\n    viewBox = \"0 0 100 100\"\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"direction\", \"side\", \"offset\", \"height\", \"color\", \"strokeWidth\", \"viewBox\"]);\n\n  const pointMap = {\n    // Starting from the fat side\n    leftDown: {\n      x1: \"-5\",\n      y1: \"5\",\n      x2: \"105\",\n      y2: \"95\"\n    },\n    leftUp: {\n      x1: \"-5\",\n      y1: \"105\",\n      x2: \"105\",\n      y2: \"5\"\n    }\n  };\n  const shapePoints = pointMap[direction];\n  let shapeOffset;\n  let shapeSide;\n\n  if (side === undefined) {\n    switch (direction) {\n      case \"rightDown\":\n      case \"leftDown\":\n        shapeSide = \"top\";\n        break;\n\n      case \"rightUp\":\n      case \"leftUp\":\n        shapeSide = \"bottom\";\n        break;\n\n      default:\n        shapeSide = \"bottom\";\n        break;\n    }\n  } else {\n    shapeSide = side;\n  }\n\n  if (offset === undefined) {\n    shapeOffset = `-${height}`;\n  } else {\n    shapeOffset = offset;\n  }\n\n  if (color === undefined) {\n    color = \"none\";\n  }\n\n  const offsetStyle = `top: ${shapeOffset};`;\n  const LineSVG = styled.svg`\n        position: absolute;\n        overflow: visible;\n        width: 100%;\n        height: ${height};\n        ${offsetStyle}\n    `;\n  return __jsx(LineSVG, _extends({\n    className: `${shapeSide}-line`,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: viewBox,\n    preserveAspectRatio: \"none\"\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), __jsx(\"line\", _extends({}, shapePoints, {\n    stroke: color,\n    strokeWidth: strokeWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  })));\n}\n\n_c = DiagonalLine;\nexport default DiagonalLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"DiagonalLine\");","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/src/components/svg/DiagonalLine.js"],"names":["React","styled","DiagonalLine","direction","side","offset","height","color","strokeWidth","viewBox","restProps","pointMap","leftDown","x1","y1","x2","y2","leftUp","shapePoints","shapeOffset","shapeSide","undefined","offsetStyle","LineSVG","svg"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA;;;;;;;;;;AASA,SAASC,YAAT,OASG;AAAA,MATmB;AAClBC,IAAAA,SADkB;AAElBC,IAAAA,IAFkB;AAGlBC,IAAAA,MAHkB;AAIlBC,IAAAA,MAAM,GAAG,KAJS;AAKlBC,IAAAA,KALkB;AAMlBC,IAAAA,WANkB;AAOlBC,IAAAA,OAAO,GAAG;AAPQ,GASnB;AAAA,MADIC,SACJ;;AACC,QAAMC,QAAQ,GAAG;AACb;AACAC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,EAAE,EAAE,GAAhB;AAAqBC,MAAAA,EAAE,EAAE,KAAzB;AAAgCC,MAAAA,EAAE,EAAE;AAApC,KAFG;AAGbC,IAAAA,MAAM,EAAE;AAAEJ,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,EAAE,EAAE,KAAhB;AAAuBC,MAAAA,EAAE,EAAE,KAA3B;AAAkCC,MAAAA,EAAE,EAAE;AAAtC;AAHK,GAAjB;AAKA,QAAME,WAAW,GAAGP,QAAQ,CAACR,SAAD,CAA5B;AAEA,MAAIgB,WAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAIhB,IAAI,KAAKiB,SAAb,EAAwB;AACpB,YAAQlB,SAAR;AACI,WAAK,WAAL;AACA,WAAK,UAAL;AACIiB,QAAAA,SAAS,GAAG,KAAZ;AACA;;AACJ,WAAK,SAAL;AACA,WAAK,QAAL;AACIA,QAAAA,SAAS,GAAG,QAAZ;AACA;;AACJ;AACIA,QAAAA,SAAS,GAAG,QAAZ;AACA;AAXR;AAaH,GAdD,MAcO;AACHA,IAAAA,SAAS,GAAGhB,IAAZ;AACH;;AAED,MAAIC,MAAM,KAAKgB,SAAf,EAA0B;AACtBF,IAAAA,WAAW,GAAI,IAAGb,MAAO,EAAzB;AACH,GAFD,MAEO;AACHa,IAAAA,WAAW,GAAGd,MAAd;AACH;;AACD,MAAIE,KAAK,KAAKc,SAAd,EAAyB;AACrBd,IAAAA,KAAK,GAAG,MAAR;AACH;;AACD,QAAMe,WAAW,GAAI,QAAOH,WAAY,GAAxC;AAEA,QAAMI,OAAO,GAAGtB,MAAM,CAACuB,GAAI;;;;kBAIblB,MAAO;UACfgB,WAAY;KALlB;AAQA,SACI,MAAC,OAAD;AACI,IAAA,SAAS,EAAG,GAAEF,SAAU,OAD5B;AAEI,IAAA,KAAK,EAAC,4BAFV;AAGI,IAAA,OAAO,EAAEX,OAHb;AAII,IAAA,mBAAmB,EAAC;AAJxB,KAKQC,SALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMI,2BAAUQ,WAAV;AAAuB,IAAA,MAAM,EAAEX,KAA/B;AAAsC,IAAA,WAAW,EAAEC,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANJ,CADJ;AAUH;;KAlEQN,Y;AAoET,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n *\n * @param {\"leftUp|leftDown\"} direction Shape direction\n * @param {string} offset Offset from base\n * @param {string} height Height of the angle\n * @param {string} color Color of line\n * @param {string} strokeWidth Width of the line\n * @param {string} viewBox Override underlying SVG viewBox\n */\nfunction DiagonalLine({\n    direction,\n    side,\n    offset,\n    height = \"5vh\",\n    color,\n    strokeWidth,\n    viewBox = \"0 0 100 100\",\n    ...restProps\n}) {\n    const pointMap = {\n        // Starting from the fat side\n        leftDown: { x1: \"-5\", y1: \"5\", x2: \"105\", y2: \"95\" },\n        leftUp: { x1: \"-5\", y1: \"105\", x2: \"105\", y2: \"5\" }\n    };\n    const shapePoints = pointMap[direction];\n\n    let shapeOffset;\n    let shapeSide;\n\n    if (side === undefined) {\n        switch (direction) {\n            case \"rightDown\":\n            case \"leftDown\":\n                shapeSide = \"top\";\n                break;\n            case \"rightUp\":\n            case \"leftUp\":\n                shapeSide = \"bottom\";\n                break;\n            default:\n                shapeSide = \"bottom\";\n                break;\n        }\n    } else {\n        shapeSide = side;\n    }\n\n    if (offset === undefined) {\n        shapeOffset = `-${height}`;\n    } else {\n        shapeOffset = offset;\n    }\n    if (color === undefined) {\n        color = \"none\";\n    }\n    const offsetStyle = `top: ${shapeOffset};`;\n\n    const LineSVG = styled.svg`\n        position: absolute;\n        overflow: visible;\n        width: 100%;\n        height: ${height};\n        ${offsetStyle}\n    `;\n\n    return (\n        <LineSVG\n            className={`${shapeSide}-line`}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox={viewBox}\n            preserveAspectRatio=\"none\"\n            {...restProps}>\n            <line {...shapePoints} stroke={color} strokeWidth={strokeWidth} />\n        </LineSVG>\n    );\n}\n\nexport default DiagonalLine;\n"]},"metadata":{},"sourceType":"module"}