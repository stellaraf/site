{"ast":null,"code":"var _jsxFileName = \"/Users/ml/dev/stellar/site/context/Media.js\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport { useMediaLayout } from \"use-media\";\nimport { BREAKPOINTS } from \"../src/utils/breakpoints\";\nconst MediaContext = createContext(null);\nexport const MediaProvider = ({\n  children\n}) => {\n  const {\n    min,\n    max\n  } = BREAKPOINTS;\n  const isSm = useMediaLayout({\n    maxWidth: max.md\n  });\n  const isMd = useMediaLayout({\n    minWidth: min.md,\n    maxWidth: max.lg\n  });\n  const isLg = useMediaLayout({\n    minWidth: min.lg,\n    maxWidth: max.xl\n  });\n  const isXl = useMediaLayout({\n    minWidth: min.xl\n  });\n  let mediaSize = false;\n\n  switch (true) {\n    case isSm:\n      mediaSize = \"sm\";\n      break;\n\n    case isMd:\n      mediaSize = \"md\";\n      break;\n\n    case isLg:\n      mediaSize = \"lg\";\n      break;\n\n    case isXl:\n      mediaSize = \"xl\";\n      break;\n  }\n\n  const value = useMemo(() => ({\n    isSm,\n    isMd,\n    isLg,\n    isXl,\n    mediaSize\n  }), [mediaSize]);\n  return __jsx(MediaContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useMedia = () => useContext(MediaContext);","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/context/Media.js"],"names":["React","createContext","useContext","useMemo","useMediaLayout","BREAKPOINTS","MediaContext","MediaProvider","children","min","max","isSm","maxWidth","md","isMd","minWidth","lg","isLg","xl","isXl","mediaSize","value","useMedia"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,OAApC,QAAmD,OAAnD;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAEA,MAAMC,YAAY,GAAGL,aAAa,CAAC,IAAD,CAAlC;AAEA,OAAO,MAAMM,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7C,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeL,WAArB;AACA,QAAMM,IAAI,GAAGP,cAAc,CAAC;AAAEQ,IAAAA,QAAQ,EAAEF,GAAG,CAACG;AAAhB,GAAD,CAA3B;AACA,QAAMC,IAAI,GAAGV,cAAc,CAAC;AAAEW,IAAAA,QAAQ,EAAEN,GAAG,CAACI,EAAhB;AAAoBD,IAAAA,QAAQ,EAAEF,GAAG,CAACM;AAAlC,GAAD,CAA3B;AACA,QAAMC,IAAI,GAAGb,cAAc,CAAC;AAAEW,IAAAA,QAAQ,EAAEN,GAAG,CAACO,EAAhB;AAAoBJ,IAAAA,QAAQ,EAAEF,GAAG,CAACQ;AAAlC,GAAD,CAA3B;AACA,QAAMC,IAAI,GAAGf,cAAc,CAAC;AAAEW,IAAAA,QAAQ,EAAEN,GAAG,CAACS;AAAhB,GAAD,CAA3B;AACA,MAAIE,SAAS,GAAG,KAAhB;;AACA,UAAQ,IAAR;AACE,SAAKT,IAAL;AACES,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAKN,IAAL;AACEM,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAKH,IAAL;AACEG,MAAAA,SAAS,GAAG,IAAZ;AACA;;AACF,SAAKD,IAAL;AACEC,MAAAA,SAAS,GAAG,IAAZ;AACA;AAZJ;;AAcA,QAAMC,KAAK,GAAGlB,OAAO,CACnB,OAAO;AACLQ,IAAAA,IADK;AAELG,IAAAA,IAFK;AAGLG,IAAAA,IAHK;AAILE,IAAAA,IAJK;AAKLC,IAAAA;AALK,GAAP,CADmB,EAQnB,CAACA,SAAD,CARmB,CAArB;AAUA,SACE,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCb,QAAtC,CADF;AAGD,CAlCM;AAoCP,OAAO,MAAMc,QAAQ,GAAG,MAAMpB,UAAU,CAACI,YAAD,CAAjC","sourcesContent":["import * as React from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport { useMediaLayout } from \"use-media\";\nimport { BREAKPOINTS } from \"../src/utils/breakpoints\";\n\nconst MediaContext = createContext(null);\n\nexport const MediaProvider = ({ children }) => {\n  const { min, max } = BREAKPOINTS;\n  const isSm = useMediaLayout({ maxWidth: max.md });\n  const isMd = useMediaLayout({ minWidth: min.md, maxWidth: max.lg });\n  const isLg = useMediaLayout({ minWidth: min.lg, maxWidth: max.xl });\n  const isXl = useMediaLayout({ minWidth: min.xl });\n  let mediaSize = false;\n  switch (true) {\n    case isSm:\n      mediaSize = \"sm\";\n      break;\n    case isMd:\n      mediaSize = \"md\";\n      break;\n    case isLg:\n      mediaSize = \"lg\";\n      break;\n    case isXl:\n      mediaSize = \"xl\";\n      break;\n  }\n  const value = useMemo(\n    () => ({\n      isSm,\n      isMd,\n      isLg,\n      isXl,\n      mediaSize\n    }),\n    [mediaSize]\n  );\n  return (\n    <MediaContext.Provider value={value}>{children}</MediaContext.Provider>\n  );\n};\n\nexport const useMedia = () => useContext(MediaContext);\n"]},"metadata":{},"sourceType":"module"}