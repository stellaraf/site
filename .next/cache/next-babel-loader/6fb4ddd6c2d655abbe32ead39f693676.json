{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/ml/dev/stellar/site/components/Link.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport NextLink from \"next/link\";\nimport { Icon, Link as ChakraLink } from \"@chakra-ui/core\";\nimport { useLinkType } from \"../hooks\";\nexport const Link = (_ref) => {\n  _s();\n\n  let {\n    href,\n    showIcon = false\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"href\", \"showIcon\"]);\n\n  const {\n    isExternal,\n    target\n  } = useLinkType(href);\n  const Wrapper = isExternal ? React.Fragment : NextLink;\n  const wrapperProps = isExternal ? {} : {\n    passHref: true,\n    href: target\n  };\n  return __jsx(Wrapper, _extends({}, wrapperProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }), __jsx(ChakraLink, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }), showIcon && isExternal && __jsx(Icon, {\n    name: \"external-link\",\n    mx: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 36\n    }\n  })));\n};\n\n_s(Link, \"w4KnoWx3MF62QKihhI+Nre8e3PU=\", false, function () {\n  return [useLinkType];\n});\n\n_c = Link;\n\nvar _c;\n\n$RefreshReg$(_c, \"Link\");","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/components/Link.js"],"names":["React","NextLink","Icon","Link","ChakraLink","useLinkType","href","showIcon","props","isExternal","target","Wrapper","Fragment","wrapperProps","passHref"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,IAAT,EAAeC,IAAI,IAAIC,UAAvB,QAAyC,iBAAzC;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,OAAO,MAAMF,IAAI,GAAG,UAA0C;AAAA;;AAAA,MAAzC;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,QAAQ,GAAG;AAAnB,GAAyC;AAAA,MAAZC,KAAY;;AAC5D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAyBL,WAAW,CAACC,IAAD,CAA1C;AACA,QAAMK,OAAO,GAAGF,UAAU,GAAGT,KAAK,CAACY,QAAT,GAAoBX,QAA9C;AACA,QAAMY,YAAY,GAAGJ,UAAU,GAAG,EAAH,GAAQ;AAAEK,IAAAA,QAAQ,EAAE,IAAZ;AAAkBR,IAAAA,IAAI,EAAEI;AAAxB,GAAvC;AACA,SACE,MAAC,OAAD,eAAaG,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,UAAD,eAAgBL,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,QAAQ,IAAIE,UAAZ,IAA0B,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,eAAX;AAA2B,IAAA,EAAE,EAAE,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD7B,CADF,CADF;AAOD,CAXM;;GAAMN,I;UACoBE,W;;;KADpBF,I","sourcesContent":["import * as React from \"react\";\nimport NextLink from \"next/link\";\nimport { Icon, Link as ChakraLink } from \"@chakra-ui/core\";\nimport { useLinkType } from \"../hooks\";\n\nexport const Link = ({ href, showIcon = false, ...props }) => {\n  const { isExternal, target } = useLinkType(href);\n  const Wrapper = isExternal ? React.Fragment : NextLink;\n  const wrapperProps = isExternal ? {} : { passHref: true, href: target };\n  return (\n    <Wrapper {...wrapperProps}>\n      <ChakraLink {...props}>\n        {showIcon && isExternal && <Icon name=\"external-link\" mx={1} />}\n      </ChakraLink>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}