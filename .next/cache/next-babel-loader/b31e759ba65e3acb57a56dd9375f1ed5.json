{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position';\nimport { isEqual } from 'lodash';\nexport const useActiveSection = (currentState, callback, defaultState, [...deps], [...sections]) => {\n  _s();\n\n  const last = sections.length - 1;\n\n  const effect = ({\n    currPos\n  }) => {\n    const {\n      y\n    } = currPos;\n    let toSet = defaultState;\n\n    for (const [i, section] of sections.entries()) {\n      const [ref, stateObj] = section;\n      console.log(y, -ref.current.offsetTop);\n\n      if (i === last) {\n        if (y < -ref.current.offsetTop) {\n          const sameAsCurrent = isEqual(currentState, stateObj);\n\n          if (!sameAsCurrent) {\n            toSet = stateObj;\n            break; // callback(stateObj);\n            // break;\n          }\n        }\n      } else {\n        const [nextRef] = sections[i + 1];\n\n        if (y >= -nextRef.current.offsetTop && y <= -ref.current.offsetTop) {\n          const sameAsCurrent = isEqual(currentState, stateObj);\n\n          if (!sameAsCurrent) {\n            toSet = stateObj;\n            break; // callback(stateObj);\n            // break;\n          }\n        } else {\n          const sameAsCurrent = isEqual(currentState, defaultState); //   if (!sameAsCurrent) {\n          //     callback(defaultState);\n          //     // break;\n          //   }\n        }\n      }\n    }\n\n    callback(toSet);\n  };\n\n  return useScrollPosition(effect, deps);\n};\n\n_s(useActiveSection, \"7btWRCmSvoEA71UckleLRN3lIkw=\", false, function () {\n  return [useScrollPosition];\n});","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/hooks/useActiveSection.js"],"names":["useScrollPosition","isEqual","useActiveSection","currentState","callback","defaultState","deps","sections","last","length","effect","currPos","y","toSet","i","section","entries","ref","stateObj","console","log","current","offsetTop","sameAsCurrent","nextRef"],"mappings":";;AAAA,SAASA,iBAAT,QAAkC,6BAAlC;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,YAD8B,EAE9BC,QAF8B,EAG9BC,YAH8B,EAI9B,CAAC,GAAGC,IAAJ,CAJ8B,EAK9B,CAAC,GAAGC,QAAJ,CAL8B,KAM3B;AAAA;;AACH,QAAMC,IAAI,GAAGD,QAAQ,CAACE,MAAT,GAAkB,CAA/B;;AACA,QAAMC,MAAM,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAQD,OAAd;AACA,QAAIE,KAAK,GAAGR,YAAZ;;AACA,SAAK,MAAM,CAACS,CAAD,EAAIC,OAAJ,CAAX,IAA2BR,QAAQ,CAACS,OAAT,EAA3B,EAA+C;AAC7C,YAAM,CAACC,GAAD,EAAMC,QAAN,IAAkBH,OAAxB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ,EAAe,CAACK,GAAG,CAACI,OAAJ,CAAYC,SAA5B;;AACA,UAAIR,CAAC,KAAKN,IAAV,EAAgB;AACd,YAAII,CAAC,GAAG,CAACK,GAAG,CAACI,OAAJ,CAAYC,SAArB,EAAgC;AAC9B,gBAAMC,aAAa,GAAGtB,OAAO,CAACE,YAAD,EAAee,QAAf,CAA7B;;AACA,cAAI,CAACK,aAAL,EAAoB;AAClBV,YAAAA,KAAK,GAAGK,QAAR;AACA,kBAFkB,CAGlB;AACA;AACD;AACF;AACF,OAVD,MAUO;AACL,cAAM,CAACM,OAAD,IAAYjB,QAAQ,CAACO,CAAC,GAAG,CAAL,CAA1B;;AACA,YAAIF,CAAC,IAAI,CAACY,OAAO,CAACH,OAAR,CAAgBC,SAAtB,IAAmCV,CAAC,IAAI,CAACK,GAAG,CAACI,OAAJ,CAAYC,SAAzD,EAAoE;AAClE,gBAAMC,aAAa,GAAGtB,OAAO,CAACE,YAAD,EAAee,QAAf,CAA7B;;AACA,cAAI,CAACK,aAAL,EAAoB;AAClBV,YAAAA,KAAK,GAAGK,QAAR;AACA,kBAFkB,CAGlB;AACA;AACD;AACF,SARD,MAQO;AACL,gBAAMK,aAAa,GAAGtB,OAAO,CAACE,YAAD,EAAeE,YAAf,CAA7B,CADK,CAEL;AACA;AACA;AACA;AACD;AACF;AACF;;AACDD,IAAAA,QAAQ,CAACS,KAAD,CAAR;AACD,GApCD;;AAsCA,SAAOb,iBAAiB,CAACU,MAAD,EAASJ,IAAT,CAAxB;AACD,CA/CM;;GAAMJ,gB;UA8CJF,iB","sourcesContent":["import { useScrollPosition } from '@n8tb1t/use-scroll-position';\nimport { isEqual } from 'lodash';\n\nexport const useActiveSection = (\n  currentState,\n  callback,\n  defaultState,\n  [...deps],\n  [...sections],\n) => {\n  const last = sections.length - 1;\n  const effect = ({ currPos }) => {\n    const { y } = currPos;\n    let toSet = defaultState;\n    for (const [i, section] of sections.entries()) {\n      const [ref, stateObj] = section;\n      console.log(y, -ref.current.offsetTop);\n      if (i === last) {\n        if (y < -ref.current.offsetTop) {\n          const sameAsCurrent = isEqual(currentState, stateObj);\n          if (!sameAsCurrent) {\n            toSet = stateObj;\n            break;\n            // callback(stateObj);\n            // break;\n          }\n        }\n      } else {\n        const [nextRef] = sections[i + 1];\n        if (y >= -nextRef.current.offsetTop && y <= -ref.current.offsetTop) {\n          const sameAsCurrent = isEqual(currentState, stateObj);\n          if (!sameAsCurrent) {\n            toSet = stateObj;\n            break;\n            // callback(stateObj);\n            // break;\n          }\n        } else {\n          const sameAsCurrent = isEqual(currentState, defaultState);\n          //   if (!sameAsCurrent) {\n          //     callback(defaultState);\n          //     // break;\n          //   }\n        }\n      }\n    }\n    callback(toSet);\n  };\n\n  return useScrollPosition(effect, deps);\n};\n"]},"metadata":{},"sourceType":"module"}