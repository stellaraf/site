{"ast":null,"code":"var _jsxFileName = \"/Users/ml/dev/stellar/site/hooks/usePageContent.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport { Box, Grid, Heading, Text } from '@chakra-ui/core';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst renderRichText = txt => documentToReactComponents(txt, {\n  renderNode: {\n    [BLOCKS.PARAGRAPH]: (_, children) => __jsx(Text, {\n      my: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 44\n      }\n    }, children)\n  }\n});\n\nconst Title = props => __jsx(Heading, _extends({\n  as: \"h3\",\n  fontSize: \"4xl\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 24\n  }\n}));\n\nconst Subtitle = props => __jsx(Heading, _extends({\n  as: \"h4\",\n  fontSize: \"xl\",\n  fontWeight: \"light\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 27\n  }\n}));\n\nconst Body = props => __jsx(Text, _extends({\n  my: 16,\n  maxW: [null, null, '60%'],\n  whiteSpace: \"pre-line\",\n  fontSize: \"lg\",\n  textAlign: \"justify\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }\n}));\n\nconst Subsections = ({\n  props,\n  children\n}) => {\n  return __jsx(Grid, _extends({\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: 16,\n    my: 16,\n    maxW: [null, null, '80%']\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nconst Subsection = ({\n  title,\n  body\n}) => {\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    as: \"h4\",\n    fontSize: \"lg\",\n    mb: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, title), __jsx(Box, {\n    whiteSpace: \"pre-line\",\n    fontSize: \"lg\",\n    textAlign: \"justify\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, documentToReactComponents(body)));\n};\n\nexport const usePageContent = (rawContent, referenceItems) => {\n  let obj = {};\n  let error;\n\n  try {\n    var _rawContent$fields, _paragraphs$length;\n\n    const {\n      title: rawTitle,\n      subtitle: rawSubtitle,\n      body: bodyObj,\n      button: showButton,\n      buttonLink: rawButtonLink,\n      buttonText: rawButtonText,\n      paragraphs\n    } = (_rawContent$fields = rawContent.fields) !== null && _rawContent$fields !== void 0 ? _rawContent$fields : {};\n    let body = null;\n    let subsections = null;\n    obj.title = __jsx(Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, rawTitle);\n    obj.subtitle = __jsx(Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 20\n      }\n    }, rawSubtitle);\n    obj.buttonText = rawButtonText;\n    obj.buttonLink = rawButtonLink;\n\n    if (bodyObj) {\n      body = __jsx(Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 14\n        }\n      }, documentToReactComponents(bodyObj));\n    }\n\n    if ((_paragraphs$length = paragraphs === null || paragraphs === void 0 ? void 0 : paragraphs.length) !== null && _paragraphs$length !== void 0 ? _paragraphs$length : 0 !== 0) {\n      subsections = __jsx(Subsections, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, paragraphs.map((p, i) => {\n        let matching = {};\n        referenceItems.Entry.map(t => {\n          if (t.sys.id === p.sys.id) {\n            matching = t.fields;\n          }\n        });\n        return __jsx(Subsection, {\n          key: i,\n          title: matching.title,\n          body: matching.body,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 20\n          }\n        });\n      }));\n    }\n\n    console.log(body);\n    obj.showButton = showButton;\n    obj.body = body;\n    obj.subsections = subsections;\n  } catch (err) {\n    console.error(err);\n    error = err.message;\n  }\n\n  return _objectSpread({\n    error\n  }, obj);\n};","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/hooks/usePageContent.js"],"names":["React","Box","Grid","Heading","Text","BLOCKS","MARKS","documentToReactComponents","renderRichText","txt","renderNode","PARAGRAPH","_","children","Title","props","Subtitle","Body","Subsections","Subsection","title","body","usePageContent","rawContent","referenceItems","obj","error","rawTitle","subtitle","rawSubtitle","bodyObj","button","showButton","buttonLink","rawButtonLink","buttonText","rawButtonText","paragraphs","fields","subsections","length","map","p","i","matching","Entry","t","sys","id","console","log","err","message"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Box, Grid, Heading, Text } from '@chakra-ui/core';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst renderRichText = txt =>\n  documentToReactComponents(txt, {\n    renderNode: {\n      [BLOCKS.PARAGRAPH]: (_, children) => <Text my={8}>{children}</Text>,\n    },\n  });\n\nconst Title = props => <Heading as=\"h3\" fontSize=\"4xl\" {...props} />;\nconst Subtitle = props => <Heading as=\"h4\" fontSize=\"xl\" fontWeight=\"light\" {...props} />;\nconst Body = props => (\n  <Text\n    my={16}\n    maxW={[null, null, '60%']}\n    whiteSpace=\"pre-line\"\n    fontSize=\"lg\"\n    textAlign=\"justify\"\n    {...props}\n  />\n);\n\nconst Subsections = ({ props, children }) => {\n  return (\n    <Grid templateColumns=\"repeat(2, 1fr)\" gap={16} my={16} maxW={[null, null, '80%']} {...props}>\n      {children}\n    </Grid>\n  );\n};\n\nconst Subsection = ({ title, body }) => {\n  return (\n    <Box>\n      <Heading as=\"h4\" fontSize=\"lg\" mb={4}>\n        {title}\n      </Heading>\n      <Box whiteSpace=\"pre-line\" fontSize=\"lg\" textAlign=\"justify\">\n        {documentToReactComponents(body)}\n      </Box>\n    </Box>\n  );\n};\n\nexport const usePageContent = (rawContent, referenceItems) => {\n  let obj = {};\n  let error;\n  try {\n    const {\n      title: rawTitle,\n      subtitle: rawSubtitle,\n      body: bodyObj,\n      button: showButton,\n      buttonLink: rawButtonLink,\n      buttonText: rawButtonText,\n      paragraphs,\n    } = rawContent.fields ?? {};\n    let body = null;\n    let subsections = null;\n\n    obj.title = <Title>{rawTitle}</Title>;\n    obj.subtitle = <Subtitle>{rawSubtitle}</Subtitle>;\n    obj.buttonText = rawButtonText;\n    obj.buttonLink = rawButtonLink;\n\n    if (bodyObj) {\n      body = <Body>{documentToReactComponents(bodyObj)}</Body>;\n    }\n    if (paragraphs?.length ?? 0 !== 0) {\n      subsections = (\n        <Subsections>\n          {paragraphs.map((p, i) => {\n            let matching = {};\n            referenceItems.Entry.map(t => {\n              if (t.sys.id === p.sys.id) {\n                matching = t.fields;\n              }\n            });\n            return <Subsection key={i} title={matching.title} body={matching.body} />;\n          })}\n        </Subsections>\n      );\n    }\n    console.log(body);\n    obj.showButton = showButton;\n    obj.body = body;\n    obj.subsections = subsections;\n  } catch (err) {\n    console.error(err);\n    error = err.message;\n  }\n  return { error, ...obj };\n};\n"]},"metadata":{},"sourceType":"module"}