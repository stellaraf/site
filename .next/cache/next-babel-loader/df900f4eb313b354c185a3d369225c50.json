{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useMemo } from \"react\";\nexport const useLinkType = href => {\n  _s();\n\n  if (href[0] === \"/\") {\n    href = href.substring(1);\n  }\n\n  const {\n    0: external,\n    1: setExternal\n  } = useState(false);\n  const {\n    0: linkTarget,\n    1: setTarget\n  } = useState(href);\n  useEffect(() => {\n    if (linkTarget.match(/(http|https|mailto)\\:\\/\\/.*/g)) {\n      !external && setExternal(true);\n    } else {\n      console.log(\"linkTarget1\", linkTarget);\n      let prefix = \"/\"; // if (linkTarget[0] === prefix) {\n      //   console.log(\"if match\", linkTarget.substring(1));\n      //   setTarget(linkTarget.substring(1));\n      // }\n\n      console.log(\"linkTarget2\", linkTarget);\n\n      if (!linkTarget.includes(\".mdx\") && linkTarget.includes(\"#\")) {\n        prefix = \"\";\n      }\n\n      let parts = linkTarget.split(\".mdx\");\n      setTarget([prefix, ...parts].join(\"\"));\n    }\n  }, [href]);\n  const isExternal = useMemo(() => external);\n  const target = useMemo(() => linkTarget);\n  return {\n    isExternal,\n    target\n  };\n};\n\n_s(useLinkType, \"9SdyA9+HpwzymkoR8zIlBxX3wXA=\");","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/hooks/useLinkType.js"],"names":["useEffect","useState","useMemo","useLinkType","href","substring","external","setExternal","linkTarget","setTarget","match","console","log","prefix","includes","parts","split","join","isExternal","target"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,OAAO,MAAMC,WAAW,GAAGC,IAAI,IAAI;AAAA;;AACjC,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACnBA,IAAAA,IAAI,GAAGA,IAAI,CAACC,SAAL,CAAe,CAAf,CAAP;AACD;;AAED,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA0BR,QAAQ,CAACG,IAAD,CAAxC;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,UAAU,CAACE,KAAX,CAAiB,8BAAjB,CAAJ,EAAsD;AACpD,OAACJ,QAAD,IAAaC,WAAW,CAAC,IAAD,CAAxB;AACD,KAFD,MAEO;AACLI,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,UAA3B;AACA,UAAIK,MAAM,GAAG,GAAb,CAFK,CAGL;AACA;AACA;AACA;;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,UAA3B;;AACA,UAAI,CAACA,UAAU,CAACM,QAAX,CAAoB,MAApB,CAAD,IAAgCN,UAAU,CAACM,QAAX,CAAoB,GAApB,CAApC,EAA8D;AAC5DD,QAAAA,MAAM,GAAG,EAAT;AACD;;AACD,UAAIE,KAAK,GAAGP,UAAU,CAACQ,KAAX,CAAiB,MAAjB,CAAZ;AACAP,MAAAA,SAAS,CAAC,CAACI,MAAD,EAAS,GAAGE,KAAZ,EAAmBE,IAAnB,CAAwB,EAAxB,CAAD,CAAT;AACD;AACF,GAjBQ,EAiBN,CAACb,IAAD,CAjBM,CAAT;AAmBA,QAAMc,UAAU,GAAGhB,OAAO,CAAC,MAAMI,QAAP,CAA1B;AACA,QAAMa,MAAM,GAAGjB,OAAO,CAAC,MAAMM,UAAP,CAAtB;AACA,SAAO;AAAEU,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAP;AACD,CA7BM;;GAAMhB,W","sourcesContent":["import { useEffect, useState, useMemo } from \"react\";\n\nexport const useLinkType = href => {\n  if (href[0] === \"/\") {\n    href = href.substring(1);\n  }\n\n  const [external, setExternal] = useState(false);\n  const [linkTarget, setTarget] = useState(href);\n  useEffect(() => {\n    if (linkTarget.match(/(http|https|mailto)\\:\\/\\/.*/g)) {\n      !external && setExternal(true);\n    } else {\n      console.log(\"linkTarget1\", linkTarget);\n      let prefix = \"/\";\n      // if (linkTarget[0] === prefix) {\n      //   console.log(\"if match\", linkTarget.substring(1));\n      //   setTarget(linkTarget.substring(1));\n      // }\n      console.log(\"linkTarget2\", linkTarget);\n      if (!linkTarget.includes(\".mdx\") && linkTarget.includes(\"#\")) {\n        prefix = \"\";\n      }\n      let parts = linkTarget.split(\".mdx\");\n      setTarget([prefix, ...parts].join(\"\"));\n    }\n  }, [href]);\n\n  const isExternal = useMemo(() => external);\n  const target = useMemo(() => linkTarget);\n  return { isExternal, target };\n};\n"]},"metadata":{},"sourceType":"module"}