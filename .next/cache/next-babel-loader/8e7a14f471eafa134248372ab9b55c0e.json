{"ast":null,"code":"var _jsxFileName = \"/Users/ml/dev/stellar/site/components/USMap.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport { Box, Link, Popover, PopoverTrigger, PopoverContent, PopoverHeader, PopoverBody, PopoverFooter, PopoverArrow, Text } from '@chakra-ui/core';\nimport { MdMyLocation } from 'react-icons/md';\nimport { ComposableMap, Geographies, Geography, Marker, ZoomableGroup } from 'react-simple-maps'; // const MarkerIcon = props => <Box as={MdMyLocation} {...props} />;\n// const MarkerIcon = forwardRef(({ size = 19, color = 'currentColor', ...props }, ref) => {\n//   return (\n//     <svg\n//       xmlns=\"http://www.w3.org/2000/svg\"\n//       viewBox=\"0 0 19 19\"\n//       height={size}\n//       width={size}\n//       ref={ref}\n//       style={{ zIndex: 1 }}\n//       {...props}>\n//       <rect fill=\"none\" x=\"0\" y=\"0\" width={size} height={size} />\n//       <path\n//         fill={color}\n//         transform=\"translate(2 2)\"\n//         d=\"M7.5,14.941l-.4-.495c-.973-1.189-4.9-6.556-4.9-9.16A5.066,5.066,0,0,1,7.036,0q.222-.01.445,0a5.066,5.066,0,0,1,5.286,4.836q.01.225,0,.45c0,2.213-2.669,6.111-4.678,8.851ZM7.481.986a4.077,4.077,0,0,0-4.3,4.3c0,1.832,2.759,6.038,4.286,8.034,1.25-1.71,4.315-5.989,4.315-8.034a4.077,4.077,0,0,0-4.3-4.3Z\"\n//       />\n//     </svg>\n//   );\n// });\n\nconst MarkerIcon = forwardRef((_ref, ref) => {\n  let {\n    size = 19,\n    color = 'currentColor'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"size\", \"color\"]);\n\n  return __jsx(React.Fragment, null, __jsx(\"rect\", {\n    fill: \"none\",\n    x: \"0\",\n    y: \"0\",\n    width: size,\n    height: size,\n    ref: ref,\n    style: {\n      zIndex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }), __jsx(\"path\", {\n    style: {\n      zIndex: 1\n    },\n    fill: color,\n    transform: \"translate(2 2)\",\n    d: \"M7.5,14.941l-.4-.495c-.973-1.189-4.9-6.556-4.9-9.16A5.066,5.066,0,0,1,7.036,0q.222-.01.445,0a5.066,5.066,0,0,1,5.286,4.836q.01.225,0,.45c0,2.213-2.669,6.111-4.678,8.851ZM7.481.986a4.077,4.077,0,0,0-4.3,4.3c0,1.832,2.759,6.038,4.286,8.034,1.25-1.71,4.315-5.989,4.315-8.034a4.077,4.077,0,0,0-4.3-4.3Z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n});\n\nconst MarkerInfo = (_ref2) => {\n  let {\n    children\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  return __jsx(Popover, _extends({\n    trigger: \"click\",\n    defaultIsOpen: true\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), __jsx(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, children)), __jsx(PopoverContent, {\n    border: \"0\",\n    zIndex: 4,\n    width: \"400px\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    p: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    mt: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Infinite Builder working on DX @Netlify. Helping people #LearnInPublic\"))));\n};\n\nexport const USMap = forwardRef(({\n  geoData,\n  locations,\n  mapColor\n}, ref) => {\n  return __jsx(Box, {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(ComposableMap, {\n    projection: \"geoAlbersUsa\",\n    style: {\n      zIndex: 1,\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(Geographies, {\n    geography: geoData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, ({\n    geographies\n  }) => __jsx(React.Fragment, null, geographies.map(geo => __jsx(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: mapColor,\n    style: {\n      hover: {\n        outline: 'none'\n      },\n      pressed: {\n        outline: 'none'\n      },\n      default: {\n        outline: 'none'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  })), locations && locations.map(loc => {\n    if (loc.active) {\n      return __jsx(Popover, _extends({\n        trigger: \"click\",\n        defaultIsOpen: true\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 23\n        }\n      }), __jsx(Marker, {\n        coordinates: [loc.coordinates.lon, loc.coordinates.lat],\n        key: loc.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      }), __jsx(PopoverTrigger, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }\n      }, __jsx(Link, {\n        href: \"#\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 27\n        }\n      }, __jsx(\"circle\", {\n        r: 4,\n        fill: \"currentColor\",\n        strokeWidth: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }\n      }))), __jsx(PopoverContent, {\n        border: \"0\",\n        zIndex: 4,\n        width: \"400px\",\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }\n      }, __jsx(Box, {\n        p: 5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 27\n        }\n      }, __jsx(Text, {\n        mt: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }\n      }, \"Infinite Builder working on DX @Netlify. Helping people #LearnInPublic\"))));\n    }\n  })))));\n});","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/components/USMap.js"],"names":["React","forwardRef","Box","Link","Popover","PopoverTrigger","PopoverContent","PopoverHeader","PopoverBody","PopoverFooter","PopoverArrow","Text","MdMyLocation","ComposableMap","Geographies","Geography","Marker","ZoomableGroup","MarkerIcon","ref","size","color","props","zIndex","MarkerInfo","children","USMap","geoData","locations","mapColor","position","geographies","map","geo","rsmKey","hover","outline","pressed","default","loc","active","coordinates","lon","lat","id"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { forwardRef } from 'react';\nimport {\n  Box,\n  Link,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverFooter,\n  PopoverArrow,\n  Text,\n} from '@chakra-ui/core';\nimport { MdMyLocation } from 'react-icons/md';\nimport { ComposableMap, Geographies, Geography, Marker, ZoomableGroup } from 'react-simple-maps';\n\n// const MarkerIcon = props => <Box as={MdMyLocation} {...props} />;\n\n// const MarkerIcon = forwardRef(({ size = 19, color = 'currentColor', ...props }, ref) => {\n//   return (\n//     <svg\n//       xmlns=\"http://www.w3.org/2000/svg\"\n//       viewBox=\"0 0 19 19\"\n//       height={size}\n//       width={size}\n//       ref={ref}\n//       style={{ zIndex: 1 }}\n//       {...props}>\n//       <rect fill=\"none\" x=\"0\" y=\"0\" width={size} height={size} />\n//       <path\n//         fill={color}\n//         transform=\"translate(2 2)\"\n//         d=\"M7.5,14.941l-.4-.495c-.973-1.189-4.9-6.556-4.9-9.16A5.066,5.066,0,0,1,7.036,0q.222-.01.445,0a5.066,5.066,0,0,1,5.286,4.836q.01.225,0,.45c0,2.213-2.669,6.111-4.678,8.851ZM7.481.986a4.077,4.077,0,0,0-4.3,4.3c0,1.832,2.759,6.038,4.286,8.034,1.25-1.71,4.315-5.989,4.315-8.034a4.077,4.077,0,0,0-4.3-4.3Z\"\n//       />\n//     </svg>\n//   );\n// });\n\nconst MarkerIcon = forwardRef(({ size = 19, color = 'currentColor', ...props }, ref) => {\n  return (\n    <>\n      <rect fill=\"none\" x=\"0\" y=\"0\" width={size} height={size} ref={ref} style={{ zIndex: 1 }} />\n      <path\n        style={{ zIndex: 1 }}\n        fill={color}\n        transform=\"translate(2 2)\"\n        d=\"M7.5,14.941l-.4-.495c-.973-1.189-4.9-6.556-4.9-9.16A5.066,5.066,0,0,1,7.036,0q.222-.01.445,0a5.066,5.066,0,0,1,5.286,4.836q.01.225,0,.45c0,2.213-2.669,6.111-4.678,8.851ZM7.481.986a4.077,4.077,0,0,0-4.3,4.3c0,1.832,2.759,6.038,4.286,8.034,1.25-1.71,4.315-5.989,4.315-8.034a4.077,4.077,0,0,0-4.3-4.3Z\"\n      />\n    </>\n  );\n});\n\nconst MarkerInfo = ({ children, ...props }) => {\n  return (\n    <Popover trigger=\"click\" defaultIsOpen {...props}>\n      <PopoverTrigger>\n        <Link href=\"#\">{children}</Link>\n      </PopoverTrigger>\n      <PopoverContent border=\"0\" zIndex={4} width=\"400px\" color=\"white\">\n        <Box p={5}>\n          <Text mt={3}>Infinite Builder working on DX @Netlify. Helping people #LearnInPublic</Text>\n        </Box>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport const USMap = forwardRef(({ geoData, locations, mapColor }, ref) => {\n  return (\n    <Box ref={ref}>\n      <ComposableMap projection=\"geoAlbersUsa\" style={{ zIndex: 1, position: 'relative' }}>\n        <Geographies geography={geoData}>\n          {({ geographies }) => (\n            <>\n              {geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={mapColor}\n                  style={{\n                    hover: { outline: 'none' },\n                    pressed: { outline: 'none' },\n                    default: { outline: 'none' },\n                  }}\n                />\n              ))}\n              {locations &&\n                locations.map(loc => {\n                  if (loc.active) {\n                    return (\n                      <Popover trigger=\"click\" defaultIsOpen {...props}>\n                        <Marker\n                          coordinates={[loc.coordinates.lon, loc.coordinates.lat]}\n                          key={loc.id}></Marker>\n                        <PopoverTrigger>\n                          <Link href=\"#\">\n                            <circle r={4} fill=\"currentColor\" strokeWidth={2} />\n                          </Link>\n                        </PopoverTrigger>\n                        <PopoverContent border=\"0\" zIndex={4} width=\"400px\" color=\"white\">\n                          <Box p={5}>\n                            <Text mt={3}>\n                              Infinite Builder working on DX @Netlify. Helping people #LearnInPublic\n                            </Text>\n                          </Box>\n                        </PopoverContent>\n                      </Popover>\n                    );\n                  }\n                })}\n            </>\n          )}\n        </Geographies>\n      </ComposableMap>\n    </Box>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}