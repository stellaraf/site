{"ast":null,"code":"export const BREAKPOINTS = {\n  min: {\n    xs: \"0px\",\n    sm: \"576px\",\n    md: \"768px\",\n    lg: \"992px\",\n    xl: \"1200px\"\n  },\n  max: {\n    xs: \"0px\",\n    sm: \"575.98px\",\n    md: \"767.98px\",\n    lg: \"991.98px\",\n    xl: \"1199.98px\"\n  }\n};\n\nfunction mediaQuery(breakpoint, direction) {\n  const supportedBreaks = Object.keys(BREAKPOINTS[direction]);\n\n  if (!supportedBreaks.includes(breakpoint)) {\n    throw new Error(`Breakpoint ${breakpoint} invalid. Must be one of ${supportedBreaks.join(\", \")}`);\n  }\n\n  let size = BREAKPOINTS[direction][breakpoint];\n  let query = `(${direction}-width: ${size})`;\n  let rawQueryData = window.matchMedia(query);\n  return rawQueryData.matches;\n}\n\nfunction mediaBreak(breakpoint, direction) {\n  const supportedBreaks = Object.keys(BREAKPOINTS[direction]);\n\n  if (!supportedBreaks.includes(breakpoint)) {\n    throw new Error(`Breakpoint ${breakpoint} invalid. Must be one of ${supportedBreaks.join(\", \")}`);\n  }\n\n  let size = BREAKPOINTS[direction][breakpoint];\n  return `@media (${direction}-width: ${size})`;\n}\n\nexport default {\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  up: breakpoint => mediaBreak(breakpoint, \"min\"),\n\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  down: breakpoint => mediaBreak(breakpoint, \"max\")\n};\nconst query = {\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  atLeast: breakpoint => mediaQuery(breakpoint, \"min\"),\n\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  atMost: breakpoint => mediaQuery(breakpoint, \"max\")\n};\nexport { query };","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/src/utils/breakpoints.js"],"names":["BREAKPOINTS","min","xs","sm","md","lg","xl","max","mediaQuery","breakpoint","direction","supportedBreaks","Object","keys","includes","Error","join","size","query","rawQueryData","window","matchMedia","matches","mediaBreak","up","down","atLeast","atMost"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACzBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,EAAE,EAAE,KADD;AAEHC,IAAAA,EAAE,EAAE,OAFD;AAGHC,IAAAA,EAAE,EAAE,OAHD;AAIHC,IAAAA,EAAE,EAAE,OAJD;AAKHC,IAAAA,EAAE,EAAE;AALD,GADoB;AAQzBC,EAAAA,GAAG,EAAE;AACHL,IAAAA,EAAE,EAAE,KADD;AAEHC,IAAAA,EAAE,EAAE,UAFD;AAGHC,IAAAA,EAAE,EAAE,UAHD;AAIHC,IAAAA,EAAE,EAAE,UAJD;AAKHC,IAAAA,EAAE,EAAE;AALD;AARoB,CAApB;;AAiBP,SAASE,UAAT,CAAoBC,UAApB,EAAgCC,SAAhC,EAA2C;AACzC,QAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYb,WAAW,CAACU,SAAD,CAAvB,CAAxB;;AACA,MAAI,CAACC,eAAe,CAACG,QAAhB,CAAyBL,UAAzB,CAAL,EAA2C;AACzC,UAAM,IAAIM,KAAJ,CACH,cAAaN,UAAW,4BAA2BE,eAAe,CAACK,IAAhB,CAClD,IADkD,CAElD,EAHE,CAAN;AAKD;;AACD,MAAIC,IAAI,GAAGjB,WAAW,CAACU,SAAD,CAAX,CAAuBD,UAAvB,CAAX;AACA,MAAIS,KAAK,GAAI,IAAGR,SAAU,WAAUO,IAAK,GAAzC;AACA,MAAIE,YAAY,GAAGC,MAAM,CAACC,UAAP,CAAkBH,KAAlB,CAAnB;AACA,SAAOC,YAAY,CAACG,OAApB;AACD;;AAED,SAASC,UAAT,CAAoBd,UAApB,EAAgCC,SAAhC,EAA2C;AACzC,QAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYb,WAAW,CAACU,SAAD,CAAvB,CAAxB;;AACA,MAAI,CAACC,eAAe,CAACG,QAAhB,CAAyBL,UAAzB,CAAL,EAA2C;AACzC,UAAM,IAAIM,KAAJ,CACH,cAAaN,UAAW,4BAA2BE,eAAe,CAACK,IAAhB,CAClD,IADkD,CAElD,EAHE,CAAN;AAKD;;AACD,MAAIC,IAAI,GAAGjB,WAAW,CAACU,SAAD,CAAX,CAAuBD,UAAvB,CAAX;AACA,SAAQ,WAAUC,SAAU,WAAUO,IAAK,GAA3C;AACD;;AACD,eAAe;AACb;;;;AAIAO,EAAAA,EAAE,EAAEf,UAAU,IAAIc,UAAU,CAACd,UAAD,EAAa,KAAb,CALf;;AAMb;;;;AAIAgB,EAAAA,IAAI,EAAEhB,UAAU,IAAIc,UAAU,CAACd,UAAD,EAAa,KAAb;AAVjB,CAAf;AAaA,MAAMS,KAAK,GAAG;AACZ;;;;AAIAQ,EAAAA,OAAO,EAAEjB,UAAU,IAAID,UAAU,CAACC,UAAD,EAAa,KAAb,CALrB;;AAMZ;;;;AAIAkB,EAAAA,MAAM,EAAElB,UAAU,IAAID,UAAU,CAACC,UAAD,EAAa,KAAb;AAVpB,CAAd;AAaA,SAASS,KAAT","sourcesContent":["export const BREAKPOINTS = {\n  min: {\n    xs: \"0px\",\n    sm: \"576px\",\n    md: \"768px\",\n    lg: \"992px\",\n    xl: \"1200px\"\n  },\n  max: {\n    xs: \"0px\",\n    sm: \"575.98px\",\n    md: \"767.98px\",\n    lg: \"991.98px\",\n    xl: \"1199.98px\"\n  }\n};\n\nfunction mediaQuery(breakpoint, direction) {\n  const supportedBreaks = Object.keys(BREAKPOINTS[direction]);\n  if (!supportedBreaks.includes(breakpoint)) {\n    throw new Error(\n      `Breakpoint ${breakpoint} invalid. Must be one of ${supportedBreaks.join(\n        \", \"\n      )}`\n    );\n  }\n  let size = BREAKPOINTS[direction][breakpoint];\n  let query = `(${direction}-width: ${size})`;\n  let rawQueryData = window.matchMedia(query);\n  return rawQueryData.matches;\n}\n\nfunction mediaBreak(breakpoint, direction) {\n  const supportedBreaks = Object.keys(BREAKPOINTS[direction]);\n  if (!supportedBreaks.includes(breakpoint)) {\n    throw new Error(\n      `Breakpoint ${breakpoint} invalid. Must be one of ${supportedBreaks.join(\n        \", \"\n      )}`\n    );\n  }\n  let size = BREAKPOINTS[direction][breakpoint];\n  return `@media (${direction}-width: ${size})`;\n}\nexport default {\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  up: breakpoint => mediaBreak(breakpoint, \"min\"),\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  down: breakpoint => mediaBreak(breakpoint, \"max\")\n};\n\nconst query = {\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  atLeast: breakpoint => mediaQuery(breakpoint, \"min\"),\n  /**\n   *\n   * @param {'xs'|'sm'|'md'|'lg'|'xl'} breakpoint\n   */\n  atMost: breakpoint => mediaQuery(breakpoint, \"max\")\n};\n\nexport { query };\n"]},"metadata":{},"sourceType":"module"}