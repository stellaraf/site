{"ast":null,"code":"var _jsxFileName = \"/Users/ml/dev/stellar/site/components/Link.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport NextLink from 'next/link';\nimport { Icon, Link as ChakraLink } from '@chakra-ui/core';\nimport { useLinkType } from '../hooks';\nexport const Link = (_ref) => {\n  let {\n    href,\n    showIcon = false,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"href\", \"showIcon\", \"children\"]);\n\n  const {\n    isExternal,\n    target\n  } = useLinkType(href);\n  const Wrapper = isExternal ? React.Fragment : NextLink;\n  const wrapperProps = isExternal ? {} : {\n    passHref: true,\n    href: target\n  };\n  const linkProps = isExternal ? {\n    isExternal,\n    href: target\n  } : {};\n  return __jsx(Wrapper, _extends({}, wrapperProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }), __jsx(ChakraLink, _extends({\n    opacity: \"0.8\"\n  }, linkProps, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }), children, showIcon && isExternal && __jsx(Icon, {\n    name: \"external-link\",\n    mb: 1,\n    mx: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 36\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/components/Link.js"],"names":["React","NextLink","Icon","Link","ChakraLink","useLinkType","href","showIcon","children","props","isExternal","target","Wrapper","Fragment","wrapperProps","passHref","linkProps"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,IAAT,EAAeC,IAAI,IAAIC,UAAvB,QAAyC,iBAAzC;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,OAAO,MAAMF,IAAI,GAAG,UAAoD;AAAA,MAAnD;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,QAAQ,GAAG,KAAnB;AAA0BC,IAAAA;AAA1B,GAAmD;AAAA,MAAZC,KAAY;;AACtE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAyBN,WAAW,CAACC,IAAD,CAA1C;AACA,QAAMM,OAAO,GAAGF,UAAU,GAAGV,KAAK,CAACa,QAAT,GAAoBZ,QAA9C;AACA,QAAMa,YAAY,GAAGJ,UAAU,GAAG,EAAH,GAAQ;AAAEK,IAAAA,QAAQ,EAAE,IAAZ;AAAkBT,IAAAA,IAAI,EAAEK;AAAxB,GAAvC;AACA,QAAMK,SAAS,GAAGN,UAAU,GAAG;AAAEA,IAAAA,UAAF;AAAcJ,IAAAA,IAAI,EAAEK;AAApB,GAAH,GAAkC,EAA9D;AACA,SACE,MAAC,OAAD,eAAaG,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC;AAApB,KAA8BE,SAA9B,EAA6CP,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,QADH,EAEGD,QAAQ,IAAIG,UAAZ,IAA0B,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,eAAX;AAA2B,IAAA,EAAE,EAAE,CAA/B;AAAkC,IAAA,EAAE,EAAE,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAF7B,CADF,CADF;AAQD,CAbM","sourcesContent":["import * as React from 'react';\nimport NextLink from 'next/link';\nimport { Icon, Link as ChakraLink } from '@chakra-ui/core';\nimport { useLinkType } from '../hooks';\n\nexport const Link = ({ href, showIcon = false, children, ...props }) => {\n  const { isExternal, target } = useLinkType(href);\n  const Wrapper = isExternal ? React.Fragment : NextLink;\n  const wrapperProps = isExternal ? {} : { passHref: true, href: target };\n  const linkProps = isExternal ? { isExternal, href: target } : {};\n  return (\n    <Wrapper {...wrapperProps}>\n      <ChakraLink opacity=\"0.8\" {...linkProps} {...props}>\n        {children}\n        {showIcon && isExternal && <Icon name=\"external-link\" mb={1} mx={1} />}\n      </ChakraLink>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}