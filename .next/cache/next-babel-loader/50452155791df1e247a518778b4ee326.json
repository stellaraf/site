{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/ml/dev/stellar/site/hooks/usePageContent.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { Box, Grid, Heading, Text } from '@chakra-ui/core';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst Title = props => __jsx(Heading, _extends({\n  as: \"h3\",\n  fontSize: \"4xl\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 24\n  }\n}));\n\n_c = Title;\n\nconst Subtitle = props => __jsx(Heading, _extends({\n  as: \"h4\",\n  fontSize: \"xl\",\n  fontWeight: \"light\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 27\n  }\n}));\n\n_c2 = Subtitle;\n\nconst Body = props => __jsx(Text, _extends({\n  my: 16,\n  maxW: [null, null, '60%'],\n  whiteSpace: \"pre-line\",\n  fontSize: \"lg\",\n  textAlign: \"justify\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }\n}));\n\n_c3 = Body;\n\nconst Subsections = props => {\n  return __jsx(Grid, {\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: 16,\n    my: 16,\n    maxW: [null, null, '80%'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(Box, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  })));\n};\n\n_c4 = Subsections;\n\nconst Subsection = ({\n  title,\n  body\n}) => {\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    as: \"h4\",\n    fontSize: \"lg\",\n    mb: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, title), __jsx(Text, {\n    whiteSpace: \"pre-line\",\n    fontSize: \"lg\",\n    textAlign: \"justify\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, documentToReactComponents(body)));\n};\n\n_c5 = Subsection;\nexport const usePageContent = (rawContent, referenceItems) => {\n  let obj = {};\n  let error;\n  console.log(rawContent);\n\n  try {\n    var _rawContent$fields;\n\n    const {\n      title: rawTitle,\n      subtitle: rawSubtitle,\n      body: bodyObj,\n      button: showButton,\n      buttonLink: rawButtonLink,\n      buttonText: rawButtonText,\n      paragraphs\n    } = (_rawContent$fields = rawContent.fields) !== null && _rawContent$fields !== void 0 ? _rawContent$fields : {};\n    let body = null;\n    let subsections = null;\n\n    if (bodyObj) {\n      body = __jsx(Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 14\n        }\n      }, documentToReactComponents(bodyObj));\n    }\n\n    if (paragraphs.length !== 0) {\n      subsections = __jsx(Subsections, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, paragraphs.map((p, i) => {\n        const matching = referenceItems.Entry.map(t => t.sys.id === p.sys.id)[0];\n        return __jsx(Subsection, {\n          key: i,\n          title: matching.fields.title,\n          body: matching.fields.body,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 20\n          }\n        });\n      }));\n    }\n\n    console.log(body);\n    obj = {\n      title: __jsx(Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 14\n        }\n      }, rawTitle),\n      subtitle: __jsx(Subtitle, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }, rawSubtitle),\n      buttonText: rawButtonText,\n      buttonLink: rawButtonLink,\n      showButton,\n      body,\n      subsections\n    };\n  } catch (err) {\n    console.error(err);\n    error = err.message;\n  }\n\n  return _objectSpread({\n    error\n  }, obj);\n};\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Title\");\n$RefreshReg$(_c2, \"Subtitle\");\n$RefreshReg$(_c3, \"Body\");\n$RefreshReg$(_c4, \"Subsections\");\n$RefreshReg$(_c5, \"Subsection\");","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/hooks/usePageContent.js"],"names":["React","Box","Grid","Heading","Text","BLOCKS","MARKS","documentToReactComponents","Title","props","Subtitle","Body","Subsections","Subsection","title","body","usePageContent","rawContent","referenceItems","obj","error","console","log","rawTitle","subtitle","rawSubtitle","bodyObj","button","showButton","buttonLink","rawButtonLink","buttonText","rawButtonText","paragraphs","fields","subsections","length","map","p","i","matching","Entry","t","sys","id","err","message"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Box, Grid, Heading, Text } from '@chakra-ui/core';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst Title = props => <Heading as=\"h3\" fontSize=\"4xl\" {...props} />;\nconst Subtitle = props => <Heading as=\"h4\" fontSize=\"xl\" fontWeight=\"light\" {...props} />;\nconst Body = props => (\n  <Text\n    my={16}\n    maxW={[null, null, '60%']}\n    whiteSpace=\"pre-line\"\n    fontSize=\"lg\"\n    textAlign=\"justify\"\n    {...props}\n  />\n);\n\nconst Subsections = props => {\n  return (\n    <Grid templateColumns=\"repeat(2, 1fr)\" gap={16} my={16} maxW={[null, null, '80%']}>\n      <Box {...props} />\n    </Grid>\n  );\n};\n\nconst Subsection = ({ title, body }) => {\n  return (\n    <Box>\n      <Heading as=\"h4\" fontSize=\"lg\" mb={4}>\n        {title}\n      </Heading>\n      <Text whiteSpace=\"pre-line\" fontSize=\"lg\" textAlign=\"justify\">\n        {documentToReactComponents(body)}\n      </Text>\n    </Box>\n  );\n};\n\nexport const usePageContent = (rawContent, referenceItems) => {\n  let obj = {};\n  let error;\n  console.log(rawContent);\n  try {\n    const {\n      title: rawTitle,\n      subtitle: rawSubtitle,\n      body: bodyObj,\n      button: showButton,\n      buttonLink: rawButtonLink,\n      buttonText: rawButtonText,\n      paragraphs,\n    } = rawContent.fields ?? {};\n    let body = null;\n    let subsections = null;\n    if (bodyObj) {\n      body = <Body>{documentToReactComponents(bodyObj)}</Body>;\n    }\n    if (paragraphs.length !== 0) {\n      subsections = (\n        <Subsections>\n          {paragraphs.map((p, i) => {\n            const matching = referenceItems.Entry.map(t => t.sys.id === p.sys.id)[0];\n            return <Subsection key={i} title={matching.fields.title} body={matching.fields.body} />;\n          })}\n        </Subsections>\n      );\n    }\n    console.log(body);\n    obj = {\n      title: <Title>{rawTitle}</Title>,\n      subtitle: <Subtitle>{rawSubtitle}</Subtitle>,\n      buttonText: rawButtonText,\n      buttonLink: rawButtonLink,\n      showButton,\n      body,\n      subsections,\n    };\n  } catch (err) {\n    console.error(err);\n    error = err.message;\n  }\n  return { error, ...obj };\n};\n"]},"metadata":{},"sourceType":"module"}