{"ast":null,"code":"var _jsxFileName = \"/Users/ml/dev/stellar/site/layouts/SiteLayout.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport dynamic from 'next/dynamic';\nimport { Box, CSSReset } from '@chakra-ui/core';\nimport { Global } from '@emotion/core';\nimport { NavbarDesktop } from '../components/Nav';\nimport { Controls } from '../components/Controls';\nimport { Footer } from '../components/Footer';\nimport { CalltoAction } from '../components/CallToAction';\nimport { useTheme, useColorMode } from '../context';\nconst Stars = dynamic(() => import('../components/Stars').then(i => i.Stars), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/Stars')],\n    modules: ['../components/Stars']\n  }\n});\nimport smoothscroll from 'smoothscroll-polyfill';\n\nif (false) {\n  smoothscroll.polyfill();\n}\n\nconst Wrapper = props => __jsx(Box, _extends({\n  id: \"__wrapper\",\n  minH: \"100vh\",\n  h: \"100%\",\n  zIndex: 1\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 26\n  }\n}));\n\nconst Main = props => __jsx(Box, _extends({\n  as: \"main\",\n  overflowX: \"hidden\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }\n}));\n\nconst Root = props => __jsx(Box, _extends({\n  id: \"__content\",\n  h: \"100%\",\n  minH: \"50vh\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 23\n  }\n}));\n\nexport const SiteLayout = ({\n  children\n}) => {\n  const {\n    colors\n  } = useTheme();\n  const {\n    colorMode\n  } = useColorMode();\n  const bg = {\n    dark: colors.original.dark,\n    light: colors.original.light\n  };\n  return __jsx(React.Fragment, null, __jsx(CSSReset, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(NavbarDesktop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(Root, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, children)), __jsx(CalltoAction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }), __jsx(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }), colorMode === 'dark' && __jsx(Stars, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 34\n    }\n  })), __jsx(Global, {\n    styles: {\n      body: {\n        backgroundColor: bg[colorMode],\n        color: bg[!colorMode]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/layouts/SiteLayout.js"],"names":["React","dynamic","Box","CSSReset","Global","NavbarDesktop","Controls","Footer","CalltoAction","useTheme","useColorMode","Stars","then","i","smoothscroll","polyfill","Wrapper","props","Main","Root","SiteLayout","children","colors","colorMode","bg","dark","original","light","body","backgroundColor","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport dynamic from 'next/dynamic';\nimport { Box, CSSReset } from '@chakra-ui/core';\nimport { Global } from '@emotion/core';\nimport { NavbarDesktop } from '../components/Nav';\nimport { Controls } from '../components/Controls';\nimport { Footer } from '../components/Footer';\nimport { CalltoAction } from '../components/CallToAction';\nimport { useTheme, useColorMode } from '../context';\n\nconst Stars = dynamic(() => import('../components/Stars').then(i => i.Stars));\n\nimport smoothscroll from 'smoothscroll-polyfill';\n\nif (typeof window !== 'undefined') {\n  smoothscroll.polyfill();\n}\n\nconst Wrapper = props => <Box id=\"__wrapper\" minH=\"100vh\" h=\"100%\" zIndex={1} {...props} />;\nconst Main = props => <Box as=\"main\" overflowX=\"hidden\" {...props} />;\nconst Root = props => <Box id=\"__content\" h=\"100%\" minH=\"50vh\" {...props} />;\n\nexport const SiteLayout = ({ children }) => {\n  const { colors } = useTheme();\n  const { colorMode } = useColorMode();\n\n  const bg = { dark: colors.original.dark, light: colors.original.light };\n  return (\n    <>\n      <CSSReset />\n      <Wrapper>\n        <NavbarDesktop />\n        <Main>\n          <Root>{children}</Root>\n        </Main>\n        <CalltoAction />\n        <Footer />\n        <Controls />\n        {colorMode === 'dark' && <Stars />}\n      </Wrapper>\n      <Global\n        styles={{\n          body: {\n            backgroundColor: bg[colorMode],\n            color: bg[!colorMode],\n          },\n        }}\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}