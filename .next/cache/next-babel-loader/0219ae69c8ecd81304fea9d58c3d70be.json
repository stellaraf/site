{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/ml/dev/stellar/site/components/USMap.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport { Box, Link, Popover, PopoverTrigger, PopoverContent, PopoverHeader, PopoverBody, PopoverArrow } from '@chakra-ui/core';\nimport { useSpring, animated } from 'react-spring';\nimport { Pin } from './Icons';\nimport { ComposableMap, Geographies, Geography, Marker } from 'react-simple-maps';\n\nconst Circle = props => __jsx(Box, _extends({\n  as: \"circle\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 25\n  }\n}));\n\n_c = Circle;\nconst MapMarker = forwardRef(_c2 = _s((_ref, ref) => {\n  _s();\n\n  let {\n    color = 'currentColor'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"color\"]);\n\n  // const { x } = useSpring({ from: { x: 0 }, x: 1, config: { duration: 1500 } });\n  const animation = useSpring({\n    from: {\n      opacity: 0.3,\n      transform: 'scale(0)'\n    },\n    to: {\n      opacity: 0,\n      transform: 'scale(1)'\n    },\n    config: {\n      duration: 1500\n    },\n    reset: true\n  });\n  return __jsx(Marker, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }), __jsx(Circle, {\n    ref: ref,\n    r: 4,\n    fill: color,\n    stroke: \"white\",\n    boxShadow: \"sm\",\n    strokeWidth: 1.5,\n    zIndex: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), __jsx(animated.circle, {\n    r: 16,\n    fill: \"black\",\n    style: animation // style={{\n    //   opacity: x.interpolate({ range: [0.3, 0], output: [0, 0.3] }),\n    //   transform: x\n    //     .interpolate({\n    //       range: [0, 1],\n    //       output: [1, 1],\n    //     })\n    //     .interpolate(x => `scale(${x})`),\n    // }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n}, \"84dvVC8rOQE1LXpTrRxuus6xoA8=\", false, function () {\n  return [useSpring];\n}));\n_c3 = MapMarker;\nexport const USMap = forwardRef(_c4 = (_ref2, ref) => {\n  let {\n    geoData,\n    locations,\n    mapColor,\n    markerColor\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"geoData\", \"locations\", \"mapColor\", \"markerColor\"]);\n\n  return __jsx(Box, _extends({\n    ref: ref,\n    mx: \"auto\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), __jsx(ComposableMap, {\n    projection: \"geoAlbersUsa\",\n    style: {\n      zIndex: 1,\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Geographies, {\n    geography: geoData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, ({\n    geographies\n  }) => __jsx(React.Fragment, null, geographies.map(geo => __jsx(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: mapColor,\n    style: {\n      hover: {\n        outline: 'none'\n      },\n      pressed: {\n        outline: 'none'\n      },\n      default: {\n        outline: 'none'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  })), locations && locations.map(loc => {\n    if (loc.active) {\n      return __jsx(Popover, {\n        key: loc.id,\n        trigger: \"hover\",\n        placement: \"top\",\n        usePortal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 23\n        }\n      }, __jsx(PopoverTrigger, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }\n      }, __jsx(Link, {\n        href: \"#\",\n        transform: \"translateY(-1.5em) translateX(-0.9em)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 27\n        }\n      }, __jsx(MapMarker, {\n        coordinates: [loc.coordinates.lon, loc.coordinates.lat],\n        color: markerColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }\n      }))), __jsx(PopoverContent, {\n        zIndex: 4,\n        border: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }, __jsx(PopoverHeader, {\n        pt: 4,\n        fontWeight: \"bold\",\n        border: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 27\n        }\n      }, loc.displayName), __jsx(PopoverBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 27\n        }\n      }, loc.description), __jsx(PopoverArrow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 27\n        }\n      })));\n    }\n  })))));\n});\n_c5 = USMap;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Circle\");\n$RefreshReg$(_c2, \"MapMarker$forwardRef\");\n$RefreshReg$(_c3, \"MapMarker\");\n$RefreshReg$(_c4, \"USMap$forwardRef\");\n$RefreshReg$(_c5, \"USMap\");","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/components/USMap.js"],"names":["React","forwardRef","Box","Link","Popover","PopoverTrigger","PopoverContent","PopoverHeader","PopoverBody","PopoverArrow","useSpring","animated","Pin","ComposableMap","Geographies","Geography","Marker","Circle","props","MapMarker","ref","color","animation","from","opacity","transform","to","config","duration","reset","USMap","geoData","locations","mapColor","markerColor","zIndex","position","geographies","map","geo","rsmKey","hover","outline","pressed","default","loc","active","id","coordinates","lon","lat","displayName","description"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { forwardRef } from 'react';\nimport {\n  Box,\n  Link,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n} from '@chakra-ui/core';\nimport { useSpring, animated } from 'react-spring';\nimport { Pin } from './Icons';\nimport { ComposableMap, Geographies, Geography, Marker } from 'react-simple-maps';\n\nconst Circle = props => <Box as=\"circle\" {...props} />;\n\nconst MapMarker = forwardRef(({ color = 'currentColor', ...props }, ref) => {\n  // const { x } = useSpring({ from: { x: 0 }, x: 1, config: { duration: 1500 } });\n  const animation = useSpring({\n    from: { opacity: 0.3, transform: 'scale(0)' },\n    to: { opacity: 0, transform: 'scale(1)' },\n    config: { duration: 1500 },\n    reset: true,\n  });\n  return (\n    <Marker {...props}>\n      {/* <Pin ref={ref} color={color} /> */}\n      <Circle\n        ref={ref}\n        r={4}\n        fill={color}\n        stroke=\"white\"\n        boxShadow=\"sm\"\n        strokeWidth={1.5}\n        zIndex={2}\n      />\n      <animated.circle\n        r={16}\n        fill=\"black\"\n        style={animation}\n        // style={{\n        //   opacity: x.interpolate({ range: [0.3, 0], output: [0, 0.3] }),\n        //   transform: x\n        //     .interpolate({\n        //       range: [0, 1],\n        //       output: [1, 1],\n        //     })\n        //     .interpolate(x => `scale(${x})`),\n        // }}\n      />\n    </Marker>\n  );\n});\n\nexport const USMap = forwardRef(({ geoData, locations, mapColor, markerColor, ...props }, ref) => {\n  return (\n    <Box ref={ref} mx=\"auto\" {...props}>\n      <ComposableMap projection=\"geoAlbersUsa\" style={{ zIndex: 1, position: 'relative' }}>\n        <Geographies geography={geoData}>\n          {({ geographies }) => (\n            <>\n              {geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={mapColor}\n                  style={{\n                    hover: { outline: 'none' },\n                    pressed: { outline: 'none' },\n                    default: { outline: 'none' },\n                  }}\n                />\n              ))}\n              {locations &&\n                locations.map(loc => {\n                  if (loc.active) {\n                    return (\n                      <Popover key={loc.id} trigger=\"hover\" placement=\"top\" usePortal>\n                        <PopoverTrigger>\n                          <Link href=\"#\" transform=\"translateY(-1.5em) translateX(-0.9em)\">\n                            <MapMarker\n                              coordinates={[loc.coordinates.lon, loc.coordinates.lat]}\n                              color={markerColor}\n                            />\n                          </Link>\n                        </PopoverTrigger>\n                        <PopoverContent zIndex={4} border={0}>\n                          <PopoverHeader pt={4} fontWeight=\"bold\" border={0}>\n                            {loc.displayName}\n                          </PopoverHeader>\n                          <PopoverBody>{loc.description}</PopoverBody>\n                          <PopoverArrow />\n                        </PopoverContent>\n                      </Popover>\n                    );\n                  }\n                })}\n            </>\n          )}\n        </Geographies>\n      </ComposableMap>\n    </Box>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}