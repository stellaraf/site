{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createClient } from 'contentful';\nconst client = createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n});\n/**\n * Query Contentful for a specific content_type\n */\n\nexport const contentQuery = async (contentType, query) => {\n  let queryParams = {\n    content_type: contentType\n  };\n\n  if (query) {\n    queryParams = _objectSpread(_objectSpread({}, queryParams), query);\n  }\n\n  try {\n    const entries = await client.getEntries(queryParams);\n    return entries;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n/**\n * Get all pages\n */\n\nexport const getPages = async () => {\n  let pages = [];\n  const data = await contentQuery('page');\n\n  if (data.total !== 0) {\n    pages = data.items.map(e => _objectSpread({\n      id: e.sys.id\n    }, Object(e.fields)));\n  }\n\n  return pages;\n};\n/**\n * Get Page by slug\n */\n\nexport const getPage = async pageSlug => {\n  let page = {\n    id: '',\n    title: '',\n    slug: ''\n  };\n  const data = await contentQuery('page', {\n    'fields.slug': pageSlug\n  });\n\n  if (data.total !== 0) {\n    page = _objectSpread({\n      id: data.items[0].sys.id\n    }, Object(data.items[0].fields));\n  }\n\n  return page;\n};\n/**\n * Get content for a specific page by its sys.id\n */\n\nexport const getPageContent = async pageId => {\n  let pageContent = [];\n  const data = await contentQuery('pageContent', {\n    'fields.page.sys.id': pageId\n  });\n\n  if (data.total !== 0) {\n    var _data$includes;\n\n    const items = data.items;\n    const includes = (_data$includes = data.includes) !== null && _data$includes !== void 0 ? _data$includes : {};\n\n    const getRefValue = val => {\n      let item = val;\n\n      if (item.constructor.name === 'Object') {\n        item = Object(val);\n\n        if ('sys' in item && item.sys.type in includes) {\n          for (let ref of (_includes$item$sys$ty = includes[item.sys.type]) !== null && _includes$item$sys$ty !== void 0 ? _includes$item$sys$ty : []) {\n            var _includes$item$sys$ty, _ref$sys;\n\n            if ((ref === null || ref === void 0 ? void 0 : (_ref$sys = ref.sys) === null || _ref$sys === void 0 ? void 0 : _ref$sys.id) === item.sys.id) {\n              return _objectSpread({\n                id: item.sys.id\n              }, item.fields);\n            }\n          }\n        }\n      } else if (item.constructor.name === 'Array') {\n        return item.map(i => getRefValue(i));\n      } else {\n        return item;\n      }\n    };\n\n    for (let i of items) {\n      for (let [k, v] of Object.entries(i.fields)) {\n        pageContent.push({\n          [k]: getRefValue(v)\n        });\n      }\n    } // pageContent = data.items.map(i => i.fields);\n\n  }\n\n  return pageContent;\n};","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/util/content.ts"],"names":["createClient","client","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","contentQuery","contentType","query","queryParams","content_type","entries","getEntries","err","console","error","getPages","pages","data","total","items","map","e","id","sys","Object","fields","getPage","pageSlug","page","title","slug","getPageContent","pageId","pageContent","includes","getRefValue","val","item","constructor","name","type","ref","i","k","v","push"],"mappings":"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","sourcesContent":["import { createClient, EntryCollection, ContentTypeLink } from 'contentful';\n\ninterface PageAttrs {\n  id: string;\n  slug: string;\n  title: string;\n  subtitle?: string;\n}\n\ninterface ContentRef {\n  sys: ContentTypeLink;\n}\n\ninterface PageContent {\n  page: ContentRef;\n  sortWeight: number;\n  title: string;\n  subtitle?: string;\n  paragraphs: ContentRef[];\n  button: boolean;\n  buttonText?: string;\n  buttonLink?: string;\n}\n\nconst client = createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN,\n});\n\n/**\n * Query Contentful for a specific content_type\n */\nexport const contentQuery = async (\n  contentType: string,\n  query?: object,\n): Promise<EntryCollection<any>> => {\n  let queryParams = { content_type: contentType };\n  if (query) {\n    queryParams = { ...queryParams, ...query };\n  }\n  try {\n    const entries = await client.getEntries(queryParams);\n    return entries;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n\n/**\n * Get all pages\n */\nexport const getPages = async (): Promise<PageAttrs[]> => {\n  let pages = [];\n  const data = await contentQuery('page');\n  if (data.total !== 0) {\n    pages = data.items.map(e => ({ id: e.sys.id, ...Object(e.fields) }));\n  }\n  return pages;\n};\n\n/**\n * Get Page by slug\n */\nexport const getPage = async (pageSlug: string): Promise<PageAttrs> => {\n  let page = { id: '', title: '', slug: '' };\n  const data = await contentQuery('page', { 'fields.slug': pageSlug });\n  if (data.total !== 0) {\n    page = { id: data.items[0].sys.id, ...Object(data.items[0].fields) };\n  }\n  return page;\n};\n\n/**\n * Get content for a specific page by its sys.id\n */\nexport const getPageContent = async (pageId: string): Promise<PageContent[]> => {\n  let pageContent = [];\n  const data = await contentQuery('pageContent', {\n    'fields.page.sys.id': pageId,\n  });\n\n  if (data.total !== 0) {\n    const items = data.items;\n    const includes = data.includes ?? {};\n\n    const getRefValue = (val: any): any => {\n      let item = val;\n      if (item.constructor.name === 'Object') {\n        item = Object(val);\n        if ('sys' in item && item.sys.type in includes) {\n          for (let ref of includes[item.sys.type] ?? []) {\n            if (ref?.sys?.id === item.sys.id) {\n              return { id: item.sys.id, ...item.fields };\n            }\n          }\n        }\n      } else if (item.constructor.name === 'Array') {\n        return item.map(i => getRefValue(i));\n      } else {\n        return item;\n      }\n    };\n\n    for (let i of items) {\n      for (let [k, v] of Object.entries(i.fields)) {\n        pageContent.push({ [k]: getRefValue(v) });\n      }\n    }\n\n    // pageContent = data.items.map(i => i.fields);\n  }\n  return pageContent;\n};\n"]},"metadata":{},"sourceType":"module"}