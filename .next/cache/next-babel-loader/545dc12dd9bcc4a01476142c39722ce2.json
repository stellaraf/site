{"ast":null,"code":"import { useState, useMemo } from \"react\";\nexport const useLinkType = href => {\n  const {\n    0: external,\n    1: setExternal\n  } = useState(false);\n  const {\n    0: linkTarget,\n    1: setTarget\n  } = useState(href);\n\n  if (linkTarget.match(/(http|https|mailto)\\:\\/\\/.*/g)) {\n    setExternal(true);\n  } else {\n    let prefix = \"/\";\n\n    if (!linkTarget.includes(\".mdx\") && linkTarget.includes(\"#\")) {\n      prefix = \"\";\n    }\n\n    let parts = linkTarget.split(\".mdx\");\n    setTarget([prefix, ...parts].join(\"\"));\n  }\n\n  const isExternal = useMemo(() => external);\n  const target = useMemo(() => linkTarget);\n  return {\n    isExternal,\n    target\n  };\n};","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/hooks/useLinkType.js"],"names":["useState","useMemo","useLinkType","href","external","setExternal","linkTarget","setTarget","match","prefix","includes","parts","split","join","isExternal","target"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,WAAW,GAAGC,IAAI,IAAI;AACjC,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA0BP,QAAQ,CAACG,IAAD,CAAxC;;AACA,MAAIG,UAAU,CAACE,KAAX,CAAiB,8BAAjB,CAAJ,EAAsD;AACpDH,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD,MAEO;AACL,QAAII,MAAM,GAAG,GAAb;;AACA,QAAI,CAACH,UAAU,CAACI,QAAX,CAAoB,MAApB,CAAD,IAAgCJ,UAAU,CAACI,QAAX,CAAoB,GAApB,CAApC,EAA8D;AAC5DD,MAAAA,MAAM,GAAG,EAAT;AACD;;AACD,QAAIE,KAAK,GAAGL,UAAU,CAACM,KAAX,CAAiB,MAAjB,CAAZ;AACAL,IAAAA,SAAS,CAAC,CAACE,MAAD,EAAS,GAAGE,KAAZ,EAAmBE,IAAnB,CAAwB,EAAxB,CAAD,CAAT;AACD;;AACD,QAAMC,UAAU,GAAGb,OAAO,CAAC,MAAMG,QAAP,CAA1B;AACA,QAAMW,MAAM,GAAGd,OAAO,CAAC,MAAMK,UAAP,CAAtB;AACA,SAAO;AAAEQ,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAP;AACD,CAhBM","sourcesContent":["import { useState, useMemo } from \"react\";\n\nexport const useLinkType = href => {\n  const [external, setExternal] = useState(false);\n  const [linkTarget, setTarget] = useState(href);\n  if (linkTarget.match(/(http|https|mailto)\\:\\/\\/.*/g)) {\n    setExternal(true);\n  } else {\n    let prefix = \"/\";\n    if (!linkTarget.includes(\".mdx\") && linkTarget.includes(\"#\")) {\n      prefix = \"\";\n    }\n    let parts = linkTarget.split(\".mdx\");\n    setTarget([prefix, ...parts].join(\"\"));\n  }\n  const isExternal = useMemo(() => external);\n  const target = useMemo(() => linkTarget);\n  return { isExternal, target };\n};\n"]},"metadata":{},"sourceType":"module"}