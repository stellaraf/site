{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport useSWR from 'swr';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst fetcher = async url => {\n  try {\n    const response = await fetch(url);\n    return await response.json();\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const usePageContent = rawContent => {\n  let obj = {};\n  let error;\n\n  try {\n    const {\n      title: rawTitle,\n      subtitle: rawSubtitle,\n      body: bodyObj,\n      button: showButton,\n      buttonLink: rawButtonLink,\n      buttonText: rawButtonText\n    } = rawContent.items[0].fields;\n  } catch (err) {\n    error = err.message;\n  }\n\n  return _objectSpread({\n    error\n  }, obj);\n};","map":{"version":3,"sources":["/Users/ml/dev/stellar/site/hooks/usePageContent.js"],"names":["useState","useSWR","BLOCKS","MARKS","documentToReactComponents","fetcher","url","response","fetch","json","err","console","error","usePageContent","rawContent","obj","title","rawTitle","subtitle","rawSubtitle","body","bodyObj","button","showButton","buttonLink","rawButtonLink","buttonText","rawButtonText","items","fields","message"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,6BAA9B;AACA,SAASC,yBAAT,QAA0C,sCAA1C;;AAEA,MAAMC,OAAO,GAAG,MAAMC,GAAN,IAAa;AAC3B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,WAAO,MAAMC,QAAQ,CAACE,IAAT,EAAb;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAPD;;AASA,OAAO,MAAMG,cAAc,GAAGC,UAAU,IAAI;AAC1C,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIH,KAAJ;;AACA,MAAI;AACF,UAAM;AACJI,MAAAA,KAAK,EAAEC,QADH;AAEJC,MAAAA,QAAQ,EAAEC,WAFN;AAGJC,MAAAA,IAAI,EAAEC,OAHF;AAIJC,MAAAA,MAAM,EAAEC,UAJJ;AAKJC,MAAAA,UAAU,EAAEC,aALR;AAMJC,MAAAA,UAAU,EAAEC;AANR,QAOFb,UAAU,CAACc,KAAX,CAAiB,CAAjB,EAAoBC,MAPxB;AAQD,GATD,CASE,OAAOnB,GAAP,EAAY;AACZE,IAAAA,KAAK,GAAGF,GAAG,CAACoB,OAAZ;AACD;;AACD;AAASlB,IAAAA;AAAT,KAAmBG,GAAnB;AACD,CAhBM","sourcesContent":["import { useState } from 'react';\nimport useSWR from 'swr';\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst fetcher = async url => {\n  try {\n    const response = await fetch(url);\n    return await response.json();\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const usePageContent = rawContent => {\n  let obj = {};\n  let error;\n  try {\n    const {\n      title: rawTitle,\n      subtitle: rawSubtitle,\n      body: bodyObj,\n      button: showButton,\n      buttonLink: rawButtonLink,\n      buttonText: rawButtonText,\n    } = rawContent.items[0].fields;\n  } catch (err) {\n    error = err.message;\n  }\n  return { error, ...obj };\n};\n"]},"metadata":{},"sourceType":"module"}